cscope 15 $HOME/Documents/KernelSE               0000802762
	@/home/jqhong/Documents/KernelSE/CPUState.cpp

1 
	~"CPUSèã.h
"

3 
	~<as£π.h
>

4 
	~<sig«l.h
>

5 
	~<uc⁄ãxt.h
>

7 
	~<fun˘i⁄Æ
>

8 
	~<m≠
>

9 
	~<°rög
>

10 
	~<ve˘‹
>

12 
	~"CodeObje˘.h
"

13 
	~"In°ru˘i⁄Decodî.h
"

14 
	~"dyn_ªgs.h
"

16 
	~"Ex¥.h
"

18 
usög
 
«me•a˚
 
	g°d
;

19 
usög
 
«me•a˚
 
	gDynö°
;

20 
usög
 
«me•a˚
 
	gP¨£API
;

21 
usög
 
«me•a˚
 
	gIn°ru˘i⁄API
;

22 
usög
 
«me•a˚
 
	gEXPR
;

24 
	ePTREGS_ENCODING
 {

25 
	mR15_PTRIDX
 = 0,

26 
	mR14_PTRIDX
 = 1,

27 
	mR13_PTRIDX
 = 2,

28 
	mR12_PTRIDX
 = 3,

29 
	mRBP_PTRIDX
 = 4,

30 
	mRBX_PTRIDX
 = 5,

31 
	mR11_PTRIDX
 = 6,

32 
	mR10_PTRIDX
 = 7,

33 
	mR9_PTRIDX
 = 8,

34 
	mR8_PTRIDX
 = 9,

35 
	mRAX_PTRIDX
 = 10,

36 
	mRCX_PTRIDX
 = 11,

37 
	mRDX_PTRIDX
 = 12,

38 
	mRSI_PTRIDX
 = 13,

39 
	mRDI_PTRIDX
 = 14,

40 
	mORAX_PTRIDX
 = 15,

41 
	mRIP_PTRIDX
 = 16,

42 
	mCS_PTRIDX
 = 17,

43 
	mEFL_PTRIDX
 = 18,

44 
	mRSP_PTRIDX
 = 19,

45 
	mSS_PTRIDX
 = 20,

46 
	mFS_PTRIDX
 = 21,

47 
	mGS_PTRIDX
 = 22,

50 
	g°d
::
m≠
<
uöt
, std::
°rög
> 
SYCPUSèã
::
PTRegsEncodög
 = {

51 {
R15_PTRIDX
, "x86_64::r15"},

52 {
R14_PTRIDX
, "x86_64::r14"},

53 {
R13_PTRIDX
, "x86_64::r13"},

54 {
R12_PTRIDX
, "x86_64::r12"},

55 {
RBP_PTRIDX
, "x86_64::rbp"},

56 {
RBX_PTRIDX
, "x86_64::rbx"},

57 {
R11_PTRIDX
, "x86_64::r11"},

58 {
R10_PTRIDX
, "x86_64::r10"},

59 {
R9_PTRIDX
, "x86_64::r9"},

60 {
R8_PTRIDX
, "x86_64::r8"},

61 {
RAX_PTRIDX
, "x86_64::rax"},

62 {
RCX_PTRIDX
, "x86_64::rcx"},

63 {
RDX_PTRIDX
, "x86_64::rdx"},

64 {
RSI_PTRIDX
, "x86_64::rsi"},

65 {
RDI_PTRIDX
, "x86_64::rdi"},

66 {
ORAX_PTRIDX
, "x86_64::orig_rax"},

67 {
RIP_PTRIDX
, "x86_64::rip"},

68 {
CS_PTRIDX
, "x86_64::cs"},

69 {
EFL_PTRIDX
, "x86_64::flags"},

70 {
RSP_PTRIDX
, "x86_64::rsp"},

71 {
SS_PTRIDX
, "x86_64::ss"},

72 {
FS_PTRIDX
, "x86_64::fs"},

73 {
GS_PTRIDX
, "x86_64::gs"},

76 
	g°d
::
m≠
<
uöt
, 
	gDyö°EC
> 
	gSYCPUSèã
::
Dyö°Encodög
 = {

78 {
x86_64
::
r8
, {
R8_PTRIDX
, 8}},

79 {
x86_64
::
r9
, {
R9_PTRIDX
, 8}},

80 {
x86_64
::
r10
, {
R10_PTRIDX
, 8}},

81 {
x86_64
::
r11
, {
R11_PTRIDX
, 8}},

82 {
x86_64
::
r12
, {
R12_PTRIDX
, 8}},

83 {
x86_64
::
r13
, {
R13_PTRIDX
, 8}},

84 {
x86_64
::
r14
, {
R14_PTRIDX
, 8}},

85 {
x86_64
::
r15
, {
R15_PTRIDX
, 8}},

86 {
x86_64
::
øx
, {
RAX_PTRIDX
, 8}},

87 {
x86_64
::
rbx
, {
RBX_PTRIDX
, 8}},

88 {
x86_64
::
rcx
, {
RCX_PTRIDX
, 8}},

89 {
x86_64
::
rdx
, {
RDX_PTRIDX
, 8}},

90 {
x86_64
::
rsi
, {
RSI_PTRIDX
, 8}},

91 {
x86_64
::
rdi
, {
RDI_PTRIDX
, 8}},

92 {
x86_64
::
rbp
, {
RBP_PTRIDX
, 8}},

93 {
x86_64
::
r•
, {
RSP_PTRIDX
, 8}},

94 {
x86_64
::
rù
, {
RIP_PTRIDX
, 8}},

95 {
x86_64
::
Êags
, {
EFL_PTRIDX
, 8}},

96 {
x86_64
::
fs
, {
FS_PTRIDX
, 8}},

97 {
x86_64
::
gs
, {
GS_PTRIDX
, 8}},

99 {
x86_64
::
r8d
, {
R8_PTRIDX
, 4}},

100 {
x86_64
::
r9d
, {
R9_PTRIDX
, 4}},

101 {
x86_64
::
r10d
, {
R10_PTRIDX
, 4}},

102 {
x86_64
::
r11d
, {
R11_PTRIDX
, 4}},

103 {
x86_64
::
r12d
, {
R12_PTRIDX
, 4}},

104 {
x86_64
::
r13d
, {
R13_PTRIDX
, 4}},

105 {
x86_64
::
r14d
, {
R14_PTRIDX
, 4}},

106 {
x86_64
::
r15d
, {
R15_PTRIDX
, 4}},

107 {
x86_64
::
óx
, {
RAX_PTRIDX
, 4}},

108 {
x86_64
::
ebx
, {
RBX_PTRIDX
, 4}},

109 {
x86_64
::
ecx
, {
RCX_PTRIDX
, 4}},

110 {
x86_64
::
edx
, {
RDX_PTRIDX
, 4}},

111 {
x86_64
::
esi
, {
RSI_PTRIDX
, 4}},

112 {
x86_64
::
edi
, {
RDI_PTRIDX
, 4}},

113 {
x86_64
::
ebp
, {
RBP_PTRIDX
, 4}},

114 {
x86_64
::
e•
, {
RSP_PTRIDX
, 4}},

116 {
x86_64
::
r8w
, {
R8_PTRIDX
, 2}},

117 {
x86_64
::
r9w
, {
R9_PTRIDX
, 2}},

118 {
x86_64
::
r10w
, {
R10_PTRIDX
, 2}},

119 {
x86_64
::
r11w
, {
R11_PTRIDX
, 2}},

120 {
x86_64
::
r12w
, {
R12_PTRIDX
, 2}},

121 {
x86_64
::
r13w
, {
R13_PTRIDX
, 2}},

122 {
x86_64
::
r14w
, {
R14_PTRIDX
, 2}},

123 {
x86_64
::
r15w
, {
R15_PTRIDX
, 2}},

124 {
x86_64
::
ax
, {
RAX_PTRIDX
, 2}},

125 {
x86_64
::
bx
, {
RBX_PTRIDX
, 2}},

126 {
x86_64
::
cx
, {
RCX_PTRIDX
, 2}},

127 {
x86_64
::
dx
, {
RDX_PTRIDX
, 2}},

128 {
x86_64
::
si
, {
RSI_PTRIDX
, 2}},

129 {
x86_64
::
di
, {
RDI_PTRIDX
, 2}},

130 {
x86_64
::
bp
, {
RBP_PTRIDX
, 2}},

131 {
x86_64
::
•
, {
RSP_PTRIDX
, 2}},

133 {
x86_64
::
r8b
, {
R8_PTRIDX
, 1}},

134 {
x86_64
::
r9b
, {
R9_PTRIDX
, 1}},

135 {
x86_64
::
r10b
, {
R10_PTRIDX
, 1}},

136 {
x86_64
::
r11b
, {
R11_PTRIDX
, 1}},

137 {
x86_64
::
r12b
, {
R12_PTRIDX
, 1}},

138 {
x86_64
::
r13b
, {
R13_PTRIDX
, 1}},

139 {
x86_64
::
r14b
, {
R14_PTRIDX
, 1}},

140 {
x86_64
::
r15b
, {
R15_PTRIDX
, 1}},

141 {
x86_64
::
Æ
, {
RAX_PTRIDX
, 1}},

142 {
x86_64
::
bl
, {
RBX_PTRIDX
, 1}},

143 {
x86_64
::
˛
, {
RCX_PTRIDX
, 1}},

144 {
x86_64
::
dl
, {
RDX_PTRIDX
, 1}},

145 {
x86_64
::
sû
, {
RSI_PTRIDX
, 1}},

146 {
x86_64
::
dû
, {
RDI_PTRIDX
, 1}},

147 {
x86_64
::
b∂
, {
RBP_PTRIDX
, 1}},

148 {
x86_64
::
•l
, {
RSP_PTRIDX
, 1}},

159 {
x86_64
::
cf
, {
PTREGS_REG_TOTAL
 + 1, 1}},

160 {
x86_64
::
pf
, {
PTREGS_REG_TOTAL
 + 2, 1}},

161 {
x86_64
::
af
, {
PTREGS_REG_TOTAL
 + 3, 1}},

162 {
x86_64
::
zf
, {
PTREGS_REG_TOTAL
 + 4, 1}},

163 {
x86_64
::
sf
, {
PTREGS_REG_TOTAL
 + 5, 1}},

164 {
x86_64
::
tf
, {
PTREGS_REG_TOTAL
 + 6, 1}},

165 {
x86_64
::
df
, {
PTREGS_REG_TOTAL
 + 7, 1}},

166 {
x86_64
::
of
, {
PTREGS_REG_TOTAL
 + 8, 1}},

167 {
x86_64
::
rf
, {
PTREGS_REG_TOTAL
 + 9, 1}},

172 
boﬁ
 
	gSYCPUSèã
::
	$£tC⁄¸ëeCPUSèã
(
MacReg
 *
ªgs
) {

173 
	`mem˝y
(&
m_PTRegs
, 
ªgs
, (m_PTRegs));

174  
åue
;

175 
	}
}

179 
boﬁ
 
	gSYCPUSèã
::
	$ªadC⁄¸ëeCPUSèã
(
MacReg
 *
ªgs
) {

180 
	`mem˝y
(
ªgs
, &
m_PTRegs
, (m_PTRegs));

181  
åue
;

182 
	}
}

184 
boﬁ
 
	gSYCPUSèã
::
	$˛órAŒSymFœg
() {

185 
°d
::
£t
<> 
Êags
 = {
x86_64
::
cf
, x86_64::
pf
, x86_64::
af
, x86_64::
zf
, x86_64::
sf
, x86_64::
tf
, x86_64::
df
, x86_64::
of
, x86_64::
rf
};

186 
Êag_ödex
;

187 autÿ
Êag
 : 
Êags
)

189 
Êag_ödex
 = 
Êag
;

190 autÿ
ô
 = 
m_Regs
.
	`föd
(
Êag_ödex
);

191 
	`as£π
(
ô
 !
m_Regs
.
	`íd
());

192 
MachöeReg
 *
R
 = (
ô
->
£c⁄d
).
	`gë
();

194 
R
->
bsym_Êag
 = 
Ál£
;

196  
åue
;

197 
	}
}

199 
±_ªgs
* 
	gSYCPUSèã
::
	$gëPTRegs
() {

200  ((
±_ªgs
*)(&
m_PTRegs
));

201 
	}
}

203 
ul⁄g
 
	gSYCPUSèã
::
	$ªadC⁄Reg
(
uöt
 
ªg_idx
)

205 autÿ
ô
 = 
m_Regs
.
	`föd
(
ªg_idx
);

206 
	`as£π
(
ô
 !
m_Regs
.
	`íd
());

208 autÿ
R
 = 
ô
->
£c⁄d
;

209 
MachöeReg
 *
mr
 = 
R
.
	`gë
();

210  *(
mr
->
pu64
);

211 
	}
}

213 
boﬁ
 
	gSYCPUSèã
::
	$wrôeC⁄Reg
(
uöt
 
ªg_idx
, 
ul⁄g
 
vÆ
)

215 autÿ
ô
 = 
m_Regs
.
	`föd
(
ªg_idx
);

216 
	`as£π
(
ô
 !
m_Regs
.
	`íd
());

218 autÿ
R
 = 
ô
->
£c⁄d
;

219 
MachöeReg
 *
mr
 = 
R
.
	`gë
();

220 
°d
::
cout
 << 
mr
->
size
 << std::
ídl
;

222 
mr
->
size
)

225 *(
mr
->
pu64
Ë
vÆ
;

228 *(
mr
->
pu32
Ë(
uöt32_t
)
vÆ
;

231 *(
mr
->
pu16
Ë(
uöt16_t
)
vÆ
;

234 *(
mr
->
pu8
Ë(
uöt8_t
)
vÆ
;

237 
	`as£π
(0);

240  
åue
;

241 
	}
}

244 
boﬁ
 
	gSYCPUSèã
::
	$isSYReg
(
uöt
 
ªg_ödex
) {

245 autÿ
ô
 = 
m_Regs
.
	`föd
(
ªg_ödex
);

246 
	`as£π
(
ô
 !
m_Regs
.
	`íd
());

248 autÿ
R
 = 
ô
->
£c⁄d
;

249 
MachöeReg
 *
mr
 = 
R
.
	`gë
() ;

251 
subRegIndex
 = 
	`RegToIndex
(
mr
) ;

252 
boﬁ
 
bsym
 = 
R
->
p_symMR
[
subRegIndex
].
bSym
 ;

254  (
bsym
);

255 
	}
}

256 
boﬁ
 
	gSYCPUSèã
::
	$isP¨ítRegSymbﬁ
(
MachöeReg
 *
R
, 
subRegIndex
, 
boﬁ
 &
bSym
) {

257  
åue
 ;

258 
	}
}

259 
boﬁ
 
	gSYCPUSèã
::
	$isSubRegSymbﬁ
(
MachöeReg
 *
R
, 
subRegIndex
, 
boﬁ
 &
bSym
) {

260  
åue
 ;

261 
	}
}

263 
boﬁ
 
	gSYCPUSèã
::
	$övÆid©eTªe
(
MachöeReg
 *
R
, 
subRegIndex
) {

265 
R
->
p_symMR
[
REG_FULL
].
bVÆid
 = 
Ál£
 ;

266 
R
->
p_symMR
[
REG_D
].
bVÆid
 = 
Ál£
 ;

267 
R
->
p_symMR
[
REG_W
].
bVÆid
 = 
Ál£
 ;

268 
R
->
p_symMR
[
REG_L
].
bVÆid
 = 
Ál£
 ;

270 
subRegIndex
) {

271 
REG_FULL
:

272 
R
->
p_symMR
[
REG_32H
].
bVÆid
 = 
Ál£
 ;

273 
REG_D
:

274 
R
->
p_symMR
[
REG_16H
].
bVÆid
 = 
Ál£
 ;

275 
REG_W
:

276 
R
->
p_symMR
[
REG_H
].
bVÆid
 = 
Ál£
 ;

278 
REG_H
:

279 
REG_L
:

282 
	`as£π
 (0) ;

284  
åue
 ;

285 
	}
}

286 
boﬁ
 
	gSYCPUSèã
::
	$•lôP¨ít
(
MachöeReg
 *
R
, 
p
, 
chûd_H
, 
chûd_L
, 
chûd_size
) {

288 i‡(
R
->
p_symMR
[
p
].
bSym
) {

289 
KVEx¥På
 
ï
, 
eh
, 
ñ
 ;

290 
ï
 = 
R
->
p_symMR
[
p
].
symvÆ
 ;

291 
eh
.
	`ª£t
(
√w
 
	`Exåa˘Ex¥
(
ï
, 
chûd_size
/8, child_size/8*2, child_size/8, 0)) ;

292 
ñ
.
	`ª£t
(
√w
 
	`Exåa˘Ex¥
(
ï
, 0, 
chûd_size
/8, child_size/8, 0)) ;

293 
R
->
p_symMR
[
chûd_H
].
symvÆ
 = 
eh
 ;

294 
R
->
p_symMR
[
chûd_H
].
bSym
 = 
åue
 ;

295 
R
->
p_symMR
[
chûd_H
].
bVÆid
 = 
åue
 ;

297 
R
->
p_symMR
[
chûd_L
].
symvÆ
 = 
ñ
 ;

298 
R
->
p_symMR
[
chûd_L
].
bSym
 = 
åue
 ;

299 
R
->
p_symMR
[
chûd_L
].
bVÆid
 = 
åue
 ;

305 
R
->
p_symMR
[
chûd_H
].
bSym
 = 
Ál£
 ;

306 
R
->
p_symMR
[
chûd_H
].
bVÆid
 = 
åue
 ;

308 
R
->
p_symMR
[
chûd_L
].
bSym
 = 
Ál£
 ;

309 
R
->
p_symMR
[
chûd_L
].
bVÆid
 = 
åue
 ;

311  
åue
 ;

313 
	}
}

317 
boﬁ
 
	gSYCPUSèã
::
	$•lôP¨ítOf
(
MachöeReg
 *
R
, 
subRegIndex
) {

318 
subRegIndex
) {

319 
REG_FULL
:

320  
Ál£
 ;

322 
REG_D
:

323 i‡(
R
->
p_symMR
[
REG_FULL
].
bSym
 && !R->p_symMR[REG_FULL].
bVÆid
)

324  
Ál£
;

326  
	`•lôP¨ít
(
R
, 
REG_FULL
, 
REG_32H
, 
REG_D
, 32) ;

329 
REG_W
:

330 i‡(
R
->
p_symMR
[
REG_D
].
bSym
 && !R->p_symMR[REG_D].
bVÆid
)

331 i‡(!
	`•lôP¨ítOf
(
R
, 
REG_D
))

332  
Ál£
 ;

333  
	`•lôP¨ít
(
R
, 
REG_D
, 
REG_16H
, 
REG_W
, 16) ;

335 
REG_H
:

336 
REG_L
:

337 i‡(
R
->
p_symMR
[
REG_W
].
bSym
 && !R->p_symMR[REG_W].
bVÆid
)

338 i‡(!
	`•lôP¨ítOf
(
R
, 
REG_W
))

339  
Ál£
 ;

340  
	`•lôP¨ít
(
R
, 
REG_W
, 
REG_H
, 
REG_L
, 8) ;

343 
	`as£π
 (0) ;

346  
åue
 ;

347 
	}
}

350 
boﬁ
 
	gSYCPUSèã
::
	$£tP¨ítSymbﬁSèã
(
MachöeReg
 *
R
, 
subRegIndex
, 
boﬁ
 
bsym
) {

352 
subRegIndex
) {

353 
REG_H
:

354 
REG_L
:

355 
R
->
p_symMR
[
REG_W
].
bSym
 = 
bsym
 ;

356 
REG_W
:

357 
R
->
p_symMR
[
REG_D
].
bSym
 = 
bsym
 ;

358 
REG_D
:

359 
R
->
p_symMR
[
REG_FULL
].
bSym
 = 
bsym
 ;

360 
REG_FULL
:

363 
	`as£π
 (0) ;

365  
åue
 ;

366 
	}
}

368 
boﬁ
 
	gSYCPUSèã
::
	$£tChûdSymbﬁSèã
(
MachöeReg
 *
R
, 
subRegIndex
, 
boﬁ
 
bsym
) {

370 
subRegIndex
) {

371 
REG_FULL
:

372 
R
->
p_symMR
[
REG_D
].
bSym
 = 
bsym
 ;

373 
R
->
p_symMR
[
REG_32H
].
bSym
 = 
bsym
 ;

374 
REG_D
:

375 
R
->
p_symMR
[
REG_W
].
bSym
 = 
bsym
 ;

376 
R
->
p_symMR
[
REG_16H
].
bSym
 = 
bsym
 ;

377 
REG_W
:

378 
R
->
p_symMR
[
REG_H
].
bSym
 = 
bsym
 ;

379 
R
->
p_symMR
[
REG_L
].
bSym
 = 
bsym
 ;

380 
REG_H
:

381 
REG_L
:

384 
	`as£π
 (0) ;

387  
åue
 ;

388 
	}
}

390 
boﬁ
 
	gSYCPUSèã
::
	$åyC⁄¸ëeP¨ítOf
(
MachöeReg
 *
R
, 
subRegIndex
) {

392 
subRegIndex
) {

393 
REG_FULL
:

395  
Ál£
 ;

397 
REG_D
:

398 if((!
R
->
p_symMR
[
REG_D
].
bSym
Ë&& (!R->p_symMR[
REG_32H
].bSym)) {

399 
R
->
p_symMR
[
REG_FULL
].
bSym
 = 
Ál£
 ;

400  
åue
 ;

402  
Ál£
 ;

403 
REG_W
:

404 if((!
R
->
p_symMR
[
REG_W
].
bSym
Ë&& (!R->p_symMR[
REG_16H
].bSym)) {

405 
R
->
p_symMR
[
REG_D
].
bSym
 = 
Ál£
 ;

407 
	`åyC⁄¸ëeP¨ítOf
 (
R
, 
REG_D
) ;

408  
åue
 ;

410  
Ál£
 ;

411 
REG_H
:

412 
REG_L
:

413 if((!
R
->
p_symMR
[
REG_H
].
bSym
Ë&& (!R->p_symMR[
REG_L
].bSym)) {

414 
R
->
p_symMR
[
REG_W
].
bSym
 = 
Ál£
 ;

416 
	`åyC⁄¸ëeP¨ítOf
 (
R
, 
REG_W
) ;

417  
åue
 ;

419  
Ál£
 ;

421 
	`as£π
 (0) ;

423 
	}
}

425 
boﬁ
 
	gSYCPUSèã
::
	$wrôeRegi°î
(
RegVÆue
 &
V
) {

427 autÿ
ô
 = 
m_Regs
.
	`föd
(
V
.
ödx
);

428 
subRegIndex
 ;

429 
boﬁ
 
ªt
 = 
åue
 ;

430 
	`as£π
(
ô
 !
m_Regs
.
	`íd
());

432 
MachöeReg
 *
R
 = (
ô
->
£c⁄d
).
	`gë
();

433 
	`as£π
(
R
->
ödx
 =
V
.indx);

434 
	`as£π
(
R
->
size
 =
V
.size);

436 
subRegIndex
 = 
	`RegToIndex
(
R
) ;

438 
	`¥ötsymMR
(
R
) ;

440 i‡(
R
->
p_symMR
[
subRegIndex
].
bSym
 || 
V
.
bsym
) {

441 i‡(
R
->
p_symMR
[
subRegIndex
].
bSym
 &&

442 !
R
->
p_symMR
[
subRegIndex
].
bVÆid
) {

445 
ªt
 = 
	`•lôP¨ítOf
(
R
, 
subRegIndex
) ;

446 if(
ªt
)

447 
	`as£π
(
R
->
p_symMR
[
subRegIndex
].
bVÆid
);

450 
	`övÆid©eTªe
(
R
, 
subRegIndex
) ;

451 
R
->
p_symMR
[
subRegIndex
].
bVÆid
 = 
åue
;

454 
R
->
p_symMR
[
subRegIndex
].
bSym
 = 
V
.
bsym
 ;

455 i‡(
V
.
bsym
) {

456 
	`£tP¨ítSymbﬁSèã
(
R
, 
subRegIndex
, 
åue
) ;

457 
	`£tChûdSymbﬁSèã
(
R
, 
subRegIndex
, 
åue
) ;

458 
R
->
p_symMR
[
subRegIndex
].
symvÆ
 = 
V
.
ex¥
 ;

459 
ªt
 = 
åue
 ;

461 
	`£tChûdSymbﬁSèã
(
R
, 
subRegIndex
, 
Ál£
) ;

462 
	`åyC⁄¸ëeP¨ítOf
(
R
, 
subRegIndex
) ;

463 
ªt
 = 
	`wrôeC⁄¸ëeVÆue
(
R
, 
V
);

465 
	`¥ötsymMR
(
R
) ;

466  
ªt
 ;

467 
	}
}

475 
	gSYCPUSèã
::
	$RegToIndex
 (
MachöeReg
 *
R
) {

477 i‡((
R
->
ödx
 & 0xf00Ë=
x86_64
::
D_REG
)

478  
REG_D
 ;

480  (
R
->
ödx
&0xf00) >> 8;

481 
	}
}

483 
boﬁ
 
	gSYCPUSèã
::
	$RódSubRegVÆue
 (
MachöeReg
* 
R
, 
RegVÆue
 &
V
) {

484  
åue
 ;

485 
	}
}

486 
	g°rRegName
[][8] = {"8_F", "1_L", "1_H" , "2_L" , "4_L", "2_H", "4_H" } ;

487 
boﬁ
 
	gSYCPUSèã
::
	$¥ötsymMR
(
MachöeReg
 *
R
) {

504  
åue
 ;

505 
	}
}

507 
boﬁ
 
	gSYCPUSèã
::
	$comböeChûdªn
(
MachöeReg
 *
R
, 
ªsu…Index
, 
chûd_H
, 
chûd_L
, 
chûd_size
) {

509 
KVEx¥På
 
eh
, 
ñ
, 
eP¨ít
;

510 
RegVÆue
 
v
;

511 
uöt64_t
 
tmp
 ;

514 i‡(
R
->
p_symMR
[
chûd_L
].
bSym
 && !R->p_symMR[chûd_L].
bVÆid
)

515  
Ál£
 ;

517 i‡(
R
->
p_symMR
[
chûd_H
].
bSym
 && !R->p_symMR[chûd_H].
bVÆid
)

518  
Ál£
 ;

520 i‡(
R
->
p_symMR
[
chûd_H
].
bSym
 && R->p_symMR[
chûd_L
].bSym) {

521 
eh
 = (
R
->
p_symMR
[
chûd_H
].
symvÆ
) ;

522 
ñ
 = (
R
->
p_symMR
[
chûd_L
].
symvÆ
) ;

524 } i‡(
R
->
p_symMR
[
chûd_H
].
bSym
 && !R->p_symMR[
chûd_L
].bSym) {

525 
eh
 = (
R
->
p_symMR
[
chûd_H
].
symvÆ
) ;

526 
	`ªadC⁄¸ëeVÆue
(
R
, 
v
) ;

527 
tmp
 = 
v
.
u64
 ;

528 
ñ
.
	`ª£t
(
√w
 
	`C⁄°Ex¥
(
tmp
)) ;

530 } i‡(!
R
->
p_symMR
[
chûd_H
].
bSym
 && R->p_symMR[
chûd_L
].bSym) {

531 
	`ªadC⁄¸ëeVÆue
(
R
, 
v
) ;

532 
tmp
 = 
v
.
u64
 ;

533 
tmp
 = (tm∞>> 
chûd_size
) ;

534 
tmp
 =Åm∞& ((1UL<<
chûd_size
)-1) ;

535 
eh
.
	`ª£t
 (
√w
 
	`C⁄°Ex¥
(
tmp
)) ;

536 
ñ
 = (
R
->
p_symMR
[
chûd_L
].
symvÆ
) ;

539 
R
->
p_symMR
[
ªsu…Index
].
bSym
 = 
Ál£
 ;

540 
R
->
p_symMR
[
ªsu…Index
].
bVÆid
 = 
åue
 ;

542  
åue
;

545 
eP¨ít
.
	`ª£t
(
√w
 
	`ComböeEx¥
(
eh
, 
ñ
, 
chûd_size
/8, child_size/8, child_size/8*2, 0)) ;

546 
R
->
p_symMR
[
ªsu…Index
].
bSym
 = 
åue
 ;

547 
R
->
p_symMR
[
ªsu…Index
].
bVÆid
 = 
åue
 ;

548 
R
->
p_symMR
[
ªsu…Index
].
symvÆ
 = 
eP¨ít
 ;

549  
åue
 ;

550 
	}
}

551 
boﬁ
 
	gSYCPUSèã
::
	$comböeChûdªn
(
MachöeReg
 *
R
, 
subRegIndex
) {

553 
subRegIndex
) {

554 
REG_FULL
 : {

555 i‡(
R
->
p_symMR
[
REG_D
].
bSym
)

556 i‡(!
R
->
p_symMR
[
REG_D
].
bVÆid
)

557 
	`comböeChûdªn
(
R
, 
REG_D
) ;

559  
	`comböeChûdªn
(
R
, 
subRegIndex
, 
REG_32H
, 
REG_D
, 32) ;

562 
REG_D
 : {

563 i‡(
R
->
p_symMR
[
REG_W
].
bSym
)

564 i‡(!
R
->
p_symMR
[
REG_W
].
bVÆid
)

565 
	`comböeChûdªn
(
R
, 
REG_W
) ;

567  
	`comböeChûdªn
(
R
, 
subRegIndex
, 
REG_16H
, 
REG_W
, 16) ;

570 
REG_W
 : {

571 i‡((!
R
->
p_symMR
[
REG_L
].
bSym
 || R->p_symMR[REG_L].
bVÆid
) &&

572 (!
R
->
p_symMR
[
REG_H
].
bSym
 || R->p_symMR[REG_H].
bVÆid
) )

574  
	`comböeChûdªn
(
R
, 
subRegIndex
, 
REG_H
, 
REG_L
, 8) ;

576  
Ál£
 ;

579  
Ál£
 ;

582  
Ál£
 ;

583 
	}
}

584 
boﬁ
 
	gSYCPUSèã
::
	$ªadRegi°î
(
RegVÆue
 &
V
) {

586 autÿ
ô
 = 
m_Regs
.
	`föd
(
V
.
ödx
);

587 
subRegIndex
 ;

592 
	`as£π
(
ô
 !
m_Regs
.
	`íd
());

594 
MachöeReg
 *
R
 = (
ô
->
£c⁄d
).
	`gë
();

595 
	`as£π
(
R
->
ödx
 =
V
.indx);

596 
	`as£π
(
R
->
size
 =
V
.size);

598 
subRegIndex
 = 
	`RegToIndex
(
R
) ;

600 
V
.
bsym
 = 
R
->
p_symMR
[
subRegIndex
].
bSym
;

603 if(!
R
->
p_symMR
[
subRegIndex
].
bSym
)

604  
	`ªadC⁄¸ëeVÆue
(
R
, 
V
) ;

607 i‡(!
R
->
p_symMR
[
subRegIndex
].
bVÆid
) {

610 
boﬁ
 
ªt
 = 
Ál£
 ;

611 
ªt
 = 
	`comböeChûdªn
(
R
, 
subRegIndex
) ;

612 i‡(!
ªt
) {

613 
	`•lôP¨ítOf
 (
R
, 
subRegIndex
) ;

617 if(
R
->
p_symMR
[
subRegIndex
].
bSym
)

618 
	`as£π
 (
R
->
p_symMR
[
subRegIndex
].
bVÆid
) ;

620 i‡(
R
->
p_symMR
[
subRegIndex
].
bSym
) {

622 
	`as£π
(
R
->
p_symMR
[
subRegIndex
].
symvÆ
);

623 
V
.
ex¥
 = 
R
->
p_symMR
[
subRegIndex
].
symvÆ
;

624  
åue
 ;

626  
	`ªadC⁄¸ëeVÆue
(
R
, 
subRegIndex
, 
V
);

630  
åue
;

631 
	}
}

633 
boﬁ
 
	gSYCPUSèã
::
	$wrôeSymbﬁicVÆue
(
MachöeReg
 *
R
, 
KVEx¥På
 &
e
) {

634 
R
->
symvÆ
 = 
e
;

635  
åue
;

636 
	}
}

638 
boﬁ
 
	gSYCPUSèã
::
	$ªadSymbﬁicVÆue
(
MachöeReg
 *
R
, 
KVEx¥På
 &
e
) {

639 
e
 = 
R
->
symvÆ
;

640  
åue
;

641 
	}
}

643 
boﬁ
 
	gSYCPUSèã
::
	$wrôeC⁄¸ëeVÆue
(
MachöeReg
 *
R
, 
RegVÆue
 &
V
) {

644 
R
->
size
) {

647 if((
R
->
ödx
&0xf00Ë=(
x86_64
::
L_REG
<<8)) {

648 *
R
->
pi8
 = 
V
.
i8
;

652 
öt16_t
 
tmp
 = 
V
.
i8
 << 8;

653 *
R
->
pi16
 = (*R->pi16&0xffË| (
tmp
&0xff00) ;

657 *
R
->
pi16
 = 
V
.
i16
;

660 *
R
->
pi32
 = 
V
.
i32
;

663 *
R
->
pi64
 = 
V
.
i64
;

666 
	`FIX_ME
();

667  
Ál£
;

670  
åue
;

671 
	}
}

673 
boﬁ
 
	gSYCPUSèã
::
	$ªadC⁄¸ëeVÆue
(
MachöeReg
 *
R
, 
RegVÆue
 &
V
) {

674 
R
->
size
) {

677 if((
R
->
ödx
&0xf00Ë=(
x86_64
::
L_REG
<<8)) {

679 
V
.
i8
 = *(
R
->
pi8
) ;

682 
öt16_t
 
tmp
 = *(
R
->
pi16
);

683 
V
.
i8
 = (
öt8_t
)(
tmp
>>8) ;

687 
V
.
i16
 = *(
R
->
pi16
);

690 
V
.
i32
 = *(
R
->
pi32
);

693 
V
.
i64
 = *(
R
->
pi64
);

696 
	`FIX_ME
();

697  
Ál£
;

700  
åue
;

701 
	}
}

703 
boﬁ
 
	gSYCPUSèã
::
	$wrôeC⁄¸ëeVÆue
(
MachöeReg
 *
R
, 
subRegIdx
, 
RegVÆue
 &
V
) {

705 
subRegIdx
) {

706 
REG_FULL
:

708 *(
R
->
pi64
Ë
V
.
i64
 ;

711 
REG_L
 :

713 *(
R
->
pi8
Ë
V
.
i8
 ;

716 
REG_H
 : {

718 
öt16_t
 
tmp
 = 
V
.
i8
 << 8 ;

719 *(
R
->
pi16
Ë(*(R->pi16Ë& 0xffË| 
tmp
 ;

723 
REG_W
 :

725 *(
R
->
pi16
Ë
V
.
i16
 ;

728 
REG_D
 :

729 *(
R
->
pi32
Ë
V
.
i32
 ;

732 
REG_16H
 : {

733 
öt32_t
 
tmp
 = 
V
.
i16
 << 16 ;

734 *(
R
->
pi32
Ë(*(R->pi32Ë& 0xffffË| 
tmp
 ;

738 
REG_32H
 : {

739 
öt64_t
 
tmp
 = (öt64_t)
V
.
i32
 << 32 ;

740 *(
R
->
pi64
Ë(*(R->
pi32
Ë& 0xffffffffË| 
tmp
 ;

744  
åue
 ;

745 
	}
}

746 
boﬁ
 
	gSYCPUSèã
::
	$ªadC⁄¸ëeVÆue
(
MachöeReg
 *
R
, 
subRegIdx
, 
RegVÆue
 &
V
) {

748 
subRegIdx
) {

749 
REG_FULL
:

751 
V
.
i64
 = *(
R
->
pi64
);

754 
REG_L
 :

756 
V
.
i8
 = *(
R
->
pi8
) ;

759 
REG_H
 : {

761 
öt16_t
 
tmp
 = *(
R
->
pi16
) ;

762 
V
.
i8
 = (
öt8_t
)(
tmp
>>8) ;

766 
REG_W
 :

768 
V
.
i16
 = *(
R
->
pi16
);

771 
REG_D
 :

772 
V
.
i32
 = *(
R
->
pi32
);

775 
REG_16H
 : {

776 
öt32_t
 
tmp
 = *(
R
->
pi32
) ;

777 
V
.
i16
 = (
öt16_t
)(
tmp
>>16) ;

781 
REG_32H
 : {

782 
öt64_t
 
tmp
 = *(
R
->
pi64
) ;

783 
V
.
i32
 = (
öt32_t
)(
tmp
>>32) ;

787  
åue
 ;

788 
	}
}

832 
boﬁ
 
	gSYCPUSèã
::
	$gëFœgBô
(
uöt
 
Êag_ödex
, 
FSIn°rPå
 &
±r
) {

833 autÿ
ô
 = 
m_Regs
.
	`föd
(
Êag_ödex
);

834 
	`as£π
(
ô
 !
m_Regs
.
	`íd
());

835 
MachöeReg
 *
R
 = (
ô
->
£c⁄d
).
	`gë
();

836 
±r
 = 
R
->
fsö°r
;

837  
åue
;

838 
	}
}

840 
boﬁ
 
	gSYCPUSèã
::
	$£tFœgBô
(
uöt
 
Êag_ödex
, 
FSIn°rPå
 &
±r
) {

841 autÿ
ô
 = 
m_Regs
.
	`föd
(
Êag_ödex
);

842 
	`as£π
(
ô
 !
m_Regs
.
	`íd
());

843 
MachöeReg
 *
R
 = (
ô
->
£c⁄d
).
	`gë
();

844 
R
->
fsö°r
 = 
±r
;

845  
åue
;

846 
	}
}

879 
boﬁ
 
	gSYCPUSèã
::
	$gëFœgBô
(
uöt
 
Êag_ödex
, 
FLAG_STAT
 &
Êag
) {

880 autÿ
ô
 = 
m_Regs
.
	`föd
(
Êag_ödex
);

881 
	`as£π
(
ô
 !
m_Regs
.
	`íd
());

882 
MachöeReg
 *
R
 = (
ô
->
£c⁄d
).
	`gë
();

884 
	`as£π
 ((
Êag_ödex
 & (
x86_64
::
BIT
|x86_64::
FLAG
|
Arch_x86_64
)) == (x86_64::BIT|x86_64::FLAG|Arch_x86_64));

885 
Êag_ödex
 &= 0xff;

887 i‡(!
R
->
bsym_Êag
) {

888 if(
m_PTRegs
.
ªgs
.
eÊags
 & (1<<
Êag_ödex
))

889 
Êag
 = 
FLAG_SET
 ;

891 
Êag
 = 
FLAG_CLEAR
 ;

894 
Êag
 = 
FLAG_UNCERTAIN
 ;

896  
åue
;

897 
	}
}

899 
boﬁ
 
	gSYCPUSèã
::
	$£tFœgBô
(
uöt
 
Êag_ödex
, 
FLAG_STAT
 &
Êag
) {

900 autÿ
ô
 = 
m_Regs
.
	`föd
(
Êag_ödex
);

901 
	`as£π
(
ô
 !
m_Regs
.
	`íd
());

902 
MachöeReg
 *
R
 = (
ô
->
£c⁄d
).
	`gë
();

904 
	`as£π
 ((
Êag_ödex
 & (
x86_64
::
BIT
|x86_64::
FLAG
|
Arch_x86_64
)) == (x86_64::BIT|x86_64::FLAG|Arch_x86_64));

905 
Êag_ödex
 &= 0xff;

907 i‡(
Êag
 =
FLAG_UNCERTAIN
) {

908 
R
->
bsym_Êag
 = 
åue
 ;

910 if(
Êag
==
FLAG_SET
)

911 
m_PTRegs
.
ªgs
.
eÊags
 |1<<
Êag_ödex
 ;

912 i‡(
Êag
==
FLAG_CLEAR
)

913 
m_PTRegs
.
ªgs
.
eÊags
 &~(1<<
Êag_ödex
) ;

916  
åue
;

917 
	}
}

919 
boﬁ
 
	gSYCPUSèã
::
	$FœgBôDeföôed
(
uöt
 
Êag_ödex
) {

920 autÿ
ô
 = 
m_Regs
.
	`föd
(
Êag_ödex
);

921 
	`as£π
(
ô
 !
m_Regs
.
	`íd
());

922 
MachöeReg
 *
R
 = (
ô
->
£c⁄d
).
	`gë
();

923 if(
R
->
bsym_Êag
)

924  
Ál£
 ;

926  
åue
 ;

927 
	}
}

	@/home/jqhong/Documents/KernelSE/CPUState.h

2 #i‚de‡
__CPU_STATE_H__


3 
	#__CPU_STATE_H__


	)

5 
	~<asm/±ø˚.h
>

6 
	~<löux/ty≥s.h
>

7 
	~<sig«l.h
>

8 
	~<uc⁄ãxt.h
>

10 
	~<m≠
>

12 
	~"›ønd.h
"

13 
	~"deföes.h
"

16 
	g±_ªgs
;

17 
˛ass
 
	gCFaˇde
;

18 
˛ass
 
	gSymInfoDB
;

27 
	sDyö°EC
 {

28 
uöt32_t
 
	mof·
, 
	msize
;

31 
	sMacReg
 {

32 
±_ªgs
 
	mªgs
;

33 
ul⁄g
 
	mfs_ba£
;

34 
ul⁄g
 
	mgs_ba£
;

41 
	#PTREGS_REG_TOTAL
 23

42 
	#DYINST_REG_TOTAL
 32

43 ˛as†
	cSYCPUSèã
 {

	)

51 
	m¥iv©e
:

52 
°d
::
m≠
<
uöt
, 
	m°d
::
°rög
> 
PTRegsEncodög
;

53 
	m°d
::
m≠
<
uöt
, 
	mDyö°EC
> 
	mDyö°Encodög
;

55 
ul⁄g
 
	mm_AºRegs
[
DYINST_REG_TOTAL
];

57 
MacReg
 
	mm_PTRegs
;

68 
	#REG_32H
 6

	)

69 
	#REG_16H
 5

	)

70 
	#REG_D
 4

	)

71 
	#REG_W
 3

	)

72 
	#REG_H
 2

	)

73 
	#REG_L
 1

	)

74 
	#REG_FULL
 0

	)

76 
	sSymMachöeReg
 {

77 
boﬁ
 
	gbSym
 ;

78 
boﬁ
 
	gbVÆid
 ;

79 
KVEx¥På
 
	gsymvÆ
 ;

81 
SymMachöeReg
 () {

82 
	gbSym
 = 
Ál£
 ;

83 
	gbVÆid
 = 
Ál£
 ;

84 
	gsymvÆ
 = 
NULL
 ;

88 
SymMachöeReg
 
	gm_symMR
[
DYINST_REG_TOTAL
][7] ;

92 
	sMachöeReg
 {

93 
uöt
 
	gödx
;

94 
uöt
 
	gsize
;

95 
boﬁ
 
	gbsym_Êag
;

97 
öt64_t
 *
	gpi64
;

98 
öt32_t
 *
	gpi32
;

99 
öt16_t
 *
	gpi16
;

100 
öt8_t
 *
	gpi8
;

101 
uöt64_t
 *
	gpu64
;

102 
uöt32_t
 *
	gpu32
;

103 
uöt16_t
 *
	gpu16
;

104 
uöt8_t
 *
	gpu8
;

106 
SymMachöeReg
 *
	gp_symMR
 ;

108 
KVEx¥På
 
	gsymvÆ
;

109 
FSIn°rPå
 
	gfsö°r
;

113 
MachöeReg
(Ë: 
bsym_Êag
(
Ál£
), 
symvÆ
(
nuŒ±r
) {}

114 ~
MachöeReg
() {}

116 
	g°d
::
	tsh¨ed_±r
<
	tMachöeReg
> 
	tMachöeRegPå
;

118 
	g°d
::
m≠
<
uöt
, 
	gMachöeRegPå
> 
	gm_Regs
;

120 
	gpublic
:

121 
	$SYCPUSèã
(Ë: 
	$m_Regs
() {

122 
MachöeReg
 *
R
;

123 autÿ
E
 : 
Dyö°Encodög
) {

124 
uöt
 
iddy
 = 
E
.
fú°
;

125 
uöt
 
id±
 = 
E
.
£c⁄d
.
of·
;

126 
uöt
 
size
 = 
E
.
£c⁄d
.size;

127 
R
 = 
√w
 
	`MachöeReg
();

128 
R
->
ödx
 = 
iddy
;

129 
R
->
size
 = size;

130 
R
->
pu64
 = &
m_AºRegs
[
id±
];

132 
m_symMR
[
id±
][0].
bVÆid
 = 
åue
 ;

133 
R
->
p_symMR
 = 
m_symMR
[
id±
] ;

135 
m_Regs
[
iddy
].
	`ª£t
(
R
);

137 
	}
}

139 ~
	$SYCPUSèã
() {

140 
m_Regs
.
	`˛ór
();

141 
	}
}

145 
boﬁ
 
£tC⁄¸ëeCPUSèã
(
MacReg
 *
ªgs
);

149 
boﬁ
 
ªadC⁄¸ëeCPUSèã
(
MacReg
 *
ªgs
);

150 
boﬁ
 
˛órAŒSymFœg
();

151 
±_ªgs
* 
gëPTRegs
();

153 
ul⁄g
 
ªadC⁄Reg
(
uöt
 
idx
);

154 
boﬁ
 
wrôeC⁄Reg
(
uöt
 
idx
, 
ul⁄g
 
vÆ
);

157 
boﬁ
 
isSYReg
(
uöt
 
ªg_ödex
);

158 
boﬁ
 
wrôeRegi°î
(
RegVÆue
 &
v
);

159 
boﬁ
 
ªadRegi°î
(
RegVÆue
 &
v
);

161 
boﬁ
 
gëFœgBô
(
uöt
 
Êag_ödex
, 
FSIn°rPå
 &
±r
);

162 
boﬁ
 
£tFœgBô
(
uöt
 
Êag_ödex
, 
FSIn°rPå
 &
±r
);

165 
boﬁ
 
gëFœgBô
(
uöt
 
Êag_ödex
, 
FLAG_STAT
 &
Êag
);

166 
boﬁ
 
£tFœgBô
(
uöt
 
Êag_ödex
, 
FLAG_STAT
 &
Êag
);

168 
boﬁ
 
FœgBôDeföôed
(
uöt
 
Êag_ödex
) ;

171 
	g¥iv©e
:

172 
boﬁ
 
wrôeSymbﬁicVÆue
(
MachöeReg
 *
R
, 
KVEx¥På
 &
e
);

173 
boﬁ
 
ªadSymbﬁicVÆue
(
MachöeReg
 *
R
, 
KVEx¥På
 &
e
);

175 
boﬁ
 
wrôeC⁄¸ëeVÆue
(
MachöeReg
 *
R
, 
RegVÆue
 &
V
);

176 
boﬁ
 
ªadC⁄¸ëeVÆue
(
MachöeReg
 *
R
, 
RegVÆue
 &
V
);

179 
RegToIndex
 (
MachöeReg
 *
R
);

180 
boﬁ
 
RódSubRegVÆue
 (
MachöeReg
* 
R
, 
RegVÆue
 &
V
) ;

182 
boﬁ
 
wrôeC⁄¸ëeVÆue
(
MachöeReg
 *
R
, 
subRegIdx
, 
RegVÆue
 &
V
);

183 
boﬁ
 
ªadC⁄¸ëeVÆue
(
MachöeReg
 *
R
, 
subRegIdx
, 
RegVÆue
 &
V
);

185 
boﬁ
 
comböeChûdªn
(
MachöeReg
 *
R
, 
subRegIndex
) ;

186 
boﬁ
 
comböeChûdªn
(
MachöeReg
 *
R
, 
ªsu…Index
, 
chûd_H
, 
chûd_L
, 
chûd_size
) ;

188 
boﬁ
 
övÆid©eTªe
(
MachöeReg
 *
R
, 
subRegIndex
) ;

189 
boﬁ
 
•lôP¨ítOf
(
MachöeReg
 *
R
, 
subRegIndex
) ;

190 
boﬁ
 
•lôP¨ít
(
MachöeReg
 *
R
, 
p
, 
chûd_H
, 
chûd_L
, 
chûd_size
) ;

192 
boﬁ
 
isSubRegSymbﬁ
(
MachöeReg
 *
R
, 
subRegIndex
, boﬁ &
bSym
) ;

193 
boﬁ
 
isP¨ítRegSymbﬁ
(
MachöeReg
 *
R
, 
subRegIndex
, boﬁ &
bSym
) ;

195 
boﬁ
 
£tP¨ítSymbﬁSèã
(
MachöeReg
 *
R
, 
subRegIndex
, boﬁ 
bsym
) ;

196 
boﬁ
 
£tChûdSymbﬁSèã
(
MachöeReg
 *
R
, 
subRegIndex
, boﬁ 
bsym
) ;

197 
boﬁ
 
åyC⁄¸ëeP¨ítOf
(
MachöeReg
 *
R
, 
subRegIndex
) ;

199 
boﬁ
 
¥ötsymMR
(
MachöeReg
 *
R
) ;

	@/home/jqhong/Documents/KernelSE/EFlagsManager.cpp

1 
	~<io°ªam
>

2 
	~<f°ªam
>

4 
	~"Ex¥.h
"

5 
	~"In°ru˘i⁄Decodî.h
"

7 
	~"EFœgsM™agî.h
"

11 
usög
 
«me•a˚
 
	g°d
;

12 
usög
 
«me•a˚
 
	gDynö°
;

13 
usög
 
«me•a˚
 
	gIn°ru˘i⁄API
;

14 
usög
 
«me•a˚
 
	gEXPR
;

16 c⁄° 
íåyID
 
	g°©eCh™gögIn°rLi°
[] = {
e_adc
, 
e_add
, 
e_cmp
, 
e_cmpw
, 
e_cmpxch
, 
e_cmpxch8b
, 
e_™d
,

17 
e_bsf
, 
e_b§
, 
e_bt
, 
e_btc
, 
e_bå
, 
e_bts
, 
e_dec
, 
e_de˛
, 
e_div
, 
e_idiv
, 
e_imul
, 
e_öc
, 
e_√g
, 
e_‹
,

18 
e_p›˙t
, 
e_p›f
, 
e_p›fq
, 
e_p›fd
, 
e_rdønd
, 
e_rﬁ
, 
e_rﬁb
, 
e_r‹
, 
e_ßlc
, 
e_ßr
, 
e_ßrb
, 
e_sbb
, 
e_sbbl
,

19 
e_sˇs
, 
e_sˇsb
, 
e_sˇsd
, 
e_sˇsw
, 
e_shl_ßl
, 
e_shld
, 
e_shr
, 
e_shrb
, 
e_shrd
, 
e_sub
, 
e_sy§ë
, 
e_ã°
,

20 
e_tz˙t
, 
e_xadd
, 
e_x‹
, 
e_ßhf


23 
	gö°rAâr
[
_íåy_ids_max_
] ;

26 
boﬁ
 
	gEFœgsM™agî
::
	$C⁄¸ëeFœg
 (
íåyID
 
ö°rID
, 
boﬁ
 
bExecuã
) {

28 
FLAG_STAT
 
f£t
 = 
FLAG_SET
, 
f˛r
 = 
FLAG_CLEAR
 ;

30 i‡(!
	`isC⁄dôi⁄ÆExecuãIn°r
(
ö°rID
))

31  
Ál£
 ;

33 
ö°rID
)

35 
e_jnb
:

36 
e_jnb_j´_j
:

37 
e_cmovnb
:

38 
e_£äb
:

40 
m_VM
->
	`£tFœgBô
(
x86_64
::
cf
, 
bExecuã
?
f˛r
:
f£t
) ;

43 
e_ja
:

44 
e_jnbe
:

45 
e_cmovnbe
:

46 
e_£äbe
:

48 if(
bExecuã
) {

49 
m_VM
->
	`£tFœgBô
(
x86_64
::
cf
, 
f˛r
) ;

50 
m_VM
->
	`£tFœgBô
(
x86_64
::
zf
, 
f˛r
) ;

55 
e_jbe
:

56 
e_cmovbe
:

57 
e_£tbe
:

62 
e_jb
:

63 
e_jb_j«ej_j
:

64 
e_cmov«e
:

65 
e_£tb
:

67 
m_VM
->
	`£tFœgBô
(
x86_64
::
cf
, 
bExecuã
?
f£t
:
f˛r
) ;

71 
e_jge
:

72 
e_j∆
:

73 
e_cmov∆
:

74 
e_£äl
:

80 
e_j∆e
:

81 
e_jg
:

83 
e_£äÀ
:

85 if(
bExecuã
) {

86 
m_VM
->
	`£tFœgBô
(
x86_64
::
zf
, 
f˛r
) ;

90 
e_jÀ
:

91 
e_cmovng
:

92 
e_£ée
:

94 
m_VM
->
	`£tFœgBô
(
x86_64
::
zf
, 
bExecuã
?
f£t
:
f˛r
) ;

97 
e_jl
:

98 
e_cmovnge
:

99 
e_£é
:

104 
e_je
:

105 
e_jz
:

106 
e_cmove
:

107 
e_£tz
:

109 
m_VM
->
	`£tFœgBô
(
x86_64
::
zf
, 
bExecuã
?
f£t
:
f˛r
) ;

112 
e_j√
:

113 
e_jnz
:

114 
e_cmov√
:

115 
e_£äz
:

117 
m_VM
->
	`£tFœgBô
(
x86_64
::
zf
, 
bExecuã
?
f˛r
:
f£t
) ;

120 
e_jns
:

121 
e_cmovns
:

122 
e_£äs
:

124 
m_VM
->
	`£tFœgBô
(
x86_64
::
sf
, 
bExecuã
?
f˛r
:
f£t
) ;

127 
e_js
:

128 
e_cmovs
:

129 
e_£ts
:

131 
m_VM
->
	`£tFœgBô
(
x86_64
::
sf
, 
bExecuã
?
f£t
:
f˛r
) ;

134 
e_jno
:

135 
e_cmovno
:

136 
e_£äo
:

138 
m_VM
->
	`£tFœgBô
(
x86_64
::
of
, 
bExecuã
?
f˛r
:
f£t
) ;

141 
e_jo
:

142 
e_cmovo
:

143 
e_£to
:

144 
m_VM
->
	`£tFœgBô
(
x86_64
::
of
, 
bExecuã
?
f£t
:
f˛r
) ;

149 
e_jrcxz
:

150 
e_jcxz_jec
:

151 
e_jp
:

152 
e_j≈
:

153 
e_cmov≥
:

154 
e_cmovpo
:

155 
e_£ç
:

156 
e_£äp
:

161 
	`asm
("int3");

165 
	`asm
("int3");

168  
åue
 ;

169 
	}
}

171 
boﬁ
 
	gEFœgsM™agî
::
	$SaveFœgCh™gögIn°ru˘i⁄
 (
FSIn°rPå
 &
±r
) {

172 
m_La°In°r
 = 
±r
 ;

173  
åue
 ;

174 
	}
}

176 
boﬁ
 
	gEFœgsM™agî
::
	$SaveFœgCh™gögIn°ru˘i⁄Ex¥
 (
íåyID
 
ö°rID
, 
KVEx¥På
 
ex¥På
) {

177 if(
	`isFœgCh™gögIn°r
(
ö°rID
Ë|| 
	`isFœgSëtögIn°r
(instrID)) {

178 
FLAG_STAT
 
Êag
 = 
FLAG_UNCERTAIN
 ;

179 
m_La°Ex¥
 = 
ex¥På
 ;

180 
m_VM
->
	`£tFœgBô
(
x86_64
::
zf
, 
Êag
) ;

181 
m_VM
->
	`£tFœgBô
(
x86_64
::
cf
, 
Êag
) ;

182 
m_VM
->
	`£tFœgBô
(
x86_64
::
of
, 
Êag
) ;

183 
m_VM
->
	`£tFœgBô
(
x86_64
::
af
, 
Êag
) ;

184 
m_VM
->
	`£tFœgBô
(
x86_64
::
pf
, 
Êag
) ;

185 
m_VM
->
	`£tFœgBô
(
x86_64
::
sf
, 
Êag
) ;

186  
åue
 ;

188  
Ál£
 ;

189 
	}
}

193 
boﬁ
 
	gEFœgsM™agî
::
	$DoCª©eC⁄°øöt
(
ex¥ID
, 
boﬁ
 
bExecuã
) {

195 
KVEx¥På
 
	`Cª©eEx¥ByID
(
id
, KVEx¥På 
R
, KVEx¥På 
M
, KVEx¥På 
L
, 
size
 = 4, 
off£t
 = 0) ;

196 
KVEx¥På
 
c°¡
 = 
NULL
 ;

198 i‡(
m_La°Ex¥
)

199 
c°¡
 = (
	`Cª©eEx¥ByID
(
ex¥ID
, 
m_La°Ex¥
, 
NULL
, NULL, m_La°Ex¥->
size
, m_La°Ex¥->
off£t
));

201 
	`asm
("int3") ;

203 i‡(!
bExecuã
)

204 
c°¡
.
	`ª£t
(
√w
 
	`LNŸEx¥
(c°¡, c°¡->
size
, c°¡->
off£t
)) ;

206 
m_C⁄°øöt
.
	`ö£π
(
c°¡
) ;

208 #ifde‡
_SYM_DEBUG_OUTPUT


209 
c°¡
->
	`¥öt
() ;

210 
°d
::
cout
 << "\n" ;

212 
	`SﬁveC⁄°øöts
 ();

214  
åue
 ;

215 
	}
}

217 
boﬁ
 
	gEFœgsM™agî
::
	$Cª©eC⁄°øöt
(
íåyID
 
ö°rID
, 
boﬁ
 
bExecuã
) {

219 
ex¥ID
 = 
EXPR_UNDEFINED
 ;

220 i‡(!
	`isC⁄dôi⁄ÆExecuãIn°r
(
ö°rID
))

221  
Ál£
 ;

223 
ö°rID
)

225 
e_jnb
:

226 
e_jnb_j´_j
:

227 
e_cmovnb
:

228 
e_£äb
:

230 
ex¥ID
 = 
EXPR_Uge
 ;

233 
e_ja
:

234 
e_jnbe
:

235 
e_cmovnbe
:

236 
e_£äbe
:

238 
ex¥ID
 = 
EXPR_Ugt
 ;

241 
e_jbe
:

242 
e_cmovbe
:

243 
e_£tbe
:

245 
ex¥ID
 = 
EXPR_UÀ
 ;

248 
e_jb
:

249 
e_jb_j«ej_j
:

250 
e_cmov«e
:

251 
e_£tb
:

253 
ex¥ID
 = 
EXPR_U…
 ;

256 
e_jge
:

257 
e_j∆
:

258 
e_cmov∆
:

259 
e_£äl
:

261 
ex¥ID
 = 
EXPR_Sge
 ;

265 
e_j∆e
:

266 
e_jg
:

268 
e_£äÀ
:

270 
ex¥ID
 = 
EXPR_Sgt
 ;

273 
e_jÀ
:

274 
e_cmovng
:

275 
e_£ée
:

277 
ex¥ID
 = 
EXPR_SÀ
 ;

280 
e_jl
:

281 
e_cmovnge
:

282 
e_£é
:

284 
ex¥ID
 = 
EXPR_S…
 ;

287 
e_je
:

288 
e_jz
:

289 
e_cmove
:

290 
e_£tz
:

291 
ex¥ID
 = 
EXPR_EquÆ
 ;

294 
e_j√
:

295 
e_jnz
:

296 
e_cmov√
:

297 
e_£äz
:

299 
ex¥ID
 = 
EXPR_Di°ö˘
 ;

302 
e_jns
:

303 
e_cmovns
:

304 
e_£äs
:

305 
ex¥ID
 = 
EXPR_NoSign
 ;

308 
e_js
:

309 
e_cmovs
:

310 
e_£ts
:

312 
ex¥ID
 = 
EXPR_Sign
 ;

315 
e_jno
:

316 
e_cmovno
:

317 
e_£äo
:

318 
ex¥ID
 = 
EXPR_NoOvîÊow
 ;

321 
e_jo
:

322 
e_cmovo
:

323 
e_£to
:

325 
ex¥ID
 = 
EXPR_OvîÊow
 ;

328 
e_jrcxz
:

329 
e_jcxz_jec
:

330 
e_jp
:

331 
e_j≈
:

332 
e_cmov≥
:

333 
e_cmovpo
:

334 
e_£ç
:

335 
e_£äp
:

340 
	`asm
("int3");

344 
	`asm
("int3");

348 if(
ex¥ID
 !
EXPR_UNDEFINED
) {

349 
	`DoCª©eC⁄°øöt
 (
ex¥ID
, 
bExecuã
) ;

350  
åue
 ;

352  (
Ál£
) ;

354 
	}
}

356 
boﬁ
 
	gEFœgsM™agî
::
	$DïídícyFœgC⁄¸ëed
(
íåyID
 
ö°rID
, 
boﬁ
 &
bExecuã
) {

358 
	`as£π
 (
	`isC⁄dôi⁄ÆExecuãIn°r
(
ö°rID
)) ;

359 
boﬁ
 
ªt
 = 
Ál£
;

360 
ö°rID
)

362 
e_jnb
:

363 
e_jnb_j´_j
:

364 
e_cmovnb
:

365 
e_£äb
:

367 
ªt
 = (
m_VM
->
	`FœgBôDeföôed
(
x86_64
::
cf
)) ;

368 i‡(
ªt
) {

369 
FLAG_STAT
 
cf
 ;

370 
	`as£π
(
m_VM
->
	`gëFœgBô
(
x86_64
::
cf
, cf)) ;

371 
bExecuã
 = (
cf
==
FLAG_CLEAR
Ë? 
åue
 : 
Ál£
 ;

375 
e_ja
:

376 
e_jnbe
:

377 
e_cmovnbe
:

378 
e_£äbe
:

380 
ªt
 = ((
m_VM
->
	`FœgBôDeföôed
(
x86_64
::
cf
)Ë&& (m_VM->FœgBôDeföôed(x86_64::
zf
))) ;

381 i‡(
ªt
) {

382 
FLAG_STAT
 
cf
, 
zf
 ;

383 
	`as£π
(
m_VM
->
	`gëFœgBô
(
x86_64
::
cf
, cf));

384 
	`as£π
(
m_VM
->
	`gëFœgBô
(
x86_64
::
zf
, zf));

386 
bExecuã
 = (
cf
==
FLAG_CLEAR
 && 
zf
==FLAG_CLEARË? 
åue
 : 
Ál£
 ;

390 
e_jbe
:

391 
e_cmovbe
:

392 
e_£tbe
:

394 
ªt
 = ((
m_VM
->
	`FœgBôDeföôed
(
x86_64
::
cf
)Ë&& (m_VM->FœgBôDeföôed(x86_64::
zf
))) ;

395 i‡(
ªt
) {

396 
FLAG_STAT
 
cf
, 
zf
 ;

397 
	`as£π
(
m_VM
->
	`gëFœgBô
(
x86_64
::
cf
, cf));

398 
	`as£π
(
m_VM
->
	`gëFœgBô
(
x86_64
::
zf
, zf));

401 
bExecuã
 = (
cf
==
FLAG_SET
 || 
zf
==FLAG_SETË? 
åue
 : 
Ál£
 ;

405 
e_jb
:

406 
e_jb_j«ej_j
:

407 
e_cmov«e
:

408 
e_£tb
:

410 
ªt
 = (
m_VM
->
	`FœgBôDeföôed
(
x86_64
::
cf
)) ;

411 i‡(
ªt
) {

412 
FLAG_STAT
 
cf
;

413 
	`as£π
(
m_VM
->
	`gëFœgBô
(
x86_64
::
cf
, cf));

415 
bExecuã
 = (
cf
==
FLAG_SET
Ë? 
åue
 : 
Ál£
 ;

419 
e_jge
:

420 
e_j∆
:

421 
e_cmov∆
:

422 
e_£äl
:

424 
ªt
 = ((
m_VM
->
	`FœgBôDeföôed
(
x86_64
::
sf
)Ë&& (m_VM->FœgBôDeföôed(x86_64::
of
))) ;

425 i‡(
ªt
) {

426 
FLAG_STAT
 
sf
, 
of
 ;

427 
	`as£π
(
m_VM
->
	`gëFœgBô
(
x86_64
::
sf
, sf));

428 
	`as£π
(
m_VM
->
	`gëFœgBô
(
x86_64
::
of
, of));

430 
bExecuã
 = (
sf
 =
of
Ë? 
åue
 : 
Ál£
 ;

434 
e_j∆e
:

435 
e_jg
:

437 
e_£äÀ
:

439 
ªt
 = ((
m_VM
->
	`FœgBôDeföôed
(
x86_64
::
zf
)) &&

440 (
m_VM
->
	`FœgBôDeföôed
(
x86_64
::
sf
)) &&

441 (
m_VM
->
	`FœgBôDeföôed
(
x86_64
::
of
))) ;

442 i‡(
ªt
) {

443 
FLAG_STAT
 
zf
, 
sf
, 
of
;

444 
	`as£π
(
m_VM
->
	`gëFœgBô
(
x86_64
::
zf
, zf));

445 
	`as£π
(
m_VM
->
	`gëFœgBô
(
x86_64
::
sf
, sf));

446 
	`as£π
(
m_VM
->
	`gëFœgBô
(
x86_64
::
of
, of));

448 
bExecuã
 = (
zf
==
FLAG_CLEAR
 && 
sf
==
of
Ë? 
åue
 : 
Ál£
 ;

452 
e_jÀ
:

453 
e_cmovng
:

454 
e_£ée
:

456 
ªt
 = ((
m_VM
->
	`FœgBôDeföôed
(
x86_64
::
zf
)) &&

457 (
m_VM
->
	`FœgBôDeföôed
(
x86_64
::
sf
)) &&

458 (
m_VM
->
	`FœgBôDeföôed
(
x86_64
::
of
))) ;

459 i‡(
ªt
) {

460 
FLAG_STAT
 
zf
, 
sf
, 
of
;

461 
	`as£π
(
m_VM
->
	`gëFœgBô
(
x86_64
::
zf
, zf));

462 
	`as£π
(
m_VM
->
	`gëFœgBô
(
x86_64
::
sf
, sf));

463 
	`as£π
(
m_VM
->
	`gëFœgBô
(
x86_64
::
of
, of));

465 
bExecuã
 = (
zf
==
FLAG_SET
 && 
sf
!=
of
Ë? 
åue
 : 
Ál£
 ;

469 
e_jl
:

470 
e_cmovnge
:

471 
e_£é
:

473 
ªt
 = ((
m_VM
->
	`FœgBôDeföôed
(
x86_64
::
sf
)Ë&& (m_VM->FœgBôDeföôed(x86_64::
of
))) ;

474 i‡(
ªt
) {

475 
FLAG_STAT
 
sf
, 
of
 ;

476 
	`as£π
(
m_VM
->
	`gëFœgBô
(
x86_64
::
sf
, sf));

477 
	`as£π
(
m_VM
->
	`gëFœgBô
(
x86_64
::
of
, of));

479 
bExecuã
 = (
sf
 !
of
Ë? 
åue
 : 
Ál£
 ;

483 
e_je
:

484 
e_jz
:

485 
e_cmove
:

486 
e_£tz
:

487 
ªt
 = (
m_VM
->
	`FœgBôDeföôed
(
x86_64
::
zf
)) ;

488 i‡(
ªt
) {

489 
FLAG_STAT
 
zf
 ;

490 
	`as£π
(
m_VM
->
	`gëFœgBô
(
x86_64
::
zf
, zf));

492 
bExecuã
 = (
zf
 =
FLAG_SET
Ë? 
åue
 : 
Ál£
 ;

496 
e_j√
:

497 
e_jnz
:

498 
e_cmov√
:

499 
e_£äz
:

501 
ªt
 = (
m_VM
->
	`FœgBôDeföôed
(
x86_64
::
zf
)) ;

502 i‡(
ªt
) {

503 
FLAG_STAT
 
zf
 ;

504 
	`as£π
(
m_VM
->
	`gëFœgBô
(
x86_64
::
zf
, zf));

506 
bExecuã
 = (
zf
 =
FLAG_CLEAR
Ë? 
åue
 : 
Ál£
 ;

510 
e_jns
:

511 
e_cmovns
:

512 
e_£äs
:

513 
ªt
 = (
m_VM
->
	`FœgBôDeföôed
(
x86_64
::
sf
)) ;

514 i‡(
ªt
) {

515 
FLAG_STAT
 
sf
 ;

516 
	`as£π
(
m_VM
->
	`gëFœgBô
(
x86_64
::
sf
, sf));

518 
bExecuã
 = (
sf
 =
FLAG_CLEAR
Ë? 
åue
 : 
Ál£
 ;

522 
e_js
:

523 
e_cmovs
:

524 
e_£ts
:

526 
ªt
 = (
m_VM
->
	`FœgBôDeföôed
(
x86_64
::
sf
)) ;

527 i‡(
ªt
) {

528 
FLAG_STAT
 
sf
 ;

529 
	`as£π
(
m_VM
->
	`gëFœgBô
(
x86_64
::
sf
, sf));

531 
bExecuã
 = (
sf
 =
FLAG_SET
Ë? 
åue
 : 
Ál£
 ;

535 
e_jno
:

536 
e_cmovno
:

537 
e_£äo
:

538 
ªt
 = (
m_VM
->
	`FœgBôDeföôed
(
x86_64
::
of
)) ;

539 i‡(
ªt
) {

540 
FLAG_STAT
 
of
 ;

541 
	`as£π
(
m_VM
->
	`gëFœgBô
(
x86_64
::
of
, of));

543 
bExecuã
 = (
of
 =
FLAG_CLEAR
Ë? 
åue
 : 
Ál£
 ;

547 
e_jo
:

548 
e_cmovo
:

549 
e_£to
:

551 
ªt
 = (
m_VM
->
	`FœgBôDeföôed
(
x86_64
::
of
)) ;

552 i‡(
ªt
) {

553 
FLAG_STAT
 
of
 ;

554 
	`as£π
(
m_VM
->
	`gëFœgBô
(
x86_64
::
of
, of));

556 
bExecuã
 = (
of
 =
FLAG_SET
Ë? 
åue
 : 
Ál£
 ;

560 
e_jrcxz
:

561 
e_jcxz_jec
:

562 
e_jp
:

563 
e_j≈
:

564 
e_cmov≥
:

565 
e_cmovpo
:

566 
e_£ç
:

567 
e_£äp
:

572 
	`asm
("int3");

576 
	`asm
("int3");

579  (
ªt
) ;

580 
	}
}

585 
boﬁ
 
	gEFœgsM™agî
::
	$isFœgSëtögIn°r
(
íåyID
 
id
){

586 i‡(
ö°rAâr
[
id
] & 
FLAG_SETING_ATTR
) {

587  
åue
 ;

589  
Ál£
;

590 
	}
}

593 
boﬁ
 
	gEFœgsM™agî
::
	$isFœgCh™gögIn°r
(
íåyID
 
id
){

594 
i
 = 0;

596 if(
ö°rAâr
[
id
] & 
FLAG_CHANGING_ATTR
) {

597  
åue
 ;

599  
Ál£
;

600 
	}
}

603 
boﬁ
 
	gEFœgsM™agî
::
	$isC⁄dôi⁄ÆExecuãIn°r
(
íåyID
 
id
){

604 if(
ö°rAâr
[
id
] & 
CONDITIONAL_EXEC_ATTR
) {

605  
åue
 ;

607  
Ál£
;

608 
	}
}

610 
	gEFœgsM™agî
::
	$InôIn°ru˘i⁄Aâr
()

612 
i
 =0; i< (
ö°rAâr
)/(instrAttr[0]); i++){

613 
ö°rAâr
[
i
] = 0 ;

614 
j
=0; j<(
°©eCh™gögIn°rLi°
)/(stateChangingInstrList[0]); j++) {

615 if(
i
 =
°©eCh™gögIn°rLi°
[
j
]) {

616 
ö°rAâr
[
i
] |
FLAG_CHANGING_ATTR
;

620 i‡(
i
 =
e_cmp
 ||ò=
e_cmpw
 || i =
e_ã°
 || i =
e_bt
) {

621 
ö°rAâr
[
i
] |
FLAG_SETING_ATTR
 ;

623 if((
i
 >
e_jb
 && i <
e_jrcxz
 && i !
e_jmp
) ||

624 (
i
>=
e_cmovbe
 && i<=
e_cmovs
) ||

625 (
i
>=
e_£tb
 && i<=
e_£tz
) ||

626 (
i
==
e_adc
 || i==
e_sbb
 || i==
e_sbbl
) ) {

627 
ö°rAâr
[
i
] |
CONDITIONAL_EXEC_ATTR
 ;

630 
	}
}

632 
	gEFœgsM™agî
::
	$EFœgsM™agî
(
VMSèã
 *
vm
) {

634 
	`InôIn°ru˘i⁄Aâr
 () ;

635 
m_VM
 = 
vm
;

636 
m_C⁄°øöt
.
	`˛ór
();

637 
m_La°Ex¥
 = 
NULL
 ;

638 
m_La°In°r
 = 
NULL
 ;

640 
m_Z3H™dÀr
.
	`ª£t
(
√w
 
	`Z3H™dÀr
());

642 
m_AddrBoﬁ
.
	`˛ór
() ;

643 
	`RódAddrBoﬁM≠FromFûe
() ;

644 
	}
};

646 
boﬁ
 
	gEFœgsM™agî
::
	$PrötC⁄°øöt
 () {

648 autÿ
ô
 : 
m_C⁄°øöt
) {

650 
ô
->
	`¥öt
() ;

651 
°d
::
cout
 << "\n" ;

654  
åue
 ;

655 
	}
}

657 
boﬁ
 
	gEFœgsM™agî
::
	$SﬁveC⁄°øöts
 () {

659 
°d
::
m≠
<°d::
°rög
, > 
ªt_ªsu…
;

660 
ªt_ªsu…
 = 
m_Z3H™dÀr
->
	`Z3SﬁveO√
(
m_C⁄°øöt
);

661 
	`¥ötf
 ("ªsu… size: %d. \n", 
ªt_ªsu…
.
	`size
());

662 autÿ
ô
 = 
ªt_ªsu…
.
	`begö
(); ià!ªt_ªsu….
	`íd
(); it ++){

663 
°d
::
cout
 << "symbﬁ : " << 
ô
->
fú°
 << " vÆuê: " << it->
£c⁄d
 << std::
ídl
;

666  
åue
 ;

667 
	}
}

669 
boﬁ
 
	gEFœgsM™agî
::
	$RódAddrBoﬁM≠FromFûe
 () {

671 
if°ªam
 
theFûe
;

672 
°rög
 
‚ame
 = "/home/jqhong/Documents/test_user/kernel_se/addr-bool_map.txt" ;

673 
°rög
 
löe
 ;

674 
key
 ;

675 
vÆ
;

676 
boﬁ
 
boﬁvÆ
;

677 
cou¡î
 = 0, 
dup
 = 0;

679 
theFûe
.
	`›í
 (
‚ame
);

681 if(!
theFûe
) {

682 
°d
::
cout
 << "îr‹ o≥¿fûe!" << std::
ídl
 ;

683  
Ál£
 ;

686 
°d
::
	`gëlöe
(
theFûe
, 
löe
)) {

691 
	`ssˇnf
(
löe
.
	`c_°r
(), "%Œx, %d", &
key
, &
vÆ
) ;

693 
boﬁvÆ
 = (
vÆ
==1) ;

701 
cou¡î
 ++ ;

703 
key
 = key & 0xFFFFFFFFFFFF ;

704 
key
 = key | (
cou¡î
 << 48) ;

705 
m_AddrBoﬁ
[
key
] = 
boﬁvÆ
 ;

708 
°d
::
cout
 << "m≠ cª©ed : " << 
cou¡î
 << std::
ídl
 ;

720 
theFûe
.
	`˛o£
();

721  
åue
;

722 
	}
}

724 
boﬁ
 
	gEFœgsM™agî
::
	$födDecisi⁄
(
ul⁄g
 
addr
, 
cou¡î
) {

725 
key
 = 
addr
;

727 
key
 = key & 0xFFFFFFFFFFFF ;

728 
key
 = key | (
cou¡î
 << 48) ;

729  
m_AddrBoﬁ
[
key
];

730 
	}
}

732 
boﬁ
 
	gEFœgsM™agî
::
	$EvÆC⁄dôi⁄
(
íåyID
 
ö¢ID
)

734 
boﬁ
 
bExecuã
 = 
Ál£
;

735 
°d
::
£t
<
KVEx¥På
> 
c⁄°øöts
;

736 
KVEx¥På
 
ex¥På
 = 
	`GëC⁄dôi⁄
(
ö¢ID
);

737 i‡(
ex¥På
)

739 
c⁄°øöts
.
	`ö£π
(
ex¥På
);

740 
°d
::
ve˘‹
<
VMSèã
::
SYMemObje˘
*> 
symobjs
;

741 autÿ
ô
 : 
m_VM
->
m_SYMemObje˘s
)

743 
symobjs
.
	`push_back
(
ô
.
£c⁄d
);

746 
ex¥På
->
	`¥öt
() ;

747 
°d
::
cout
 << "\n" ;

748 
bExecuã
 = 
m_Z3H™dÀr
->
	`Z3SﬁveC⁄¸ëize
(
symobjs
, 
c⁄°øöts
);

749 
°d
::
cout
 << "bExecuã: " << 
bExecuã
 << std::
ídl
;

751 i‡(!
bExecuã
)

752 
ex¥På
.
	`ª£t
(
√w
 
	`LNŸEx¥
”x¥På,Éx¥På->
size
,Éx¥På->
off£t
)) ;

754 
m_C⁄°øöt
.
	`ö£π
(
ex¥På
) ;

756 #ifde‡
_SYM_DEBUG_OUTPUT


763 
°d
::
cout
 << "Gë Ex¥ f‹ c⁄dôi⁄Æ in¢ faûed! " << std::
ídl
;

764 
	`as£π
(
Ál£
);

766  
bExecuã
;

767 
	}
}

769 
KVEx¥På
 
	gEFœgsM™agî
::
	$DoGëC⁄dôi⁄
(
ex¥ID
) {

771 
KVEx¥På
 
	`Cª©eEx¥ByID
(
id
, KVEx¥På 
R
, KVEx¥På 
M
, KVEx¥På 
L
, 
size
 = 4, 
off£t
 = 0) ;

772 
KVEx¥På
 
c°¡
 = 
NULL
 ;

774 i‡(
m_La°Ex¥
)

775 
c°¡
 = (
	`Cª©eEx¥ByID
(
ex¥ID
, 
m_La°Ex¥
, 
NULL
, NULL, m_La°Ex¥->
size
, m_La°Ex¥->
off£t
));

777 
	`asm
("int3") ;

784  
c°¡
 ;

785 
	}
}

787 
KVEx¥På
 
	gEFœgsM™agî
::
	$GëC⁄dôi⁄
(
íåyID
 
ö°rID
) {

789 
ex¥ID
 = 
EXPR_UNDEFINED
 ;

790 i‡(!
	`isC⁄dôi⁄ÆExecuãIn°r
(
ö°rID
))

792  
nuŒ±r
;

794 
ö°rID
)

796 
e_jnb
:

797 
e_jnb_j´_j
:

798 
e_cmovnb
:

799 
e_£äb
:

801 
ex¥ID
 = 
EXPR_Uge
 ;

804 
e_ja
:

805 
e_jnbe
:

806 
e_cmovnbe
:

807 
e_£äbe
:

809 
ex¥ID
 = 
EXPR_Ugt
 ;

812 
e_jbe
:

813 
e_cmovbe
:

814 
e_£tbe
:

816 
ex¥ID
 = 
EXPR_UÀ
 ;

819 
e_jb
:

820 
e_jb_j«ej_j
:

821 
e_cmov«e
:

822 
e_£tb
:

824 
ex¥ID
 = 
EXPR_U…
 ;

827 
e_jge
:

828 
e_j∆
:

829 
e_cmov∆
:

830 
e_£äl
:

832 
ex¥ID
 = 
EXPR_Sge
 ;

836 
e_j∆e
:

837 
e_jg
:

839 
e_£äÀ
:

841 
ex¥ID
 = 
EXPR_Sgt
 ;

844 
e_jÀ
:

845 
e_cmovng
:

846 
e_£ée
:

848 
ex¥ID
 = 
EXPR_SÀ
 ;

851 
e_jl
:

852 
e_cmovnge
:

853 
e_£é
:

855 
ex¥ID
 = 
EXPR_S…
 ;

858 
e_je
:

859 
e_jz
:

860 
e_cmove
:

861 
e_£tz
:

862 
ex¥ID
 = 
EXPR_EquÆ
 ;

865 
e_j√
:

866 
e_jnz
:

867 
e_cmov√
:

868 
e_£äz
:

870 
ex¥ID
 = 
EXPR_Di°ö˘
 ;

873 
e_jns
:

874 
e_cmovns
:

875 
e_£äs
:

876 
ex¥ID
 = 
EXPR_NoSign
 ;

879 
e_js
:

880 
e_cmovs
:

881 
e_£ts
:

883 
ex¥ID
 = 
EXPR_Sign
 ;

886 
e_jno
:

887 
e_cmovno
:

888 
e_£äo
:

889 
ex¥ID
 = 
EXPR_NoOvîÊow
 ;

892 
e_jo
:

893 
e_cmovo
:

894 
e_£to
:

896 
ex¥ID
 = 
EXPR_OvîÊow
 ;

899 
e_jrcxz
:

900 
e_jcxz_jec
:

901 
e_jp
:

902 
e_j≈
:

903 
e_cmov≥
:

904 
e_cmovpo
:

905 
e_£ç
:

906 
e_£äp
:

911 
	`asm
("int3");

915 
	`asm
("int3");

919 if(
ex¥ID
 !
EXPR_UNDEFINED
) {

920  
	`DoGëC⁄dôi⁄
 (
ex¥ID
) ;

924  
nuŒ±r
;

926 
	}
}

	@/home/jqhong/Documents/KernelSE/EFlagsManager.h

1 #i‚de‡
_SYM_EFLAGSMANAGER_H__


2 
	#_SYM_EFLAGSMANAGER_H__


	)

5 
	~"VMSèã.h
"

6 
	~"Z3H™dÀr.h
"

8 
˛ass
 
	gVMSèã
;

11 
usög
 
«me•a˚
 
	gz3
;

12 
usög
 
«me•a˚
 
	gEXPR
;

13 
usög
 
«me•a˚
 
	gZ3HANDLER
;

16 
	#FLAG_CHANGING_ATTR
 0x1

	)

17 
	#FLAG_SETING_ATTR
 0x2

	)

18 
	#CONDITIONAL_EXEC_ATTR
 0x4

	)

20 ˛as†
	cEFœgsM™agî
 {

21 
VMSèã
 *
	mm_VM
 ;

22 
	m°d
::
£t
<
KVEx¥På
> 
m_C⁄°øöt
;

24 
KVEx¥På
 
	mm_La°Ex¥
 ;

25 
FSIn°rPå
 
	mm_La°In°r
;

27 
	m°d
::
m≠
<
ul⁄g
, 
	mboﬁ
> 
	mbønchDecisi⁄
;

29 
	m°d
::
sh¨ed_±r
<
Z3H™dÀr
> 
m_Z3H™dÀr
;

31 
	m¥Ÿe˘ed
:

32 
boﬁ
 
DoCª©eC⁄°øöt
(
ex¥ID
, boﬁ 
bChoi˚
 ) ;

34 
	mpublic
:

35 
EFœgsM™agî
(
VMSèã
 *
vm
) ;

36 ~
	$EFœgsM™agî
 () {} ;

38 
FLAG_STAT
 
	$GëFœg
(
Êag
Ë{ 
FLAG_UNCERTAIN
 ;
	}
} ;

41 
boﬁ
 
isFœgSëtögIn°r
(
íåyID
 
id
) ;

42 
boﬁ
 
isFœgCh™gögIn°r
(
íåyID
 
id
) ;

44 
boﬁ
 
isC⁄dôi⁄ÆExecuãIn°r
(
íåyID
 
id
) ;

45 
InôIn°ru˘i⁄Aâr
() ;

47 
boﬁ
 
DïídícyFœgC⁄¸ëed
(
íåyID
 
ö°rID
, boﬁ &
bChoi˚
) ;

48 
boﬁ
 
Cª©eC⁄°øöt
(
íåyID
 
ö°rID
, boﬁ 
bChoi˚
) ;

50 
boﬁ
 
C⁄¸ëeFœg
 (
íåyID
 
ö°rID
, boﬁ 
bChoi˚
) ;

52 
boﬁ
 
SaveFœgCh™gögIn°ru˘i⁄
 (
FSIn°rPå
 &
±r
) ;

53 
boﬁ
 
SaveFœgCh™gögIn°ru˘i⁄Ex¥
 (
íåyID
 
ö°rID
, 
KVEx¥På
 
ex¥På
) ;

55 
boﬁ
 
födDecisi⁄
(
ul⁄g
 
addr
, 
cou¡î
);

56 
boﬁ
 
födDecisi⁄
(
ul⁄g
 
addr
);

58 
KVEx¥På
 
DoGëC⁄dôi⁄
(
ex¥ID
);

59 
KVEx¥På
 
GëC⁄dôi⁄
(
íåyID
 
ö°rID
);

60 
boﬁ
 
EvÆC⁄dôi⁄
(
íåyID
 
ö¢ID
);

62 
boﬁ
 
RódAddrBoﬁM≠FromFûe
 () ;

64 
boﬁ
 
PrötC⁄°øöt
() ;

66 
boﬁ
 
SﬁveC⁄°øöts
();

68 
	g°d
::
m≠
<
uöt64_t
, 
	gboﬁ
> 
	gm_AddrBoﬁ
 ;

	@/home/jqhong/Documents/KernelSE/Expr.cpp

1 
	~<io°ªam
>

2 
	~"Ex¥.h
"

3 
	~"›ønd.h
"

5 
	~"VMSèã.h
"

7 
usög
 
«me•a˚
 
	gEXPR
;

8 
	gex¥Name
[][16] = {"","","","","","","",

48 
	gUDefEx¥
::
	$¥öt
 () {

49 
VMSèã
::
SYMemObje˘
 *
obj
 = (VMSèã::SYMemObje˘ *Ë
O
;

51 if(
obj
 !
NULL
 )

52 
°d
::
cout
 << 
obj
->
«me
 ;

54 
°d
::
cout
 << "OBJ" ;

55 
	}
}

57 
	gC⁄°Ex¥
::
	$¥öt
 () {

58 
°d
::
cout
 << 
V
;

59 
	}
}

61 
	gBöEx¥
::
	$¥öt
 () {

62 
°d
::
cout
<<
ex¥Name
[
ex¥ID
]<<"(";

63 
R
->
	`¥öt
();

64 
°d
::
cout
<<",";

65 
L
->
	`¥öt
();

66 
°d
::
cout
<<")";

67 
	}
}

69 
	gUryEx¥
::
	$¥öt
 () {

70 
°d
::
cout
<<
ex¥Name
[
ex¥ID
]<<"(";

71 
E
->
	`¥öt
();

72 
°d
::
cout
<<")";

73 
	}
}

75 
	gTriEx¥
::
	$¥öt
 () {

76 
°d
::
cout
<<
ex¥Name
[
ex¥ID
]<<"(";

77 
R
->
	`¥öt
();

78 
°d
::
cout
<<",";

79 
M
->
	`¥öt
();

80 
°d
::
cout
<<",";

81 
L
->
	`¥öt
();

82 
°d
::
cout
<<")";

83 
	}
}

85 
	gExåa˘Ex¥
::
	$¥öt
 () {

87 
°d
::
cout
<<
ex¥Name
[
ex¥ID
]<<"(";

88 
E
->
	`¥öt
();

89 
°d
::
cout
 << ", " << 
s
 << ", " << 
e
 ;

90 
°d
::
cout
<<")";

91 
	}
}

93 
KVEx¥På
 
	$Cª©eEx¥ByID
(
id
, 
KVEx¥På
 
R
, KVEx¥På 
M
, KVEx¥På 
L
, 
size
 = 4, 
off£t
 = 0) {

94 
BöEx¥
 *
bö±r
 = (BöEx¥ *)
R
.
	`gë
() ;

95 
KVEx¥På
 
ex¥±r
 = 
NULL
;

96 
id
) {

97 
EXPR_Add
 :

98 
EXPR_Sub
 :

99 
EXPR_Mul
 :

100 
EXPR_UDiv
 :

101 
EXPR_SDiv
 :

102 
EXPR_URem
 :

103 
EXPR_SRem
 :

104 
EXPR_Neg
 :

105 
EXPR_NŸ
 :

106 
EXPR_And
 :

107 
EXPR_Or
 :

108 
EXPR_X‹
 :

109 
EXPR_Shl
 :

110 
EXPR_LShr
 :

111 
EXPR_AShr
 :

112 
	`asm
 ("int3") ;

115 
EXPR_EquÆ
 :

116 
ex¥±r
.
	`ª£t
(
√w
 
	`EquÆEx¥
(
R
, 
size
, 
off£t
)) ;

119 
EXPR_Di°ö˘
 :

120 
ex¥±r
.
	`ª£t
(
√w
 
	`Di°ö˘Ex¥
(
R
, 
size
, 
off£t
)) ;

123 
EXPR_U…
 :

124 
ex¥±r
.
	`ª£t
(
√w
 
	`U…Ex¥
(
bö±r
->
	`gëR
(), bö±r->
	`gëL
(), 
size
, 
off£t
)) ;

127 
EXPR_UÀ
 :

128 
ex¥±r
.
	`ª£t
(
√w
 
	`UÀEx¥
(
bö±r
->
	`gëR
(), bö±r->
	`gëL
(), 
size
, 
off£t
)) ;

131 
EXPR_Ugt
 :

132 
ex¥±r
.
	`ª£t
(
√w
 
	`UgtEx¥
(
bö±r
->
	`gëR
(), bö±r->
	`gëL
(), 
size
, 
off£t
)) ;

135 
EXPR_Uge
 :

136 
ex¥±r
.
	`ª£t
(
√w
 
	`UgeEx¥
(
bö±r
->
	`gëR
(), bö±r->
	`gëL
(), 
size
, 
off£t
)) ;

139 
EXPR_S…
 :

140 
ex¥±r
.
	`ª£t
(
√w
 
	`S…Ex¥
(
bö±r
->
	`gëR
(), bö±r->
	`gëL
(), 
size
, 
off£t
)) ;

143 
EXPR_SÀ
 :

144 
ex¥±r
.
	`ª£t
(
√w
 
	`SÀEx¥
(
bö±r
->
	`gëR
(), bö±r->
	`gëL
(), 
size
, 
off£t
)) ;

147 
EXPR_Sgt
 :

148 
ex¥±r
.
	`ª£t
(
√w
 
	`SgtEx¥
(
bö±r
->
	`gëR
(), bö±r->
	`gëL
(), 
size
, 
off£t
)) ;

151 
EXPR_Sge
 :

152 
ex¥±r
.
	`ª£t
(
√w
 
	`SgeEx¥
(
bö±r
->
R
, bö±r->
L
, 
size
, 
off£t
)) ;

155 
EXPR_LOr
 :

156 
EXPR_LAnd
 :

157 
EXPR_LNŸ
 :

158 
EXPR_SignEXT
 :

159 
EXPR_ZîoEXT
 :

160 
EXPR_Shrd
 :

161 
	`asm
 ("int3") ;

166  
ex¥±r
 ;

167 
	}
}

	@/home/jqhong/Documents/KernelSE/Expr.h

1 #i‚de‡
_EXPR_H__


2 
	#_EXPR_H__


	)

4 
	~<mem‹y
>

5 
	~<°dio.h
>

6 
	~"VMSèã.h
"

8 
	#EXPR_UNDEFINED
 -1

	)

10 
	#EXPR_Add
 7

	)

11 
	#EXPR_Sub
 8

	)

12 
	#EXPR_Mul
 9

	)

13 
	#EXPR_UDiv
 10

	)

14 
	#EXPR_SDiv
 11

	)

15 
	#EXPR_URem
 12

	)

16 
	#EXPR_SRem
 13

	)

17 
	#EXPR_Neg
 14

	)

18 
	#EXPR_NŸ
 15

	)

19 
	#EXPR_And
 16

	)

20 
	#EXPR_Or
 17

	)

21 
	#EXPR_X‹
 18

	)

22 
	#EXPR_Shl
 19

	)

23 
	#EXPR_LShr
 20

	)

24 
	#EXPR_AShr
 21

	)

25 
	#EXPR_EquÆ
 22

	)

26 
	#EXPR_Di°ö˘
 23

	)

27 
	#EXPR_U…
 24

	)

28 
	#EXPR_UÀ
 25

	)

29 
	#EXPR_Ugt
 26

	)

30 
	#EXPR_Uge
 27

	)

31 
	#EXPR_S…
 28

	)

32 
	#EXPR_SÀ
 29

	)

33 
	#EXPR_Sgt
 30

	)

34 
	#EXPR_Sge
 31

	)

35 
	#EXPR_LOr
 32

	)

36 
	#EXPR_LAnd
 33

	)

37 
	#EXPR_LNŸ
 34

	)

39 
	#EXPR_SignEXT
 35

	)

40 
	#EXPR_ZîoEXT
 36

	)

41 
	#EXPR_Shrd
 37

	)

43 
	#EXPR_Sign
 38

	)

44 
	#EXPR_NoSign
 39

	)

45 
	#EXPR_OvîÊow
 40

	)

46 
	#EXPR_NoOvîÊow
 41

	)

48 
	#EXPR_Comböe
 42

	)

49 
	#EXPR_Exåa˘
 43

	)

61 
˛ass
 
	gVMSèã
;

63 
«me•a˚
 
	gEXPR
 {

65 ˛as†
	cEx¥
 {

66 
	g¥Ÿe˘ed
:

69 
public
:

70 
	eKöd
 {

72 
UNDEFINED
 = -1,

75 
	gC⁄°
 = 3,

76 
	gBö
,

77 
	gTri
,

78 
	gUry
,

80 
	gAdd
 = 7,

81 
	gSub
,

82 
	gMul
,

83 
	gUDiv
,

85 
	gSDiv
,

86 
	gURem
,

87 
	gSRem
,

88 
	gNeg
,

89 
	gNŸ
,

90 
	gAnd
,

91 
	gOr
,

92 
	gX‹
,

93 
	gShl
,

94 
	gLShr
,

96 
	gAShr
,

97 
	gEquÆ
,

98 
	gDi°ö˘
,

99 
	gU…
,

100 
	gUÀ
,

101 
	gUgt
,

102 
	gUge
,

103 
	gS…
,

104 
	gSÀ
,

105 
	gSgt
,

107 
	gSge
,

108 
	gL‹
,

109 
	gLAnd
,

110 
	gLNŸ
,

111 
	gSignEXT
,

112 
	gZîoEXT
,

113 
	gShrd
,

114 
	gSign
,

115 
	gNoSign
,

116 
	gOvîÊow
,

118 
	gNoOvîÊow
,

119 
	gComböe
,

120 
	gExåa˘


124 
	gpublic
:

125 
ex¥ID
 ;

126 
	gsize
;

127 
	goff£t
;

129 
Ex¥
(
sz
, 
off
=0) {

130 
this
->
size
 = 
sz
, 
	gthis
->
	goff£t
 = 
off
;Åhis->
	gex¥ID
 = -1 ;

132 
Ex¥
() {

133 
	gthis
->
	gsize
 = 4,Åhis->
	goff£t
 = 0;Åhis->
	gex¥ID
 = -1 ;

135 ~
Ex¥
() {} ;

136 
boﬁ
 
Excuã
(&
size
, &
vÆ
) {

137 
	gsize
 = 
this
->
size
 ;

138 
	gvÆ
 = 0 ;

139  
	gåue
 ;

142 
vútuÆ
 
¥öt
() {};

146 
vútuÆ
 
Köd
 
gëKöd
() const = 0;

150 
	g°d
::
	tsh¨ed_±r
<
	tEx¥
> 
	tEx¥På
;

153 ˛as†
	cUDefEx¥
 : 
public
 
Ex¥
 {

154 
¥Ÿe˘ed
:

155 *
O
;

157 
	gpublic
:

158 
UDefEx¥
(*
obj
Ë:
Ex¥
() {

159 
O
 = 
obj
;

163 
UDefEx¥
(*
obj
, 
sz
, 
off
Ë: 
Ex¥
(sz, off) {

164 
	gO
 = 
obj
;

167 
¥öt
 ();

170 
Köd
 
gëKöd
(Ëc⁄° {  
	gUNDEFINED
; }

171 
	gVMSèã
::
SYMemObje˘
 * 
gëObje˘
(Ë{  (
VMSèã
::SYMemObje˘*Ë
O
; }

174 ˛as†
	cC⁄°Ex¥
 : 
public
 
Ex¥
 {

175 
¥Ÿe˘ed
:

176 
uöt64_t
 
V
;

178 
	gpublic
:

179 
C⁄°Ex¥
(
uöt64_t
 
vÆue
) {

180 
V
 = 
vÆue
;

183 
¥öt
 () ;

186 
Köd
 
gëKöd
(Ëc⁄° {  
	gC⁄°
; }

187 
uöt64_t
 
gëVÆue
(Ë{  
	gV
; }

190 ˛as†
	cBöEx¥
 : 
public
 
Ex¥
 {

192 
public
:

193 
Ex¥På
 
R
, 
	gL
;

197 
Ex¥På
 
gëR
(Ë{ 
	gL
;}

198 
Ex¥På
 
gëL
(Ë{ 
	gR
;}

199 
BöEx¥
(
Ex¥På
 
r
, Ex¥På 
l
Ë: 
R
‘), 
L
(l) {}

200 
BöEx¥
(
Ex¥På
 
r
, Ex¥På 
l
, 
sz
, 
off
Ë: 
Ex¥
(sz, off), 
R
‘), 
L
(l) {}

202 
	gpublic
:

203 
¥öt
 () ;

206 
Köd
 
gëKöd
(Ëc⁄° {  
	gBö
; }

207 
Ex¥På
 
gëEx¥PåR
(Ë{  
	gR
; }

208 
Ex¥På
 
gëEx¥PåL
(Ë{  
	gL
; }

211 ˛as†
	cAddEx¥
 : 
public
 
BöEx¥
 {

212 
public
:

213 
AddEx¥
(
Ex¥På
 
r
, Ex¥På 
l
Ë: 
BöEx¥
‘,ÜË{
	gex¥ID
 = 
EXPR_Add
;}

214 
AddEx¥
(
Ex¥På
 
r
, Ex¥På 
l
, 
sz
, 
off
Ë: 
BöEx¥
‘,Ü, sz, offË{
	gex¥ID
 = 
EXPR_Add
;}

217 
Köd
 
gëKöd
(Ëc⁄° {  
	gAdd
; }

218 
Ex¥På
 
gëEx¥PåR
(Ë{  
	gR
; }

219 
Ex¥På
 
gëEx¥PåL
(Ë{  
	gL
; }

222 ˛as†
	cSubEx¥
 : 
public
 
BöEx¥
 {

223 
public
:

224 
SubEx¥
(
Ex¥På
 
r
, Ex¥På 
l
Ë: 
BöEx¥
‘,ÜË{
	gex¥ID
 = 
EXPR_Sub
;}

225 
SubEx¥
(
Ex¥På
 
r
, Ex¥På 
l
, 
sz
, 
off
Ë: 
BöEx¥
‘,Ü, sz, offË{
	gex¥ID
 = 
EXPR_Sub
;}

228 
Köd
 
gëKöd
(Ëc⁄° {  
	gSub
; }

229 
Ex¥På
 
gëEx¥PåR
(Ë{  
	gR
; }

230 
Ex¥På
 
gëEx¥PåL
(Ë{  
	gL
; }

233 ˛as†
	cMulEx¥
 : 
public
 
BöEx¥
 {

234 
public
:

236 
MulEx¥
(
Ex¥På
 
r
, Ex¥På 
l
Ë: 
BöEx¥
‘,ÜË{
	gex¥ID
 = 
EXPR_Mul
;}

237 
MulEx¥
(
Ex¥På
 
r
, Ex¥På 
l
, 
sz
, 
off
Ë: 
BöEx¥
‘,Ü, sz, offË{
	gex¥ID
 = 
EXPR_Mul
;}

240 
Köd
 
gëKöd
(Ëc⁄° {  
	gMul
; }

241 
Ex¥På
 
gëEx¥PåR
(Ë{  
	gR
; }

242 
Ex¥På
 
gëEx¥PåL
(Ë{  
	gL
; }

245 ˛as†
	cDivEx¥
 : 
public
 
BöEx¥
 {

246 
public
:

247 
DivEx¥
(
Ex¥På
 
r
, Ex¥På 
l
Ë: 
BöEx¥
‘,ÜË{
	gex¥ID
 = 
EXPR_UDiv
;}

248 
DivEx¥
(
Ex¥På
 
r
, Ex¥På 
l
, 
sz
, 
off
Ë: 
BöEx¥
‘,Ü, sz, offË{
	gex¥ID
 = 
EXPR_UDiv
;}

251 
Köd
 
gëKöd
(Ëc⁄° {  
	gUDiv
; }

252 
Ex¥På
 
gëEx¥PåR
(Ë{  
	gR
; }

253 
Ex¥På
 
gëEx¥PåL
(Ë{  
	gL
; }

256 ˛as†
	cAndEx¥
 : 
public
 
BöEx¥
 {

257 
public
:

258 
AndEx¥
(
Ex¥På
 
r
, Ex¥På 
l
Ë: 
BöEx¥
‘,ÜË{
	gex¥ID
 = 
EXPR_And
;}

259 
AndEx¥
(
Ex¥På
 
r
, Ex¥På 
l
, 
sz
, 
off
Ë: 
BöEx¥
‘,Ü, sz, offË{
	gex¥ID
 = 
EXPR_And
;}

262 
Köd
 
gëKöd
(Ëc⁄° {  
	gAnd
; }

263 
Ex¥På
 
gëEx¥PåR
(Ë{  
	gR
; }

264 
Ex¥På
 
gëEx¥PåL
(Ë{  
	gL
; }

267 ˛as†
	cOrEx¥
 : 
public
 
BöEx¥
 {

268 
public
:

269 
OrEx¥
(
Ex¥På
 
r
, Ex¥På 
l
Ë: 
BöEx¥
‘,ÜË{
	gex¥ID
 = 
EXPR_Or
;}

270 
OrEx¥
(
Ex¥På
 
r
, Ex¥På 
l
, 
sz
, 
off
Ë: 
BöEx¥
‘,Ü, sz, offË{
	gex¥ID
 = 
EXPR_Or
;}

273 
Köd
 
gëKöd
(Ëc⁄° {  
	gOr
; }

274 
Ex¥På
 
gëEx¥PåR
(Ë{  
	gR
; }

275 
Ex¥På
 
gëEx¥PåL
(Ë{  
	gL
; }

278 ˛as†
	cX‹Ex¥
 : 
public
 
BöEx¥
 {

279 
public
:

280 
X‹Ex¥
(
Ex¥På
 
r
, Ex¥På 
l
Ë: 
BöEx¥
‘,ÜË{
	gex¥ID
 = 
EXPR_X‹
;}

281 
X‹Ex¥
(
Ex¥På
 
r
, Ex¥På 
l
, 
sz
, 
off
Ë: 
BöEx¥
‘,Ü, sz, offË{
	gex¥ID
 = 
EXPR_X‹
;}

284 
Köd
 
gëKöd
(Ëc⁄° {  
	gX‹
; }

285 
Ex¥På
 
gëEx¥PåR
(Ë{  
	gR
; }

286 
Ex¥På
 
gëEx¥PåL
(Ë{  
	gL
; }

289 ˛as†
	cShl_SÆEx¥
 : 
public
 
BöEx¥
 {

290 
public
:

291 
Shl_SÆEx¥
(
Ex¥På
 
r
, Ex¥På 
l
Ë: 
BöEx¥
‘,ÜË{
	gex¥ID
 = 
EXPR_Shl
;}

292 
Shl_SÆEx¥
(
Ex¥På
 
r
, Ex¥På 
l
, 
sz
, 
off
Ë: 
BöEx¥
‘,Ü, sz, offË{
	gex¥ID
 = 
EXPR_Shl
;}

295 
Köd
 
gëKöd
(Ëc⁄° {  
	gShl
; }

296 
Ex¥På
 
gëEx¥PåR
(Ë{  
	gR
; }

297 
Ex¥På
 
gëEx¥PåL
(Ë{  
	gL
; }

299 ˛as†
	cShrEx¥
 : 
public
 
BöEx¥
 {

300 
public
:

301 
ShrEx¥
(
Ex¥På
 
r
, Ex¥På 
l
Ë: 
BöEx¥
‘,ÜË{
	gex¥ID
 = 
EXPR_LShr
;}

302 
ShrEx¥
(
Ex¥På
 
r
, Ex¥På 
l
, 
sz
, 
off
Ë: 
BöEx¥
‘,Ü, sz, offË{
	gex¥ID
 = 
EXPR_LShr
;}

305 
Köd
 
gëKöd
(Ëc⁄° {  
	gLShr
; }

306 
Ex¥På
 
gëEx¥PåR
(Ë{  
	gR
; }

307 
Ex¥På
 
gëEx¥PåL
(Ë{  
	gL
; }

310 ˛as†
	cS¨Ex¥
 : 
public
 
BöEx¥
 {

311 
public
:

312 
S¨Ex¥
(
Ex¥På
 
r
, Ex¥På 
l
Ë: 
BöEx¥
‘,ÜË{
	gex¥ID
 = 
EXPR_AShr
;}

313 
S¨Ex¥
(
Ex¥På
 
r
, Ex¥På 
l
, 
sz
, 
off
Ë: 
BöEx¥
‘,Ü, sz, offË{
	gex¥ID
 = 
EXPR_AShr
;}

316 
Köd
 
gëKöd
(Ëc⁄° {  
	gAShr
; }

317 
Ex¥På
 
gëEx¥PåR
(Ë{  
	gR
; }

318 
Ex¥På
 
gëEx¥PåL
(Ë{  
	gL
; }

321 ˛as†
	ciDivEx¥
 : 
public
 
BöEx¥
 {

322 
public
:

324 
iDivEx¥
(
Ex¥På
 
r
, Ex¥På 
l
Ë: 
BöEx¥
‘,ÜË{
	gex¥ID
 = 
EXPR_SDiv
;}

325 
iDivEx¥
(
Ex¥På
 
r
, Ex¥På 
l
, 
sz
, 
off
Ë: 
BöEx¥
‘,Ü, sz, offË{
	gex¥ID
 = 
EXPR_SDiv
;}

328 
Köd
 
gëKöd
(Ëc⁄° {  
	gSDiv
; }

329 
Ex¥På
 
gëEx¥PåR
(Ë{  
	gR
; }

330 
Ex¥På
 
gëEx¥PåL
(Ë{  
	gL
; }

333 ˛as†
	ciRemEx¥
 : 
public
 
BöEx¥
 {

334 
public
:

335 
iRemEx¥
(
Ex¥På
 
r
, Ex¥På 
l
Ë: 
BöEx¥
‘,ÜË{
	gex¥ID
 = 
EXPR_SRem
;}

336 
iRemEx¥
(
Ex¥På
 
r
, Ex¥På 
l
, 
sz
, 
off
Ë: 
BöEx¥
‘,Ü, sz, offË{
	gex¥ID
 = 
EXPR_SRem
;}

339 
Köd
 
gëKöd
(Ëc⁄° {  
	gSRem
; }

340 
Ex¥På
 
gëEx¥PåR
(Ë{  
	gR
; }

341 
Ex¥På
 
gëEx¥PåL
(Ë{  
	gL
; }

344 ˛as†
	cUryEx¥
 : 
public
 
Ex¥
 {

345 
¥Ÿe˘ed
:

346 
Ex¥På
 
E
;

347 
UryEx¥
(
Ex¥På
 
e
Ë: 
E
(e) {}

348 
UryEx¥
(
Ex¥På
 
e
, 
sz
, 
off
Ë: 
Ex¥
(sz, off), 
E
(e) {}

350 
	gpublic
:

351 
vútuÆ
 
¥öt
 () ;

354 
Köd
 
gëKöd
(Ëc⁄° {  
	gUry
; }

355 
Ex¥På
 
gëEx¥På
(Ë{  
	gE
; }

359 ˛as†
	cNegEx¥
 : 
public
 
UryEx¥
 {

360 
public
:

361 
NegEx¥
(
Ex¥På
 
e
Ë: 
UryEx¥
”Ë{
ex¥ID
 = 
EXPR_Neg
;}

362 
NegEx¥
(
Ex¥På
 
e
, 
sz
, 
off
Ë: 
UryEx¥
”, sz, offË{
	gex¥ID
 = 
EXPR_Neg
;}

365 
Köd
 
gëKöd
(Ëc⁄° {  
	gNeg
; }

366 
Ex¥På
 
gëEx¥På
(Ë{  
	gE
; }

369 ˛as†
	cNŸEx¥
 : 
public
 
UryEx¥
 {

370 
public
:

371 
NŸEx¥
(
Ex¥På
 
e
Ë: 
UryEx¥
”Ë{
ex¥ID
 = 
EXPR_NŸ
;}

372 
NŸEx¥
(
Ex¥På
 
e
, 
sz
, 
off
Ë: 
UryEx¥
”, sz, offË{
	gex¥ID
 = 
EXPR_NŸ
;}

375 
Köd
 
gëKöd
(Ëc⁄° {  
	gNŸ
; }

376 
Ex¥På
 
gëEx¥På
(Ë{  
	gE
; }

379 ˛as†
	cLNŸEx¥
 : 
public
 
UryEx¥
 {

380 
public
:

381 
LNŸEx¥
(
Ex¥På
 
e
Ë: 
UryEx¥
”Ë{
ex¥ID
 = 
EXPR_LNŸ
;}

382 
LNŸEx¥
(
Ex¥På
 
e
, 
sz
, 
off
Ë: 
UryEx¥
”, sz, offË{
	gex¥ID
 = 
EXPR_LNŸ
;}

385 
Köd
 
gëKöd
(Ëc⁄° {  
	gLNŸ
; }

386 
Ex¥På
 
gëEx¥På
(Ë{  
	gE
; }

389 ˛as†
	cSignExtEx¥
 : 
public
 
UryEx¥
 {

390 
public
:

391 
SignExtEx¥
(
Ex¥På
 
e
Ë: 
UryEx¥
”Ë{
ex¥ID
 = 
EXPR_SignEXT
;}

392 
SignExtEx¥
(
Ex¥På
 
e
, 
sz
, 
off
Ë: 
UryEx¥
”, sz, offË{
	gex¥ID
 = 
EXPR_SignEXT
;}

395 
Köd
 
gëKöd
(Ëc⁄° {  
	gSign
; }

396 
Ex¥På
 
gëEx¥På
(Ë{  
	gE
; }

399 ˛as†
	cZîoExtEx¥
 : 
public
 
UryEx¥
 {

400 
public
:

401 
ZîoExtEx¥
(
Ex¥På
 
e
Ë: 
UryEx¥
”Ë{
ex¥ID
 = 
EXPR_ZîoEXT
;}

402 
ZîoExtEx¥
(
Ex¥På
 
e
, 
sz
, 
off
Ë: 
UryEx¥
”, sz, offË{
	gex¥ID
 = 
EXPR_ZîoEXT
;}

405 
Köd
 
gëKöd
(Ëc⁄° {  
	gZîoEXT
; }

406 
Ex¥På
 
gëEx¥På
(Ë{  
	gE
; }

409 ˛as†
	cEquÆEx¥
 : 
public
 
UryEx¥
 {

410 
public
:

411 
EquÆEx¥
(
Ex¥På
 
e
Ë: 
UryEx¥
”Ë{
ex¥ID
 = 
EXPR_EquÆ
;}

412 
EquÆEx¥
(
Ex¥På
 
e
, 
sz
, 
off
Ë: 
UryEx¥
”, sz, offË{
	gex¥ID
 = 
EXPR_EquÆ
;}

415 
Köd
 
gëKöd
(Ëc⁄° {  
	gEquÆ
; }

416 
Ex¥På
 
gëEx¥På
(Ë{ 
	gE
; }

419 ˛as†
	cDi°ö˘Ex¥
 : 
public
 
UryEx¥
 {

420 
public
:

421 
Di°ö˘Ex¥
(
Ex¥På
 
e
Ë: 
UryEx¥
”Ë{
ex¥ID
 = 
EXPR_Di°ö˘
;}

422 
Di°ö˘Ex¥
(
Ex¥På
 
e
, 
sz
, 
off
Ë: 
UryEx¥
”, sz, offË{
	gex¥ID
 = 
EXPR_Di°ö˘
;}

425 
Köd
 
gëKöd
(Ëc⁄° {  
	gDi°ö˘
; }

426 
Ex¥På
 
gëEx¥På
(Ë{  
	gE
; }

429 ˛as†
	cU…Ex¥
 : 
public
 
BöEx¥
 {

430 
public
:

431 
U…Ex¥
(
Ex¥På
 
r
, Ex¥På 
l
Ë: 
BöEx¥
‘,ÜË{
	gex¥ID
 = 
EXPR_U…
;}

432 
U…Ex¥
(
Ex¥På
 
r
, Ex¥På 
l
, 
sz
, 
off
Ë: 
BöEx¥
‘,Ü, sz, offË{
	gex¥ID
 = 
EXPR_U…
;}

435 
Köd
 
gëKöd
(Ëc⁄° {  
	gU…
; }

436 
Ex¥På
 
gëEx¥PåR
(Ë{  
	gR
; }

437 
Ex¥På
 
gëEx¥PåL
(Ë{  
	gL
; }

440 ˛as†
	cUÀEx¥
 : 
public
 
BöEx¥
 {

441 
public
:

442 
UÀEx¥
(
Ex¥På
 
r
, Ex¥På 
l
Ë: 
BöEx¥
‘,ÜË{
	gex¥ID
 = 
EXPR_UÀ
;}

443 
UÀEx¥
(
Ex¥På
 
r
, Ex¥På 
l
, 
sz
, 
off
Ë: 
BöEx¥
‘,Ü, sz, offË{
	gex¥ID
 = 
EXPR_UÀ
;}

446 
Köd
 
gëKöd
(Ëc⁄° {  
	gUÀ
; }

447 
Ex¥På
 
gëEx¥PåR
(Ë{  
	gR
; }

448 
Ex¥På
 
gëEx¥PåL
(Ë{  
	gL
; }

451 ˛as†
	cUgtEx¥
 : 
public
 
BöEx¥
 {

452 
public
:

453 
UgtEx¥
(
Ex¥På
 
r
, Ex¥På 
l
Ë: 
BöEx¥
‘,ÜË{
	gex¥ID
 = 
EXPR_Ugt
;}

454 
UgtEx¥
(
Ex¥På
 
r
, Ex¥På 
l
, 
sz
, 
off
Ë: 
BöEx¥
‘,Ü, sz, offË{
	gex¥ID
 = 
EXPR_Ugt
;}

457 
Köd
 
gëKöd
(Ëc⁄° {  
	gUgt
; }

458 
Ex¥På
 
gëEx¥PåR
(Ë{  
	gR
; }

459 
Ex¥På
 
gëEx¥PåL
(Ë{  
	gL
; }

462 ˛as†
	cUgeEx¥
 : 
public
 
BöEx¥
 {

463 
public
:

464 
UgeEx¥
(
Ex¥På
 
r
, Ex¥På 
l
Ë: 
BöEx¥
‘,ÜË{
	gex¥ID
 = 
EXPR_Uge
;}

465 
UgeEx¥
(
Ex¥På
 
r
, Ex¥På 
l
, 
sz
, 
off
Ë: 
BöEx¥
‘,Ü, sz, offË{
	gex¥ID
 = 
EXPR_Uge
;}

468 
Köd
 
gëKöd
(Ëc⁄° {  
	gUge
; }

469 
Ex¥På
 
gëEx¥PåR
(Ë{  
	gR
; }

470 
Ex¥På
 
gëEx¥PåL
(Ë{  
	gL
; }

473 ˛as†
	cS…Ex¥
 : 
public
 
BöEx¥
 {

474 
public
:

475 
S…Ex¥
(
Ex¥På
 
r
, Ex¥På 
l
Ë: 
BöEx¥
‘,ÜË{
	gex¥ID
 = 
EXPR_S…
;}

476 
S…Ex¥
(
Ex¥På
 
r
, Ex¥På 
l
, 
sz
, 
off
Ë: 
BöEx¥
‘,Ü, sz, offË{
	gex¥ID
 = 
EXPR_S…
;}

479 
Köd
 
gëKöd
(Ëc⁄° {  
	gS…
; }

480 
Ex¥På
 
gëEx¥PåR
(Ë{  
	gR
; }

481 
Ex¥På
 
gëEx¥PåL
(Ë{  
	gL
; }

484 ˛as†
	cSÀEx¥
 : 
public
 
BöEx¥
 {

485 
public
:

486 
SÀEx¥
(
Ex¥På
 
r
, Ex¥På 
l
Ë: 
BöEx¥
‘,ÜË{
	gex¥ID
 = 
EXPR_SÀ
;}

487 
SÀEx¥
(
Ex¥På
 
r
, Ex¥På 
l
, 
sz
, 
off
Ë: 
BöEx¥
‘,Ü, sz, offË{
	gex¥ID
 = 
EXPR_SÀ
;}

490 
Köd
 
gëKöd
(Ëc⁄° {  
	gSÀ
; }

491 
Ex¥På
 
gëEx¥PåR
(Ë{  
	gR
; }

492 
Ex¥På
 
gëEx¥PåL
(Ë{  
	gL
; }

495 ˛as†
	cSgtEx¥
 : 
public
 
BöEx¥
 {

496 
public
:

497 
SgtEx¥
(
Ex¥På
 
r
, Ex¥På 
l
Ë: 
BöEx¥
‘,ÜË{
	gex¥ID
 = 
EXPR_Sgt
;}

498 
SgtEx¥
(
Ex¥På
 
r
, Ex¥På 
l
, 
sz
, 
off
Ë: 
BöEx¥
‘,Ü, sz, offË{
	gex¥ID
 = 
EXPR_Sgt
;}

501 
Köd
 
gëKöd
(Ëc⁄° {  
	gSgt
; }

502 
Ex¥På
 
gëEx¥PåR
(Ë{  
	gR
; }

503 
Ex¥På
 
gëEx¥PåL
(Ë{  
	gL
; }

506 ˛as†
	cSgeEx¥
 : 
public
 
BöEx¥
 {

507 
public
:

508 
SgeEx¥
(
Ex¥På
 
r
, Ex¥På 
l
Ë: 
BöEx¥
‘,ÜË{
	gex¥ID
 = 
EXPR_Sge
;}

509 
SgeEx¥
(
Ex¥På
 
r
, Ex¥På 
l
, 
sz
, 
off
Ë: 
BöEx¥
‘,Ü, sz, offË{
	gex¥ID
 = 
EXPR_Sge
;}

512 
Köd
 
gëKöd
(Ëc⁄° {  
	gSge
; }

513 
Ex¥På
 
gëEx¥PåR
(Ë{  
	gR
; }

514 
Ex¥På
 
gëEx¥PåL
(Ë{  
	gL
; }

517 ˛as†
	cSignEx¥
 : 
public
 
UryEx¥
 {

518 
public
:

519 
SignEx¥
(
Ex¥På
 
e
Ë: 
UryEx¥
”Ë{
ex¥ID
 = 
EXPR_Sign
;}

520 
SignEx¥
(
Ex¥På
 
e
, 
sz
, 
off
Ë: 
UryEx¥
”, sz, offË{
	gex¥ID
 = 
EXPR_Sign
;}

523 
Köd
 
gëKöd
(Ëc⁄° {  
	gSign
; }

524 
Ex¥På
 
gëEx¥På
(Ë{  
	gE
; }

527 ˛as†
	cNoSignEx¥
 : 
public
 
UryEx¥
 {

528 
public
:

529 
NoSignEx¥
(
Ex¥På
 
e
Ë: 
UryEx¥
”Ë{
ex¥ID
 = 
EXPR_NoSign
;}

530 
NoSignEx¥
(
Ex¥På
 
e
, 
sz
, 
off
Ë: 
UryEx¥
”, sz, offË{
	gex¥ID
 = 
EXPR_NoSign
;}

533 
Köd
 
gëKöd
(Ëc⁄° {  
	gNoSign
; }

534 
Ex¥På
 
gëEx¥På
(Ë{  
	gE
; }

536 ˛as†
	cOvîÊowEx¥
 : 
public
 
UryEx¥
 {

537 
public
:

538 
OvîÊowEx¥
(
Ex¥På
 
e
Ë: 
UryEx¥
”Ë{
ex¥ID
 = 
EXPR_OvîÊow
;}

539 
OvîÊowEx¥
(
Ex¥På
 
e
, 
sz
, 
off
Ë: 
UryEx¥
”, sz, offË{
	gex¥ID
 = 
EXPR_OvîÊow
;}

542 
Köd
 
gëKöd
(Ëc⁄° {  
	gOvîÊow
;}

543 
Ex¥På
 
gëEx¥På
(Ë{  
	gE
; }

545 ˛as†
	cNoOvîÊowEx¥
 : 
public
 
UryEx¥
 {

546 
public
:

547 
NoOvîÊowEx¥
(
Ex¥På
 
e
Ë: 
UryEx¥
”Ë{
ex¥ID
 = 
EXPR_NoOvîÊow
;}

548 
NoOvîÊowEx¥
(
Ex¥På
 
e
, 
sz
, 
off
Ë: 
UryEx¥
”, sz, offË{
	gex¥ID
 = 
EXPR_NoOvîÊow
;}

551 
Köd
 
gëKöd
(Ëc⁄° {  
	gNoOvîÊow
; }

552 
Ex¥På
 
gëEx¥På
(Ë{  
	gE
; }

555 ˛as†
	cTriEx¥
 : 
public
 
Ex¥
 {

556 
¥Ÿe˘ed
:

557 
Ex¥På
 
R
, 
	gM
, 
	gL
;

559 
TriEx¥
(
Ex¥På
 
r
, Ex¥På 
m
, Ex¥På 
l
Ë: 
R
‘), 
M
(m), 
L
(l) {}

560 
TriEx¥
(
Ex¥På
 
r
, Ex¥På 
m
, Ex¥På 
l
, 
sz
, 
off
Ë: 
Ex¥
(sz, off), 
R
‘), 
M
(m), 
L
(l) {}

562 
¥öt
 () ;

565 
Köd
 
gëKöd
(Ëc⁄° {  
	gTri
; }

566 
Ex¥På
 
gëEx¥PåR
(Ë{  
	gR
; }

567 
Ex¥På
 
gëEx¥PåM
(Ë{  
	gM
; }

568 
Ex¥På
 
gëEx¥PåL
(Ë{  
	gL
; }

571 ˛as†
	cShrdEx¥
 :
public
 
TriEx¥
 {

572 
public
:

573 
ShrdEx¥
(
Ex¥På
 
r
, Ex¥På 
m
, Ex¥På 
l
Ë:
TriEx¥
‘, m,ÜË{
	gex¥ID
 = 
EXPR_Shrd
;}

574 
ShrdEx¥
(
Ex¥På
 
r
, Ex¥På 
m
, Ex¥På 
l
, 
sz
, 
off
Ë: 
TriEx¥
‘, m,Ü, sz, offË{
	gex¥ID
 = 
EXPR_Shrd
;}

577 
Köd
 
gëKöd
(Ëc⁄° {  
	gShrd
; }

578 
Ex¥På
 
gëEx¥PåR
(Ë{  
	gR
; }

579 
Ex¥På
 
gëEx¥PåM
(Ë{  
	gM
; }

580 
Ex¥På
 
gëEx¥PåL
(Ë{  
	gL
; }

583 ˛as†
	cComböeEx¥
 :
public
 
BöEx¥
 {

584 
public
:

585 
rsz
, 
	glsz
 ;

587 
ComböeEx¥
(
Ex¥På
 
r
, Ex¥På 
l
, 
rsize
, 
lsize
Ë:
BöEx¥
‘,ÜË{
	gex¥ID
 = 
EXPR_Comböe
;
	grsz
Ùsize; 
	glsz
=lsize;}

588 
ComböeEx¥
(
Ex¥På
 
r
, Ex¥På 
l
, 
rsize
, 
lsize
, 
sz
, 
off
Ë: 
BöEx¥
‘,Ü, sz, offË{
	gex¥ID
 = 
EXPR_Comböe
;
	grsz
Ùsize; 
	glsz
=lsize;}

591 
Köd
 
gëKöd
(Ëc⁄° {  
	gComböe
; }

592 
Ex¥På
 
gëEx¥PåR
(Ë{  
	gR
; }

593 
Ex¥På
 
gëEx¥PåL
(Ë{  
	gL
; }

595 ˛as†
	cExåa˘Ex¥
 : 
public
 
UryEx¥
 {

596 
public
:

597 
s
, 
	ge
;

598 
Exåa˘Ex¥
(
Ex¥På
 
ex¥
, 
°¨t
, 
íd
Ë: 
UryEx¥
”x¥Ë{
ex¥ID
 = 
EXPR_Exåa˘
;
	gs
=°¨t; 
	ge
=end;}

599 
Exåa˘Ex¥
(
Ex¥På
 
ex¥
, 
°¨t
, 
íd
, 
sz
, 
off
Ë: 
UryEx¥
”x¥, sz, offË{
	gex¥ID
 = 
EXPR_Exåa˘
;
	gs
=°¨t; 
	ge
=end;}

601 
vútuÆ
 
¥öt
 () ;

604 
Köd
 
gëKöd
(Ëc⁄° {  
	gExåa˘
; }

605 
Ex¥På
 
gëEx¥På
(Ë{ 
	gE
; }

606 
gëSèπ
(){  
	gs
; }

607 
gëEnd
(){  
	ge
; }

	@/home/jqhong/Documents/KernelSE/MemState.cpp

1 
	~"MemSèã.h
"

3 
	~<sig«l.h
>

4 
	~<uc⁄ãxt.h
>

6 
	~<fun˘i⁄Æ
>

7 
	~<°rög
>

9 
	~"CPUSèã.h
"

10 
	~"CodeObje˘.h
"

11 
	~"Ex¥essi⁄.h
"

12 
	~"In°ru˘i⁄Decodî.h
"

14 
	~"Ex¥.h
"

16 
usög
 
«me•a˚
 
	g°d
;

17 
usög
 
«me•a˚
 
	gDynö°
;

18 
usög
 
«me•a˚
 
	gP¨£API
;

19 
usög
 
«me•a˚
 
	gIn°ru˘i⁄API
;

20 
usög
 
«me•a˚
 
	gEXPR
;

24 
SYMemChunk
 *
	gSYMemBôm≠
::
	$m¨kSYMemBôm≠
(
ul⁄g
 
addr
, ul⁄g 
size
) {

25 
ul⁄g
 
Æig√d_addr
 = 
addr
 & 
SYMEM_BLOCK_MASK
;

26 
ul⁄g
 
hˇve_sz
 = 
addr
 - 
Æig√d_addr
;

27 
ul⁄g
 
Æign_sz
 = 
hˇve_sz
 + 
size
;

28 
SYMemChunk
 *
m
, *
r
;

30 i‡(
Æign_sz
 > 
SYMEM_BLOCK_SIZE
) {

31 
ul⁄g
 
sz
 = 
SYMEM_BLOCK_SIZE
 - 
hˇve_sz
;

32 
m
 = 
	`_maskSYMemBôm≠
(
Æig√d_addr
, 
hˇve_sz
, 
sz
);

33 
r
 = 
	`m¨kSYMemBôm≠
(
Æig√d_addr
 + 
SYMEM_BLOCK_SIZE
, 
size
 - 
sz
);

34 
m
->
r
 =Ñ;

35 
r
->
l
 = 
m
;

37 
ul⁄g
 
sz
 = 
size
 ;

38 
m
 = 
	`_maskSYMemBôm≠
(
Æig√d_addr
, 
hˇve_sz
, 
sz
);

40  
m
;

41 
	}
}

43 
SYMemChunk
 *
	gSYMemBôm≠
::
	$_maskSYMemBôm≠
(
ul⁄g
 
Æig√d_addr
, ul⁄g 
hˇve_sz
, ul⁄g 
symbﬁ_size
) {

44 
SYMemChunkPå
 
blk
;

45 autÿ
ô
 = 
m_SYMemBôm≠
.
	`föd
(
Æig√d_addr
);

46 i‡(
ô
 =
m_SYMemBôm≠
.
	`íd
()) {

47 
blk
.
	`ª£t
(
√w
 
	`SYMemChunk
());

48 
m_SYMemBôm≠
[
Æig√d_addr
] = 
blk
;

50 
blk
 = 
ô
->
£c⁄d
;

52 
SYMemChunk
 *
c
 = 
blk
.
	`gë
();

54 
SYMEM_CHUNK_TY
 
Æl⁄es
 = -1U;

55 
SYMEM_CHUNK_TY
 
m1
 = 
Æl⁄es
 << 
hˇve_sz
;

56 
SYMEM_CHUNK_TY
 
m2
 = 
Æl⁄es
 >> (
SYMEM_BLOCK_SIZE
 - 
hˇve_sz
 - 
symbﬁ_size
);

57 
SYMEM_CHUNK_TY
 
mm
 = 
m1
 & 
m2
;

59 
c
->
bôm≠
 |
mm
;

60  
c
;

61 
	}
}

63 
	gSYMemBôm≠
::
	$unm¨kSYMemBôm≠
(
ul⁄g
 
addr
, ul⁄g 
size
) {

64 
ul⁄g
 
Æig√d_addr
 = 
addr
 & 
SYMEM_BLOCK_MASK
;

65 
ul⁄g
 
hˇve_sz
 = 
addr
 - 
Æig√d_addr
;

66 
ul⁄g
 
Æign_sz
 = 
hˇve_sz
 + 
size
;

68 i‡(
Æign_sz
 > 
SYMEM_BLOCK_SIZE
) {

69 
ul⁄g
 
sz
 = 
SYMEM_BLOCK_SIZE
 - 
hˇve_sz
;

70 
	`_unmaskSYMemBôm≠
(
Æig√d_addr
, 
hˇve_sz
, 
sz
);

71 
	`unm¨kSYMemBôm≠
(
Æig√d_addr
 + 
SYMEM_BLOCK_SIZE
, 
size
 - 
sz
);

73 
ul⁄g
 
sz
 = 
size
 ;

74 
	`_unmaskSYMemBôm≠
(
Æig√d_addr
, 
hˇve_sz
, 
sz
);

76 
	}
}

78 
	gSYMemBôm≠
::
	$_unmaskSYMemBôm≠
(
ul⁄g
 
Æig√d_addr
, ul⁄g 
ˇve_sz
, ul⁄g 
symbﬁ_size
) {

79 autÿ
ô
 = 
m_SYMemBôm≠
.
	`föd
(
Æig√d_addr
);

80 i‡(
ô
 =
m_SYMemBôm≠
.
	`íd
())

83 
SYMemChunkPå
 
blk
 = 
ô
->
£c⁄d
;

84 
SYMEM_CHUNK_TY
 
Æl⁄es
 = -1U;

85 
SYMEM_CHUNK_TY
 
m1
 = 
Æl⁄es
 << 
ˇve_sz
;

86 
SYMEM_CHUNK_TY
 
m2
 = 
Æl⁄es
 >> (
SYMEM_BLOCK_SIZE
 - 
ˇve_sz
 - 
symbﬁ_size
);

87 
SYMEM_CHUNK_TY
 
mm
 = ~(
m1
 & 
m2
);

89 
blk
->
bôm≠
 &
mm
;

90 i‡(
blk
->
bôm≠
 == 0) {

91 
m_SYMemBôm≠
.
	`îa£
(
ô
);

93 
	}
}

96 
boﬁ
 
	gSYMemBôm≠
::
	$ã°SYMemBôm≠
(
ul⁄g
 
addr
, ul⁄g 
size
) {

97 
ul⁄g
 
Æig√d_addr
 = 
addr
 & 
SYMEM_BLOCK_MASK
;

98 
ul⁄g
 
hˇve_sz
 = 
addr
 - 
Æig√d_addr
;

99 
ul⁄g
 
Æign_sz
 = 
hˇve_sz
 + 
size
;

101 i‡(
Æign_sz
 > 
SYMEM_BLOCK_SIZE
) {

102 
ul⁄g
 
sz
 = 
SYMEM_BLOCK_SIZE
 - 
hˇve_sz
;

103 
boﬁ
 
ªs1
 = 
	`_ã°SYMemBôm≠
(
Æig√d_addr
, 
hˇve_sz
, 
sz
);

104 
boﬁ
 
ªs2
 = 
	`ã°SYMemBôm≠
(
Æig√d_addr
 + 
SYMEM_BLOCK_SIZE
, 
size
 - 
sz
);

105  
ªs1
 | 
ªs2
;

107 
ul⁄g
 
sz
 = 
size
 ;

108  
	`_ã°SYMemBôm≠
(
Æig√d_addr
, 
hˇve_sz
, 
sz
);

110 
	}
}

112 
boﬁ
 
	gSYMemBôm≠
::
	$_ã°SYMemBôm≠
(
ul⁄g
 
Æig√d_addr
, ul⁄g 
ˇve_sz
, ul⁄g 
symbﬁ_size
) {

113 autÿ
ô
 = 
m_SYMemBôm≠
.
	`föd
(
Æig√d_addr
);

114 i‡(
ô
 =
m_SYMemBôm≠
.
	`íd
())

115  
Ál£
;

117 
SYMemChunkPå
 
blk
 = 
ô
->
£c⁄d
;

118 
SYMEM_CHUNK_TY
 
Æl⁄es
 = -1U;

119 
SYMEM_CHUNK_TY
 
m1
 = 
Æl⁄es
 << 
ˇve_sz
;

120 
SYMEM_CHUNK_TY
 
m2
 = 
Æl⁄es
 >> (
SYMEM_BLOCK_SIZE
 - 
ˇve_sz
 - 
symbﬁ_size
);

121 
SYMEM_CHUNK_TY
 
mm
 = 
m1
 & 
m2
;

123  ((
blk
->
bôm≠
 & 
mm
) != 0);

124 
	}
}

126 
SYMemChunk
 *
	gSYMemBôm≠
::
	$födSYMemChunk
(
ul⁄g
 
addr
) {

127 
ul⁄g
 
Æig√d_addr
 = 
addr
 & 
SYMEM_BLOCK_MASK
;

128 autÿ
ô
 = 
m_SYMemBôm≠
.
	`föd
(
Æig√d_addr
);

129 i‡(
ô
 =
m_SYMemBôm≠
.
	`íd
())

130  
NULL
;

132  (
ô
->
£c⁄d
).
	`gë
();

133 
	}
}

222 
boﬁ
 
	gSYMemSèã
::
	$isSYMem‹yCñl
(
ul⁄g
 
addr
, ul⁄g 
size
) {

223  
m_Bôm≠
.
	`ã°SYMemBôm≠
(
addr
, 
size
);

224 
	}
}

226 
boﬁ
 
	gSYMemSèã
::
	$wrôeMem‹yCñl
(
MemVÆue
 &
v
) {

228 
ul⁄g
 
addr
 = 
v
.addr;

229 
ul⁄g
 
size
 = 
v
.size;

230 i‡(
v
.
bsym
) {

231  
	`wrôeSymbﬁicVÆue
(
addr
, 
size
, 
v
.
ex¥
);

233 
m_Bôm≠
.
	`unm¨kSYMemBôm≠
(
addr
, 
size
) ;

234  
	`wrôeC⁄¸ëeVÆue
(
addr
, 
size
, 
v
.
i64
);

236 
	}
}

238 
boﬁ
 
	gSYMemSèã
::
	$ªadMem‹yCñl
(
MemVÆue
 &
v
) {

240 
ul⁄g
 
addr
 = 
v
.addr;

241 
ul⁄g
 
size
 = 
v
.size;

242 
v
.
bsym
 = 
m_Bôm≠
.
	`ã°SYMemBôm≠
(
addr
, 
size
);

244 i‡(
v
.
bsym
) {

245  
	`ªadSymbﬁicVÆue
(
addr
, 
size
, 
v
.
ex¥
);

247  
	`ªadC⁄¸ëeVÆue
(
addr
, 
size
, 
v
.
i64
);

249 
	}
}

251 
boﬁ
 
	gSYMemSèã
::
	$wrôeSymbﬁicVÆue
(
ul⁄g
 
addr
, ul⁄g 
size
, 
KVEx¥På
 &
e
) {

252 
ul⁄g
 
Æig√d_addr
 = 
addr
 & 
SYMEM_BLOCK_MASK
;

253 
ul⁄g
 
hˇve_sz
 = 
addr
 - 
Æig√d_addr
;

254 i‡(
hˇve_sz
 + 
size
 > 
SYMEM_BLOCK_SIZE
) {

255 
	`FIX_ME
();

256  
Ál£
;

258 
	`as£π
((
addr
&0xf)+
size
<=16) ;

260 
SYMemChunk
 *
c
 = 
m_Bôm≠
.
	`m¨kSYMemBôm≠
(
addr
, 
size
);

261 
	`as£π
(
c
 !
NULL
);

263 
SYMEM_CHUNK_TY
 
Æl⁄es
 = -1U;

264 
SYMEM_CHUNK_TY
 
m1
 = 
Æl⁄es
 << 
hˇve_sz
;

265 
SYMEM_CHUNK_TY
 
m2
 = 
Æl⁄es
 >> (
SYMEM_BLOCK_SIZE
 - 
size
 - 
hˇve_sz
);

266 
SYMEM_CHUNK_TY
 
mm
 = 
m1
 & 
m2
;

268 i‡(((
mm
 & 
c
->
objmask
) == 0) ||

269 ((
mm
 & 
c
->
objmask
) == c->objmask))

272 
SYMemCñlVÆuePå
 
±r
;

273 
ul⁄g
 
ID
 = 
	`CñlHash
(
addr
, 
size
);

274 autÿ
ô
 = 
m_SYMemCñls
.
	`föd
(
ID
);

276 i‡(
ô
 !
m_SYMemCñls
.
	`íd
()) {

277 
±r
 = 
ô
->
£c⁄d
;

278 
±r
->
	`wrôeRóº™ge
(
addr
, 
size
, 
e
) ;

281 
±r
.
	`ª£t
(
√w
 
	`SYMemCñlVÆue
({
addr
, 
size
, 
e
, 
this
}));

282 
m_SYMemCñls
[
ID
] = 
±r
;

283 
±r
->
	`wrôeRóº™ge
(
addr
, 
size
, 
e
) ;

286 
c
->
objmask
 = 
mm
;

287  
åue
;

291 
SYMemCñlVÆuePå
 
±r
;

292 
ul⁄g
 
ID
 = 
	`CñlHash
(
addr
, 
size
);

293 autÿ
ô
 = 
m_SYMemCñls
.
	`föd
(
ID
);

295 i‡(
ô
 !
m_SYMemCñls
.
	`íd
()) {

296 
±r
 = 
ô
->
£c⁄d
;

297 
±r
->
	`wrôeRóº™ge
 (
addr
, 
size
, 
e
) ;

298 
±r
->
e
 =É ;

299  
åue
 ;

302 
	}
}

304 
boﬁ
 
	gSYMemSèã
::
	$ªadSymbﬁicVÆue
(
ul⁄g
 
addr
, ul⁄g 
size
, 
KVEx¥På
 &
e
) {

306 
ul⁄g
 
ID
 = 
	`CñlHash
(
addr
, 
size
);

307 autÿ
ô
 = 
m_SYMemCñls
.
	`föd
(
ID
);

309 
SYMemCñlVÆuePå
 
±r
 ;

310 i‡(
ô
 !
m_SYMemCñls
.
	`íd
()) {

311 
±r
 = 
ô
->
£c⁄d
;

312 if(
±r
->
addr
=˜dd∏&&Öå->
size
==size) {

313 
e
 = 
±r
->e;

314  
åue
;

320 
±r
->
	`ªadRóº™ge
(
addr
, 
size
, 
e
) ;

321  
åue
 ;

324 
ul⁄g
 
Æig√d_addr
 = 
addr
 & 
SYMEM_BLOCK_MASK
;

325 
ul⁄g
 
hˇve_sz
 = 
addr
 - 
Æig√d_addr
;

326 i‡(
hˇve_sz
 + 
size
 > 
SYMEM_BLOCK_SIZE
) {

327 
	`FIX_ME
();

328  
Ál£
;

331 
SYMemChunk
 *
c
 = 
m_Bôm≠
.
	`födSYMemChunk
(
Æig√d_addr
);

332 
	`as£π
(
c
 !
NULL
);

334 
SYMEM_CHUNK_TY
 
Æl⁄es
 = -1U;

335 
SYMEM_CHUNK_TY
 
m1
 = 
Æl⁄es
 << 
hˇve_sz
;

336 
SYMEM_CHUNK_TY
 
m2
 = 
Æl⁄es
 >> (
SYMEM_BLOCK_SIZE
 - 
size
 - 
hˇve_sz
);

337 
SYMEM_CHUNK_TY
 
mm
 = 
m1
 & 
m2
;

340 
	`as£π
((
mm
 & 
c
->
objmask
) != 0);

342 
	`as£π
((
mm
 & 
c
->
objmask
) != mm);

345 
	`FIX_ME
();

346  
Ál£
;

347 
	}
}

350 
boﬁ
 
	gSYMemSèã
::
	$wrôeC⁄¸ëeVÆue
(
ul⁄g
 
addªss
, ul⁄g 
size
, 
v
) {

352 
size
) {

354 *
addr
 = (*)
addªss
;

355 *
addr
 = ()
v
;

358 *
addr
 = (*)
addªss
;

359 *
addr
 = ()
v
;

362 *
addr
 = (*)
addªss
;

363 *
addr
 = ()
v
;

366 *
addr
 = (*)
addªss
;

367 *
addr
 = ()
v
;

370 
˚º
 << "UnexpectedÜength"

372  
Ál£
;

376 
SYMemCñlVÆuePå
 
±r
;

377 
ul⁄g
 
ID
 = 
	`CñlHash
(
addªss
, 
size
);

378 autÿ
ô
 = 
m_SYMemCñls
.
	`föd
(
ID
);

380 i‡(
ô
 !
m_SYMemCñls
.
	`íd
()) {

381 
±r
 = 
ô
->
£c⁄d
;

382 
±r
->
	`wrôeRóº™ge
(
addªss
, 
size
, 
NULL
) ;

385  
åue
;

386 
	}
}

388 
boﬁ
 
	gSYMemSèã
::
	$ªadC⁄¸ëeVÆue
(
ul⁄g
 
addªss
, ul⁄g 
size
, &
v
) {

389 
size
) {

391 *
addr
 = (*)
addªss
;

392 
v
 = (
ul⁄g
)(*
addr
);

395 *
addr
 = (*)
addªss
;

396 
v
 = (
ul⁄g
)(*
addr
);

399 *
addr
 = (*)
addªss
;

400 
v
 = (
ul⁄g
)(*
addr
);

403 *
addr
 = (*)
addªss
;

404 
v
 = (
ul⁄g
)(*
addr
);

407 
˚º
 << "UnexpectedÜength"

409  
Ál£
;

412  
åue
;

413 
	}
}

424 
	gSYMemCñlVÆue
::
	$Off£tSizeToIndex
(
ul⁄g
 
addr
, 
size
, ul⁄g &
˚Œaddr
, &
˚ŒSize
) {

426 
ªt
 ;

427 
size
) {

429 
˚ŒSize
 = 16 ;

430 
˚Œaddr
 = 
addr
 ;

431 
ªt
 = 
CELL_FULL
 ;

432 i‡(!(
addr
&0xf) == 0)

433 
ªt
 = -ret-1 ;

437 
˚ŒSize
 = 8 ;

438 
˚Œaddr
 = 
addr
 & (~0x7) ;

439 
ªt
 = (
addr
&0x8) ? 5 : 4 ;

440 i‡(!(
addr
&0x7)==0)

441 
ªt
 = -ret-1;

446 
˚ŒSize
 = 4 ;

447 
ªt
 = (
addr
&0xf) >> 2 ;

448 
˚Œaddr
 = 
addr
 & (~0x3) ;

449 i‡(!(
addr
&0x3) == 0) {

450 
ªt
 = -ret-1 ;

455 
˚ŒSize
 = 4 ;

456 
˚Œaddr
 = 
addr
 & (~0x3) ;

457 
ªt
 = (
addr
&0xf) >> 2 ;

458 i‡(!(
addr
&0x1) == 0) {

459 
ªt
 = -ret-1 ;

465 
˚ŒSize
 = 4 ;

466 
˚Œaddr
 = 
addr
 & (~0x3) ;

467 
ªt
 = (
addr
&0xf) >> 2;

471 
ªt
 = -256 ;

479  
ªt
 ;

480 
	}
}

482 
boﬁ
 
	gSYMemCñlVÆue
::
	$comböeChûdªn
(
CELL_p
, 
CELL_ch
, 
CELL_˛
, 
chûd_SZ
) {

484 i‡(
m_CñlS∂ôî
[
CELL_ch
].
bSym
 && !m_CñlS∂ôî[CELL_ch].
bVÆid
)

485  
Ál£
 ;

486 i‡(
m_CñlS∂ôî
[
CELL_ch
].
bSym
 && !m_CñlS∂ôî[CELL_ch].
bVÆid
)

487  
Ál£
 ;

490 
KVEx¥På
 
eh
, 
ñ
, 
î
 ;

491 
MemVÆue
 
mh
{
m_CñlS∂ôî
[
CELL_ch
].
addr
, (
ul⁄g
)
chûd_SZ
},

492 
ml
{
m_CñlS∂ôî
[
CELL_˛
].
addr
, (
ul⁄g
)
chûd_SZ
} ;

494 if(!
m_CñlS∂ôî
[
CELL_ch
].
bSym
) {

495 
eh
.
	`ª£t
(
√w
 
	`C⁄°Ex¥
(
mh
.
u64
)) ;

496 
m_Mem
->
	`ªadMem‹yCñl
(
mh
) ;

499 
eh
 = 
m_CñlS∂ôî
[
CELL_ch
].
symvÆ
 ;

501 if(!
m_CñlS∂ôî
[
CELL_˛
].
bSym
) {

502 
m_Mem
->
	`ªadMem‹yCñl
(
ml
) ;

503 
ñ
.
	`ª£t
(
√w
 
	`C⁄°Ex¥
(
ml
.
u64
)) ;

506 
ñ
 = 
m_CñlS∂ôî
[
CELL_˛
].
symvÆ
 ;

508 
m_CñlS∂ôî
[
CELL_p
].
bVÆid
 = 
åue
 ;

509 
m_CñlS∂ôî
[
CELL_p
].
bSym
 =

510 
m_CñlS∂ôî
[
CELL_ch
].
bSym
 || m_CñlS∂ôî[
CELL_˛
].bSym ;

512 i‡(
m_CñlS∂ôî
[
CELL_p
].
bSym
) {

513 
î
.
	`ª£t
(
√w
 
	`ComböeEx¥
(
eh
, 
ñ
, 
chûd_SZ
, child_SZ, child_SZ*2, 0)) ;

514 
m_CñlS∂ôî
[
CELL_p
].
symvÆ
 = 
î
 ;

516 
m_CñlS∂ôî
[
CELL_p
].
symvÆ
 = 
NULL
 ;

518  
åue
 ;

519 
	}
}

521 
boﬁ
 
	gSYMemCñlVÆue
::
	$comböeChûdªn
(
idx
) {

522 
idx
) {

523 
CELL_FULL
:

524 i‡(
m_CñlS∂ôî
[
CELL_8H
].
bSym
)

525 if(!
m_CñlS∂ôî
[
CELL_8H
].
bVÆid
)

526 
	`comböeChûdªn
(
CELL_8H
) ;

528 i‡(
m_CñlS∂ôî
[
CELL_8L
].
bSym
)

529 if(!
m_CñlS∂ôî
[
CELL_8L
].
bVÆid
)

530 
	`comböeChûdªn
(
CELL_8L
) ;

532  
	`comböeChûdªn
 (
CELL_FULL
, 
CELL_8H
, 
CELL_8L
 , 8) ;

535 
CELL_8L
:

536 if(
m_CñlS∂ôî
[
CELL_4_0
].
bSym
)

537 if(!
m_CñlS∂ôî
[
CELL_4_0
].
bVÆid
)

538  
Ál£
 ;

540 if(
m_CñlS∂ôî
[
CELL_4_1
].
bSym
)

541 if(!
m_CñlS∂ôî
[
CELL_4_1
].
bVÆid
)

542  
Ál£
 ;

544  
	`comböeChûdªn
 (
CELL_8L
, 
CELL_4_0
, 
CELL_4_1
, 4) ;

547 
CELL_8H
:

548 if(
m_CñlS∂ôî
[
CELL_4_2
].
bSym
)

549 if(!
m_CñlS∂ôî
[
CELL_4_2
].
bVÆid
)

550  
Ál£
 ;

552 if(
m_CñlS∂ôî
[
CELL_4_3
].
bSym
)

553 if(!
m_CñlS∂ôî
[
CELL_4_3
].
bVÆid
)

554  
Ál£
 ;

556  
	`comböeChûdªn
 (
CELL_8H
, 
CELL_4_2
, 
CELL_4_3
, 4) ;

559  
Ál£
 ;

561 
	}
}

563 
boﬁ
 
	gSYMemCñlVÆue
::
	$ªadRóº™ge
 (
ul⁄g
 
addr
, 
size
, 
KVEx¥På
 &
e
) {

565 
˚Œsize
 = 0 ;

566 
ul⁄g
 
˚Œaddr
 = 0 ;

567 
boﬁ
 
ªt
 = 
Ál£
 ;

569 
idx
 = 
	`Off£tSizeToIndex
(
addr
, 
size
, 
˚Œaddr
, 
˚Œsize
) ;

570 i‡(
idx
>=0) {

573 
	`as£π
 (
m_CñlS∂ôî
[
idx
].
bSym
) ;

574 i‡(!
m_CñlS∂ôî
[
idx
].
bVÆid
) {

576 
ªt
 = 
	`comböeChûdªn
(
idx
) ;

577 i‡(!
ªt
)

578 
ªt
 = 
	`S∂ô
(
idx
, 
˚Œsize
) ;

580 
	`as£π
 (
ªt
) ;

582 
	`as£π
(
m_CñlS∂ôî
[
idx
].
bVÆid
) ;

583 i‡(
size
 =
˚Œsize
) {

585 
e
=
m_CñlS∂ôî
[
idx
].
symvÆ
 ;

586 
	`Pröt
(0) ;

587  
åue
 ;

588 } i‡(
size
<
˚Œsize
) {

590 
off£t
 = 
addr
 & 0x3 ;

591 
e
.
	`ª£t
(
√w
 
	`Exåa˘Ex¥
(
m_CñlS∂ôî
[
idx
].
symvÆ
, 
off£t
, off£t+
size
, size, 0)) ;

592 
	`Pröt
(0) ;

593  
åue
 ;

596 
°d
::
cout
 << "No, cñlsizêsmÆÀ∏th™Ñód size: " << std::
hex


597 << 
addr
 << " " << 
size
 << 
°d
::
ídl
 ;

599 
	`FIX_ME
() ;

600  
Ál£
 ;

604 
°d
::
cout
 << "TO DO: NŸálig√d READ: " << std::
hex
 << 
addr
 << " "

605 << 
this
->
size
 << 
°d
::
ídl
 ;

607 
	`FIX_ME
() ;

608  
Ál£
 ;

611  
Ál£
 ;

612 
	}
}

614 
	g°rCñlName
[][8] = {"4_0", "4_1", "4_2", "4_3", "8_L", "8_H", "16"} ;

615 
boﬁ
 
	gSYMemCñlVÆue
::
	$Pröt
 (
idx
) {

627 
	}
}

631 
boﬁ
 
SYMemCñlVÆue
::
	$S∂ô
(
idx
, 
size
) {

633 i‡(
idx
 =
CELL_FULL
Ë 
Ál£
 ;

634 i‡(!
m_CñlS∂ôî
[
idx
].
bSym
Ë 
åue
 ;

635 i‡(
m_CñlS∂ôî
[
idx
].
bVÆid
Ë 
åue
 ;

636 i‡(
idx
==
CELL_8L
 || idx==
CELL_8H
) {

637 i‡(
m_CñlS∂ôî
[
CELL_FULL
].
bVÆid
) {

638 
KVEx¥På
 
e16
 = 
m_CñlS∂ôî
[
CELL_FULL
].
symvÆ
 ;

639 
KVEx¥På
 
	`e8l
(
√w
 
	`Exåa˘Ex¥
(
e16
, 0, 8, 8, 0)) ;

640 
KVEx¥På
 
	`e8h
(
√w
 
	`Exåa˘Ex¥
(
e16
, 8, 16, 8, 0)) ;

642 
m_CñlS∂ôî
[
CELL_8L
].
symvÆ
 = 
e8l
 ;

643 
m_CñlS∂ôî
[
CELL_8L
].
bVÆid
 = 
åue
 ;

644 
m_CñlS∂ôî
[
CELL_8L
].
bSym
 = 
åue
 ;

646 
m_CñlS∂ôî
[
CELL_8H
].
symvÆ
 = 
e8h
 ;

647 
m_CñlS∂ôî
[
CELL_8H
].
bVÆid
 = 
åue
 ;

648 
m_CñlS∂ôî
[
CELL_8H
].
bSym
 = 
åue
 ;

650  
åue
 ;

653  
Ál£
 ;

655 i‡(
idx
==
CELL_4_0
 || idx==
CELL_4_1
) {

656 i‡(!
m_CñlS∂ôî
[
CELL_8L
].
bVÆid
) {

657 
	`S∂ô
(
CELL_8L
, 
size
) ;

660 i‡(
m_CñlS∂ôî
[
CELL_8L
].
bVÆid
) {

661 
KVEx¥På
 
e8l
 = 
m_CñlS∂ôî
[
CELL_8L
].
symvÆ
 ;

662 
KVEx¥På
 
	`e4_0
(
√w
 
	`Exåa˘Ex¥
(
e8l
, 0, 4, 4, 0)) ;

663 
KVEx¥På
 
	`e4_1
(
√w
 
	`Exåa˘Ex¥
(
e8l
, 4, 8, 4, 0)) ;

665 
m_CñlS∂ôî
[
CELL_4_0
].
symvÆ
 = 
e4_0
 ;

666 
m_CñlS∂ôî
[
CELL_4_0
].
bVÆid
 = 
åue
 ;

667 
m_CñlS∂ôî
[
CELL_4_0
].
bSym
 = 
åue
 ;

669 
m_CñlS∂ôî
[
CELL_4_1
].
symvÆ
 = 
e4_1
 ;

670 
m_CñlS∂ôî
[
CELL_4_1
].
bVÆid
 = 
åue
 ;

671 
m_CñlS∂ôî
[
CELL_4_1
].
bSym
 = 
åue
 ;

672  
åue
 ;

674 i‡(
size
 >8) {

675  
	`S∂ô
(
CELL_4_2
, 
size
-8) ;

678 i‡(
idx
==
CELL_4_2
 || idx==
CELL_4_3
) {

679 i‡(!
m_CñlS∂ôî
[
CELL_8H
].
bVÆid
) {

680 
	`S∂ô
(
CELL_8H
, 
size
) ;

683 i‡(
m_CñlS∂ôî
[
CELL_8H
].
bVÆid
) {

684 
KVEx¥På
 
e8h
 = 
m_CñlS∂ôî
[
CELL_8H
].
symvÆ
 ;

685 
KVEx¥På
 
	`e4_2
(
√w
 
	`Exåa˘Ex¥
(
e8h
, 0, 4, 4, 0)) ;

686 
KVEx¥På
 
	`e4_3
(
√w
 
	`Exåa˘Ex¥
(
e8h
, 4, 8, 4, 0)) ;

688 
m_CñlS∂ôî
[
CELL_4_2
].
symvÆ
 = 
e4_2
 ;

689 
m_CñlS∂ôî
[
CELL_4_2
].
bVÆid
 = 
åue
 ;

690 
m_CñlS∂ôî
[
CELL_4_2
].
bSym
 = 
åue
 ;

692 
m_CñlS∂ôî
[
CELL_4_3
].
symvÆ
 = 
e4_3
 ;

693 
m_CñlS∂ôî
[
CELL_4_3
].
bVÆid
 = 
åue
 ;

694 
m_CñlS∂ôî
[
CELL_4_3
].
bSym
 = 
åue
 ;

695  
åue
 ;

697 i‡(
size
 >8) {

698 
°d
::
cout
 << "S∂ô mem‹y cñ»√edÅÿ¸os†16 bô†boundry :" << std::
hex
 << 
idx
 << "," << 
size
 << std::
ídl
 ;

699 
	`FIX_ME
() ;

700  
Ál£
;

703  
Ál£
 ;

704 
	}
}

708 
boﬁ
 
	gSYMemCñlVÆue
::
	$övÆidP¨ít
 (
idx
) {

710 
idx
) {

711 
CELL_4_0
:

712 
CELL_4_1
:

713 
m_CñlS∂ôî
[
CELL_8L
].
bVÆid
 = 
Ál£
 ;

715 
	`övÆidP¨ít
 (
CELL_8L
) ;

718 
CELL_4_2
:

719 
CELL_4_3
:

721 
m_CñlS∂ôî
[
CELL_8H
].
bVÆid
 = 
Ál£
 ;

723 
	`övÆidP¨ít
 (
CELL_8H
) ;

726 
CELL_8L
:

727 
CELL_8H
:

729 
m_CñlS∂ôî
[
CELL_FULL
].
bVÆid
 = 
Ál£
 ;

734 
CELL_FULL
:

735  
Ál£
;

738  
Ál£
 ;

740  
åue
 ;

741 
	}
}

743 
boﬁ
 
	gSYMemCñlVÆue
::
	$övÆidChûdªn
 (
idx
) {

745 
idx
) {

746 
CELL_4_0
:

747 
CELL_4_1
:

748 
CELL_4_2
:

749 
CELL_4_3
:

752 
CELL_8L
:

754 
m_CñlS∂ôî
[
CELL_4_0
].
bVÆid
 = 
Ál£
 ;

756 
m_CñlS∂ôî
[
CELL_4_1
].
bVÆid
 = 
Ál£
 ;

760 
CELL_8H
:

762 
m_CñlS∂ôî
[
CELL_4_2
].
bVÆid
 = 
Ál£
 ;

764 
m_CñlS∂ôî
[
CELL_4_3
].
bVÆid
 = 
Ál£
 ;

768 
CELL_FULL
:

770 
m_CñlS∂ôî
[
CELL_8L
].
bVÆid
 = 
Ál£
 ;

772 
m_CñlS∂ôî
[
CELL_8H
].
bVÆid
 = 
Ál£
 ;

774 
	`övÆidChûdªn
(
CELL_8L
) ;

775 
	`övÆidChûdªn
(
CELL_8H
) ;

778  
Ál£
 ;

781  
åue
 ;

783 
	}
}

785 
boﬁ
 
	gSYMemCñlVÆue
::
	$övÆidTªe
 (
idx
) {

787 
boﬁ
 
ªt
 ;

788 
ªt
 = 
	`övÆidChûdªn
(
idx
) ;

789 
ªt
 =Ñë && 
	`övÆidP¨ít
(
idx
) ;

790  
ªt
 ;

791 
	}
}

793 
boﬁ
 
	gSYMemCñlVÆue
::
	$£tChûdSymbﬁSèã
(
idx
, 
boﬁ
 
bsym
) {

794 
idx
) {

795 
CELL_FULL
:

796 
m_CñlS∂ôî
[
CELL_8H
].
bSym
 = 
bsym
 ;

797 
m_CñlS∂ôî
[
CELL_8L
].
bSym
 = 
bsym
 ;

798 
	`£tChûdSymbﬁSèã
(
CELL_8H
, 
bsym
) ;

799 
	`£tChûdSymbﬁSèã
(
CELL_8L
, 
bsym
) ;

802 
CELL_8H
:

803 
m_CñlS∂ôî
[
CELL_4_2
].
bSym
 = 
bsym
 ;

804 
m_CñlS∂ôî
[
CELL_4_3
].
bSym
 = 
bsym
 ;

805 
	`£tChûdSymbﬁSèã
(
CELL_4_2
, 
bsym
) ;

806 
	`£tChûdSymbﬁSèã
(
CELL_4_3
, 
bsym
) ;

809 
CELL_8L
:

810 
m_CñlS∂ôî
[
CELL_4_0
].
bSym
 = 
bsym
 ;

811 
m_CñlS∂ôî
[
CELL_4_1
].
bSym
 = 
bsym
 ;

812 
	`£tChûdSymbﬁSèã
(
CELL_4_0
, 
bsym
) ;

813 
	`£tChûdSymbﬁSèã
(
CELL_4_1
, 
bsym
) ;

816 
CELL_4_0
:

817 
CELL_4_1
:

818 
CELL_4_2
:

819 
CELL_4_3
:

820 
m_CñlS∂ôî
[
idx
].
bSym
 = 
bsym
 ;

824 
	`as£π
 (0) ;

827  
åue
 ;

828 
	}
}

831 
boﬁ
 
	gSYMemCñlVÆue
::
	$£tP¨ítSymbﬁSèã
(
idx
, 
boﬁ
 
bsym
) {

833 
idx
) {

834 
CELL_4_0
:

835 
CELL_4_1
:

836 
m_CñlS∂ôî
[
idx
].
bSym
 = 
bsym
 ;

837 
	`£tP¨ítSymbﬁSèã
(
CELL_8L
, 
bsym
) ;

839 
CELL_4_2
:

840 
CELL_4_3
:

841 
m_CñlS∂ôî
[
idx
].
bSym
 = 
bsym
 ;

842 
	`£tP¨ítSymbﬁSèã
(
CELL_8H
, 
bsym
) ;

844 
CELL_8H
:

845 
CELL_8L
:

846 
m_CñlS∂ôî
[
idx
].
bSym
 = 
bsym
 ;

847 
	`£tP¨ítSymbﬁSèã
(
CELL_FULL
, 
bsym
) ;

849 
CELL_FULL
:

850 
m_CñlS∂ôî
[
idx
].
bSym
 = 
bsym
 ;

853 
	`as£π
 (0) ;

855  
åue
 ;

856 
	}
}

857 
boﬁ
 
	gSYMemCñlVÆue
::
	$TryC⁄¸ëeP¨ítOf
 (
idx
) {

859 
idx
) {

860 
CELL_FULL
:

861  
Ál£
 ;

863 
CELL_8H
:

864 
CELL_8L
:

865 i‡((!
m_CñlS∂ôî
[
CELL_8H
].
bSym
Ë&& (!m_CñlS∂ôî[
CELL_8L
].bSym)) {

866 
m_CñlS∂ôî
[
CELL_FULL
].
bSym
 = 
Ál£
 ;

867  
åue
 ;

869  
Ál£
 ;

871 
CELL_4_0
:

872 
CELL_4_1
:

873 i‡((!
m_CñlS∂ôî
[
CELL_4_0
].
bSym
Ë&& (!m_CñlS∂ôî[
CELL_4_1
].bSym)) {

874 
m_CñlS∂ôî
[
CELL_8L
].
bSym
 = 
Ál£
 ;

875  
åue
 ;

877  
Ál£
 ;

879 
CELL_4_2
:

880 
CELL_4_3
:

881 i‡((!
m_CñlS∂ôî
[
CELL_4_2
].
bSym
Ë&& (!m_CñlS∂ôî[
CELL_4_3
].bSym)) {

882 
m_CñlS∂ôî
[
CELL_8H
].
bSym
 = 
Ál£
 ;

883  
åue
 ;

885  
Ál£
 ;

887 
	`as£π
 (0) ;

890  
åue
 ;

891 
	}
}

892 
boﬁ
 
	gSYMemCñlVÆue
::
	$wrôeRóº™ge
 (
ul⁄g
 
addr
, 
size
, 
KVEx¥På
 
e
) {

894 
˚Œsize
 = 0;

895 
ul⁄g
 
˚Œaddr
 = 0 ;

896 
idx
 = 
	`Off£tSizeToIndex
(
addr
, 
size
, 
˚Œaddr
, 
˚Œsize
) ;

897 
boﬁ
 
ªt
 = 
Ál£
 ;

901 i‡(
idx
>=0) {

903 i‡(
e
!=
NULL
 || 
m_CñlS∂ôî
[
idx
].
bSym
) {

905 i‡(
m_CñlS∂ôî
[
idx
].
bSym


906 &&!
m_CñlS∂ôî
[
idx
].
bVÆid
 ){

908 
ªt
 = 
	`S∂ô
(
idx
, 
size
) ;

911 
	`övÆidTªe
 (
idx
) ;

913 i‡(
size
 =
˚Œsize
) {

915 
m_CñlS∂ôî
[
idx
].
symvÆ
 = 
e
 ;

917 i‡(
e
==
NULL
) {

918 
m_CñlS∂ôî
[
idx
].
bSym
 = 
Ál£
 ;

919 
	`£tChûdSymbﬁSèã
(
idx
, 
Ál£
) ;

920 
	`TryC⁄¸ëeP¨ítOf
(
idx
) ;

923 
m_CñlS∂ôî
[
idx
].
bSym
 = 
åue
 ;

924 
	`£tP¨ítSymbﬁSèã
(
idx
, 
åue
) ;

925 
	`£tChûdSymbﬁSèã
(
idx
, 
åue
) ;

928 
m_CñlS∂ôî
[
idx
].
bVÆid
 = 
åue
 ;

930 } i‡(
size
 < 
˚Œsize
) {

932 
off£t
 = 
addr
 & 0x3 ;

934 
˚ŒvÆ
;

935 
KVEx¥På
 
e1
=
NULL
, 
e2
=NULL, 
e3
=NULL, 
î
=NULL, 
me
=NULL;

939 i‡(!
m_CñlS∂ôî
[
idx
].
bSym
) {

940 
m_Mem
->
	`ªadC⁄¸ëeVÆue
(
˚Œaddr
, 
˚Œsize
, 
˚ŒvÆ
) ;

941 
me
.
	`ª£t
(
√w
 
	`C⁄°Ex¥
(
˚ŒvÆ
)) ;

943 
	`as£π
 (
m_CñlS∂ôî
[
idx
].
bVÆid
) ;

944 
me
 = 
m_CñlS∂ôî
[
idx
].
symvÆ
 ;

945 
	`as£π
 (
me
!=
NULL
) ;

948 i‡(
off£t
!=0)

949 
e1
.
	`ª£t
(
√w
 
	`Exåa˘Ex¥
(
me
,0,
off£t
,offset, 0)) ;

952 i‡(
e
==
NULL
) {

953 
v
 ;

954 
m_Mem
->
	`ªadC⁄¸ëeVÆue
(
addr
, 
size
, 
v
) ;

955 
e
.
	`ª£t
(
√w
 
	`C⁄°Ex¥
(
v
)) ;

957 if(
e
->
size
 == size)

958 
e2
 = 
e
 ;

960 
e2
.
	`ª£t
(
√w
 
	`Exåa˘Ex¥
(
e
, 0, 
size
, size, 0)) ;

962 if(
off£t
+
size
<
˚Œsize
)

963 
e3
.
	`ª£t
(
√w
 
	`Exåa˘Ex¥
(
me
, 
off£t
+
size
, 
˚Œsize
-offset-size, cellsize-offset-size, 0)) ;

965 if(
e1
!=
NULL
)

966 
î
.
	`ª£t
(
√w
 
	`ComböeEx¥
(
e2
, 
e1
, 
size
, 
off£t
, size+offset, 0)) ;

968 
î
 = 
e2
 ;

970 if(
e3
!=
NULL
)

971 
î
.
	`ª£t
(
√w
 
	`ComböeEx¥
”r, 
e3
, 
size
+
off£t
, 
˚Œsize
-offset-size, cellsize, 0)) ;

973 
m_CñlS∂ôî
[
idx
].
symvÆ
=
î
 ;

974 
m_CñlS∂ôî
[
idx
].
bSym
 = 
åue
 ;

975 
m_CñlS∂ôî
[
idx
].
bVÆid
 = 
åue
 ;

977 
	`£tP¨ítSymbﬁSèã
(
idx
, 
åue
) ;

978 
	`£tChûdSymbﬁSèã
(
idx
, 
åue
) ;

980 
°d
::
cout
 << "No, cñlsizêsmÆÀ∏th™ wrôêsize: " << std::
hex


981 << 
addr
 << " " << 
size
 << 
°d
::
ídl
 ;

983 
	`FIX_ME
() ;

987 
°d
::
cout
 << "TO DO: NŸálig√d wrôe: " << std::
hex
 << 
addr
 << " "

988 << 
size
 << 
°d
::
ídl
 ;

990 
	`FIX_ME
() ;

993 
this
->
addr
 =áddr ;

994 
this
->
size
 = size ;

995 
this
->
e
 =É ;

996 
	`Pröt
(0) ;

997  
åue
 ;

998 
	}
}

	@/home/jqhong/Documents/KernelSE/MemState.h

1 #i‚de‡
_SYMINFO_DB_H__


2 
	#_SYMINFO_DB_H__


	)

4 
	~<löux/ty≥s.h
>

6 
	~<m≠
>

8 
	~"CodeObje˘.h
"

10 
	~"In°ru˘i⁄Decodî.h
"

11 
	~"deföes.h
"

15 
uöt32_t
 
	tSYMEM_CHUNK_TY
;

16 
	#SYMEM_BLOCK_SIZE
 32UL

	)

17 
	#SYMEM_BLOCK_MASK
 (~(
SYMEM_BLOCK_SIZE
 - 1))

	)

22 
	sSYMemChunk
 {

23 
SYMEM_CHUNK_TY
 
	mbôm≠
;

24 
SYMEM_CHUNK_TY
 
	mobjmask
;

25 
SYMemChunk
 *
	ml
, *
	mr
;

27 
SYMemChunk
() {

28 
	mbôm≠
 = 0;

29 
	mobjmask
 = 0;

30 
	ml
 = 
r
 = 
NULL
;

32 ~
SYMemChunk
() {

33 i‡(
	ml
)

34 
	ml
->
	mr
 = 
NULL
;

35 i‡(
	mr
)

36 
	mr
->
	ml
 = 
NULL
;

39 
	g°d
::
	tsh¨ed_±r
<
	tSYMemChunk
> 
	tSYMemChunkPå
;

41 ˛as†
	cSYMemBôm≠
 {

42 
	m¥iv©e
:

44 
°d
::
m≠
<
ul⁄g
, 
	mSYMemChunkPå
> 
	mm_SYMemBôm≠
;

46 
	mpublic
:

47 
	$SYMemBôm≠
(Ë: 
	$m_SYMemBôm≠
() {}

48 ~
	$SYMemBôm≠
(Ë{ 
m_SYMemBôm≠
.
	`˛ór
(); 
	}
}

51 
SYMemChunk
 *
m¨kSYMemBôm≠
(
ul⁄g
 
addr
, ul⁄g 
size
);

52 
unm¨kSYMemBôm≠
(
ul⁄g
 
addr
, ul⁄g 
size
);

53 
boﬁ
 
ã°SYMemBôm≠
(
ul⁄g
 
addr
, ul⁄g 
size
);

56 
SYMemChunk
 *
födSYMemChunk
(
ul⁄g
 
addr
);

58 
	g¥iv©e
:

59 
SYMemChunk
 *
_maskSYMemBôm≠
(
ul⁄g
 
Æig√d_addr
, ul⁄g 
ˇve_size
, ul⁄g 
symbﬁ_size
);

60 
_unmaskSYMemBôm≠
(
ul⁄g
 
Æig√d_addr
, ul⁄g 
ˇve_size
, ul⁄g 
symbﬁ_size
);

61 
boﬁ
 
_ã°SYMemBôm≠
(
ul⁄g
 
Æig√d_addr
, ul⁄g 
ˇve_size
, ul⁄g 
symbﬁ_size
);

64 
	sSymCñlS∂ôî
 {

65 
boﬁ
 
	mbSym
 ;

66 
boﬁ
 
	mbVÆid
 ;

67 
ul⁄g
 
	maddr
 ;

68 
KVEx¥På
 
	msymvÆ
 ;

70 
SymCñlS∂ôî
 () {

71 
	mbSym
 = 
Ál£
 ;

72 
	mbVÆid
 = 
Ál£
 ;

73 
	msymvÆ
 = 
NULL
 ;

76 
	#CELL_FULL
 6

	)

77 
	#CELL_8L
 4

	)

78 
	#CELL_8H
 5

	)

79 
	#CELL_4_0
 0

	)

80 
	#CELL_4_1
 1

	)

81 
	#CELL_4_2
 2

	)

82 
	#CELL_4_3
 3

	)

83 
˛ass
 
	gSYMemSèã
 ;

85 
	sSYMemCñlVÆue
 {

86 
ul⁄g
 
	maddr
;

87 
ul⁄g
 
	msize
;

88 
KVEx¥På
 
	me
;

89 
SymCñlS∂ôî
 
	mm_CñlS∂ôî
[7] ;

90 
SYMemSèã
 *
	mm_Mem
 ;

92 
Off£tSizeToIndex
(
ul⁄g
 
addr
, 
size
, ul⁄g &
˚Œaddr
, &
˚Œsize
) ;

93 
boﬁ
 
ªadRóº™ge
 (
ul⁄g
 
addr
, 
size
, 
KVEx¥På
 &
e
) ;

94 
boﬁ
 
wrôeRóº™ge
 (
ul⁄g
 
addr
, 
siz
, 
KVEx¥På
 
e
) ;

96 
boﬁ
 
S∂ô
(
idx
, 
size
) ;

97 
boﬁ
 
övÆidTªe
 (
idx
) ;

98 
boﬁ
 
övÆidP¨ít
 (
idx
) ;

99 
boﬁ
 
övÆidChûdªn
 (
idx
) ;

101 
boﬁ
 
comböeChûdªn
(
idx
) ;

102 
boﬁ
 
comböeChûdªn
(
CELL_p
, 
CELL_ch
, 
CELL_˛
, 
chûd_SZ
) ;

104 
boﬁ
 
£tChûdSymbﬁSèã
(
idx
, boﬁ 
bsym
) ;

106 
boﬁ
 
£tP¨ítSymbﬁSèã
(
idx
, boﬁ 
bsym
) ;

108 
boﬁ
 
TryC⁄¸ëeP¨ítOf
 (
idx
) ;

110 
boﬁ
 
Pröt
 (
idx
) ;

112 
SYMemCñlVÆue
(
ul⁄g
 
a
, ul⁄g 
s
, 
KVEx¥På
 
E
, 
SYMemSèã
* 
mem
) {

113 
	maddr
=
a
;

114 
	msize
=
s
;

115 
	me
=
E
;

116 
	mm_Mem
 = 
mem
 ;

117 
	mm_CñlS∂ôî
[
CELL_FULL
].
	maddr
 = 
m_CñlS∂ôî
[
CELL_8L
].
addr
 = m_CñlS∂ôî[
CELL_4_0
].addr =áddr&(~0xf) ;

118 
	mm_CñlS∂ôî
[
CELL_8H
].
	maddr
 = 
m_CñlS∂ôî
[
CELL_4_2
].
addr
 = (addr&(~0xf)) + 8;

119 
	mm_CñlS∂ôî
[
CELL_4_1
].
	maddr
 = (
addr
&(~0xf)) + 4 ;

120 
	mm_CñlS∂ôî
[
CELL_4_3
].
	maddr
 = (
addr
&(~0xf)) + 12 ;

124 
	g°d
::
	tsh¨ed_±r
<
	tSYMemCñlVÆue
> 
	tSYMemCñlVÆuePå
;

127 ˛as†
	cSYMemSèã
 {

135 
	m¥iv©e
:

137 
°d
::
m≠
<
ul⁄g
, 
	mSYMemCñlVÆuePå
> 
	mm_SYMemCñls
;

139 
SYMemBôm≠
 
	mm_Bôm≠
;

141 
	mpublic
:

142 
	$SYMemSèã
(Ë: 
	`m_SYMemCñls
(), 
	$m_Bôm≠
() {}

143 ~
	$SYMemSèã
(Ë{ 
m_SYMemCñls
.
	`˛ór
(); 
	}
}

145 
boﬁ
 
isSYMem‹yCñl
(
ul⁄g
 
addr
, ul⁄g 
size
);

146 
boﬁ
 
wrôeMem‹yCñl
(
MemVÆue
 &
v
);

147 
boﬁ
 
ªadMem‹yCñl
(
MemVÆue
 &
v
);

149 
	g¥iv©e
:

150 
boﬁ
 
wrôeSymbﬁicVÆue
(
ul⁄g
 
addr
, ul⁄g 
size
, 
KVEx¥På
 &
e
);

151 
boﬁ
 
ªadSymbﬁicVÆue
(
ul⁄g
 
addr
, ul⁄g 
size
, 
KVEx¥På
 &
e
);

153 
boﬁ
 
wrôeC⁄¸ëeVÆue
(
ul⁄g
 
addr
, ul⁄g 
size
, 
v
);

154 
	gpublic
:

155 
boﬁ
 
ªadC⁄¸ëeVÆue
(
ul⁄g
 
addr
, ul⁄g 
size
, &
v
);

	@/home/jqhong/Documents/KernelSE/VMState.cpp

2 
	~"VMSèã.h
"

4 
	~<sig«l.h
>

5 
	~<uc⁄ãxt.h
>

7 
	~<fun˘i⁄Æ
>

8 
	~<°rög
>

10 
	~"CPUSèã.h
"

11 
	~"CodeObje˘.h
"

12 
	~"Ex¥.h
"

13 
	~"Ex¥essi⁄.h
"

14 
	~"In°ru˘i⁄Decodî.h
"

15 
	~"MemSèã.h
"

18 
	~"EFœgsM™agî.h
"

20 
usög
 
«me•a˚
 
	g°d
;

21 
usög
 
«me•a˚
 
	gDynö°
;

22 
usög
 
«me•a˚
 
	gP¨£API
;

23 
usög
 
«me•a˚
 
	gIn°ru˘i⁄API
;

25 
usög
 
«me•a˚
 
	gEXPR
;

27 
	gVMSèã
::
	$VMSèã
(Ë: 
	`m_SYMemObje˘s
(), 
	$m_SYRegObje˘s
() {

28 
m_CPU
.
	`ª£t
(
√w
 
	`SYCPUSèã
());

29 
m_MEM
.
	`ª£t
(
√w
 
	`SYMemSèã
());

31 
m_EFœgsMgr
.
	`ª£t
(
√w
 
	`EFœgsM™agî
(
this
));

32 
	}
}

34 
	gVMSèã
::~
	$VMSèã
() {

35 
m_SYMemObje˘s
.
	`˛ór
();

36 
m_SYRegObje˘s
.
	`˛ór
();

37 
	}
}

41 
boﬁ
 
	gVMSèã
::
	$¸óãSYMemObje˘
(
ul⁄g
 
addr
, ul⁄g 
size
, 
c⁄VÆ
, c⁄° *
«me
) {

42 
SYMemObje˘
 *
obj
 = 
√w
 
	`SYMemObje˘
();

46 
obj
->
«me
 =Çame;

47 
obj
->
addr
 =áddr;

48 
obj
->
size
 = size;

50 
size
) {

52 
obj
->
i8
 = ()
c⁄VÆ
;

55 
obj
->
i16
 = ()
c⁄VÆ
;

58 
obj
->
i32
 = ()
c⁄VÆ
;

61 
obj
->
i64
 = ()
c⁄VÆ
;

64 
˚º
 << "UnexpectedÜength"

69 
obj
->
ex¥
.
	`ª£t
(
√w
 
	`UDefEx¥
(obj));

71 
ul⁄g
 
hash
 = 
	`HashTogëhî
(
addr
, 
size
);

72 
m_SYMemObje˘s
[
hash
] = 
obj
;

74 
MemVÆue
 
V
{
addr
, 
size
, 
åue
, 0, 
obj
->
ex¥
};

75  
m_MEM
->
	`wrôeMem‹yCñl
(
V
);

76 
	}
}

78 
	gVMSèã
::
	$de°roySYMemObje˘
(
ul⁄g
 
addr
, ul⁄g 
size
) {

79 
ul⁄g
 
hash
 = 
	`HashTogëhî
(
addr
, 
size
);

80 autÿ
ô
 = 
m_SYMemObje˘s
.
	`föd
(
hash
);

81 
	`as£π
(
ô
 !
m_SYMemObje˘s
.
	`íd
());

82 
SYMemObje˘
 *
obj
 = 
ô
->
£c⁄d
;

83 
dñëe
 
obj
;

84 
m_SYMemObje˘s
.
	`îa£
(
ô
);

87 
MemVÆue
 
V
{
addr
, 
size
, 
Ál£
, 0};

88 
m_MEM
->
	`wrôeMem‹yCñl
(
V
);

89 
	}
}

92 
boﬁ
 
	gVMSèã
::
	$¸óãSYRegObje˘
(
uöt
 
ödex
, uöà
size
, 
c⁄VÆ
, c⁄° *
«me
) {

93 
SYRegObje˘
 *
obj
 = 
√w
 
	`SYRegObje˘
();

94 
szBuf
[
LINE_MAX
];

95 
	`•rötf
(
szBuf
, "REG_0x%x_%d", 
ödex
, 
size
);

96 
obj
->
«me
 = 
szBuf
;

97 
obj
->
ödx
 = 
ödex
;

98 
obj
->
size
 = size;

100 
size
) {

102 
obj
->
i8
 = ()
c⁄VÆ
;

105 
obj
->
i16
 = ()
c⁄VÆ
;

108 
obj
->
i32
 = ()
c⁄VÆ
;

111 
obj
->
i64
 = ()
c⁄VÆ
;

114 
˚º
 << "UnexpectedÜength"

119 
obj
->
ex¥
.
	`ª£t
(
√w
 
	`UDefEx¥
(
NULL
));

121 
ul⁄g
 
hash
 = 
	`HashTogëhî
(
ödex
, 
size
);

122 
m_SYRegObje˘s
[
hash
] = 
obj
;

124 
RegVÆue
 
V
{
ödex
, 
size
, 
åue
, 0, 
obj
->
ex¥
};

125  
m_CPU
->
	`wrôeRegi°î
(
V
);

126 
	}
}

127 
	gVMSèã
::
	$de°roySYRegObje˘
(
uöt
 
ödex
, uöà
size
) {

128 
ul⁄g
 
hash
 = 
	`HashTogëhî
(
ödex
, 
size
);

129 autÿ
ô
 = 
m_SYRegObje˘s
.
	`föd
(
hash
);

130 
	`as£π
(
ô
 !
m_SYRegObje˘s
.
	`íd
());

131 
SYRegObje˘
 *
obj
 = 
ô
->
£c⁄d
;

132 
dñëe
 
obj
;

133 
m_SYRegObje˘s
.
	`îa£
(
ô
);

136 
RegVÆue
 
V
{
ödex
, 
size
, 
Ál£
, 0};

137 
m_CPU
->
	`wrôeRegi°î
(
V
);

138 
	}
}

141 
boﬁ
 
	gVMSèã
::
	$SëCPUSèã
(
VMSèã
 *
VM
, 
MacReg
 *
ªgs
) {

142  
VM
->
m_CPU
->
	`£tC⁄¸ëeCPUSèã
(
ªgs
);

143 
	}
}

147 
boﬁ
 
	gVMSèã
::
	$RódCPUSèã
(
VMSèã
 *
VM
, 
MacReg
 *
ªgs
) {

148  
VM
->
m_CPU
->
	`ªadC⁄¸ëeCPUSèã
(
ªgs
);

149 
	}
}

151 
ul⁄g
 
	gVMSèã
::
	$ªadC⁄Reg
(
uöt
 
idx
)

153  
m_CPU
->
	`ªadC⁄Reg
(
idx
);

154 
	}
}

156 
boﬁ
 
	gVMSèã
::
	$wrôeC⁄Reg
(
uöt
 
idx
, 
ul⁄g
 
vÆ
)

158  
m_CPU
->
	`wrôeC⁄Reg
(
idx
, 
vÆ
);

159 
	}
}

164 
boﬁ
 
	gVMSèã
::
	$isSYReg
(
uöt
 
ªg_ödex
) {

165  
m_CPU
->
	`isSYReg
(
ªg_ödex
);

166 
	}
}

168 
boﬁ
 
	gVMSèã
::
	$ªadRegi°î
(
RegVÆue
 &
V
) {

169  
m_CPU
->
	`ªadRegi°î
(
V
);

170 
	}
}

172 
boﬁ
 
	gVMSèã
::
	$wrôeRegi°î
(
RegVÆue
 &
V
) {

173  
m_CPU
->
	`wrôeRegi°î
(
V
);

174 
	}
}

176 
±_ªgs
* 
	gVMSèã
::
	$gëPTRegs
()

178  
m_CPU
->
	`gëPTRegs
();

179 
	}
}

182 
boﬁ
 
	gVMSèã
::
	$isSYMem‹yCñl
(
ul⁄g
 
addr
, ul⁄g 
size
) {

183  
m_MEM
->
	`isSYMem‹yCñl
(
addr
, 
size
);

184 
	}
}

186 
boﬁ
 
	gVMSèã
::
	$ªadMem‹y
(
MemVÆue
 &
V
) {

187  
m_MEM
->
	`ªadMem‹yCñl
(
V
);

188 
	}
}

189 
boﬁ
 
	gVMSèã
::
	$wrôeMem‹y
(
MemVÆue
 &
V
) {

190  
m_MEM
->
	`wrôeMem‹yCñl
(
V
);

191 
	}
}

193 
boﬁ
 
	gVMSèã
::
	$gëFœgBô
(
uöt
 
Êag_ödex
, 
FSIn°rPå
 &
±r
) {

194  
m_CPU
->
	`gëFœgBô
(
Êag_ödex
, 
±r
);

195 
	}
}

196 
boﬁ
 
	gVMSèã
::
	$£tFœgBô
(
uöt
 
Êag_ödex
, 
FSIn°rPå
 &
±r
) {

197  
m_CPU
->
	`£tFœgBô
(
Êag_ödex
, 
±r
);

198 
	}
}

200 
boﬁ
 
	gVMSèã
::
	$˛órAŒSymFœg
() {

201  
m_CPU
->
	`˛órAŒSymFœg
();

202 
	}
}

205 
boﬁ
 
	gVMSèã
::
	$gëFœgBô
(
uöt
 
Êag_ödex
, 
FLAG_STAT
 &
Êag
) {

206  
m_CPU
->
	`gëFœgBô
(
Êag_ödex
, 
Êag
);

207 
	}
}

208 
boﬁ
 
	gVMSèã
::
	$£tFœgBô
(
uöt
 
Êag_ödex
, 
FLAG_STAT
 &
Êag
) {

209  
m_CPU
->
	`£tFœgBô
(
Êag_ödex
, 
Êag
);

210 
	}
}

212 
boﬁ
 
	gVMSèã
::
	$FœgBôDeföôed
(
uöt
 
Êag_ödex
) {

213  
m_CPU
->
	`FœgBôDeföôed
(
Êag_ödex
);

214 
	}
}

218 
boﬁ
 
	$RódC⁄O≥ønd_RM
(
VMSèã
 *
vm
, 
O¥ndInfo
 *
oi
) {

219 
boﬁ
 
ªs
 = 
Ál£
;

220 
oi
->
›ty
) {

221 
OPTY_REGCON
: {

222 
RegVÆue
 
V
 = {
oi
->
ªg_ödex
, oi->
size
, 
Ál£
};

223 
ªs
 = 
vm
->
	`ªadRegi°î
(
V
);

224 
oi
->
ªg_c⁄vÆ
 = 
V
.
u64
;

225 
	`as£π
(
V
.
bsym
 =
Ál£
);

227 
OPTY_MEMCELLCON
: {

228 
MemVÆue
 
V
 = {
oi
->
mem_c⁄addr
, oi->
size
, 
Ál£
};

229 
ªs
 = 
vm
->
	`ªadMem‹y
(
V
);

230 
oi
->
mem_c⁄vÆ
 = 
V
.
u64
;

231 
	`as£π
(
V
.
bsym
 =
Ál£
);

234 
	`FIX_ME
();

235 
	`exô
(
EXIT_FAILURE
);

238  
ªs
;

239 
	}
}

241 
boﬁ
 
	$WrôeC⁄OPî™d_RM
(
VMSèã
 *
vm
, 
O¥ndInfo
 *
oi
) {

242 
boﬁ
 
ªs
 = 
Ál£
;

243 
oi
->
›ty
) {

244 
OPTY_REGCON
: {

246 
RegVÆue
 
V
{
oi
->
ªg_ödex
, oi->
size
, 
Ál£
, oi->
ªg_c⁄vÆ
};

247 
ªs
 = 
vm
->
	`wrôeRegi°î
(
V
);

249 
OPTY_MEMCELLCON
: {

251 
MemVÆue
 
V
{
oi
->
mem_c⁄addr
, oi->
size
, 
åue
, oi->
mem_c⁄vÆ
};

252 
ªs
 = 
vm
->
	`wrôeMem‹y
(
V
);

255 
	`FIX_ME
();

256 
	`exô
(
EXIT_FAILURE
);

259  
ªs
;

260 
	}
}

263 
boﬁ
 
	$RódSymOPî™d_RM
(
VMSèã
 *
vm
, 
O¥ndInfoPå
 &
oi
) {

264 
boﬁ
 
ªs
;

265 
KVEx¥På
 
vÆ
;

266 
oi
->
›ty
) {

267 
OPTY_REGSYM
: {

268 
RegVÆue
 
V
 = {
oi
->
ªg_ödex
, oi->
size
, 
Ál£
};

270 
vm
->
	`ªadRegi°î
(
V
);

272 
OPTY_MEMCELLSYM
: {

282 
	`FIX_ME
();

283 
	`exô
(
EXIT_FAILURE
);

286  
ªs
;

287 
	}
}

289 
boﬁ
 
	$WrôeSymOPî™d_RM
(
VMSèã
 *
vm
, 
O¥ndInfoPå
 &
oi
) {

292 
boﬁ
 
ªs
 = 
Ál£
;

293 
oi
->
›ty
) {

312 
	`FIX_ME
();

313 
	`exô
(
EXIT_FAILURE
);

316  
ªs
;

317 
	}
}

320 
boﬁ
 
	gVMSèã
::
	$SaveFœgCh™gögIn°ru˘i⁄
 (
FSIn°rPå
 &
±r
) {

322  
m_EFœgsMgr
->
	`SaveFœgCh™gögIn°ru˘i⁄
 (
±r
) ;

323 
	}
}

324 
boﬁ
 
	gVMSèã
::
	$SaveFœgCh™gögIn°ru˘i⁄Ex¥
 (
íåyID
 
ö°rID
, 
KVEx¥På
 
ex¥På
) {

326  
m_EFœgsMgr
->
	`SaveFœgCh™gögIn°ru˘i⁄Ex¥
(
ö°rID
, 
ex¥På
);

327 
	}
}

	@/home/jqhong/Documents/KernelSE/VMState.h

1 #i‚de‡
_VMSTATE__H__


2 
	#_VMSTATE__H__


	)

4 
	~<löux/ty≥s.h
>

6 
	~<m≠
>

8 
	~"CodeObje˘.h
"

9 
	~"CPUSèã.h
"

10 
	~"In°ru˘i⁄Decodî.h
"

11 
	~"deföes.h
"

13 
˛ass
 
	gSYCPUSèã
;

14 
˛ass
 
	gSYMemSèã
;

15 
˛ass
 
	gEFœgsM™agî
 ;

16 
˛ass
 
	gCPU_EFœgs
 ;

19 ˛as†
	cVMSèã
 {

20 
	mpublic
:

22 
	sSYMemObje˘
 {

23 
°d
::
°rög
 
«me
;

24 
ul⁄g
 
	maddr
;

25 
ul⁄g
 
	msize
;

26 
KVEx¥På
 
	mex¥
;

29 
öt64_t
 
	mi64
;

30 
öt32_t
 
	mi32
;

31 
öt16_t
 
	mi16
;

32 
öt8_t
 
	mi8
;

33 
uöt64_t
 
	mu64
;

34 
uöt32_t
 
	mu32
;

35 
uöt16_t
 
	mu16
;

36 
uöt8_t
 
	mu8
;

38 
SYMemObje˘
(Ë: 
ex¥
(
nuŒ±r
) {}

42 
	sSYRegObje˘
 {

43 
	g°d
::
°rög
 
«me
;

44 
uöt
 
	gödx
;

45 
uöt
 
	gsize
;

46 
KVEx¥På
 
	gex¥
;

49 
öt64_t
 
	gi64
;

50 
öt32_t
 
	gi32
;

51 
öt16_t
 
	gi16
;

52 
öt8_t
 
	gi8
;

53 
uöt64_t
 
	gu64
;

54 
uöt32_t
 
	gu32
;

55 
uöt16_t
 
	gu16
;

56 
uöt8_t
 
	gu8
;

58 
SYRegObje˘
(Ë: 
ex¥
(
nuŒ±r
) {}

61 
	g°d
::
m≠
<
ul⁄g
, 
	gSYMemObje˘
 *> 
	gm_SYMemObje˘s
;

62 
	g°d
::
m≠
<
ul⁄g
, 
	gSYRegObje˘
 *> 
	gm_SYRegObje˘s
;

64 
	g°d
::
sh¨ed_±r
<
SYCPUSèã
> 
m_CPU
;

65 
	g°d
::
sh¨ed_±r
<
SYMemSèã
> 
m_MEM
;

68 
	gpublic
:

69 
°d
::
sh¨ed_±r
<
EFœgsM™agî
> 
m_EFœgsMgr
;

72 
	gpublic
:

73 
VMSèã
();

74 ~
VMSèã
();

76 
	gpublic
:

78 
boﬁ
 
¸óãSYMemObje˘
(
ul⁄g
 
addr
, ul⁄g 
size
, 
c⁄VÆ
, c⁄° *
«me
 = 
NULL
);

79 
de°roySYMemObje˘
(
ul⁄g
 
addr
, ul⁄g 
size
);

81 
boﬁ
 
¸óãSYRegObje˘
(
uöt
 
ödex
, uöà
size
, 
c⁄VÆ
, c⁄° *
«me
 = 
NULL
);

82 
de°roySYRegObje˘
(
uöt
 
ödex
, uöà
size
);

86 
boﬁ
 
SëCPUSèã
(
VMSèã
 *
VM
, 
MacReg
 *
ªgs
);

89 
boﬁ
 
RódCPUSèã
(
VMSèã
 *
VM
, 
MacReg
 *
ªgs
);

90 
ul⁄g
 
ªadC⁄Reg
(
uöt
 
idx
);

91 
boﬁ
 
wrôeC⁄Reg
(
uöt
 
idx
, 
ul⁄g
 
vÆ
);

95 
boﬁ
 
isSYReg
(
uöt
 
ªg_ödex
);

96 
boﬁ
 
ªadRegi°î
(
RegVÆue
 &
V
);

97 
boﬁ
 
wrôeRegi°î
(
RegVÆue
 &
V
);

99 
±_ªgs
* 
gëPTRegs
();

102 
boﬁ
 
isSYMem‹yCñl
(
ul⁄g
 
addr
, ul⁄g 
size
);

103 
boﬁ
 
ªadMem‹y
(
MemVÆue
 &
V
);

104 
boﬁ
 
wrôeMem‹y
(
MemVÆue
 &
V
);

107 
boﬁ
 
gëFœgBô
(
uöt
 
Êag_ödex
, 
FSIn°rPå
 &
±r
);

108 
boﬁ
 
£tFœgBô
(
uöt
 
Êag_ödex
, 
FSIn°rPå
 &
±r
);

110 
boﬁ
 
˛órAŒSymFœg
();

113 
boﬁ
 
gëFœgBô
(
uöt
 
Êag_ödex
, 
FLAG_STAT
 &
Êag
);

114 
boﬁ
 
£tFœgBô
(
uöt
 
Êag_ödex
, 
FLAG_STAT
 &
Êag
);

116 
boﬁ
 
FœgBôDeföôed
(
uöt
 
Êag_ödex
);

118 
boﬁ
 
SaveFœgCh™gögIn°ru˘i⁄
 (
FSIn°rPå
 &
±r
);

119 
boﬁ
 
SaveFœgCh™gögIn°ru˘i⁄Ex¥
 (
íåyID
 
ö°rID
, 
KVEx¥På
 
ex¥På
);

124 
boﬁ
 
RódC⁄O≥ønd_RM
(
VMSèã
 *
vm
, 
O¥ndInfo
 *
oi
);

125 
boﬁ
 
WrôeC⁄OPî™d_RM
(
VMSèã
 *
vm
, 
O¥ndInfo
 *
oi
);

127 
boﬁ
 
RódSymOPî™d_RM
(
VMSèã
 *
vm
, 
O¥ndInfoPå
 &
oi
);

128 
boﬁ
 
WrôeSymOPî™d_RM
(
VMSèã
 *
vm
, 
O¥ndInfoPå
 &
oi
);

	@/home/jqhong/Documents/KernelSE/centralhub.cpp

2 
	~"˚¡ølhub.h
"

4 
	~<asm/±ø˚.h
>

5 
	~<löux/ty≥s.h
>

6 
	~<sig«l.h
>

7 
	~<°dio.h
>

8 
	~<°dlib.h
>

9 
	~<°rög.h
>

10 
	~<uc⁄ãxt.h
>

12 
	~<m≠
>

13 
	~<ve˘‹
>

21 
	~"˚¡ølhub.h
"

22 
	~"VMSèã.h
"

23 
	~"deföes.h
"

24 
	~"Át˘æ.h
"

26 
	~"thö˘æ.h
"

28 
usög
 
«me•a˚
 
	g°d
;

32 
	gExecSèã
::
	$ExecSèã
(
ul⁄g
 
adds
, ul⁄g 
adde
)

34 
m_VM
.
	`ª£t
(
√w
 
	`VMSèã
());

35 
m_emëa
.
	`ª£t
(
√w
 
EveMëa
);

40 autÿ
F
 = 
√w
 
	`CF©tCål
(
m_VM
.
	`gë
(), 
m_emëa
.get());

41 autÿ
T
 = 
√w
 
	`CThöCål
(
m_VM
.
	`gë
(), 
adds
, 
adde
);

42 
F
->
m_Thö
 = 
T
;

43 
m_F©tCål
.
	`ª£t
(
F
);

44 
m_ThöCål
.
	`ª£t
(
T
);

49 
	}
}

51 
	gExecSèã
::~
	$ExecSèã
(Ë{
	}
}

54 
boﬁ
 
ExecSèã
::
	$de˛¨eSymbﬁicObje˘
(
ul⁄g
 
addr
, ul⁄g 
size
, 
c⁄VÆ
, c⁄° *
«me
) {

55  
m_VM
->
	`¸óãSYMemObje˘
(
addr
, 
size
, 
c⁄VÆ
, 
«me
);

56 
	}
}

59 
boﬁ
 
	gExecSèã
::
	$de˛¨eSymbﬁicRegi°î
(
uöt
 
ödex
, uöà
size
, 
c⁄VÆ
, c⁄° *
«me
) {

60  
m_VM
->
	`¸óãSYRegObje˘
(
ödex
, 
size
, 
c⁄VÆ
, 
«me
);

61 
	}
}

64 
boﬁ
 
	gExecSèã
::
	$SynRegsFromN©ive
(
MacReg
* 
ªgs
)

66 
VMSèã
::
	`SëCPUSèã
(
m_VM
.
	`gë
(), 
ªgs
);

67  
åue
;

68 
	}
}

71 
boﬁ
 
	gExecSèã
::
	$SynRegsToN©ive
(
MacReg
* 
ªgs
)

73 
VMSèã
::
	`RódCPUSèã
(
m_VM
.
	`gë
(), 
ªgs
);

74  
åue
;

75 
	}
}

78 
boﬁ
 
	gExecSèã
::
	$¥o˚ssAt
(
ul⁄g
 
addr
) {

82 
MacReg
* 
m_ªgs
 = (MacReg*Ë
m_VM
->
	`gëPTRegs
();

83 
	`¥ötf
 ("øx: %lx,Ñdi:%lx,Ñsi: %lx,Ñdx: %lx. \n", 
m_ªgs
->
ªgs
.
øx
, m_ªgs->ªgs.
rdi
, m_ªgs->ªgs.
rsi
, m_ªgs->ªgs.
rdx
);

84 
tmp
 = 
m_ªgs
->
ªgs
.
rdi
;

85 
tmp
 += 0x60;

86 
	`¥ötf
 ("ni˚ vÆue: %d. \n", *((*)
tmp
));

87 
	`¥ötf
 ("fs_ba£: %lx, gs_ba£:%lx . \n", 
m_ªgs
->
fs_ba£
, m_ªgs->
gs_ba£
);

91 
tmp
 += 0x8;

94 
tmp
 += 0x8;

97 
	`de˛¨eSymbﬁicObje˘
(
tmp
, 4, 0x0, "which_rdi");

105  
m_F©tCål
->
	`¥o˚ssFunc
(
addr
);

106 
	}
}

108 
boﬁ
 
	gExecSèã
::
	$M⁄iSèπOfSE
(
ul⁄g
 
addr
) {

109  
m_F©tCål
->
	`M⁄iSèπOfSE
(
addr
);

110 
	}
}

112 
	gExecSèã
::
	$InôRediPagePoﬁ
() {

113  
m_F©tCål
->
	`InôRediPagePoﬁ
();

114 
	}
}

116 
	gExecSèã
::
	$DBH™dÀr
() {

117  
m_F©tCål
->
	`DBH™dÀr
();

118 
	}
}

157 
__©åibuã__
((
c⁄°ru˘‹
)Ë
	$moduÀ_öô
() {

159 
	}
}

161 
__©åibuã__
((
de°ru˘‹
)Ë
	$moduÀ_föi
() {

163 
	}
}

	@/home/jqhong/Documents/KernelSE/centralhub.h

1 #i‚de‡
_CENTRAL_HUB_H__


2 
	#_CENTRAL_HUB_H__


	)

4 
	~<mem‹y
>

5 
	~<ve˘‹
>

27 
˛ass
 
	gVMSèã
;

29 
˛ass
 
	gCF©tCål
;

30 
˛ass
 
	gCThöCål
;

31 
	g±_ªgs
;

61 
	sEvítMëa
 {

62 
	mt_pf_°ack
;

63 
	mt_öt3_°ack
;

64 
	mt_ve_°ack
;

65 
	mt_db_°ack
;

66 * 
	mvút_ex˚_¨ó
;

67 } 
	tEveMëa
;

69 ˛as†
	cExecSèã
 {

70 
	m°d
::
sh¨ed_±r
<
VMSèã
> 
m_VM
;

74 
	m°d
::
sh¨ed_±r
<
CThöCål
> 
m_ThöCål
;

77 
	mpublic
:

79 
°d
::
sh¨ed_±r
<
CF©tCål
> 
m_F©tCål
;

80 
	m°d
::
sh¨ed_±r
<
EveMëa
> 
m_emëa
;

83 
ExecSèã
(
ul⁄g
 
adds
, ul⁄g 
adde
);

84 ~
ExecSèã
();

88 
boﬁ
 
de˛¨eSymbﬁicObje˘
(
ul⁄g
 
addr
, ul⁄g 
size
, 
c⁄VÆ
, c⁄° *
«me
);

92 
boﬁ
 
de˛¨eSymbﬁicRegi°î
(
uöt
 
ödex
, uöà
size
, 
c⁄VÆ
, c⁄° *
«me
);

96 
boﬁ
 
SynRegsFromN©ive
(
MacReg
* 
ªgs
);

97 
boﬁ
 
SynRegsToN©ive
(
MacReg
* 
ªgs
);

98 
boﬁ
 
¥o˚ssAt
(
ul⁄g
 
addr
);

99 
boﬁ
 
M⁄iSèπOfSE
(
ul⁄g
 
addr
);

100 
InôRediPagePoﬁ
();

101 
DBH™dÀr
();

	@/home/jqhong/Documents/KernelSE/conexec.cpp

1 
	~"c⁄exec.h
"

3 
	~<löux/ty≥s.h
>

4 
	~<sys/mm™.h
>

5 
	~<sig«l.h
>

6 
	~<uc⁄ãxt.h
>

8 
	~<io°ªam
>

10 
	~"VMSèã.h
"

11 
	~"öãrÁ˚.h
"

12 
	~"symexec.h
"

14 
usög
 
«me•a˚
 
	g°d
;

15 
usög
 
«me•a˚
 
	gDynö°
;

16 
usög
 
«me•a˚
 
	gP¨£API
;

17 
usög
 
«me•a˚
 
	gIn°ru˘i⁄API
;

19 "C" 
In¢ExecN⁄RIP
 (
±_ªgs
* 
ªgs
);

20 
In¢ExecN⁄RIP
 (
±_ªgs
* 
ªgs
);

21 
asm
 (" .text");

22 
asm
 (" .type InsnExecNonRIP, @function");

24 
asm
 (" .align 4096");

25 
asm
 ("InsnExecNonRIP: \n");

27 
asm
 ("pushq %rax \n");

28 
asm
 ("pushq %rbx \n");

29 
asm
 ("pushq %rcx \n");

30 
asm
 ("pushq %rdx \n");

31 
asm
 ("pushq %rdi \n");

32 
asm
 ("pushq %rsi \n");

33 
asm
 ("pushq %rbp \n");

34 
asm
 ("pushq %r8 \n");

35 
asm
 ("pushq %r9 \n");

36 
asm
 ("pushq %r10 \n");

37 
asm
 ("pushq %r11 \n");

38 
asm
 ("pushq %r12 \n");

39 
asm
 ("pushq %r13 \n");

40 
asm
 ("pushq %r14 \n");

41 
asm
 ("pushq %r15 \n");

42 
asm
 ("pushf \n");

43 
asm
 ("movq %rsp, 0xcf(%rip) \n");

45 
asm
 ("movq (%rdi), %r15 \n");

46 
asm
 ("movq 0x8(%rdi), %r14 \n");

47 
asm
 ("movq 0x10(%rdi), %r13 \n");

48 
asm
 ("movq 0x18(%rdi), %r12 \n");

49 
asm
 ("movq 0x20(%rdi), %rbp \n");

50 
asm
 ("movq 0x28(%rdi), %rbx \n");

51 
asm
 ("movq 0x30(%rdi), %r11 \n");

52 
asm
 ("movq 0x38(%rdi), %r10 \n");

53 
asm
 ("movq 0x40(%rdi), %r9 \n");

54 
asm
 ("movq 0x48(%rdi), %r8 \n");

55 
asm
 ("movq 0x50(%rdi), %rax \n");

56 
asm
 ("movq 0x58(%rdi), %rcx \n");

57 
asm
 ("movq 0x60(%rdi), %rdx \n");

58 
asm
 ("movq 0x68(%rdi), %rsi \n");

59 
asm
 ("push 0x90(%rdi) \n");

60 
asm
 ("popf \n");

61 
asm
 ("movq 0x98(%rdi), %rsp \n");

62 
asm
 ("movq 0x70(%rdi), %rdi \n");

64 
asm
 ("nop \n");

65 
asm
 ("nop \n");

66 
asm
 ("nop \n");

67 
asm
 ("nop \n");

68 
asm
 ("nop \n");

69 
asm
 ("nop \n");

70 
asm
 ("nop \n");

71 
asm
 ("nop \n");

72 
asm
 ("nop \n");

73 
asm
 ("nop \n");

74 
asm
 ("nop \n");

75 
asm
 ("nop \n");

76 
asm
 ("nop \n");

77 
asm
 ("nop \n");

78 
asm
 ("nop \n");

84 
asm
 ("xchg 0x70(%rip), %rsp \n");

85 
asm
 ("push %rdi \n");

86 
asm
 ("movq 0x60(%rsp), %rdi \n");

87 
asm
 ("movq %r15, (%rdi) \n");

88 
asm
 ("movq %r14, 0x8(%rdi) \n");

89 
asm
 ("movq %r13, 0x10(%rdi) \n");

90 
asm
 ("movq %r12, 0x18(%rdi) \n");

91 
asm
 ("movq %rbp, 0x20(%rdi) \n");

92 
asm
 ("movq %rbx, 0x28(%rdi) \n");

93 
asm
 ("movq %r11, 0x30(%rdi) \n");

94 
asm
 ("movq %r10, 0x38(%rdi) \n");

95 
asm
 ("movq %r9 , 0x40(%rdi) \n");

96 
asm
 ("movq %r8 , 0x48(%rdi) \n");

97 
asm
 ("movq %rax, 0x50(%rdi) \n");

98 
asm
 ("movq %rcx, 0x58(%rdi) \n");

99 
asm
 ("movq %rdx, 0x60(%rdi) \n");

100 
asm
 ("movq %rsi, 0x68(%rdi) \n");

101 
asm
 ("pop %rsi \n");

102 
asm
 ("movq %rsi, 0x70(%rdi) \n");

103 
asm
 ("pushf \n");

104 
asm
 ("pop 0x90(%rdi) \n");

105 
asm
 ("movq 0x20(%rip), %rsi \n");

106 
asm
 ("movq %rsi, 0x98(%rdi) \n");

108 
asm
 ("popf \n");

109 
asm
 ("popq %r15 \n");

110 
asm
 ("popq %r14 \n");

111 
asm
 ("popq %r13 \n");

112 
asm
 ("popq %r12 \n");

113 
asm
 ("popq %r11 \n");

114 
asm
 ("popq %r10 \n");

115 
asm
 ("popq %r9 \n");

116 
asm
 ("popq %r8 \n");

117 
asm
 ("popq %rbp \n");

118 
asm
 ("popq %rsi \n");

119 
asm
 ("popq %rdi \n");

120 
asm
 ("popq %rdx \n");

121 
asm
 ("popq %rcx \n");

122 
asm
 ("popq %rbx \n");

123 
asm
 ("popq %rax \n");

124 
asm
 ("retq \n");

125 
asm
 ("nop \n");

126 
asm
 ("nop \n");

127 
asm
 ("nop \n");

128 
asm
 ("nop \n");

129 
asm
 ("nop \n");

130 
asm
 ("nop \n");

131 
asm
 ("nop \n");

132 
asm
 ("nop \n");

144 "C" 
In¢ExecRIP
 (
±_ªgs
* 
ªgs
);

145 
In¢ExecRIP
 (
±_ªgs
* 
ªgs
);

146 
asm
 (" .text");

147 
asm
 (" .type InsnExecRIP, @function");

148 
asm
 ("InsnExecRIP: \n");

150 
asm
 ("pushq %rax \n");

151 
asm
 ("pushq %rbx \n");

152 
asm
 ("pushq %rcx \n");

153 
asm
 ("pushq %rdx \n");

154 
asm
 ("pushq %rdi \n");

155 
asm
 ("pushq %rsi \n");

156 
asm
 ("pushq %rbp \n");

157 
asm
 ("pushq %r8 \n");

158 
asm
 ("pushq %r9 \n");

159 
asm
 ("pushq %r10 \n");

160 
asm
 ("pushq %r11 \n");

161 
asm
 ("pushq %r12 \n");

162 
asm
 ("pushq %r13 \n");

163 
asm
 ("pushq %r14 \n");

164 
asm
 ("pushq %r15 \n");

165 
asm
 ("pushf \n");

166 
asm
 ("movq %rsp, 0xd0(%rip) \n");

168 
asm
 ("movq 0x80(%rdi), %r15 \n");

170 
asm
 ("movq 0x8(%rdi), %r14 \n");

171 
asm
 ("movq 0x10(%rdi), %r13 \n");

172 
asm
 ("movq 0x18(%rdi), %r12 \n");

173 
asm
 ("movq 0x20(%rdi), %rbp \n");

174 
asm
 ("movq 0x28(%rdi), %rbx \n");

175 
asm
 ("movq 0x30(%rdi), %r11 \n");

176 
asm
 ("movq 0x38(%rdi), %r10 \n");

177 
asm
 ("movq 0x40(%rdi), %r9 \n");

178 
asm
 ("movq 0x48(%rdi), %r8 \n");

179 
asm
 ("movq 0x50(%rdi), %rax \n");

180 
asm
 ("movq 0x58(%rdi), %rcx \n");

181 
asm
 ("movq 0x60(%rdi), %rdx \n");

182 
asm
 ("movq 0x68(%rdi), %rsi \n");

183 
asm
 ("push 0x90(%rdi) \n");

184 
asm
 ("popf \n");

185 
asm
 ("movq 0x98(%rdi), %rsp \n");

186 
asm
 ("movq 0x70(%rdi), %rdi \n");

188 
asm
 ("nop \n");

189 
asm
 ("nop \n");

190 
asm
 ("nop \n");

191 
asm
 ("nop \n");

192 
asm
 ("nop \n");

193 
asm
 ("nop \n");

194 
asm
 ("nop \n");

195 
asm
 ("nop \n");

196 
asm
 ("nop \n");

197 
asm
 ("nop \n");

198 
asm
 ("nop \n");

199 
asm
 ("nop \n");

200 
asm
 ("nop \n");

201 
asm
 ("nop \n");

202 
asm
 ("nop \n");

208 
asm
 ("xchg %rsp, 0x6d(%rip) \n");

209 
asm
 ("push %rdi \n");

210 
asm
 ("movq 0x60(%rsp), %rdi \n");

212 
asm
 ("movq %r14, 0x8(%rdi) \n");

213 
asm
 ("movq %r13, 0x10(%rdi) \n");

214 
asm
 ("movq %r12, 0x18(%rdi) \n");

215 
asm
 ("movq %rbp, 0x20(%rdi) \n");

216 
asm
 ("movq %rbx, 0x28(%rdi) \n");

217 
asm
 ("movq %r11, 0x30(%rdi) \n");

218 
asm
 ("movq %r10, 0x38(%rdi) \n");

219 
asm
 ("movq %r9 , 0x40(%rdi) \n");

220 
asm
 ("movq %r8 , 0x48(%rdi) \n");

221 
asm
 ("movq %rax, 0x50(%rdi) \n");

222 
asm
 ("movq %rcx, 0x58(%rdi) \n");

223 
asm
 ("movq %rdx, 0x60(%rdi) \n");

224 
asm
 ("movq %rsi, 0x68(%rdi) \n");

225 
asm
 ("pop %rsi \n");

226 
asm
 ("movq %rsi, 0x70(%rdi) \n");

227 
asm
 ("pushf \n");

228 
asm
 ("pop 0x90(%rdi) \n");

229 
asm
 ("movq 0x20(%rip), %rsi \n");

230 
asm
 ("movq %rsi, 0x98(%rdi) \n");

232 
asm
 ("popf \n");

233 
asm
 ("popq %r15 \n");

234 
asm
 ("popq %r14 \n");

235 
asm
 ("popq %r13 \n");

236 
asm
 ("popq %r12 \n");

237 
asm
 ("popq %r11 \n");

238 
asm
 ("popq %r10 \n");

239 
asm
 ("popq %r9 \n");

240 
asm
 ("popq %r8 \n");

241 
asm
 ("popq %rbp \n");

242 
asm
 ("popq %rsi \n");

243 
asm
 ("popq %rdi \n");

244 
asm
 ("popq %rdx \n");

245 
asm
 ("popq %rcx \n");

246 
asm
 ("popq %rbx \n");

247 
asm
 ("popq %rax \n");

248 
asm
 ("retq \n");

249 
asm
 ("nop \n");

250 
asm
 ("nop \n");

251 
asm
 ("nop \n");

252 
asm
 ("nop \n");

253 
asm
 ("nop \n");

254 
asm
 ("nop \n");

255 
asm
 ("nop \n");

256 
asm
 ("nop \n");

663 
boﬁ
 
	gC⁄Execut‹
::
	$RewRIPIn¢
(* 
‹ig_ö¢_addr
, 
In°ru˘i⁄
* 
ö°r
)

667 
‹ig_ö¢
[12];

672 * 
T_ö¢_no_r15
 = (*)((*)
In¢ExecRIP
 + 0x6c);

674 
íåyID
 
›code
 = 
ö°r
->
	`gëO≥øti⁄
().
	`gëID
();

678 
Ex¥essi⁄
::
På
 
	`x86_gs
(
√w
 
	`Regi°îAST
(
x86_64
::
gs
));

680 i‡(
›code
 =
e_mov
 || opcodê=
e_cmp
 || opcodê=
e_Àa
 || opcodê=
e_add
 || opcodê=
e_sub
)

682 
	`mem˝y
 (
‹ig_ö¢
, 
‹ig_ö¢_addr
, 0x8);

684 i‡(
ö°r
->
	`isRód
(
x86_gs
))

687 i‡(
›code
 =
e_mov
 || opcodê=
e_add
)

689 i‡(
ö°r
->
	`size
() == 7)

691 
	`mem˝y
 (
‹ig_ö¢
+2, 
‹ig_ö¢_addr
+0x1, 6);

692 
‹ig_ö¢
[1] = 0x41;

694 if(
ö°r
->
	`size
() == 8)

696 
‹ig_ö¢
[1] |= 0x1;

700 
	`¥ötf
 ("nonÑecognised gs base insn. \n");

701 
asm
 volatile ("vmcall; \n\t");

704 i‡(
‹ig_ö¢
[4] == 0 && orig_insn[5] == 0 && orig_insn[6] == 0 && orig_insn[7] == 0)

706 
‹ig_ö¢
[3] |= 0x02;

707 
	`mem˝y
(
T_ö¢_no_r15
, 
‹ig_ö¢
, 4);

709 i‡(
‹ig_ö¢
[4] != 0 && orig_insn[5] == 0 && orig_insn[6] == 0 && orig_insn[7] == 0)

711 
‹ig_ö¢
[3] |= 0x42;

712 
	`mem˝y
(
T_ö¢_no_r15
, 
‹ig_ö¢
, 5);

716 
‹ig_ö¢
[3] |= 0x82;

717 
	`mem˝y
(
T_ö¢_no_r15
, 
‹ig_ö¢
, 8);

724 
asm
 volatile ("vmcall; \n\t");

730 i‡(
ö°r
->
	`size
() == 7)

732 
‹ig_ö¢
[0] |= 0x1;

733 i‡(
‹ig_ö¢
[3] == 0 && orig_insn[4] == 0 && orig_insn[5] == 0 && orig_insn[6] == 0)

735 
‹ig_ö¢
[2] |= 0x02;

736 
	`mem˝y
(
T_ö¢_no_r15
, 
‹ig_ö¢
, 3);

738 i‡(
‹ig_ö¢
[3] != 0 && orig_insn[4] == 0 && orig_insn[5] == 0 && orig_insn[6] == 0)

740 
‹ig_ö¢
[2] |= 0x42;

741 
	`mem˝y
(
T_ö¢_no_r15
, 
‹ig_ö¢
, 4);

745 
‹ig_ö¢
[2] |= 0x82;

746 
	`mem˝y
(
T_ö¢_no_r15
, 
‹ig_ö¢
, 7);

749 i‡(
ö°r
->
	`size
() == 6)

751 
	`mem˝y
 (
‹ig_ö¢
+1, 
‹ig_ö¢_addr
, 6);

752 
‹ig_ö¢
[0] = 0x41;

753 i‡(
‹ig_ö¢
[3] == 0 && orig_insn[4] == 0 && orig_insn[5] == 0 && orig_insn[6] == 0)

755 
‹ig_ö¢
[2] |= 0x02;

756 
	`mem˝y
(
T_ö¢_no_r15
, 
‹ig_ö¢
, 3);

758 i‡(
‹ig_ö¢
[3] != 0 && orig_insn[4] == 0 && orig_insn[5] == 0 && orig_insn[6] == 0)

760 
‹ig_ö¢
[2] |= 0x42;

761 
	`mem˝y
(
T_ö¢_no_r15
, 
‹ig_ö¢
, 4);

765 
‹ig_ö¢
[2] |= 0x82;

766 
	`mem˝y
(
T_ö¢_no_r15
, 
‹ig_ö¢
, 7);

772 
asm
 volatile ("vmcall; \n\t");

776 i‡(
›code
 =
e_™d
 && 
ö°r
->
	`isRód
(
x86_gs
))

778 i‡(
ö°r
->
	`size
() == 11)

780 
	`mem˝y
 (
‹ig_ö¢
, 
‹ig_ö¢_addr
, 0x1);

781 
	`mem˝y
 (
‹ig_ö¢
+2, 
‹ig_ö¢_addr
+0x1, 10);

782 
‹ig_ö¢
[1] = 0x41;

784 i‡(
‹ig_ö¢
[4] != 0 && orig_insn[5] != 0 && orig_insn[6] != 0)

786 
‹ig_ö¢
[3] |= 0x82;

787 
	`mem˝y
(
T_ö¢_no_r15
, 
‹ig_ö¢
, 12);

791 
	`as£π
(0);

800 
	`as£π
(0);

803 i‡(
›code
 =
e_xadd
)

805 i‡(
ö°r
->
	`size
() == 8)

807 
	`mem˝y
 (
‹ig_ö¢
, 
‹ig_ö¢_addr
, 0x1);

808 
	`mem˝y
 (
‹ig_ö¢
+2, 
‹ig_ö¢_addr
+1, 0x7);

809 
‹ig_ö¢
[1] = 0x41;

810 i‡(
‹ig_ö¢
[5] != 0 && orig_insn[6] != 0 && orig_insn[7] != 0)

812 
‹ig_ö¢
[4] |= 0x82;

813 
	`mem˝y
(
T_ö¢_no_r15
, 
‹ig_ö¢
, 9);

817 
	`as£π
(0);

822 
	`as£π
(0);

825 i‡(
›code
 =
e_ã°
)

827 
	`mem˝y
 ((*)&
‹ig_ö¢
[1], 
‹ig_ö¢_addr
, 0x7);

829 
‹ig_ö¢
[0] = 0x41;

830 i‡(
‹ig_ö¢
[4] == 0 && orig_insn[5] == 0 && orig_insn[6] == 0 && orig_insn[7] == 0)

832 
‹ig_ö¢
[2] |= 0x02;

833 
	`mem˝y
(
T_ö¢_no_r15
, 
‹ig_ö¢
, 4);

835 i‡(
‹ig_ö¢
[4] != 0 && orig_insn[5] == 0 && orig_insn[6] == 0 && orig_insn[7] == 0)

837 
‹ig_ö¢
[2] |= 0x42;

838 
	`mem˝y
(
T_ö¢_no_r15
, 
‹ig_ö¢
, 5);

842 
‹ig_ö¢
[2] |= 0x82;

843 
	`mem˝y
(
T_ö¢_no_r15
, 
‹ig_ö¢
, 8);

851 
	`¥ötf
 ("rip-relative instruction,ÅypeÇot handled. \n");

852 
asm
 volatile ("movq $0x999999, %%rax; \n\t"

856  
åue
;

857 
	}
}

859 
boﬁ
 
	gC⁄Execut‹
::
	$CÀ¨Tö¢
(* 
T_addr
, 
size
)

864 
	`mem˝y
(
T_addr
, (*)&
N›Byãs
[0], 
size
);

865  
åue
;

866 
	}
}

872 
boﬁ
 
	gC⁄Execut‹
::
	$In¢Di•©ch
(
In°ru˘i⁄
* 
ö°r
, 
±_ªgs
* 
ªgs
)

874 
In¢Size
 = 
ö°r
->
	`size
();

881 
ul⁄g
 
¸tAddr
 = 
ªgs
->
rù
 - 
In¢Size
;

883 
Ex¥essi⁄
::
På
 
	`thePC
(
√w
 
	`Regi°îAST
(
MachRegi°î
::
	`gëPC
(
Arch_x86_64
)));

884 i‡(
ö°r
->
	`isRód
(
thePC
))

886 
Ex¥essi⁄
::
På
 
	`theR15
(
√w
 
	`Regi°îAST
(
	`MachRegi°î
(
x86_64
::
r15
)));

887 i‡(
ö°r
->
	`isRód
(
theR15
Ë|| in°r->
	`isWrôãn
(theR15))

889 
	`¥ötf
 ("r15 is used, useánotherÑeg . \n");

890 
asm
 volatile ("movq $0x999999, %%rax; \n\t"

900 
	`RewRIPIn¢
((*)
¸tAddr
, 
ö°r
);

901 
	`In¢ExecRIP
(
ªgs
);

902 * 
T_ö¢_no_r15
 = (*)((*)
In¢ExecRIP
 + 0x6c);

904 
	`CÀ¨Tö¢
(
T_ö¢_no_r15
, 12);

915 * 
T_ö¢
 = (*)((*)
In¢ExecN⁄RIP
 + 0x68);

917 * 
tmp
 = (*Ë
T_ö¢
;

919 
	`mem˝y
(
T_ö¢
, (*)
¸tAddr
, 
In¢Size
);

923 
	`In¢ExecN⁄RIP
(
ªgs
);

924 
	`CÀ¨Tö¢
(
T_ö¢
, 
In¢Size
);

932 
	}
}

1190 
	gC⁄Execut‹
::
	$C⁄Execut‹
()

1198 
ªt
;

1199 * 
execPage
 = (*)((()
In¢ExecN⁄RIP
) & ~0xFFF);

1200 
ªt
 = 
	`m¥Ÿe˘
(
execPage
, 0x1000, 
PROT_READ
 | 
PROT_WRITE
 | 
PROT_EXEC
);

1201 
execPage
 = (*)((()
In¢ExecRIP
) & ~0xFFF);

1202 
ªt
 = 
	`m¥Ÿe˘
(
execPage
, 0x1000, 
PROT_READ
 | 
PROT_WRITE
 | 
PROT_EXEC
);

1232 
	}
}

	@/home/jqhong/Documents/KernelSE/conexec.h

1 #i‚de‡
_CON_EXEC_H__


2 
	#_CON_EXEC_H__


	)

4 
	~<löux/ty≥s.h
>

6 
	~<io°ªam
>

7 
	~<ve˘‹
>

9 
	~<asm/±ø˚.h
>

11 
	~"CodeObje˘.h
"

12 
	~"In°ru˘i⁄Decodî.h
"

13 
	~"thö˘æ.h
"

14 
	~"˚¡ølhub.h
"

15 
	~"deföes.h
"

17 
	gO¥ndInfo
;

18 
˛ass
 
	gSymInfoDB
;

19 
˛ass
 
	gVMSèã
;

21 
«me•a˚
 
	gDynö°
::
In°ru˘i⁄API
 {

22 
˛ass
 
In°ru˘i⁄
;

23 
˛ass
 
	gEx¥essi⁄
;

26 ˛as†
	cC⁄Execut‹
 {

32 
	m¥iv©e
:

40 * 
T_∑ge
;

41 
	mJmp_RIP_In¢
[6];

43 
	mN›Byãs
[15] = {0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90};

45 
boﬁ
 
if_c⁄dôi⁄_Áû
 (
íåyID
 
›îa_id
, 
±_ªgs
* 
ªgs
);

46 
boﬁ
 
böd_vÆue_f‹_exp
(
In°ru˘i⁄
* 
ö°r
, 
Ex¥essi⁄
::
På
 
èrgë
, 
±_ªgs
* 
ªgs
);

47 
boﬁ
 
emul_cf_ö°
(
In°ru˘i⁄
* 
ö°r
, 
In¢C©eg‹y
 
C©e
, 
±_ªgs
* 
ªgs
);

49 
boﬁ
 
RewRIPIn¢
(* 
‹ig_ö¢_addr
, 
In°ru˘i⁄
* 
ö°r
);

50 
boﬁ
 
CÀ¨Tö¢
(* 
T_addr
, 
size
);

54 
	gpublic
:

58 
C⁄Execut‹
();

59 ~
	$C⁄Execut‹
(){
	}
};

75 
boﬁ
 
In¢Di•©ch
(
In°ru˘i⁄
* 
ö°r
, 
±_ªgs
* 
ªgs
);

	@/home/jqhong/Documents/KernelSE/defines.h

2 #i‚de‡
_DEFINE_S_H__


3 
	#_DEFINE_S_H__


	)

9 #i‚de‡
_SYM_DEBUG_OUTPUT


10 
	#_SYM_DEBUG_OUTPUT


	)

18 #i‚de‡
_PªDißs£mbÀ


19 
	#_PªDißs£mbÀ


	)

22 
	~<löux/ty≥s.h
>

24 
	~<m≠
>

26 
«me•a˚
 
	gEXPR
 {

27 
˛ass
 
	gEx¥
;

30 
	gEXPR
::
	tEx¥
 
	tKVEx¥
;

31 
	g°d
::
	tsh¨ed_±r
<
	tKVEx¥
> 
	tKVEx¥På
;

33 
	sRegVÆue
 {

34 
uöt
 
	mödx
;

35 
uöt
 
	msize
;

36 
boﬁ
 
	mbsym
;

38 
öt64_t
 
	mi64
;

39 
öt32_t
 
	mi32
;

40 
öt16_t
 
	mi16
;

41 
öt8_t
 
	mi8
;

42 
uöt64_t
 
	mu64
;

43 
uöt32_t
 
	mu32
;

44 
uöt16_t
 
	mu16
;

45 
uöt8_t
 
	mu8
;

49 
KVEx¥På
 
	mex¥
;

52 
	sMemVÆue
 {

53 
ul⁄g
 
	maddr
;

54 
ul⁄g
 
	msize
;

55 
boﬁ
 
	mbsym
;

57 
öt64_t
 
	mi64
;

58 
öt32_t
 
	mi32
;

59 
öt16_t
 
	mi16
;

60 
öt8_t
 
	mi8
;

61 
uöt64_t
 
	mu64
;

62 
uöt32_t
 
	mu32
;

63 
uöt16_t
 
	mu16
;

64 
uöt8_t
 
	mu8
;

68 
KVEx¥På
 
	mex¥
;

71 
	#FIX_ME
(Ë
	`¥ötf
("Fix-me: %s:%d %s\n", 
__FILE__
, 
__LINE__
, 
__FUNCTION__
)

	)

72 
	#LOCOUT1
(
O
Ë
°d
::
cout
 << 
__FILE__
 << ":" << 
dec
 << 
__LINE__
 << " => " << O << std::
ídl


	)

73 
	#LOCOUT2
(
O1
, 
O2
Ë
°d
::
cout
 << 
__FILE__
 << ":" << 
dec
 << 
__LINE__
 << " => " << O1 << O2 << std::
ídl


	)

74 
	#DBG
(
fmt
, ...) \

75 dÿ{
	`¥ötf
 ("%s(): " 
fmt
, 
__func__
, ##
__VA_ARGS__
); } 0)

	)

76 
	#LOG
(
O1
Ë
°d
::
cout
 << O1 << std::
ídl


	)

78 
	#ERRR_ME
(
O
Ë
	`¥ötf
("Eº-me: %s:%d %†=> %s\n", 
__FILE__
, 
__LINE__
, 
__FUNCTION__
, O)

	)

	@/home/jqhong/Documents/KernelSE/fatctrl.cpp

1 
	~"Át˘æ.h
"

3 
	~<asm/±ø˚.h
>

4 
	~<löux/ty≥s.h
>

5 
	~<sig«l.h
>

6 
	~<uc⁄ãxt.h
>

8 
	~<io°ªam
>

10 
	~"BP©ch.h
"

11 
	~"BP©ch_basicBlock.h
"

12 
	~"BP©ch_ÊowGøph.h
"

13 
	~"BP©ch_fun˘i⁄.h
"

15 
	~"VMSèã.h
"

16 
	~"deföes.h
"

17 
	~"öãrÁ˚.h
"

18 
	~"thö˘æ.h
"

21 
	~"Át˘æ.h
"

24 
usög
 
«me•a˚
 
	g°d
;

25 
usög
 
«me•a˚
 
	gDynö°
;

26 
usög
 
«me•a˚
 
	gP¨£API
;

27 
usög
 
«me•a˚
 
	gIn°ru˘i⁄API
;

30 
	gCF©tCål
::
	$InôFuncDB
(c⁄° * 
fûíame
)

33 
FILE
 *
Â
 = 
	`f›í
(
fûíame
, "r");

34 i‡(
Â
 =
NULL
)

36 
	`¥ötf
 ("open ker_func.txt failed. \n");

37 
	`exô
(
EXIT_FAILURE
);

40 
chunk
[128];

41 
size_t
 
Àn
 = (
chunk
);

42 * 
löe
 = (*Ë
	`mÆloc
(
Àn
);

43 
löe
[0] = '\0';

45 
i
 = 0;

46 (
	`fgës
(
chunk
, (chunk), 
Â
)Ë!
NULL
){

47 
	`°r˝y
(
löe
, 
chunk
);

48 i‡(
löe
[
	`°æí
(line) - 2] == ':')

50 * 
tmp
 = 
	`°πok
(
löe
, ":");

52 
m_func_ˇŒ
[
i
].
func_addr
 = 
	`°πoul
(
tmp
, 
NULL
, 16);

53 i‡(
	`fgës
(
chunk
, (chunk), 
Â
Ë!
NULL
)

55 
	`°r˝y
(
löe
, 
chunk
);

56 
idx
 = 
	`°πﬁ
(
löe
, 
NULL
, 10);

57 
j
;

59 
m_func_ˇŒ
[
i
].
num_ˇŒ
 = 
idx
;

60 
m_func_ˇŒ
[
i
].
ˇŒ_ö°s
 = (
ˇŒ_ö¢
*)
	`mÆloc
((ˇŒ_ö¢)*
idx
);

61 
j
 = 0; j < 
idx
; j++)

63 
löe
[0] = '\0';

64 i‡(
	`fgës
(
chunk
, (chunk), 
Â
Ë!
NULL
)

66 
	`°r˝y
(
löe
, 
chunk
);

67 
tmp
 = 
	`°πok
(
löe
, " ");

68 
m_func_ˇŒ
[
i
].
ˇŒ_ö°s
[
j
].
addr
 = 
	`°πoul
(
tmp
, 
NULL
, 16);

69 
tmp
 = 
	`°πok
(
NULL
, " ");

70 
m_func_ˇŒ
[
i
].
ˇŒ_ö°s
[
j
].
Àn
 = 
	`°πﬁ
(
tmp
, 
NULL
, 10);

71 
tmp
 = 
	`°πok
(
NULL
, " ");

72 i‡(
tmp
[0] != 'f')

74 
m_func_ˇŒ
[
i
].
ˇŒ_ö°s
[
j
].
de°
 = 0;

78 
m_func_ˇŒ
[
i
].
ˇŒ_ö°s
[
j
].
de°
 = 
	`°πoul
(
tmp
, 
NULL
, 16);

84 
i
 ++;

86 
löe
[0] = '\0';

89 
	`f˛o£
(
Â
);

90 i‡(
löe
)

91 
	`‰ì
(
löe
);

94 
	}
}

96 
	gCF©tCål
::
	$InôRediPagePoﬁ
()

100 
m_∑ge_poﬁ
 = (
POOL
*Ë
	`√w
 (POOL);

101 
	`PoﬁInô
 (0x1000*
MAX_Redú_Code_Page
);

103 
	}
}

107 
	gCF©tCål
::
	$CF©tCål
(
VMSèã
 *
VM
, 
EveMëa
* 
mëa
) {

108 
m_VM
 = 
VM
;

113 
m_emëa
 = 
mëa
;

123 * 
ãmp
;

131 
ãmp
 = &
ªdú_code_∑ges
[0];

132 
	`mem£t
(
ãmp
, 0x0, (
ªdú_code_∑ges
));

134 
¸t_ªdú_idx
 = 
¸t_max_ªdú_idx
 = 0;

137 
≥r_hook
[0] = 0xcc;

138 
¸t_öt3_idx
 = 0;

139 
¥obe_‹ig_ö°
 = (
hook_öfo
*)
	`mÆloc
(
MAX_INT3
*(hook_info));

142 
°d
::
°rög
 
fûíame
 = "/home/jqhong/Documents/test_user/kernel_se/ker_func.txt";

143 
m_func_ˇŒ
 = (
CÆlInAŒFuncs
*)
	`mÆloc
((CallInAllFuncs)*44020);

144 
	`InôFuncDB
(
fûíame
.
	`c_°r
());

148 
	}
}

150 
	gCF©tCål
::~
	$CF©tCål
() {

154 
	`PoﬁDe°roy
(
m_∑ge_poﬁ
);

158 
	}
}

160 
	gCF©tCål
::
	$FödFuncCÆlInfo
(
addr
)

162 
low
 = 0;

163 
high
 = 44019;

164 
low
 <
high
) {

165 
mid
 = (
low
 + 
high
)/2;

166 
midVÆ
 = 
m_func_ˇŒ
[
mid
].
func_addr
;

167 i‡(
midVÆ
 < 
addr
)

168 
low
 = 
mid
 + 1;

169 i‡(
midVÆ
 > 
addr
)

170 
high
 = 
mid
 - 1;

172  
mid
;

175 
	}
}

182 
boﬁ
 
	gCF©tCål
::
	$¥o˚ssFunc
(
ul⁄g
 
addr
) {

201 i‡(
	`CheckFuncSym
(
addr
) == 0)

202  
Ál£
;

208 
m_Thö
->
	`¥o˚ssFun˘i⁄
(
addr
);

212  
åue
;

213 
	}
}

215 
	gCF©tCål
::
	$PoﬁInô
 (
size_t
 
size
)

217 * 
ãmp
 = 
	`vÆloc
(
size
);

218 
	`mem£t
 (
ãmp
, 0x0, 
size
);

222 
m_∑ge_poﬁ
->
öô
 = 
ãmp
 + 0x1000;

223 
m_∑ge_poﬁ
->
√xt
 = 
ãmp
 + 0x1000;

224 
m_∑ge_poﬁ
->
íd
 = 
ãmp
 + 
size
;

226 
	`¥ötf
 ("ªdúe˘edÖagê°¨à‰om :%p.Énd†: %p. \n", 
ãmp
, 
m_∑ge_poﬁ
->
íd
);

228 
	}
}

230 
	gCF©tCål
::
	$PoﬁDe°roy
 (
POOL
 *
p
)

232 
	`‰ì
(
p
);

233 
	}
}

235 
size_t
 
	gCF©tCål
::
	$PoﬁCheckAvaû
 (
POOL
* 
p
)

237  ()
p
->
íd
 - (Ì->
√xt
;

238 
	}
}

240 * 
	gCF©tCål
::
	$PoﬁAŒoc
 (
POOL
* 
p
, 
size_t
 
size
)

242 i‡(
	`PoﬁCheckAvaû
(
p
Ë< 
size
)

244  
NULL
;

246 * 
mem
 = (*Ë
p
->
√xt
;

247 
p
->
√xt
 +
size
;

248  
mem
;

249 
	}
}

255 
	gCF©tCål
::
	$RedúCodePageHy≥rCÆl
 (* 
kî_addr
)

259 i‡(
¸t_max_ªdú_idx
 =
MAX_Redú_Code_Page
)

261 
	`¥ötf
 ("new_pages used up. \n");

262 
asm
 volatile ("movq $0x999999, %%rax; \n\t"

274 * 
√w_va
 = 
	`PoﬁAŒoc
 (
m_∑ge_poﬁ
, 0x1000);

275 
	`¥ötf
 ("√w_va: %lx. kî_addr: %lx. \n", 
√w_va
, 
kî_addr
);

277 
	`mem˝y
 (
√w_va
, 
kî_addr
, 0x1000);

279 
	`¥ötf
 ("abouàtÿissuêhy≥∏ˇŒÅÿªdúe˘Öage: %lx .\n", 
kî_addr
);

290 
asm
 volatile ("movq $0xabcd, %%rbx; \n\t"

295 ::"m"(
kî_addr
), "m"(
√w_va
):"%rax","%rbx","%rcx");

308 
ªdú_code_∑ges
[
¸t_max_ªdú_idx
].
‹ig_t_∑ge_addr
 = (Ë
kî_addr
;

309 
ªdú_code_∑ges
[
¸t_max_ªdú_idx
].
√w_™a_∑ge_addr
 = (Ë
√w_va
;

310 
ªdú_code_∑ges
[
¸t_max_ªdú_idx
].
off£t
 = (()
kî_addr
Ë- (()
√w_va
);

313 
¸t_ªdú_idx
 = 
¸t_max_ªdú_idx
;

315 
¸t_max_ªdú_idx
 ++;

329 
	}
}

332 
	gCF©tCål
::
	$upd©e_¸t_ªdú_idx
 (
ãmpAddr
)

334 
i
;

335 
i
 = 0; i < 
¸t_max_ªdú_idx
; i ++)

338 i‡(
ãmpAddr
 =
ªdú_code_∑ges
[
i
].
‹ig_t_∑ge_addr
)

340 
¸t_ªdú_idx
 = 
i
;

344 i‡(
i
 =
¸t_max_ªdú_idx
)

346 
	`RedúCodePageHy≥rCÆl
((*Ë
ãmpAddr
);

349 
	}
}

352 
	gCF©tCål
::
	$In°ÆlPîI¡3
 (
addr
, 
Àn
, 
de°
)

354 
¥obe_‹ig_ö°
[
¸t_öt3_idx
].
addr
 =áddr;

355 
¥obe_‹ig_ö°
[
¸t_öt3_idx
].
de°
 = dest;

356 
¥obe_‹ig_ö°
[
¸t_öt3_idx
].
Àn
 =Üen;

358 
	`mem˝y
 (&
¥obe_‹ig_ö°
[
¸t_öt3_idx
].
‹ig_byãs
, (*)
addr
, 0x1);

361 
	`mem˝y
 ((*)(
addr
-
ªdú_code_∑ges
[
¸t_ªdú_idx
].
off£t
), 
≥r_hook
, 0x1);

364 
¸t_öt3_idx
 ++;

365 i‡(
¸t_öt3_idx
 >
MAX_INT3
)

367 
	`¥ötf
 ("öt3áºay u£d up, i¡3_¨øy_idx: %d. \n", 
¸t_öt3_idx
);

368 
asm
 volatile ("movq $0x999999, %%rax; \n\t"

373 
	}
}

375 
	gCF©tCål
::
	$In°ÆlI¡3F‹Func
 (
func_addr
)

377 
	`¥ötf
 ("ö°Æ»¥obêf‹ fun¯: %lx. \n", 
func_addr
);

378 
func_idx
 = 
	`FödFuncCÆlInfo
(
func_addr
);

380 i‡(
func_idx
 == -1)

382 
	`¥ötf
 ("no call inst in func \n");

389 
tŸÆ
 = 
m_func_ˇŒ
[
func_idx
].
num_ˇŒ
;

390 
ˇŒ_ö¢
* 
±r
 = 
m_func_ˇŒ
[
func_idx
].
ˇŒ_ö°s
;

391 
i
;

392 
addr_l
, 
addr_h
;

393 
Àn
;

394 
de°
;

395 
addr_l
 = 
±r
[0].
addr
;

396 
Àn
 = 
±r
[0].len;

397 
de°
 = 
±r
[0].dest;

399 
	`upd©e_¸t_ªdú_idx
(
addr_l
 & ~0xfff);

400 
	`In°ÆlPîI¡3
(
addr_l
, 
Àn
, 
de°
);

401 
	`¥ötf
 ("ö°Æ»¥obê©: %lx. \n", 
addr_l
);

403 
i
 = 1; i < 
tŸÆ
; i ++)

405 
addr_h
 = 
±r
[
i
].
addr
;

406 
Àn
 = 
±r
[
i
].len;

407 
de°
 = 
±r
[
i
].dest;

409 i‡((
addr_h
 & ~0xfffË!
ªdú_code_∑ges
[
¸t_ªdú_idx
].
‹ig_t_∑ge_addr
)

411 
	`upd©e_¸t_ªdú_idx
(
addr_h
 & ~0xfff);

413 
	`In°ÆlPîI¡3
(
addr_h
, 
Àn
, 
de°
);

414 
	`¥ötf
 ("...ö°Æ»¥obê©: %lx. \n", 
addr_h
);

418 
	}
}

420 
boﬁ
 
	gCF©tCål
::
	$M⁄iSèπOfSE
 (
ul⁄g
 
addr
)

423 
addr_l
 = 
addr
;

424 
Àn
 = 5;

425 
de°
 = 0xffffffff810b6080;

427 
	`upd©e_¸t_ªdú_idx
(
addr_l
 & ~0xfff);

428 
	`In°ÆlPîI¡3
(
addr_l
, 
Àn
, 
de°
);

429 
	`¥ötf
 ("ö°Æ»¥obê©: %lx. \n", 
addr_l
);

430  
åue
;

431 
	}
}

433 
	gCF©tCål
::
	$föd_¥obe_idx
(
rù
)

435 
i
;

436 
i
 = 0; i < 
¸t_öt3_idx
; i ++)

438 if(
¥obe_‹ig_ö°
[
i
].
addr
 =
rù
)

440 if(
¥obe_‹ig_ö°
[
i
].
de°
)

442  
i
;

446 
	`¥ötf
 ("needá disassemblerÅoÖarseÅhe dest. \n");

447 
asm
 volatile ("movq $0xfff, %%rax; \n\t"

453 i‡(
i
 =
¸t_öt3_idx
)

455 
	`¥ötf
 ("addrÇot found in installedÖrobe. \n");

456 
asm
 volatile ("movq $0xfff, %%rax; \n\t"

460 
	}
}

464 
	gCF©tCål
::
	$emulCÆl
 (
±_ªgs
* 
ªgs
)

467 * 
öt3_°ack_±r
 = (*)(
m_emëa
->
t_öt3_°ack
 - 0x28);

468 
ßved_rù
, 
ßved_r•
, 
ßved_rÊags
;

469 
¥obe_idx
;

470 
ªt_addr
, 
ˇŒ_de°
;

471 * 
t_°ack_±r
;

472 
ßved_rù
 = 
öt3_°ack_±r
[0];

473 
ßved_rù
 -= 1;

474 
ßved_rÊags
 = 
öt3_°ack_±r
[2];

475 
ßved_r•
 = 
öt3_°ack_±r
[3];

476 
	`¥ötf
 ("ßvedÑù: %lx.Ñ•: %lx,ÑÊags: %lx. \n", 
ßved_rù
, 
ßved_r•
, 
ßved_rÊags
);

481 
¥obe_idx
 = 
	`föd_¥obe_idx
(
ßved_rù
);

482 
ˇŒ_de°
 = 
¥obe_‹ig_ö°
[
¥obe_idx
].
de°
;

487 
ªt_addr
 = 
ßved_rù
 + 
¥obe_‹ig_ö°
[
¥obe_idx
].
Àn
;

488 
t_°ack_±r
 = (*)
ßved_r•
;

489 
t_°ack_±r
 --;

490 *
t_°ack_±r
 = 
ªt_addr
;

497 
ªgs
->
r•
 = ()
t_°ack_±r
;

498 
ªgs
->
eÊags
 = 
ßved_rÊags
;

500 
ªgs
->
rù
 = 
ˇŒ_de°
;

503 
	`¥ötf
 ("a·îádju°mít...Å¨gë_r•: %lx,Å¨gë_rÊags: %lx.Ñdi: %lx. \n", 
ªgs
->
r•
,Ñegs->
eÊags
,Ñegs->
rdi
);

506  
ˇŒ_de°
;

507 
	}
}

511 
	gCF©tCål
::
	$INT3H™dÀr
()

517 
±_ªgs
* 
m_ªgs
 = 
m_VM
->
	`gëPTRegs
();

518 
ˇŒ_de°
 = 
	`emulCÆl
(
m_ªgs
);

520 
	`In°ÆlI¡3F‹Func
(
ˇŒ_de°
);

521 
	`¥ötf
 ("int3 invoked. \n");

523 
	}
}

526 
	gCF©tCål
::
	$VEH™dÀr
()

528 * 
vút_exec_¨ó
;

529 
exô_quÆ
 = 
m_emëa
->
vút_ex˚_¨ó
[1];

530 i‡((
exô_quÆ
 & 0x4UL) != 0)

532 
	`¥ötf
 ("unexpected EPT violation . \n");

533 
asm
 volatile("movq $0x99999, %%rax; \n\t"

539 
va
 = 
m_emëa
->
vút_ex˚_¨ó
[2];

542 * 
ve_°ack_±r
 = (*)(
m_emëa
->
t_ve_°ack
 - 0x28);

543 
ßved_rù
, 
ßved_r•
, 
ßved_rÊags
;

544 
ßved_rù
 = 
ve_°ack_±r
[0];

545 
ßved_rÊags
 = 
ve_°ack_±r
[2];

546 
ßved_r•
 = 
ve_°ack_±r
[3];

547 
	`¥ötf
 ("ßvedÑù: %lx.Ñ•: %lx,ÑÊags: %lx. \n", 
ßved_rù
, 
ßved_r•
, 
ßved_rÊags
);

549 
boﬁ
 
ªt
 = 
m_VM
->
	`isSYMem‹yCñl
(
va
, 8);

550 
m_emëa
->
vút_ex˚_¨ó
[0] = 0x0UL;

551 i‡(
ªt
 == 0)

554 
m_Thö
->
	`ExecO√In¢
(
ßved_rù
);

559 
	`¥ötf
 ("invoke symExecutor. \n");

560 
asm
 volatile ("mov $0x99999999, %rax; \n\t"

567 
	}
}

570 
	gCF©tCål
::
	$˛ór_dr
(
idx
)

572 
dr7
;

573 
idx
)

576 
dr7
 = 0xfff0fffc;

579 
dr7
 = 0xff0ffff3;

582 
dr7
 = 0xf0ffffcf;

585 
dr7
 = 0x0fffff3f;

588 
asm
 volatile ("mov $0xabcdabcd, %rax; \n\t"

593 
asm
 volatile (

600 ::"m"(
dr7
):"%eax","%ebx");

602 
	}
}

605 
	gCF©tCål
::
	$DBH™dÀr
()

607 
	`˛ór_dr
(0);

608 
	`¥ötf
 ("in DB handler. \n");

609 
asm
 volatile ("mov $0x99999999, %rax; \n\t"

614 
	}
}

640 
boﬁ
 
	gCF©tCål
::
	$CheckFuncSym
(
addr
)

642  
åue
;

643 
	}
}

	@/home/jqhong/Documents/KernelSE/fatctrl.h

1 #i‚de‡
_FATCTRL_H__


2 
	#_FATCTRL_H__


	)

4 
	~<löux/ty≥s.h
>

6 
	~<io°ªam
>

7 
	~<m≠
>

9 
	~"˚¡ølhub.h
"

13 
˛ass
 
	gVMSèã
;

15 
˛ass
 
	gCThöCål
;

16 
˛ass
 
	gSymExecut‹
;

17 
˛ass
 
	gC⁄Execut‹
;

20 
	sˇŒ_ö¢
 {

21 
	maddr
;

22 
	mde°
;

23 
	m‹ig_byãs
[5];

24 
	mÀn
;

27 
	sCÆlInAŒFuncs
{

28 
	mfunc_addr
;

29 
ˇŒ_ö¢
* 
	mˇŒ_ö°s
;

30 
	mnum_ˇŒ
;

34 
	shook_öfo
 {

35 
	maddr
;

36 
	mde°
;

38 
	m‹ig_byãs
[1];

39 
	mÀn
;

43 
	spoﬁ


45 * 
	möô
;

46 * 
	m√xt
;

47 * 
	míd
;

48 } 
	tPOOL
;

50 
	sªdú_∑ge_öfo
 {

51 
	m‹ig_t_∑ge_addr
;

52 
	m√w_™a_∑ge_addr
;

53 
	moff£t
;

57 
	#MAX_INT3
 30

	)

58 
	#MAX_Redú_Code_Page
 8

	)

60 ˛as†
	cCF©tCål
 {

62 
VMSèã
 *
	mm_VM
;

65 
POOL
* 
	mm_∑ge_poﬁ
;

71 
	m¸t_max_ªdú_idx
;

72 
	m¸t_ªdú_idx
;

77 
ªdú_∑ge_öfo
 
	mªdú_code_∑ges
[
MAX_Redú_Code_Page
];

79 
CÆlInAŒFuncs
* 
	mm_func_ˇŒ
;

81 
	m≥r_hook
[0x1];

82 
hook_öfo
* 
	m¥obe_‹ig_ö°
;

84 
	m¸t_öt3_idx
;

94 
	mpublic
:

95 
EveMëa
* 
m_emëa
;

96 
CThöCål
 *
	mm_Thö
;

98 
CF©tCål
(
VMSèã
 *
VM
, 
EveMëa
* 
mëa
);

99 ~
CF©tCål
();

106 
boﬁ
 
¥o˚ssFunc
(
ul⁄g
 
addr
);

107 
INT3H™dÀr
();

108 
VEH™dÀr
();

109 
DBH™dÀr
();

110 
boﬁ
 
M⁄iSèπOfSE
 (
ul⁄g
 
addr
);

111 
InôRediPagePoﬁ
();

113 
	m¥iv©e
:

115 
PoﬁInô
 (
size_t
 
size
);

116 
PoﬁDe°roy
 (
POOL
 *
p
);

117 
size_t
 
PoﬁCheckAvaû
 (
POOL
* 
p
);

118 * 
PoﬁAŒoc
 (
POOL
* 
p
, 
size_t
 
size
);

120 
InôFuncDB
(c⁄° * 
fûíame
);

121 
FödFuncCÆlInfo
(
addr
);

122 
In°ÆlPîI¡3
 (
addr
, 
Àn
, 
de°
);

123 
In°ÆlI¡3F‹Func
 (
func_addr
);

124 
föd_¥obe_idx
(
rù
);

125 
upd©e_¸t_ªdú_idx
 (
ãmpAddr
);

127 
RedúCodePageHy≥rCÆl
 (* 
kî_addr
);

128 
emulCÆl
(
±_ªgs
* 
ªgs
);

129 
˛ór_dr
(
idx
);

132 
boﬁ
 
CheckFuncSym
();

134 
boﬁ
 
mu°yesU£Symbﬁ
(
ul⁄g
 
BB_addr
);

135 
boﬁ
 
mu°nŸU£Symbﬁ
(
ul⁄g
 
BB_addr
);

136 
boﬁ
 
mayU£Symbﬁ
(
ul⁄g
 
BB_addr
);

	@/home/jqhong/Documents/KernelSE/interface.h

1 #i‚de‡
_INTER_FACE_H__


2 
	#_INTER_FACE_H__


	)

5 #ifde‡
__˝lu•lus


9 
	#EXPORT_ME


	)

11 
EXPORT_ME
 
boﬁ
 
ﬂsis_lib_öô
(c⁄° *
ñf_fûe
, 
ul⁄g
 
ba£_addªss
);

12 
EXPORT_ME
 
ﬂsis_lib_föi
();

14 
EXPORT_ME
 
boﬁ
 
De˛¨eSymbﬁicObje˘
(
ul⁄g
 
addªss
, ul⁄g 
size
);

16 
±_ªgs
;

17 
EXPORT_ME
 
boﬁ
 
SèπExecuti⁄At
(
±_ªgs
 *
ªgs
);

19 #ifde‡
__˝lu•lus


25 
boﬁ
 
SymbﬁicQuîy
(*
ö°ru˘i⁄
);

26 
boﬁ
 
symExecut‹
(*
¨g
);

	@/home/jqhong/Documents/KernelSE/loader/main.cpp

1 
	~<dlf˙.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<sys/mm™.h
>

7 
	~<lök.h
>

8 
	~<löux/ty≥s.h
>

10 
	~<asm/±ø˚.h
>

12 
	~"˚¡ølhub.h
"

13 
	~"CPUSèã.h
"

17 
	~"dyn_ªgs.h
"

19 
usög
 
«me•a˚
 
	gDynö°
;

27 
	#__START_KERNEL_MAP
 0xffffffff80000000

	)

28 
	#PAGE_OFFSET
 0xffff888000000000

	)

31 
	ssh¨_¨g


33 vﬁ©ûê
	mÊag
;

34 
	mrdi
;

35 
	mrsi
;

36 
	mrdx
;

37 
	mrcx
;

38 
	mr8
;

39 
	mr9
;

40 
	mr11
;

41 
	mr10
;

42 
	møx
;

43 
	meÊags
;

44 
	mrù
;

45 
	mr•
;

46 
	mrbx
;

47 
	mrbp
;

48 
	mr12
;

49 
	mr13
;

50 
	mr14
;

51 
	mr15
;

60 
	mfs_ba£
;

61 
	mgs_ba£
;

62 
	mm§_kî√l_gs_ba£
;

63 
	mgdt
;

64 
	midt
;

65 
	mtss_ba£
;

66 
	mtss_pg_off
;

67 
	mg_sysˇŒ_íåy
;

68 
	mpf_íåy
;

69 
	möt3_íåy
;

70 
	m¸0
;

71 
	m¸2
;

72 
	m¸3
;

73 
	m¸4
;

74 
	me„r
;

75 
	m≠ic_ba£_addr
;

76 
	m≠ic_ac˚ss_addr
;

77 
	mio_bôm≠_a_addr
;

78 
	mio_bôm≠_b_addr
;

79 
	mm§_bôm≠_addr
;

80 
	mtsc_off£t
;

81 
	mexô_ªas⁄
;

82 
	mexô_quÆifiˇti⁄
;

83 
	mö°_Àn
;

84 
	mevít_Êag
;

85 
	míåy_öå_öfo
;

86 
	mu£r_Êag
;

87 vﬁ©ûê
	mgue°_timeout_Êag
;

88 vﬁ©ûê
	mexô_wr⁄g_Êag
;

89 vﬁ©ûê
	m¸oss_∑ge_Êag
;

91 
sh¨_¨g
* 
	gei_sh¨_¨gs
;

94 
	sèrgë_c⁄ãxt
 {

95 
	meÊags
;

96 
	mr15
;

97 
	mr14
;

98 
	mr13
;

99 
	mr12
;

100 
	mrbp
;

101 
	mrbx
;

102 
	mr11
;

103 
	mr9
;

104 
	mr8
;

105 
	mr10
;

106 
	mrdx
;

107 
	mrsi
;

108 
	mrdi
;

109 
	mr•
;

110 
	mrù
;

111 
	møx
;

112 
	mrcx
;

114 vﬁ©ûê
èrgë_c⁄ãxt
* 
	gèrgë_˘x
;

117 
	sbﬂrd_c⁄ãxt
 {

118 
	mt_db_h™dÀr
;

119 
	mt_ve_h™dÀr
;

120 
	mt_öt3_h™dÀr
;

121 
	míåy_g©e
;

122 
	mpf_h™dÀr
;

123 
	msysˇŒ_h™dÀr
;

125 
	mª£rved1
;

126 
	msysˇŒ_exô_h™dÀr
;

129 
	mrcx
;

130 
	møx
;

132 
	mrù
;

134 vﬁ©ûê
bﬂrd_c⁄ãxt
* 
	gbﬂrd_˘x
;

136 
	gexô_g©e_va
;

137 
	gidt_va
;

138 
	ggdt_va
;

139 
	gtss_va
;

140 
	gd©a_∑ge
;

141 
	groŸ_±_va
;

144 
	g™a_t_tss
;

145 
	g™a_t_gdt
;

146 
	g™a_t_idt
;

147 * 
	gvút_ex˚_¨ó
;

148 
	g™a_°ack
;

153 
	gt_öt3_°ack
;

156 
	gíåy_g©e
;

157 
	gexô_g©e
;

158 
	gsysˇŒ_exô_g©e
;

159 
	gt_fsba£
;

160 
	gnme_fsba£
;

161 * 
	ggdt_ba£
;

162 
	guk_off£t
;

164 
ExecSèã
* 
	gexecSèã
;

172 
MacReg
 
	gmachRegs
;

174 
«tive_to_SE_˘x_swôch
();

175 
SE_to_«tive_˘x_swôch
();

240 
__©åibuã__
 ((
noölöe
)Ë
	$rdtsc
()

242 
hi
, 
lo
;

243 
asm
 vﬁ©ûê("rdtsc" : "˜"(
lo
), "=d"(
hi
));

245  ((Ë
lo
 | ((Ë
hi
 << 32));

246 
	}
}

248 
	$wrôe_fs
 (
ba£
)

250 
asm
 volatile ("movq %0, %%rax; \n\t"

252 ::"m"(
ba£
):"%rax");

254 
	}
}

256 
	$ªad_fs
 ()

258 
ba£
;

259 
asm
 volatile (

262 ::"m"(
ba£
):"%rax");

263  
ba£
;

264 
	}
}

266 
	$wrôe_gs
 (
ba£
)

268 
asm
 volatile ("movq %0, %%rax; \n\t"

270 ::"m"(
ba£
):"%rax");

272 
	}
}

274 
	$ªad_gs
 ()

276 
ba£
;

277 
asm
 volatile (

280 ::"m"(
ba£
):"%rax");

281  
ba£
;

282 
	}
}

283 
	$rdm§
 (
idx
)

285 
vÆue
;

286 
high
, 
low
;

287 
asm
 volatile ("mov %2, %%ecx; \n\t"

291 :"=m"(
high
), "=m"(
low
):"m"(
idx
):"%eax","%edx","%ecx");

292 
vÆue
 = ((
high
 << 32Ë& 0xffffffff00000000Ë| (
low
 & 0xffffffff);

293  
vÆue
;

294 
	}
}

295 
	$wrm§
 (
idx
, 
vÆue
)

297 
high
, 
low
;

298 
high
 = (
vÆue
 >> 32) & 0xffffffff;

299 
low
 = 
vÆue
 & 0xffffffff;

300 
asm
 volatile ("mov %2, %%ecx; \n\t"

304 ::"m"(
high
), "m"(
low
), "m"(
idx
):"%eax","%edx","%ecx");

306 
	}
}

307 
	$rd_¸0
 ()

309 
¸0
;

310 
asm
 volatile ("mov %%cr0, %%rax; \n\t"

312 :"=m"(
¸0
)::"%rax");

313  
¸0
;

314 
	}
}

315 
	$rd_¸2
 ()

317 
¸2
;

318 
asm
 volatile ("mov %%cr2, %%rax; \n\t"

320 :"=m"(
¸2
)::"%rax");

321  
¸2
;

322 
	}
}

323 
	$rd_¸4
 ()

325 
¸4
;

326 
asm
 volatile ("mov %%cr4, %%rax; \n\t"

328 :"=m"(
¸4
)::"%rax");

329  
¸4
;

330 
	}
}

331 
	$wr_¸0
 (
¸0
)

333 
asm
 volatile (

336 ::"m"(
¸0
):"%rax");

338 
	}
}

339 
	$wr_¸2
 (
¸2
)

341 
asm
 volatile (

344 ::"m"(
¸2
):"%rax");

346 
	}
}

347 
	$wr_¸4
 (
¸4
)

349 
asm
 volatile (

352 ::"m"(
¸4
):"%rax");

354 
	}
}

356 
	$swôch_to_rög0
 ()

358 * 
mem
 = 
	`mÆloc
 (10);

359 
asm
 volatile ("movq %%rsp, %%rdx; \n\t"

366 ::"m"(
mem
):"%rdi","%rsi", "%rdx");

368 
	}
}

370 
	$ª°‹e_u£r_¥ivûege
 ()

372 
asm
 volatile (

383 
	}
}

386 
	$func
()

388 
asm
 volatile ("" : );

390 
	}
}

393 
	$öô_ˇŒ_g©e
 ()

395 * 
ãmp_gdt
;

396 
ˇŒ_g©e_íåy
;

397 
ˇŒ_g©e_addr
;

399 
ˇŒ_g©e_addr
 = (Ë
func
;

401 
ãmp_gdt
 = 
gdt_ba£
;

402 
ˇŒ_g©e_íåy
 = (
ˇŒ_g©e_addr
 & 0xffff) | (0x10 << 16) | (() (0xec00) << 32) | (((call_gate_addr >> 16) & 0xffff) << 48);

403 
ãmp_gdt
[12] = 
ˇŒ_g©e_íåy
;

404 
ˇŒ_g©e_íåy
 = (
ˇŒ_g©e_addr
 >> 32) & 0xffffffff;

405 
ãmp_gdt
[13] = 
ˇŒ_g©e_íåy
;

407 
asm
 vﬁ©ûê("˛Êush (%0)" :: "r"(&(
ãmp_gdt
[12])));

410 
	}
}

414 "C" 
nme_pf_h™dÀr
 (, *);

415 
	$nme_pf_h™dÀr
 (
¸2
, * 
pf_°ack
)

417 
îr_code
 = *
pf_°ack
;

418 
	`¥ötf
 ("¸2: %lx,Éº_code: %lx. \n", 
¸2
, 
îr_code
);

450 
	}
}

452 "C" 
pf_°‹e_c⁄ãxt
 ();

453 
pf_°‹e_c⁄ãxt
 ();

454 
asm
 (" .text");

455 
asm
 (" .typeÖf_store_context, @function");

456 
asm
 ("pf_store_context: \n");

457 
asm
 ("movq $0xabcdabcd, %rax \n");

458 
asm
 ("vmcall \n");

459 
asm
 ("movq %rsp, %rax \n");

460 
asm
 ("movq $0xfffffeffffffecc0, %rsp \n");

461 
asm
 ("pushq %rax \n");

462 
asm
 ("pushq %rdi \n");

463 
asm
 ("pushq %rsi \n");

464 
asm
 ("pushq %rdx \n");

465 
asm
 ("pushq %r10 \n");

466 
asm
 ("pushq %r8 \n");

467 
asm
 ("pushq %r9 \n");

469 
asm
 ("pushq %r11 \n");

470 
asm
 ("pushq %rbx \n");

471 
asm
 ("pushq %rbp \n");

472 
asm
 ("pushq %r12 \n");

473 
asm
 ("pushq %r13 \n");

474 
asm
 ("pushq %r14 \n");

475 
asm
 ("pushq %r15 \n");

476 
asm
 ("movq %cr2, %rdi \n");

477 
asm
 ("movq %rax, %rsi \n");

479 
asm
 ("movsd %xmm0, -0x10(%rsp) \n");

480 
asm
 ("movsd %xmm1, -0x20(%rsp) \n");

481 
asm
 ("movsd %xmm2, -0x30(%rsp) \n");

482 
asm
 ("movsd %xmm3, -0x40(%rsp) \n");

483 
asm
 ("movsd %xmm4, -0x50(%rsp) \n");

484 
asm
 ("movsd %xmm5, -0x60(%rsp) \n");

485 
asm
 ("movsd %xmm6, -0x70(%rsp) \n");

486 
asm
 ("movsd %xmm7, -0x80(%rsp) \n");

487 
asm
 ("sub $0x90, %rsp \n");

490 
asm
 ("callqÇme_pf_handler \n");

492 
asm
 ("add $0x90, %rsp \n");

493 
asm
 ("movsd -0x10(%rsp), %xmm0 \n");

494 
asm
 ("movsd -0x20(%rsp), %xmm1 \n");

495 
asm
 ("movsd -0x30(%rsp), %xmm2 \n");

496 
asm
 ("movsd -0x40(%rsp), %xmm3 \n");

497 
asm
 ("movsd -0x50(%rsp), %xmm4 \n");

498 
asm
 ("movsd -0x60(%rsp), %xmm5 \n");

499 
asm
 ("movsd -0x70(%rsp), %xmm6 \n");

500 
asm
 ("movsd -0x80(%rsp), %xmm7 \n");

503 
asm
 ("popq %r15 \n");

504 
asm
 ("popq %r14 \n");

505 
asm
 ("popq %r13 \n");

506 
asm
 ("popq %r12 \n");

507 
asm
 ("popq %rbp \n");

508 
asm
 ("popq %rbx \n");

509 
asm
 ("popq %r11 \n");

511 
asm
 ("popq %r9 \n");

512 
asm
 ("popq %r8 \n");

513 
asm
 ("popq %r10 \n");

514 
asm
 ("popq %rdx \n");

515 
asm
 ("popq %rsi \n");

516 
asm
 ("popq %rdi \n");

517 
asm
 ("popq %rax \n");

518 
asm
 ("movq %rax, %rsp \n");

519 
asm
 ("add $0x8, %rsp \n");

520 
asm
 ("movq $0xfffffe9000905fb0, %rax \n");

521 
asm
 ("movq (%rax), %rax \n");

522 
asm
 ("movq %rax, (%rsp) \n");

523 
asm
 ("iretq \n");

525 "C" 
t_sysˇŒ_öãr˚±î
 ();

526 
	$t_sysˇŒ_öãr˚±î
 ()

528 
ei_sh¨_¨gs
->
fs_ba£
 = 
	`ªad_fs
();

529 
	`wrôe_fs
(
nme_fsba£
);

530 
	`¥ötf
 ("sysˇŒ index: %d. .....,Ñ•: %lx. \n", 
bﬂrd_˘x
->
øx
, 
èrgë_˘x
->
r•
);

551 
bﬂrd_˘x
->
rcx
 = 
sysˇŒ_exô_g©e
;

552 
bﬂrd_˘x
->
rù
 = 
ei_sh¨_¨gs
->
g_sysˇŒ_íåy
;

557 
	`wrôe_fs
(
ei_sh¨_¨gs
->
fs_ba£
);

560 
	}
}

562 "C" 
sysˇŒ_°‹e_c⁄ãxt
 ();

563 
sysˇŒ_°‹e_c⁄ãxt
 ();

564 
asm
 (" .text");

565 
asm
 (" .type syscall_store_context, @function");

566 
asm
 ("syscall_store_context: \n");

571 
asm
 ("movq %rsp, %rax \n");

574 
asm
 ("movq $0x7f7fffffecc0, %rsp \n");

575 
asm
 ("pushq %rax \n");

576 
asm
 ("pushq %rdi \n");

577 
asm
 ("pushq %rsi \n");

578 
asm
 ("pushq %rdx \n");

579 
asm
 ("pushq %r10 \n");

580 
asm
 ("pushq %r8 \n");

581 
asm
 ("pushq %r9 \n");

583 
asm
 ("pushq %r11 \n");

584 
asm
 ("pushq %rbx \n");

585 
asm
 ("pushq %rbp \n");

586 
asm
 ("pushq %r12 \n");

587 
asm
 ("pushq %r13 \n");

588 
asm
 ("pushq %r14 \n");

589 
asm
 ("pushq %r15 \n");

590 
asm
 ("pushf \n");

593 
asm
 ("movsd %xmm0, -0x10(%rsp) \n");

594 
asm
 ("movsd %xmm1, -0x20(%rsp) \n");

595 
asm
 ("movsd %xmm2, -0x30(%rsp) \n");

596 
asm
 ("movsd %xmm3, -0x40(%rsp) \n");

597 
asm
 ("movsd %xmm4, -0x50(%rsp) \n");

598 
asm
 ("movsd %xmm5, -0x60(%rsp) \n");

599 
asm
 ("movsd %xmm6, -0x70(%rsp) \n");

600 
asm
 ("movsd %xmm7, -0x80(%rsp) \n");

601 
asm
 ("sub $0x90, %rsp \n");

605 
asm
 ("callqÅ_syscall_intercepter \n");

607 
asm
 ("add $0x90, %rsp \n");

608 
asm
 ("movsd -0x10(%rsp), %xmm0 \n");

609 
asm
 ("movsd -0x20(%rsp), %xmm1 \n");

610 
asm
 ("movsd -0x30(%rsp), %xmm2 \n");

611 
asm
 ("movsd -0x40(%rsp), %xmm3 \n");

612 
asm
 ("movsd -0x50(%rsp), %xmm4 \n");

613 
asm
 ("movsd -0x60(%rsp), %xmm5 \n");

614 
asm
 ("movsd -0x70(%rsp), %xmm6 \n");

615 
asm
 ("movsd -0x80(%rsp), %xmm7 \n");

618 
asm
 ("popf \n");

619 
asm
 ("popq %r15 \n");

620 
asm
 ("popq %r14 \n");

621 
asm
 ("popq %r13 \n");

622 
asm
 ("popq %r12 \n");

623 
asm
 ("popq %rbp \n");

624 
asm
 ("popq %rbx \n");

625 
asm
 ("popq %r11 \n");

627 
asm
 ("popq %r9 \n");

628 
asm
 ("popq %r8 \n");

629 
asm
 ("popq %r10 \n");

630 
asm
 ("popq %rdx \n");

631 
asm
 ("popq %rsi \n");

632 
asm
 ("popq %rdi \n");

633 
asm
 ("popq %rax \n");

634 
asm
 ("movq %rax, %rsp \n");

637 
asm
 ("movq $0x7f1000905fb0, %rax \n");

638 
asm
 ("jmpq *(%rax) \n");

650 "C" 
t_sysˇŒ_exô
 ();

651 
	$t_sysˇŒ_exô
()

653 
ei_sh¨_¨gs
->
fs_ba£
 = 
	`ªad_fs
();

654 
	`wrôe_fs
(
nme_fsba£
);

655 
	`¥ötf
 ("sysˇŒÑë vÆue: %lx. \n", 
bﬂrd_˘x
->
øx
);

662 
asm
 volatile ("movq $0xfff, %rax; \n\t"

665 
	`wrôe_fs
 (
ei_sh¨_¨gs
->
fs_ba£
);

667 
	}
}

669 "C" 
sysˇŒ_exô_°‹e_c⁄ãxt
 ();

670 
sysˇŒ_exô_°‹e_c⁄ãxt
 ();

671 
asm
 (" .text");

672 
asm
 (" .type syscall_exit_store_context, @function");

673 
asm
 ("syscall_exit_store_context: \n");

679 
asm
 ("movq %rsp, %rax \n");

682 
asm
 ("movq $0x7f7fffffecc0, %rsp \n");

683 
asm
 ("pushq %rax \n");

684 
asm
 ("pushq %rdi \n");

685 
asm
 ("pushq %rsi \n");

686 
asm
 ("pushq %rdx \n");

687 
asm
 ("pushq %r10 \n");

688 
asm
 ("pushq %r8 \n");

689 
asm
 ("pushq %r9 \n");

691 
asm
 ("pushq %r11 \n");

692 
asm
 ("pushq %rbx \n");

693 
asm
 ("pushq %rbp \n");

694 
asm
 ("pushq %r12 \n");

695 
asm
 ("pushq %r13 \n");

696 
asm
 ("pushq %r14 \n");

697 
asm
 ("pushq %r15 \n");

698 
asm
 ("pushf \n");

701 
asm
 ("movsd %xmm0, -0x10(%rsp) \n");

702 
asm
 ("movsd %xmm1, -0x20(%rsp) \n");

703 
asm
 ("movsd %xmm2, -0x30(%rsp) \n");

704 
asm
 ("movsd %xmm3, -0x40(%rsp) \n");

705 
asm
 ("movsd %xmm4, -0x50(%rsp) \n");

706 
asm
 ("movsd %xmm5, -0x60(%rsp) \n");

707 
asm
 ("movsd %xmm6, -0x70(%rsp) \n");

708 
asm
 ("movsd %xmm7, -0x80(%rsp) \n");

709 
asm
 ("sub $0x90, %rsp \n");

713 
asm
 ("callqÅ_syscall_exit \n");

715 
asm
 ("add $0x90, %rsp \n");

716 
asm
 ("movsd -0x10(%rsp), %xmm0 \n");

717 
asm
 ("movsd -0x20(%rsp), %xmm1 \n");

718 
asm
 ("movsd -0x30(%rsp), %xmm2 \n");

719 
asm
 ("movsd -0x40(%rsp), %xmm3 \n");

720 
asm
 ("movsd -0x50(%rsp), %xmm4 \n");

721 
asm
 ("movsd -0x60(%rsp), %xmm5 \n");

722 
asm
 ("movsd -0x70(%rsp), %xmm6 \n");

723 
asm
 ("movsd -0x80(%rsp), %xmm7 \n");

726 
asm
 ("popf \n");

727 
asm
 ("popq %r15 \n");

728 
asm
 ("popq %r14 \n");

729 
asm
 ("popq %r13 \n");

730 
asm
 ("popq %r12 \n");

731 
asm
 ("popq %rbp \n");

732 
asm
 ("popq %rbx \n");

733 
asm
 ("popq %r11 \n");

735 
asm
 ("popq %r9 \n");

736 
asm
 ("popq %r8 \n");

737 
asm
 ("popq %r10 \n");

738 
asm
 ("popq %rdx \n");

739 
asm
 ("popq %rsi \n");

740 
asm
 ("popq %rdi \n");

741 
asm
 ("popq %rax \n");

742 
asm
 ("movq %rax, %rsp \n");

743 
asm
 ("vmcall \n");

791 "C" 
öt3_h™dÀr
 ();

792 
	$öt3_h™dÀr
()

794 
ei_sh¨_¨gs
->
fs_ba£
 = 
	`ªad_fs
();

795 
	`wrôe_fs
 (
nme_fsba£
);

797 * 
öt3_°ack_±r
 = (*)(
t_öt3_°ack
 - 0x28);

798 
ßved_rù
, 
ßved_r•
, 
ßved_rÊags
;

801 * 
t_°ack_±r
;

802 
ßved_rù
 = 
öt3_°ack_±r
[0];

803 
ßved_rù
 -= 1;

804 
ßved_r•
 = 
öt3_°ack_±r
[3];

805 
ßved_rÊags
 = 
öt3_°ack_±r
[2];

808 
èrgë_˘x
->
øx
 = 
bﬂrd_˘x
->rax;

809 
èrgë_˘x
->
rcx
 = 
bﬂrd_˘x
->rcx;

810 
èrgë_˘x
->
rù
 = 
ßved_rù
 + 0x5;

811 
èrgë_˘x
->
r•
 = 
ßved_r•
;

812 
èrgë_˘x
->
eÊags
 = 
ßved_rÊags
;

813 
	`¥ötf
 ("öt3 invoked. savedÑù: %lx. savedÑ•: %lx, saved_rÊags: %lx,Ñëáddªs†⁄ sèck: %lx. \n", 
ßved_rù
, 
ßved_r•
, 
ßved_rÊags
, *((*)saved_rsp));

822 
	`«tive_to_SE_˘x_swôch
();

823 
execSèã
->
	`SynRegsFromN©ive
(&
machRegs
);

833 
execSèã
->
	`¥o˚ssAt
(
machRegs
.
ªgs
.
rù
);

835 
execSèã
->
	`SynRegsToN©ive
(&
machRegs
);

836 
	`SE_to_«tive_˘x_swôch
();

841 
bﬂrd_˘x
->
øx
 = 
èrgë_˘x
->rax;

842 
bﬂrd_˘x
->
rcx
 = 
èrgë_˘x
->rcx;

844 
	`wrôe_fs
 (
ei_sh¨_¨gs
->
fs_ba£
);

846 
	}
}

848 "C" 
öt3_°‹e_c⁄ãxt
 ();

849 
öt3_°‹e_c⁄ãxt
 ();

850 
asm
 (" .text");

851 
asm
 (" .type int3_store_context, @function");

852 
asm
 ("int3_store_context: \n");

855 
asm
 ("movq %rsp, %rax \n");

858 
asm
 ("movq $0x7f7fffffecc0, %rsp \n");

859 
asm
 ("pushq %rax \n");

860 
asm
 ("pushq %rdi \n");

861 
asm
 ("pushq %rsi \n");

862 
asm
 ("pushq %rdx \n");

863 
asm
 ("pushq %r10 \n");

864 
asm
 ("pushq %r8 \n");

865 
asm
 ("pushq %r9 \n");

867 
asm
 ("pushq %r11 \n");

868 
asm
 ("pushq %rbx \n");

869 
asm
 ("pushq %rbp \n");

870 
asm
 ("pushq %r12 \n");

871 
asm
 ("pushq %r13 \n");

872 
asm
 ("pushq %r14 \n");

873 
asm
 ("pushq %r15 \n");

874 
asm
 ("pushf \n");

877 
asm
 ("movsd %xmm0, -0x10(%rsp) \n");

878 
asm
 ("movsd %xmm1, -0x20(%rsp) \n");

879 
asm
 ("movsd %xmm2, -0x30(%rsp) \n");

880 
asm
 ("movsd %xmm3, -0x40(%rsp) \n");

881 
asm
 ("movsd %xmm4, -0x50(%rsp) \n");

882 
asm
 ("movsd %xmm5, -0x60(%rsp) \n");

883 
asm
 ("movsd %xmm6, -0x70(%rsp) \n");

884 
asm
 ("movsd %xmm7, -0x80(%rsp) \n");

886 
asm
 ("sub $0x98, %rsp \n");

890 
asm
 ("callq int3_handler \n");

892 
asm
 ("add $0x98, %rsp \n");

894 
asm
 ("movsd -0x10(%rsp), %xmm0 \n");

895 
asm
 ("movsd -0x20(%rsp), %xmm1 \n");

896 
asm
 ("movsd -0x30(%rsp), %xmm2 \n");

897 
asm
 ("movsd -0x40(%rsp), %xmm3 \n");

898 
asm
 ("movsd -0x50(%rsp), %xmm4 \n");

899 
asm
 ("movsd -0x60(%rsp), %xmm5 \n");

900 
asm
 ("movsd -0x70(%rsp), %xmm6 \n");

901 
asm
 ("movsd -0x80(%rsp), %xmm7 \n");

904 
asm
 ("popf \n");

905 
asm
 ("popq %r15 \n");

906 
asm
 ("popq %r14 \n");

907 
asm
 ("popq %r13 \n");

908 
asm
 ("popq %r12 \n");

909 
asm
 ("popq %rbp \n");

910 
asm
 ("popq %rbx \n");

911 
asm
 ("popq %r11 \n");

913 
asm
 ("popq %r9 \n");

914 
asm
 ("popq %r8 \n");

915 
asm
 ("popq %r10 \n");

916 
asm
 ("popq %rdx \n");

917 
asm
 ("popq %rsi \n");

918 
asm
 ("popq %rdi \n");

919 
asm
 ("popq %rax \n");

920 
asm
 ("movq %rax, %rsp \n");

923 
asm
 ("movq $0x7f1000905fb0, %rax \n");

924 
asm
 ("jmpq *(%rax) \n");

936 
	$ªad_dr
 ()

938 
dr0
, 
dr1
, 
dr2
, 
dr3
, 
dr7
;

939 
asm
 volatile ("movq %%DR0, %%rax; \n\t"

949 :"=m"(
dr0
),"=m"(
dr1
),"=m"(
dr2
),"=m"(
dr3
),"=m"(
dr7
)::"%rax");

950 
	`¥ötf
 ("dr0: %lx, dr1: %lx, dr2: %lx, dr3: %lx, dr7: %lx. \n", 
dr0
, 
dr1
, 
dr2
, 
dr3
, 
dr7
);

952 
	}
}

955 
	$˛ór_dr
(
idx
)

957 
dr7
;

958 
idx
)

961 
dr7
 = 0xfff0fffc;

964 
dr7
 = 0xff0ffff3;

967 
dr7
 = 0xf0ffffcf;

970 
dr7
 = 0x0fffff3f;

973 
asm
 volatile ("mov $0xabcdabcd, %rax; \n\t"

978 
asm
 volatile (

985 ::"m"(
dr7
):"%eax","%ebx");

987 
	}
}

1000 
__©åibuã__
 ((
noölöe
)Ë
	$£t_dr3
(
size
, 
addr
)

1002 
dr7
;

1004 
size
)

1007 
dr7
 = 0;

1010 
dr7
 = 0x40000000;

1013 
dr7
 = 0xc0000000;

1016 
dr7
 = 0x80000000;

1019 
asm
 volatile ("mov $0xabcdabcd, %rax; \n\t"

1024 
dr7
 |= 0x30000040;

1026 
asm
 volatile (

1033 ::"m"(
addr
), "m"(
dr7
):"%rax", "%rbx");

1035 
	}
}

1037 
__©åibuã__
 ((
noölöe
)Ë
	$£t_dr2
(
size
, 
addr
)

1039 
dr7
;

1041 
size
)

1044 
dr7
 = 0;

1047 
dr7
 = 0x4000000;

1050 
dr7
 = 0xc000000;

1053 
dr7
 = 0x8000000;

1056 
asm
 volatile ("mov $0xabcdabcd, %rax; \n\t"

1061 
dr7
 |= 0x3000010;

1063 
asm
 volatile (

1070 ::"m"(
addr
), "m"(
dr7
):"%rax", "%rbx");

1072 
	}
}

1074 
__©åibuã__
 ((
noölöe
)Ë
	$£t_dr1
(
size
, 
addr
)

1076 
dr7
;

1078 
size
)

1081 
dr7
 = 0;

1084 
dr7
 = 0x400000;

1087 
dr7
 = 0xc00000;

1090 
dr7
 = 0x800000;

1093 
asm
 volatile ("mov $0xabcdabcd, %rax; \n\t"

1098 
dr7
 |= 0x300004;

1100 
asm
 volatile (

1107 ::"m"(
addr
), "m"(
dr7
):"%rax", "%rbx");

1109 
	}
}

1111 
__©åibuã__
 ((
noölöe
)Ë
	$£t_dr0
(
size
, 
addr
)

1113 
dr7
;

1115 
size
)

1118 
dr7
 = 0;

1121 
dr7
 = 0x40000;

1124 
dr7
 = 0xc0000;

1127 
dr7
 = 0x80000;

1130 
asm
 volatile ("mov $0xabcdabcd, %rax; \n\t"

1135 
dr7
 |= 0x30001;

1137 
asm
 volatile (

1144 ::"m"(
addr
), "m"(
dr7
):"%rax", "%rbx");

1147 
	}
}

1149 "C" 
db_h™dÀr
 ();

1150 
	$db_h™dÀr
()

1152 
asm
 volatile("movq $0x99999, %%rax; \n\t"

1157 
	`«tive_to_SE_˘x_swôch
();

1158 
execSèã
->
	`SynRegsFromN©ive
(&
machRegs
);

1160 
execSèã
->
	`DBH™dÀr
();

1162 
execSèã
->
	`SynRegsToN©ive
(&
machRegs
);

1163 
	`SE_to_«tive_˘x_swôch
();

1175 
	}
}

1177 "C" 
db_°‹e_c⁄ãxt
 ();

1178 
db_°‹e_c⁄ãxt
 ();

1179 
asm
 (" .text");

1180 
asm
 (" .type db_store_context, @function");

1181 
asm
 ("db_store_context: \n");

1182 
asm
 ("movq $0xabcdabcd, %rax \n");

1183 
asm
 ("vmcall \n");

1184 
asm
 ("movq %rsp, %rax \n");

1185 
asm
 ("movq $0x7f7fffffecc0, %rsp \n");

1186 
asm
 ("pushq %rax \n");

1187 
asm
 ("pushq %rdi \n");

1188 
asm
 ("pushq %rsi \n");

1189 
asm
 ("pushq %rdx \n");

1190 
asm
 ("pushq %r10 \n");

1191 
asm
 ("pushq %r8 \n");

1192 
asm
 ("pushq %r9 \n");

1193 
asm
 ("pushq %r11 \n");

1194 
asm
 ("pushq %rbx \n");

1195 
asm
 ("pushq %rbp \n");

1196 
asm
 ("pushq %r12 \n");

1197 
asm
 ("pushq %r13 \n");

1198 
asm
 ("pushq %r14 \n");

1199 
asm
 ("pushq %r15 \n");

1200 
asm
 ("pushf \n");

1202 
asm
 ("movsd %xmm0, -0x10(%rsp) \n");

1203 
asm
 ("movsd %xmm1, -0x20(%rsp) \n");

1204 
asm
 ("movsd %xmm2, -0x30(%rsp) \n");

1205 
asm
 ("movsd %xmm3, -0x40(%rsp) \n");

1206 
asm
 ("movsd %xmm4, -0x50(%rsp) \n");

1207 
asm
 ("movsd %xmm5, -0x60(%rsp) \n");

1208 
asm
 ("movsd %xmm6, -0x70(%rsp) \n");

1209 
asm
 ("movsd %xmm7, -0x80(%rsp) \n");

1211 
asm
 ("sub $0x98, %rsp \n");

1214 
asm
 ("callq db_handler \n");

1216 
asm
 ("add $0x98, %rsp \n");

1218 
asm
 ("movsd -0x10(%rsp), %xmm0 \n");

1219 
asm
 ("movsd -0x20(%rsp), %xmm1 \n");

1220 
asm
 ("movsd -0x30(%rsp), %xmm2 \n");

1221 
asm
 ("movsd -0x40(%rsp), %xmm3 \n");

1222 
asm
 ("movsd -0x50(%rsp), %xmm4 \n");

1223 
asm
 ("movsd -0x60(%rsp), %xmm5 \n");

1224 
asm
 ("movsd -0x70(%rsp), %xmm6 \n");

1225 
asm
 ("movsd -0x80(%rsp), %xmm7 \n");

1228 
asm
 ("popf \n");

1229 
asm
 ("popq %r15 \n");

1230 
asm
 ("popq %r14 \n");

1231 
asm
 ("popq %r13 \n");

1232 
asm
 ("popq %r12 \n");

1233 
asm
 ("popq %rbp \n");

1234 
asm
 ("popq %rbx \n");

1235 
asm
 ("popq %r11 \n");

1236 
asm
 ("popq %r9 \n");

1237 
asm
 ("popq %r8 \n");

1238 
asm
 ("popq %r10 \n");

1239 
asm
 ("popq %rdx \n");

1240 
asm
 ("popq %rsi \n");

1241 
asm
 ("popq %rdi \n");

1242 
asm
 ("popq %rax \n");

1243 
asm
 ("movq %rax, %rsp \n");

1244 
asm
 ("movq $0x7f1000905fb0, %rax \n");

1245 
asm
 ("jmpq *(%rax) \n");

1248 
	$upd©e_t_ït_≥rm
 (
≥rm
, 
kî_addr
)

1250 
g∑
;

1251 
kî_addr
 &= ~0xFFFUL;

1252 i‡(
kî_addr
 < 
__START_KERNEL_MAP
)

1253 
g∑
 = 
kî_addr
 - 
PAGE_OFFSET
;

1255 
g∑
 = 
kî_addr
 - 
__START_KERNEL_MAP
;

1256 
	`¥ötf
 ("öãr˚± VEÖage, va: %lx, g∑: %lx. \n", 
kî_addr
, 
g∑
);

1258 
asm
 volatile (

1266 ::"m"(
kî_addr
), "m"(
g∑
), "m"(
≥rm
):"%rax","%rbx","%rcx","%rdx");

1268 
	}
}

1270 
	$dëîm_sym_mem
(
addr
)

1272 i‡(
addr
 == 0)

1276 
	}
}

1278 "C" 
ve_h™dÀr
 ();

1279 
	$ve_h™dÀr
()

1281 
asm
 volatile("movq $0x99999, %%rax; \n\t"

1286 
	`«tive_to_SE_˘x_swôch
();

1287 
execSèã
->
	`SynRegsFromN©ive
(&
machRegs
);

1291 
execSèã
->
	`SynRegsToN©ive
(&
machRegs
);

1292 
	`SE_to_«tive_˘x_swôch
();

1326 
	}
}

1328 "C" 
ve_°‹e_c⁄ãxt
 ();

1329 
ve_°‹e_c⁄ãxt
 ();

1330 
asm
 (" .text");

1331 
asm
 (" .type ve_store_context, @function");

1332 
asm
 ("ve_store_context: \n");

1333 
asm
 ("movq $0xabcdabcd, %rax \n");

1334 
asm
 ("vmcall \n");

1335 
asm
 ("movq %rsp, %rax \n");

1336 
asm
 ("movq $0x7f7fffffecc0, %rsp \n");

1337 
asm
 ("pushq %rax \n");

1338 
asm
 ("pushq %rdi \n");

1339 
asm
 ("pushq %rsi \n");

1340 
asm
 ("pushq %rdx \n");

1341 
asm
 ("pushq %r10 \n");

1342 
asm
 ("pushq %r8 \n");

1343 
asm
 ("pushq %r9 \n");

1344 
asm
 ("pushq %r11 \n");

1345 
asm
 ("pushq %rbx \n");

1346 
asm
 ("pushq %rbp \n");

1347 
asm
 ("pushq %r12 \n");

1348 
asm
 ("pushq %r13 \n");

1349 
asm
 ("pushq %r14 \n");

1350 
asm
 ("pushq %r15 \n");

1351 
asm
 ("pushf \n");

1353 
asm
 ("movsd %xmm0, -0x10(%rsp) \n");

1354 
asm
 ("movsd %xmm1, -0x20(%rsp) \n");

1355 
asm
 ("movsd %xmm2, -0x30(%rsp) \n");

1356 
asm
 ("movsd %xmm3, -0x40(%rsp) \n");

1357 
asm
 ("movsd %xmm4, -0x50(%rsp) \n");

1358 
asm
 ("movsd %xmm5, -0x60(%rsp) \n");

1359 
asm
 ("movsd %xmm6, -0x70(%rsp) \n");

1360 
asm
 ("movsd %xmm7, -0x80(%rsp) \n");

1362 
asm
 ("sub $0x98, %rsp \n");

1365 
asm
 ("callq ve_handler \n");

1367 
asm
 ("add $0x98, %rsp \n");

1369 
asm
 ("movsd -0x10(%rsp), %xmm0 \n");

1370 
asm
 ("movsd -0x20(%rsp), %xmm1 \n");

1371 
asm
 ("movsd -0x30(%rsp), %xmm2 \n");

1372 
asm
 ("movsd -0x40(%rsp), %xmm3 \n");

1373 
asm
 ("movsd -0x50(%rsp), %xmm4 \n");

1374 
asm
 ("movsd -0x60(%rsp), %xmm5 \n");

1375 
asm
 ("movsd -0x70(%rsp), %xmm6 \n");

1376 
asm
 ("movsd -0x80(%rsp), %xmm7 \n");

1379 
asm
 ("popf \n");

1380 
asm
 ("popq %r15 \n");

1381 
asm
 ("popq %r14 \n");

1382 
asm
 ("popq %r13 \n");

1383 
asm
 ("popq %r12 \n");

1384 
asm
 ("popq %rbp \n");

1385 
asm
 ("popq %rbx \n");

1386 
asm
 ("popq %r11 \n");

1387 
asm
 ("popq %r9 \n");

1388 
asm
 ("popq %r8 \n");

1389 
asm
 ("popq %r10 \n");

1390 
asm
 ("popq %rdx \n");

1391 
asm
 ("popq %rsi \n");

1392 
asm
 ("popq %rdi \n");

1393 
asm
 ("popq %rax \n");

1394 
asm
 ("movq %rax, %rsp \n");

1395 
asm
 ("movq $0x7f1000905fb0, %rax \n");

1396 
asm
 ("jmpq *(%rax) \n");

1400 
	$öô_globÆ_v¨
 ()

1402 * 
ãmp
;

1422 
uk_off£t
 = 0xffffff8000000000;

1423 
exô_g©e_va
 = 0x7f9000900000+
uk_off£t
;

1424 
idt_va
 = 0x7f9000901000 + 
uk_off£t
;

1425 
gdt_va
 = 0x7f9000902000 + 
uk_off£t
;

1426 
tss_va
 = 0x7f9000903000 + 
uk_off£t
;

1427 
d©a_∑ge
 = 0x7f9000905000 + 
uk_off£t
;

1429 
t_öt3_°ack
 = 
d©a_∑ge
 + 0x1000 - 0x200;

1433 
execSèã
->
m_emëa
->
t_öt3_°ack
 = 
d©a_∑ge
 + 0x1000 - 0x200;

1434 
execSèã
->
m_emëa
->
t_ve_°ack
 = 
t_öt3_°ack
;

1435 
execSèã
->
m_emëa
->
t_db_°ack
 = 
t_öt3_°ack
;

1437 
roŸ_±_va
 = 0x7f9000906000 + 
uk_off£t
;

1438 
ei_sh¨_¨gs
 = (
sh¨_¨g
*)(0x7f90000907000 + 
uk_off£t
);

1440 
™a_t_tss
 = 0x7f9000908000 + 
uk_off£t
;

1441 
™a_t_gdt
 = 0x7f9000909000 + 
uk_off£t
;

1442 
™a_t_idt
 = 0x7f900090a000 + 
uk_off£t
;

1444 
execSèã
->
m_emëa
->
vút_ex˚_¨ó
 = (*)(0x7f900090c000 + 
uk_off£t
);

1460 
™a_°ack
 = 0x7ffffff„cc0 + 
uk_off£t
;

1461 
íåy_g©e
 = 
exô_g©e_va
 + 0x261;

1462 
exô_g©e
 = 
exô_g©e_va
 + 0x292;

1463 
sysˇŒ_exô_g©e
 = 
exô_g©e_va
 + 0x2fd;

1465 
èrgë_˘x
 = (
èrgë_c⁄ãxt
*)(
™a_°ack
 - 0x78);

1467 
bﬂrd_˘x
 = (
bﬂrd_c⁄ãxt
*)(
d©a_∑ge
 + 0xf98);

1468 
bﬂrd_˘x
->
sysˇŒ_h™dÀr
 = ()
sysˇŒ_°‹e_c⁄ãxt
;

1469 
bﬂrd_˘x
->
sysˇŒ_exô_h™dÀr
 = ()
sysˇŒ_exô_°‹e_c⁄ãxt
;

1471 
bﬂrd_˘x
->
t_öt3_h™dÀr
 = ()
öt3_°‹e_c⁄ãxt
;

1472 
bﬂrd_˘x
->
t_ve_h™dÀr
 = ()
ve_°‹e_c⁄ãxt
;

1473 
bﬂrd_˘x
->
t_db_h™dÀr
 = ()
db_°‹e_c⁄ãxt
;

1474 
bﬂrd_˘x
->
pf_h™dÀr
 = ()
pf_°‹e_c⁄ãxt
;

1475 
bﬂrd_˘x
->
íåy_g©e
 =Éntry_gate;

1477 
nme_fsba£
 = 
	`ªad_fs
();

1478 
	`¥ötf
 ("nme_fsba£: %lx. \n", 
nme_fsba£
);

1480 * 
tmp_±r
 = (*)0x555555554760;

1481 
	`¥ötf
 ("ã°: %p. %lx. \n", 
tmp_±r
, *tmp_ptr);

1484 
gdå
[10];

1485 
tss_ba£0
, 
tss_ba£1
, 
tss_ba£2
;

1486 
	`asm
 ("sgdt %0; \n\t"

1487 :"=m"(
gdå
)

1490 
gdt_ba£
 = (*)(*(*)(
gdå
 + 2));

1491 
	`¥ötf
 ("gdàba£: %lx. \n", 
gdt_ba£
);

1493 
	`öô_ˇŒ_g©e
();

1532 
ã°_addr
 = 0x555555554700;

1533 
idx
 = 
ã°_addr
 >> 39;

1534 * 
roŸ_±_±r
 = (*)
roŸ_±_va
;

1535 
	`¥ötf
 ("idx: %d,É¡ry: %lx. \n", 
idx
, 
roŸ_±_±r
[idx]);

1536 
roŸ_±_±r
[
idx
] &= 0xFFFFFFFFF;

1555 
	}
}

1557 
	$öô_t_˘x
()

1559 
machRegs
.
ªgs
.
r8
 = 
ei_sh¨_¨gs
->r8;

1560 
machRegs
.
ªgs
.
r9
 = 
ei_sh¨_¨gs
->r9;

1561 
machRegs
.
ªgs
.
r10
 = 
ei_sh¨_¨gs
->r10;

1562 
machRegs
.
ªgs
.
r11
 = 
ei_sh¨_¨gs
->r11;

1563 
machRegs
.
ªgs
.
r12
 = 
ei_sh¨_¨gs
->r12;

1564 
machRegs
.
ªgs
.
r13
 = 
ei_sh¨_¨gs
->r13;

1565 
machRegs
.
ªgs
.
r14
 = 
ei_sh¨_¨gs
->r14;

1566 
machRegs
.
ªgs
.
r15
 = 
ei_sh¨_¨gs
->r15;

1567 
machRegs
.
ªgs
.
øx
 = 
ei_sh¨_¨gs
->rax;

1568 
machRegs
.
ªgs
.
rbx
 = 
ei_sh¨_¨gs
->rbx;

1569 
machRegs
.
ªgs
.
rcx
 = 
ei_sh¨_¨gs
->rcx;

1570 
machRegs
.
ªgs
.
rdx
 = 
ei_sh¨_¨gs
->rdx;

1571 
machRegs
.
ªgs
.
rsi
 = 
ei_sh¨_¨gs
->rsi;

1572 
machRegs
.
ªgs
.
rdi
 = 
ei_sh¨_¨gs
->rdi;

1573 
machRegs
.
ªgs
.
rbp
 = 
ei_sh¨_¨gs
->rbp;

1574 
machRegs
.
ªgs
.
r•
 = 
ei_sh¨_¨gs
->rsp;

1575 
machRegs
.
ªgs
.
rù
 = 
ei_sh¨_¨gs
->rip;

1576 
machRegs
.
ªgs
.
eÊags
 = 
ei_sh¨_¨gs
->eflags;

1577 
	`as£π
(
ei_sh¨_¨gs
->
m§_kî√l_gs_ba£
 != 0);

1578 
	`as£π
(
ei_sh¨_¨gs
->
fs_ba£
 != 0);

1579 
machRegs
.
fs_ba£
 = 
ei_sh¨_¨gs
->fs_base;

1580 
machRegs
.
gs_ba£
 = 
ei_sh¨_¨gs
->
m§_kî√l_gs_ba£
;

1582 
	}
}

1584 
	$«tive_to_SE_˘x_swôch
()

1589 
machRegs
.
ªgs
.
r8
 = 
èrgë_˘x
->r8;

1590 
machRegs
.
ªgs
.
r9
 = 
èrgë_˘x
->r9;

1591 
machRegs
.
ªgs
.
r10
 = 
èrgë_˘x
->r10;

1592 
machRegs
.
ªgs
.
r11
 = 
èrgë_˘x
->r11;

1593 
machRegs
.
ªgs
.
r12
 = 
èrgë_˘x
->r12;

1594 
machRegs
.
ªgs
.
r13
 = 
èrgë_˘x
->r13;

1595 
machRegs
.
ªgs
.
r14
 = 
èrgë_˘x
->r14;

1596 
machRegs
.
ªgs
.
r15
 = 
èrgë_˘x
->r15;

1597 
machRegs
.
ªgs
.
øx
 = 
èrgë_˘x
->rax;

1598 
machRegs
.
ªgs
.
rbx
 = 
èrgë_˘x
->rbx;

1599 
machRegs
.
ªgs
.
rcx
 = 
èrgë_˘x
->rcx;

1600 
machRegs
.
ªgs
.
rdx
 = 
èrgë_˘x
->rdx;

1601 
machRegs
.
ªgs
.
rsi
 = 
èrgë_˘x
->rsi;

1602 
machRegs
.
ªgs
.
rdi
 = 
èrgë_˘x
->rdi;

1603 
machRegs
.
ªgs
.
rbp
 = 
èrgë_˘x
->rbp;

1604 
machRegs
.
ªgs
.
r•
 = 
èrgë_˘x
->rsp;

1605 
machRegs
.
ªgs
.
rù
 = 
èrgë_˘x
->rip;

1606 
machRegs
.
ªgs
.
eÊags
 = 
èrgë_˘x
->eflags;

1607 
	`as£π
(
ei_sh¨_¨gs
->
m§_kî√l_gs_ba£
 != 0);

1608 
	`as£π
(
ei_sh¨_¨gs
->
fs_ba£
 != 0);

1609 
machRegs
.
fs_ba£
 = 
ei_sh¨_¨gs
->fs_base;

1610 
machRegs
.
gs_ba£
 = 
ei_sh¨_¨gs
->
m§_kî√l_gs_ba£
;

1612 
	}
}

1614 
	$SE_to_«tive_˘x_swôch
()

1616 
èrgë_˘x
->
r8
 = 
machRegs
.
ªgs
.r8;

1617 
èrgë_˘x
->
r9
 = 
machRegs
.
ªgs
.r9;

1618 
èrgë_˘x
->
r10
 = 
machRegs
.
ªgs
.r10;

1619 
èrgë_˘x
->
r11
 = 
machRegs
.
ªgs
.r11;

1620 
èrgë_˘x
->
r12
 = 
machRegs
.
ªgs
.r12;

1621 
èrgë_˘x
->
r13
 = 
machRegs
.
ªgs
.r13;

1622 
èrgë_˘x
->
r14
 = 
machRegs
.
ªgs
.r14;

1623 
èrgë_˘x
->
r15
 = 
machRegs
.
ªgs
.r15;

1624 
èrgë_˘x
->
øx
 = 
machRegs
.
ªgs
.rax;

1625 
èrgë_˘x
->
rbx
 = 
machRegs
.
ªgs
.rbx;

1626 
èrgë_˘x
->
rcx
 = 
machRegs
.
ªgs
.rcx;

1627 
èrgë_˘x
->
rdx
 = 
machRegs
.
ªgs
.rdx;

1628 
èrgë_˘x
->
rsi
 = 
machRegs
.
ªgs
.rsi;

1629 
èrgë_˘x
->
rdi
 = 
machRegs
.
ªgs
.rdi;

1630 
èrgë_˘x
->
rbp
 = 
machRegs
.
ªgs
.rbp;

1631 
èrgë_˘x
->
r•
 = 
machRegs
.
ªgs
.rsp;

1632 
èrgë_˘x
->
rù
 = 
machRegs
.
ªgs
.rip;

1633 
èrgë_˘x
->
eÊags
 = 
machRegs
.
ªgs
.eflags;

1635 
	}
}

1697 
	$gë_èrgë
()

1699 
	`¥ötf
 ("ei_sh¨_¨g†©: %∞\n", 
ei_sh¨_¨gs
);

1701 
ei_sh¨_¨gs
 = (
sh¨_¨g
*)(0x7f9000907000 + 
uk_off£t
);

1703 
	`mem˝y
((*)
™a_t_tss
, (*)(
ei_sh¨_¨gs
->
tss_ba£
), 0x68);

1707 
execSèã
->
m_emëa
->
t_pf_°ack
 = *((*)(
™a_t_tss
+0x4));

1708 *((*)(
™a_t_tss
+0x4 + 0x8*10)Ë
t_öt3_°ack
;

1709 
t_r•0
 = *((*)(
™a_t_tss
+0x4));

1710 
t_r•1
 = *((*)(
™a_t_tss
+0xc));

1711 
	`¥ötf
 ("t_r•0 sèck: %lx. \n", 
t_r•0
);

1712 
	`¥ötf
 ("t_r•1 sèck: %lx. \n", 
t_r•1
);

1713 
ei_sh¨_¨gs
->
Êag
 = 1;

1716 
asm
 volatile("mfence; \n\t");

1717 } 
ei_sh¨_¨gs
->
Êag
 != 2);

1719 
	`¥ötf
 ("onsiteÑeceiveÑequest. \n");

1720 
	`¥ötf
 ("ei_sh¨_¨gs->rù: %lx,Ñ•: %lx. \n", 
ei_sh¨_¨gs
->
rù
,Éi_sh¨_¨gs->
r•
);

1721 
ei_sh¨_¨gs
->
rù
 += 3;

1723 
	`¥ötf
 ("ei_sh¨_¨g†©: %∞\n", 
ei_sh¨_¨gs
);

1725 * 
â
 = (*)(
ei_sh¨_¨gs
->
rù
);

1726 
	`¥ötf
 ("èrgëÑù: %p,Å¨gë code: %lx. \n", 
â
, *tt);

1727 
â
 = (*)(
ei_sh¨_¨gs
->
g_sysˇŒ_íåy
);

1728 
	`¥ötf
 ("sysˇŒÉ¡ryát: %p, code: %lx. \n", 
â
, *tt);

1734 
asm
 volatile ("movq $0x378, %rax; \n\t"

1737 
	}
}

1739 
	$dump_ªgs
()

1741 
	`¥ötf
 ("øx: %lx\n", 
machRegs
.
ªgs
.
øx
);

1742 
	`¥ötf
 ("rbx: %lx ", 
machRegs
.
ªgs
.
rbx
);

1743 
	`¥ötf
 ("rcx: %lx ", 
machRegs
.
ªgs
.
rcx
);

1744 
	`¥ötf
 ("rdx: %lx ", 
machRegs
.
ªgs
.
rdx
);

1745 
	`¥ötf
 ("rdi: %lx ", 
machRegs
.
ªgs
.
rdi
);

1746 
	`¥ötf
 ("rsi: %lx ", 
machRegs
.
ªgs
.
rsi
);

1747 
	`¥ötf
 ("r8: %lx ", 
machRegs
.
ªgs
.
r8
);

1748 
	`¥ötf
 ("r9: %lx ", 
machRegs
.
ªgs
.
r9
);

1749 
	`¥ötf
 ("r10: %lx \n", 
machRegs
.
ªgs
.
r10
);

1750 
	`¥ötf
 ("rù: %lx \n", 
machRegs
.
ªgs
.
rù
);

1751 
	`¥ötf
 ("r•: %lx \n", 
machRegs
.
ªgs
.
r•
);

1753 
	}
}

1755 
	$to_«tive
()

1758 
bﬂrd_˘x
->
rù
 = 
ei_sh¨_¨gs
->rip;

1759 
bﬂrd_˘x
->
øx
 = 
ei_sh¨_¨gs
->rax;

1760 
bﬂrd_˘x
->
rcx
 = 
ei_sh¨_¨gs
->rcx;

1762 
ödex
 = 0xc0000102;

1763 
	`wrm§
(
ödex
, 
ei_sh¨_¨gs
->
m§_kî√l_gs_ba£
);

1765 
	`wrôe_fs
(
ei_sh¨_¨gs
->
fs_ba£
);

1766 
	`wrôe_gs
(
ei_sh¨_¨gs
->
gs_ba£
);

1769 
	`ª°‹e_u£r_¥ivûege
 ();

1778 
asm
 volatile (

1808 ::"m"(
ei_sh¨_¨gs
),"m"(
íåy_g©e
):"%rcx","%rax", "%rdx", "%rbx", "%rdi", "%rsi");

1810 
asm
 volatile ("movq $0xffff, %rax; \n\t"

1813 
	}
}

1815 
	$maö
() {

1818 
adds
, 
adde
;

1819 
adds
 = 0x0;

1820 
adde
 = 0xfffffffffffff000;

1822 
execSèã
 = 
√w
 
	`ExecSèã
(
adds
, 
adde
);

1826 
	`öô_globÆ_v¨
();

1828 
	`dump_ªgs
();

1830 
	`gë_èrgë
();

1832 
execSèã
->
	`InôRediPagePoﬁ
();

1837 
execSèã
->
	`M⁄iSèπOfSE
(0xffffffff810b9440);

1838 
	`to_«tive
();

1840 
	`öô_t_˘x
();

1841 
	`dump_ªgs
();

1850 
execSèã
->
	`SynRegsFromN©ive
(&
machRegs
);

1858 
execSèã
->
	`¥o˚ssAt
(
machRegs
.
ªgs
.
rù
);

1867 
	}
}

	@/home/jqhong/Documents/KernelSE/oprand.cpp

3 
	~"VMSèã.h
"

6 
	gO¥ndInfo
::
	$O¥ndInfo
(
DIAPIO≥ønd
 &
O
Ë: 
	`PO
(
√w
 
	`DIAPIO≥ønd
(O)), 
	$mem_symvÆ
(
nuŒ±r
) {

7 
›ty
 = 
OPTY_UNK
;

8 
rdwr
 = 
OPAC_UNK
;

9 
symb
 = 
Ál£
;

10 
	}
}

12 
	gIn°rInfo
::
	$In°rInfo
(
DAPIIn°r
 *
I
Ë: 
	`PI
(I), 
	$vecOI
() {

13 
hasSymbO¥™d
 = 
Ál£
;

14 
	}
}

16 
boﬁ
 
	gO¥ndInfo
::
	$gëC⁄VÆue
(&
out
) {

17 i‡(
symb
 || (
rdwr
 & 
OPAC_RD
) == 0) {

18 
	`ERRR_ME
("expectÑeading oná concrete value");

19 
	`exô
(
EXIT_FAILURE
);

21 
boﬁ
 
ªs
 = 
åue
;

22 
›ty
) {

23 
OPTY_IMM
: {

24 
out
 = 
imm_vÆue
;

26 
OPTY_REGCON
: {

27 
out
 = 
ªg_c⁄vÆ
;

29 
OPTY_MEMCELLCON
: {

30 
out
 = 
mem_c⁄vÆ
;

33 
ªs
 = 
Ál£
;

34 
	`FIX_ME
();

35 
	`exô
(
EXIT_FAILURE
);

38  
ªs
;

39 
	}
}

41 
boﬁ
 
	gO¥ndInfo
::
	$£tC⁄VÆue
(
VMSèã
 *
vm
, 
ö
) {

43 
boﬁ
 
ªs
 = 
Ál£
;

44 
›ty
) {

45 
OPTY_REG
:

46 
OPTY_REGCON
:

47 
OPTY_REGSYM
: {

48 
RegVÆue
 
V
{
ªg_ödex
, 
size
, 
Ál£
, 
ö
};

49 
ªs
 = 
vm
->
	`wrôeRegi°î
(
V
);

50 
	`as£π
(
ªs
);

52 
OPTY_MEMCELL
:

53 
OPTY_MEMCELLCON
: {

54 
MemVÆue
 
V
{
mem_c⁄addr
, 
size
, 
Ál£
, 
ö
};

55 
ªs
 = 
vm
->
	`wrôeMem‹y
(
V
);

56 
	`as£π
(
ªs
);

59 
	`ERRR_ME
("unexpected operand");

60 
	`exô
(
EXIT_FAILURE
);

63  
ªs
;

64 
	}
}

66 
boﬁ
 
	gO¥ndInfo
::
	$gëSymVÆue
(
KVEx¥På
 &
out
) {

67 
boﬁ
 
ªs
 = 
Ál£
;

68 
›ty
) {

69 
OPTY_REGSYM
: {

70 
ªs
 = 
åue
;

71 
out
 = 
ªg_symvÆ
;

73 
OPTY_MEMCELLSYM
: {

74 
ªs
 = 
åue
;

75 
out
 = 
mem_symvÆ
;

78 
	`FIX_ME
();

79 
	`exô
(
EXIT_FAILURE
);

82  
ªs
;

83 
	}
}

85 
boﬁ
 
	gO¥ndInfo
::
	$£tSymVÆue
(
VMSèã
 *
vm
, 
KVEx¥På
 &
ö
) {

86 
boﬁ
 
ªs
 = 
Ál£
;

87 
›ty
) {

88 
OPTY_REG
:

89 
OPTY_REGCON
:

90 
OPTY_REGSYM
: {

92 
RegVÆue
 
V
 = {
ªg_ödex
, 
size
, 
åue
, 0, 
ö
};

93 
ªs
 = 
vm
->
	`wrôeRegi°î
(
V
);

95 
OPTY_MEMCELL
:

96 
OPTY_MEMCELLCON
:

97 
OPTY_MEMCELLSYM
: {

99 
MemVÆue
 
V
 = {
mem_c⁄addr
, 
size
, 
åue
, 0, 
ö
};

100 
ªs
 = 
vm
->
	`wrôeMem‹y
(
V
);

103 
	`FIX_ME
();

104 
	`exô
(
EXIT_FAILURE
);

107  
ªs
;

108 
	}
}

110 
ul⁄g
 
	$HashTogëhî
(
ul⁄g
 
addr
, ul⁄g 
size
) {

111  (
addr
 << 3 + 
size
);

112 
	}
}

114 
ul⁄g
 
	$CñlHash
(
ul⁄g
 
addr
, ul⁄g 
size
) {

115  (
addr
&(~0xfUL));

116 
	}
}

117 
ul⁄g
 
	$Ex¥Hash
(
ul⁄g
 
addr
, ul⁄g 
size
) {

118  ((
addr
&0xf)<<4Ë| (
size
-1) ;

119 
	}
}

	@/home/jqhong/Documents/KernelSE/oprand.h

1 #i‚de‡
OPRAND_H


2 
	#OPRAND_H


	)

3 
	~<mem‹y
>

4 
	~<ve˘‹
>

7 
˛ass
 
	gVMSèã
;

9 
«me•a˚
 
	gDynö°
 {

10 
«me•a˚
 
	gIn°ru˘i⁄API
 {

11 
˛ass
 
	gEx¥essi⁄
;

12 
˛ass
 
	gRegi°îAST
;

13 
˛ass
 
	gO≥ønd
;

14 
˛ass
 
	gIn°ru˘i⁄
;

18 
«me•a˚
 
	gEXPR
 {

19 
˛ass
 
	gEx¥
;

22 
	gDynö°
::
	tIn°ru˘i⁄API
::
	tIn°ru˘i⁄
 
	tDAPIIn°r
;

23 
	g°d
::
	tsh¨ed_±r
<
	tDynö°
::
	tIn°ru˘i⁄API
::
	tIn°ru˘i⁄
> 
	tDAPIIn°rPå
;

24 
	gDynö°
::
	tIn°ru˘i⁄API
::
	tO≥ønd
 
	tDIAPIO≥ønd
;

25 
	g°d
::
	tsh¨ed_±r
<
	tDynö°
::
	tIn°ru˘i⁄API
::
	tO≥ønd
> 
	tDIAPIO≥øndPå
;

26 
	gDynö°
::
	tIn°ru˘i⁄API
::
	tRegi°îAST
 
	tDIAPIRegi°îAST
;

27 
	g°d
::
	tsh¨ed_±r
<
	tDynö°
::
	tIn°ru˘i⁄API
::
	tRegi°îAST
> 
	tDIAPIRegi°îASTPå
;

31 
	gEXPR
::
	tEx¥
 
	tKVEx¥
;

32 
	g°d
::
	tsh¨ed_±r
<
	tKVEx¥
> 
	tKVEx¥På
;

34 
	eO≥øndTy≥
 {

35 
	mOPTY_UNK
 = 0,

36 
	mOPTY_IMM
 = 0x01,

37 
	mOPTY_REG
 = 0x08,

38 
	mOPTY_REGCON
 = 0x0A,

39 
	mOPTY_REGSYM
 = 0x0C,

40 
	mOPTY_MEMCELL
 = 0x80,

41 
	mOPTY_MEMCELLCON
 = 0xC0,

42 
	mOPTY_MEMADDRSYM
 = 0x90,

43 
	mOPTY_MEMCELLSYM
 = 0xB0,

46 
	eO≥øndAccs
 {

47 
	mOPAC_UNK
 = 0,

48 
	mOPAC_RD
 = 1,

49 
	mOPAC_WR
 = 2,

50 
	mOPAC_RDWR
 = 3,

53 
	sO¥ndInfo
 {

54 
DIAPIO≥øndPå
 
	mPO
;

55 
O≥øndTy≥
 
	m›ty
;

56 
O≥øndAccs
 
	mrdwr
;

57 
uöt
 
	msize
;

58 
boﬁ
 
	msymb
;

62 
ul⁄g
 
	mimm_vÆue
;

63 
uöt
 
	mªg_ödex
;

64 
ul⁄g
 
	mmem_c⁄addr
;

65 
KVEx¥På
 
	mmem_symaddr
;

69 
	mªg_c⁄vÆ
;

70 
	mmem_c⁄vÆ
;

71 
KVEx¥På
 
	mªg_symvÆ
;

72 
KVEx¥På
 
	mmem_symvÆ
;

75 
O¥ndInfo
(
DIAPIO≥ønd
 &
O
);

76 ~
O¥ndInfo
() {}

78 
boﬁ
 
gëC⁄VÆue
(&
out
);

79 
boﬁ
 
£tC⁄VÆue
(
VMSèã
 *
vm
, 
ö
);

80 
boﬁ
 
gëSymVÆue
(
KVEx¥På
 &
out
);

81 
boﬁ
 
£tSymVÆue
(
VMSèã
 *
vm
, 
KVEx¥På
 &
ö
);

83 
	g°d
::
	tsh¨ed_±r
<
	tO¥ndInfo
> 
	tO¥ndInfoPå
;

85 
	sIn°rInfo
 {

86 
DAPIIn°rPå
 
	mPI
;

87 
	m°d
::
ve˘‹
<
O¥ndInfoPå
> 
vecOI
;

88 
boﬁ
 
	mhasSymbO¥™d
;

89 
In°rInfo
(
DAPIIn°r
 *
I
);

90 ~
In°rInfo
(Ë{ 
	mvecOI
.
˛ór
(); }

92 
	g°d
::
	tsh¨ed_±r
<
	tIn°rInfo
> 
	tIn°rInfoPå
;

106 
	eFLAG_STAT


108 
	mFLAG_CLEAR
 = 
Ál£
 ,

109 
	mFLAG_SET
 = 
åue
 ,

110 
	mSchrodögîs_ˇt
 = -1

112 
	#FLAG_UNCERTAIN
 
Schrodögîs_ˇt


	)

116 ˛as†
	cFœgSëtögIn°r
 {

117 
	m¥Ÿe˘ed
:

118 
In°rInfoPå
 
m_IOI
;

120 
FLAG_STAT
 
	msf
, 
	mzf
, 
	mof
, 
	mcf
, 
	mpf
, 
	maf
 ;

121 
FLAG_STAT
 
	mÊags_£t
 ;

123 
	mpublic
:

124 
	$FœgSëtögIn°r
(
In°rInfoPå
 &
öfo
Ë: 
	$m_IOI
(
öfo
Ë{
sf
=
zf
=
of
=
cf
=
pf
=
af
=
FLAG_UNCERTAIN
;}

125 ~
	$FœgSëtögIn°r
(Ë{
	}
}

127 
vútuÆ
 
FLAG_STAT
 
	$ˇlc_sÊag
() {

128  
sf
;

129 
	}
};

130 
vútuÆ
 
FLAG_STAT
 
	$ˇlc_zÊag
() {

131  
zf
;

132 
	}
};

135 
vútuÆ
 
FLAG_STAT
 
	$ˇlc_oÊag
() {

136  
of
;

137 
	}
};

139 
vútuÆ
 
FLAG_STAT
 
	$ˇlc_cÊag
() {

140  
cf
;

141 
	}
};

143 
vútuÆ
 
FLAG_STAT
 
	$ˇlc_pÊag
() {

144  
pf
;

145 
	}
};

147 
vútuÆ
 
FLAG_STAT
 
	$ˇlc_aÊag
() {

148  
af
;

149 
	}
};

152 
vútuÆ
 
FLAG_STAT
 
	$£t_sÊag
(
FLAG_STAT
 
Êag
) {

153  
sf
=
Êag
;

154 
	}
};

155 
vútuÆ
 
FLAG_STAT
 
	$£t_zÊag
(
FLAG_STAT
 
Êag
) {

156  
zf
=
Êag
;

157 
	}
};

158 
vútuÆ
 
FLAG_STAT
 
	$£t_oÊag
(
FLAG_STAT
 
Êag
) {

159  
of
=
Êag
;

160 
	}
};

162 
vútuÆ
 
FLAG_STAT
 
	$£t_cÊag
(
FLAG_STAT
 
Êag
) {

163  
cf
=
Êag
;

164 
	}
};

166 
vútuÆ
 
FLAG_STAT
 
	$£t_pÊag
(
FLAG_STAT
 
Êag
) {

167  
pf
=
Êag
;

168 
	}
};

170 
vútuÆ
 
FLAG_STAT
 
	$£t_aÊag
(
FLAG_STAT
 
Êag
) {

171  
af
=
Êag
;

172 
	}
};

173 
boﬁ
 
GëC⁄VÆs
(&
sz1
, &
c⁄vÆ1
, &
sz2
, &
c⁄vÆ2
);

178 
	g°d
::
	tsh¨ed_±r
<
	tFœgSëtögIn°r
> 
	tFSIn°rPå
;

180 
ul⁄g
 
HashTogëhî
(ul⁄g 
addr
, ul⁄g 
size
);

182 
ul⁄g
 
Ex¥Hash
(ul⁄g 
addr
, ul⁄g 
size
) ;

183 
ul⁄g
 
CñlHash
(ul⁄g 
addr
, ul⁄g 
size
) ;

	@/home/jqhong/Documents/KernelSE/symexec.cpp

1 
	~"symexec.h
"

3 
	~<löux/ty≥s.h
>

4 
	~<sig«l.h
>

5 
	~<uc⁄ãxt.h
>

7 
	~<io°ªam
>

9 
	~"Bö¨yFun˘i⁄.h
"

10 
	~"CodeObje˘.h
"

11 
	~"Ex¥.h
"

12 
	~"In°ru˘i⁄Decodî.h
"

13 
	~"VMSèã.h
"

14 
	~"öãrÁ˚.h
"

15 
	~"thö˘æ.h
"

22 
usög
 
«me•a˚
 
	g°d
;

23 
usög
 
«me•a˚
 
	gDynö°
;

24 
usög
 
«me•a˚
 
	gP¨£API
;

25 
usög
 
«me•a˚
 
	gIn°ru˘i⁄API
;

27 
usög
 
«me•a˚
 
	gEXPR
;

29 
boﬁ
 
	gSymExecut‹
::
	$pushIn°r
(
In°rInfoPå
 &
I
) {

30 
m_IOIs
.
	`push_back
(
I
);

31  
åue
;

32 
	}
}

34 
boﬁ
 
	gSymExecut‹
::
	$run
(
VMSèã
 *
vm
) {

35 
boﬁ
 
ªs
 = 
Ál£
;

36 
	`_run_¥ﬁogue
();

38 autÿ
IOI
 : 
m_IOIs
) {

39 autÿ&
I
 = 
IOI
->
PI
;

40 autÿ&
vecOI
 = 
IOI
->vecOI;

41 
m_RIPUpd©ed
 = 
Ál£
;

43 
íåyID
 
id
 = 
I
->
	`gëO≥øti⁄
().
	`gëID
() ;

45 
id
) {

46 
e_mov
:

47 
e_movbe
:

48 
e_mov¶
:

49 
e_movabs
:

50 
e_mov≠d
:

51 
e_mov≠s
:

52 
e_movd
:

53 
e_movddup
:

54 
e_movdq2q
:

55 
e_movdqa
:

56 
e_movdqu
:

57 
e_movhpd
:

58 
e_movhps
:

59 
e_movhps_movlhps
:

60 
e_movÕd
:

61 
e_movÕs
:

62 
e_movÕs_movhÕs
:

63 
e_movmskpd
:

64 
e_movmskps
:

65 
e_mov¡dq
:

66 
e_mov¡dqa
:

67 
e_mov¡i
:

68 
e_mov¡pd
:

69 
e_mov¡ps
:

70 
e_mov¡q
:

71 
e_mov¡sd
:

72 
e_mov¡ss
:

73 
e_movq
:

74 
e_movq2dq
:

75 
e_movsb
:

76 
e_movsd
:

77 
e_movsd_s£
:

78 
e_movshdup
:

79 
e_mov¶dup
:

80 
e_movss
:

81 
e_movsw
:

82 
e_movupd
:

83 
e_movups
: {

84 
	`¥o˚ss_mov
(
vm
, 
IOI
);

87 
e_movsx
:

88 
e_movsxd
: {

89 
	`¥o˚ss_movsx
(
vm
, 
IOI
);

92 
e_movzx
:{

93 
	`¥o˚ss_movzx
(
vm
, 
IOI
);

97 
e_cbw
:

98 
e_cwde
:

99 
e_cwé
: {

100 
	`¥o˚ss_cbw
(
vm
, 
IOI
);

104 
e_cdq
:

105 
e_cwd
: {

106 
	`¥o˚ss_cdq
(
vm
, 
IOI
);

110 
e_addpd
:

111 
e_addps
:

112 
e_addsd
:

113 
e_addss
:

114 
e_addsubpd
:

115 
e_addsubps
: {

116 
	`asm
("int3");

119 
e_add
: {

120 
	`¥o˚ss_add
(
vm
, 
IOI
);

123 
e_subpd
:

124 
e_subps
:

125 
e_subsd
:

126 
e_subss
: {

128 
	`asm
("int3");

131 
e_sub
: {

133 
	`¥o˚ss_sub
(
vm
, 
IOI
);

137 
e_idiv
: {

138 
	`¥o˚ss_idiv
(
vm
, 
IOI
) ;

142 
e_mul
:

143 
e_imul
: {

144 
	`¥o˚ss_mul
(
vm
, 
IOI
) ;

148 
e_muÕd
:

149 
e_muÕs
:

150 
e_mulsd
:

151 
e_mulss
: {

152 
	`asm
("int3") ;

154 
e_div
:

155 
e_divpd
:

156 
e_divps
:

157 
e_divsd
:

158 
e_divss
: {

159 
	`asm
("int3");

162 
e_™d
: {

163 
	`¥o˚ss_™d
(
vm
, 
IOI
) ;

166 
e_™d≈d
:

167 
e_™d≈s
:

168 
e_™dpd
:

169 
e_™dps
: {

171 
	`asm
("int3");

173 
e_‹
: {

174 
	`¥o˚ss_‹
(
vm
, 
IOI
);

177 
e_‹pd
:

178 
e_‹ps
: {

179 
	`asm
("int3");

181 
e_nŸ
: {

182 
	`¥o˚ss_nŸ
(
vm
, 
IOI
);

185 
e_√g
: {

186 
	`¥o˚ss_√g
(
vm
, 
IOI
);

189 
e_ã°
: {

190 
	`¥o˚ss_ã°
(
vm
, 
IOI
);

193 
e_cmovbe
:

194 
e_cmove
:

195 
e_cmov«e
:

196 
e_cmovnb
:

197 
e_cmovnbe
:

198 
e_cmov√
:

199 
e_cmovng
:

200 
e_cmovnge
:

201 
e_cmov∆
:

203 
e_cmovno
:

204 
e_cmovns
:

205 
e_cmovo
:

206 
e_cmov≥
:

207 
e_cmovpo
:

208 
e_cmovs
: {

209 
	`¥o˚ss_cmovxx
(
vm
, 
IOI
) ;

212 
e_ja
:

213 
e_jb
:

214 
e_jbe
:

215 
e_je
:

216 
e_jge
:

217 
e_jl
:

218 
e_jÀ
:

219 
e_jmp
:

220 
e_jmpq
:

221 
e_j√
:

222 
e_jz
:

223 
e_jnz
:

224 
e_jns
:

225 
e_js
: {

226 
	`¥o˚ss_jcc
(
vm
, 
IOI
) ;

229 
e_£tb
:

230 
e_£tbe
:

231 
e_£é
:

232 
e_£ée
:

233 
e_£äb
:

234 
e_£äbe
:

235 
e_£äl
:

236 
e_£äÀ
:

237 
e_£äo
:

238 
e_£äp
:

239 
e_£äs
:

240 
e_£äz
:

241 
e_£to
:

242 
e_£ç
:

243 
e_£ts
:

244 
e_£tz
: {

245 
	`¥o˚ss_£t
(
vm
, 
IOI
) ;

248 
e_cmp
:

249 
e_cmpw
: {

250 
	`¥o˚ss_cmp
(
vm
, 
IOI
) ;

253 
e_x‹
 :{

254 
	`¥o˚ss_x‹
(
vm
, 
IOI
) ;

257 
e_shl_ßl
: {

258 
	`¥o˚ss_shl_ßl
 (
vm
, 
IOI
) ;

261 
e_shr
: {

262 
	`¥o˚ss_shr
 (
vm
, 
IOI
) ;

265 
e_shrd
:{

266 
	`¥o˚ss_shrd
 (
vm
, 
IOI
) ;

269 
e_ßr
:{

270 
	`¥o˚ss_ßr
 (
vm
, 
IOI
) ;

273 
e_xchg
: {

274 
	`¥o˚ss_xchg
 (
vm
, 
IOI
) ;

278 
e_p›
:{

279 
	`¥o˚ss_p›
 (
vm
, 
IOI
) ;

283 
e_push
:{

284 
	`¥o˚ss_push
 (
vm
, 
IOI
) ;

288 
e_Àa
:

289 
	`¥o˚ss_Àa
 (
vm
, 
IOI
) ;

292 
e_rdtsc
: {

299 
cout
 << "2802: in°ru˘i⁄: " << 
I
->
	`f‹m©
() << "\n";

300 
	`asm
("int3");

314 
	`_run_po°logue
();

315  
åue
;

316 
	}
}

318 
boﬁ
 
	gSymExecut‹
::
	$_run_¥ﬁogue
(Ë{
	}
}

320 
boﬁ
 
SymExecut‹
::
	$_run_po°logue
() {

321 
m_IOIs
.
	`˛ór
();

322  
åue
;

323 
	}
}

324 
boﬁ
 
	gSymExecut‹
::
	$¥o˚ss_Àa
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) {

325 autÿ&
vecOI
 = 
öf›å
->vecOI;

326 
O¥ndInfoPå
 &
oid°
 = 
vecOI
[0];

327 
O¥ndInfoPå
 &
oi§c
 = 
vecOI
[1];

328 
KVEx¥På
 
e
;

329 
boﬁ
 
ªs
;

330 
vÆ
;

332 if(
oi§c
->
symb
) {

334 
ªs
 = 
oi§c
->
	`gëSymVÆue
(
e
);

335 
	`as£π
(
ªs
);

337 
ªs
 = 
oid°
->
	`£tSymVÆue
(
vm
, 
e
);

338 
	`as£π
(
ªs
);

340 
	`as£π
(
oid°
->
symb
) ;

342 
ªs
 = 
oi§c
->
	`gëC⁄VÆue
(
vÆ
);

343 
	`as£π
(
ªs
);

345 
ªs
 = 
oid°
->
	`£tC⁄VÆue
(
vm
, 
vÆ
);

346 
	`as£π
(
ªs
);

349  
åue
 ;

350 
	}
}

352 
boﬁ
 
	gSymExecut‹
::
	$¥o˚ss_jcc
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) {

353  
åue
 ;

355 
	}
}

357 
boﬁ
 
	gSymExecut‹
::
	$¥o˚ss_jmp
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) {

358 autÿ&
vecOI
 = 
öf›å
->vecOI;

359 
O¥ndInfoPå
 &
oi§c
 = 
vecOI
[0];

360 
boﬁ
 
ªs
;

361 
vÆ
;

364 
	`as£π
(!
oi§c
->
symb
);

365 
ªs
 = 
oi§c
->
	`gëC⁄VÆue
(
vÆ
);

366 
	`as£π
(
ªs
);

368 
RegVÆue
 
V
{(
uöt
)
x86_64
::
rù
, 8, 
Ál£
, 
vÆ
};

369 
vm
->
	`wrôeRegi°î
(
V
);

370 
m_RIPUpd©ed
 = 
åue
;

371  
åue
;

372 
	}
}

374 
boﬁ
 
	gSymExecut‹
::
	$¥o˚ss_mov
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) {

376 autÿ&
vecOI
 = 
öf›å
->vecOI;

377 
O¥ndInfoPå
 &
oid°
 = 
vecOI
[0];

378 
O¥ndInfoPå
 &
oi§c
 = 
vecOI
[1];

379 
KVEx¥På
 
e
;

380 
boﬁ
 
ªs
;

381 
vÆ
;

402 if(
oi§c
->
symb
) {

404 
ªs
 = 
oi§c
->
	`gëSymVÆue
(
e
);

405 
	`as£π
(
ªs
);

407 
ªs
 = 
oid°
->
	`£tSymVÆue
(
vm
, 
e
);

410 
	`as£π
(
ªs
);

412 
	`as£π
(
oid°
->
symb
) ;

414 
ªs
 = 
oi§c
->
	`gëC⁄VÆue
(
vÆ
);

415 
	`as£π
(
ªs
);

417 
ªs
 = 
oid°
->
	`£tC⁄VÆue
(
vm
, 
vÆ
);

418 
	`as£π
(
ªs
);

421  
åue
;

422 
	}
}

424 
boﬁ
 
	gSymExecut‹
::
	$¥o˚ss_add
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) {

426 autÿ&
vecOI
 = 
öf›å
->vecOI;

427 
O¥ndInfoPå
 &
oi§c1
 = 
vecOI
[0];

428 
O¥ndInfoPå
 &
oi§c2
 = 
vecOI
[1];

429 
O¥ndInfoPå
 &
oid°
 = 
oi§c1
;

430 
boﬁ
 
ªs
;

432 
KVEx¥På
 
€
 ;

434 i‡(
oi§c1
->
symb
 && 
oi§c2
->symb) {

435 
KVEx¥På
 
	`e1
(
nuŒ±r
), 
	`e2
(nullptr);

436 
ªs
 = 
oi§c1
->
	`gëSymVÆue
(
e1
);

437 
	`as£π
(
ªs
);

438 
ªs
 = 
oi§c2
->
	`gëSymVÆue
(
e2
);

439 
	`as£π
(
ªs
);

442 
€
.
	`ª£t
(
√w
 
	`AddEx¥
(
e1
, 
e2
));

443 
ªs
 = 
oid°
->
	`£tSymVÆue
(
vm
, 
€
);

444 
	`as£π
(
ªs
);

445 } i‡(
oi§c1
->
symb
 && !
oi§c2
->symb) {

446 
KVEx¥På
 
	`e1
(
nuŒ±r
);

447 
ªs
 = 
oi§c1
->
	`gëSymVÆue
(
e1
);

448 
	`as£π
(
ªs
);

450 
v2
;

451 
ªs
 = 
oi§c2
->
	`gëC⁄VÆue
(
v2
);

452 
	`as£π
(
ªs
);

453 
Ex¥På
 
	`c2
(
√w
 
	`C⁄°Ex¥
(
v2
));

454 
€
.
	`ª£t
(
√w
 
	`AddEx¥
(
e1
, 
c2
));

455 
ªs
 = 
oid°
->
	`£tSymVÆue
(
vm
, 
€
);

456 
	`as£π
(
ªs
);

459 i‡(!
oi§c1
->
symb
 && 
oi§c2
->symb) {

460 
KVEx¥På
 
	`e2
(
nuŒ±r
);

461 
ªs
 = 
oi§c2
->
	`gëSymVÆue
(
e2
);

462 
	`as£π
(
ªs
);

464 
v1
;

465 
ªs
 = 
oi§c1
->
	`gëC⁄VÆue
(
v1
);

466 
	`as£π
(
ªs
);

467 
Ex¥På
 
	`c1
(
√w
 
	`C⁄°Ex¥
(
v1
));

468 
€
.
	`ª£t
(
√w
 
	`AddEx¥
(
c1
, 
e2
));

469 
ªs
 = 
oid°
->
	`£tSymVÆue
(
vm
, 
€
);

470 
	`as£π
(
ªs
);

472 
	`ERRR_ME
("Unexpected operands");

473 
	`asm
("int3");

475 
vm
->
	`SaveFœgCh™gögIn°ru˘i⁄Ex¥
(
e_add
, 
€
) ;

476  
åue
 ;

477 
	}
}

479 
boﬁ
 
	gSymExecut‹
::
	$¥o˚ss_ã°
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) {

481 autÿ&
vecOI
 = 
öf›å
->vecOI;

482 
O¥ndInfoPå
 &
oi§c1
 = 
vecOI
[0];

483 
O¥ndInfoPå
 &
oi§c2
 = 
vecOI
[1];

484 
O¥ndInfoPå
 &
oid°
 = 
oi§c1
;

485 
boﬁ
 
ªs
;

487 
KVEx¥På
 
€
 = 
NULL
 ;

489 i‡(
oi§c1
->
symb
 && 
oi§c2
->symb) {

490 
KVEx¥På
 
	`e1
(
nuŒ±r
), 
	`e2
(nullptr);

491 
ªs
 = 
oi§c1
->
	`gëSymVÆue
(
e1
);

492 
	`as£π
(
ªs
);

493 
ªs
 = 
oi§c2
->
	`gëSymVÆue
(
e2
);

494 
	`as£π
(
ªs
);

497 
€
.
	`ª£t
(
√w
 
	`AndEx¥
(
e1
, 
e2
));

499 } i‡(
oi§c1
->
symb
 && !
oi§c2
->symb) {

500 
KVEx¥På
 
	`e1
(
nuŒ±r
);

501 
ªs
 = 
oi§c1
->
	`gëSymVÆue
(
e1
);

502 
	`as£π
(
ªs
);

504 
v2
;

505 
ªs
 = 
oi§c2
->
	`gëC⁄VÆue
(
v2
);

506 
	`as£π
(
ªs
);

507 
Ex¥På
 
	`c2
(
√w
 
	`C⁄°Ex¥
(
v2
));

508 
€
.
	`ª£t
(
√w
 
	`AndEx¥
(
e1
, 
c2
));

511 i‡(!
oi§c1
->
symb
 && 
oi§c2
->symb) {

512 
KVEx¥På
 
	`e2
(
nuŒ±r
);

513 
ªs
 = 
oi§c2
->
	`gëSymVÆue
(
e2
);

514 
	`as£π
(
ªs
);

516 
v1
;

517 
ªs
 = 
oi§c1
->
	`gëC⁄VÆue
(
v1
);

518 
	`as£π
(
ªs
);

519 
Ex¥På
 
	`c1
(
√w
 
	`C⁄°Ex¥
(
v1
));

520 
€
.
	`ª£t
(
√w
 
	`AndEx¥
(
c1
, 
e2
));

522 
	`ERRR_ME
("Unexpected operands");

523 
	`asm
("int3");

525 
vm
->
	`SaveFœgCh™gögIn°ru˘i⁄Ex¥
(
e_ã°
, 
€
) ;

526  
åue
;

527 
	}
}

531 
boﬁ
 
	gSymExecut‹
::
	$¥o˚ss_cmovxx
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) {

533 
boﬁ
 
domov
 = 
åue
 ;

535 autÿ&
I
 = 
öf›å
->
PI
;

537 i‡(
domov
){

538 autÿ&
vecOI
 = 
öf›å
->vecOI;

539 
O¥ndInfoPå
 &
oid°
 = 
vecOI
[0];

540 
O¥ndInfoPå
 &
oi§c
 = 
vecOI
[1];

541 
KVEx¥På
 
e
;

542 
boﬁ
 
ªs
;

543 
vÆ
;

545 if(
oi§c
->
symb
) {

547 
ªs
 = 
oi§c
->
	`gëSymVÆue
(
e
);

548 
	`as£π
(
ªs
);

550 
ªs
 = 
oid°
->
	`£tSymVÆue
(
vm
, 
e
);

551 
	`as£π
(
ªs
);

555 
ªs
 = 
oi§c
->
	`gëC⁄VÆue
(
vÆ
);

556 
	`as£π
(
ªs
);

558 
ªs
 = 
oid°
->
	`£tC⁄VÆue
(
vm
, 
vÆ
);

559 
	`as£π
(
ªs
);

563  
åue
;

564 
	}
}

566 
boﬁ
 
	gSymExecut‹
::
	$¥o˚ss_jxx
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) {

568 
°d
::
cout
 << "jump instructions: JMP/Jcc" << "\n" ;

569 
	`as£π
(0) ;

570  
åue
;

571 
	}
}

574 
boﬁ
 
	gSymExecut‹
::
	$¥o˚ss_cmp
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) {

575 autÿ&
vecOI
 = 
öf›å
->vecOI;

576 
O¥ndInfoPå
 &
oi§c1
 = 
vecOI
[0];

577 
O¥ndInfoPå
 &
oi§c2
 = 
vecOI
[1];

578 
O¥ndInfoPå
 &
oid°
 = 
oi§c1
;

579 
KVEx¥På
 
€
 = 
NULL
;

580 
boﬁ
 
ªs
;

582 #ifde‡
_DEBUG_OUTPUT


583 
	`¥ötf
 ("oi1 index: %lx, i†sym: %d .\n", 
oi§c1
->
ªg_ödex
, oi§c1->
symb
);

584 i‡(
oi§c1
->
symb
)

586 
KVEx¥På
 
	`ì1
(
nuŒ±r
);

587 
ªs
 = 
oi§c1
->
	`gëSymVÆue
(
ì1
);

588 
ì1
->
	`¥öt
 () ;

590 
	`¥ötf
 ("oi2 index: %lx, i†sym: %d .\n", 
oi§c2
->
ªg_ödex
, oi§c2->
symb
);

591 i‡(
oi§c2
->
symb
)

593 
KVEx¥På
 
	`ì1
(
nuŒ±r
);

594 
ªs
 = 
oi§c2
->
	`gëSymVÆue
(
ì1
);

595 
ì1
->
	`¥öt
 () ;

599 i‡(
oi§c1
->
symb
 && 
oi§c2
->symb) {

600 
KVEx¥På
 
	`e1
(
nuŒ±r
), 
	`e2
(nullptr);

601 
ªs
 = 
oi§c1
->
	`gëSymVÆue
(
e1
);

602 
	`as£π
(
ªs
);

603 
ªs
 = 
oi§c2
->
	`gëSymVÆue
(
e2
);

604 
	`as£π
(
ªs
);

607 
€
.
	`ª£t
(
√w
 
	`SubEx¥
(
e1
, 
e2
));

609 } i‡(
oi§c1
->
symb
 && !
oi§c2
->symb) {

610 
KVEx¥På
 
	`e1
(
nuŒ±r
);

611 
ªs
 = 
oi§c1
->
	`gëSymVÆue
(
e1
);

612 
	`as£π
(
ªs
);

614 
v2
;

615 
ªs
 = 
oi§c2
->
	`gëC⁄VÆue
(
v2
);

616 
	`as£π
(
ªs
);

617 
Ex¥På
 
	`c2
(
√w
 
	`C⁄°Ex¥
(
v2
));

618 
€
.
	`ª£t
(
√w
 
	`SubEx¥
(
e1
, 
c2
));

621 i‡(!
oi§c1
->
symb
 && 
oi§c2
->symb) {

622 
KVEx¥På
 
	`e2
(
nuŒ±r
);

623 
ªs
 = 
oi§c2
->
	`gëSymVÆue
(
e2
);

624 
	`as£π
(
ªs
);

626 
v1
;

627 
ªs
 = 
oi§c1
->
	`gëC⁄VÆue
(
v1
);

628 
	`as£π
(
ªs
);

629 
Ex¥På
 
	`c1
(
√w
 
	`C⁄°Ex¥
(
v1
));

630 
€
.
	`ª£t
(
√w
 
	`SubEx¥
(
c1
, 
e2
));

632 
	`ERRR_ME
("Unexpected operands");

633 
	`asm
("int3");

635 
ªs
 = 
vm
->
	`SaveFœgCh™gögIn°ru˘i⁄Ex¥
(
e_cmp
, 
€
) ;

636 
	`as£π
 (
ªs
) ;

637  
åue
;

638 
	}
}

640 
boﬁ
 
	gSymExecut‹
::
	$¥o˚ss_sub
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) {

642 autÿ&
vecOI
 = 
öf›å
->vecOI;

643 
O¥ndInfoPå
 &
oi§c1
 = 
vecOI
[0];

644 
O¥ndInfoPå
 &
oi§c2
 = 
vecOI
[1];

645 
O¥ndInfoPå
 &
oid°
 = 
oi§c1
;

646 
KVEx¥På
 
€
 = 
NULL
;

647 
boﬁ
 
ªs
;

649 i‡(
oi§c1
->
symb
 && 
oi§c2
->symb) {

650 
KVEx¥På
 
	`e1
(
nuŒ±r
), 
	`e2
(nullptr);

651 
ªs
 = 
oi§c1
->
	`gëSymVÆue
(
e1
);

652 
	`as£π
(
ªs
);

653 
ªs
 = 
oi§c2
->
	`gëSymVÆue
(
e2
);

654 
	`as£π
(
ªs
);

657 
€
.
	`ª£t
(
√w
 
	`SubEx¥
(
e1
, 
e2
));

658 
ªs
 = 
oid°
->
	`£tSymVÆue
(
vm
, 
€
);

659 
	`as£π
(
ªs
);

660 } i‡(
oi§c1
->
symb
 && !
oi§c2
->symb) {

661 
KVEx¥På
 
	`e1
(
nuŒ±r
);

662 
ªs
 = 
oi§c1
->
	`gëSymVÆue
(
e1
);

663 
	`as£π
(
ªs
);

665 
v2
;

666 
ªs
 = 
oi§c2
->
	`gëC⁄VÆue
(
v2
);

667 
	`as£π
(
ªs
);

668 
Ex¥På
 
	`c2
(
√w
 
	`C⁄°Ex¥
(
v2
));

669 
€
.
	`ª£t
(
√w
 
	`SubEx¥
(
e1
, 
c2
));

670 
ªs
 = 
oid°
->
	`£tSymVÆue
(
vm
, 
€
);

671 
	`as£π
(
ªs
);

674 i‡(!
oi§c1
->
symb
 && 
oi§c2
->symb) {

675 
KVEx¥På
 
	`e2
(
nuŒ±r
);

676 
ªs
 = 
oi§c2
->
	`gëSymVÆue
(
e2
);

677 
	`as£π
(
ªs
);

679 
v1
;

680 
ªs
 = 
oi§c1
->
	`gëC⁄VÆue
(
v1
);

681 
	`as£π
(
ªs
);

682 
Ex¥På
 
	`c1
(
√w
 
	`C⁄°Ex¥
(
v1
));

683 
€
.
	`ª£t
(
√w
 
	`SubEx¥
(
c1
, 
e2
));

684 
ªs
 = 
oid°
->
	`£tSymVÆue
(
vm
, 
€
);

685 
	`as£π
(
ªs
);

687 
	`ERRR_ME
("Unexpected operands");

688 
	`as£π
(0);

690 
ªs
 = 
vm
->
	`SaveFœgCh™gögIn°ru˘i⁄Ex¥
(
e_sub
, 
€
) ;

691 
	`as£π
 (
ªs
) ;

692  
åue
 ;

694 
	}
}

695 
boﬁ
 
	gSymExecut‹
::
	$¥o˚ss_™d
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) {

697 autÿ&
vecOI
 = 
öf›å
->vecOI;

698 
O¥ndInfoPå
 &
oi§c1
 = 
vecOI
[0];

699 
O¥ndInfoPå
 &
oi§c2
 = 
vecOI
[1];

700 
O¥ndInfoPå
 &
oid°
 = 
oi§c1
;

701 
KVEx¥På
 
€
 = 
NULL
 ;

702 
boﬁ
 
ªs
;

704 i‡(
oi§c1
->
symb
 && 
oi§c2
->symb) {

705 
KVEx¥På
 
	`e1
(
nuŒ±r
), 
	`e2
(nullptr);

706 
ªs
 = 
oi§c1
->
	`gëSymVÆue
(
e1
);

707 
	`as£π
(
ªs
);

708 
ªs
 = 
oi§c2
->
	`gëSymVÆue
(
e2
);

709 
	`as£π
(
ªs
);

712 
€
.
	`ª£t
(
√w
 
	`AndEx¥
(
e1
, 
e2
));

713 
ªs
 = 
oid°
->
	`£tSymVÆue
(
vm
, 
€
);

714 
	`as£π
(
ªs
);

715 } i‡(
oi§c1
->
symb
 && !
oi§c2
->symb) {

716 
KVEx¥På
 
	`e1
(
nuŒ±r
);

717 
ªs
 = 
oi§c1
->
	`gëSymVÆue
(
e1
);

718 
	`as£π
(
ªs
);

720 
v2
;

721 
ªs
 = 
oi§c2
->
	`gëC⁄VÆue
(
v2
);

722 
	`as£π
(
ªs
);

723 
Ex¥På
 
	`c2
(
√w
 
	`C⁄°Ex¥
(
v2
));

724 
€
.
	`ª£t
(
√w
 
	`AndEx¥
(
e1
, 
c2
));

725 
ªs
 = 
oid°
->
	`£tSymVÆue
(
vm
, 
€
);

726 
	`as£π
(
ªs
);

729 i‡(!
oi§c1
->
symb
 && 
oi§c2
->symb) {

730 
KVEx¥På
 
	`e2
(
nuŒ±r
);

731 
ªs
 = 
oi§c2
->
	`gëSymVÆue
(
e2
);

732 
	`as£π
(
ªs
);

734 
v1
;

735 
ªs
 = 
oi§c1
->
	`gëC⁄VÆue
(
v1
);

736 
	`as£π
(
ªs
);

737 
Ex¥På
 
	`c1
(
√w
 
	`C⁄°Ex¥
(
v1
));

738 
€
.
	`ª£t
(
√w
 
	`AndEx¥
(
c1
, 
e2
));

739 
ªs
 = 
oid°
->
	`£tSymVÆue
(
vm
, 
€
);

740 
	`as£π
(
ªs
);

742 
	`ERRR_ME
("Unexpected operands");

743 
	`as£π
(0);

745 
ªs
 = 
vm
->
	`SaveFœgCh™gögIn°ru˘i⁄Ex¥
(
e_™d
, 
€
) ;

746 
	`as£π
 (
ªs
) ;

748  
åue
;

749 
	}
}

750 
boﬁ
 
	gSymExecut‹
::
	$¥o˚ss_‹
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) {

752 autÿ&
vecOI
 = 
öf›å
->vecOI;

753 
O¥ndInfoPå
 &
oi§c1
 = 
vecOI
[0];

754 
O¥ndInfoPå
 &
oi§c2
 = 
vecOI
[1];

755 
O¥ndInfoPå
 &
oid°
 = 
oi§c1
;

756 
KVEx¥På
 
€
 = 
NULL
 ;

757 
boﬁ
 
ªs
;

759 i‡(
oi§c1
->
symb
 && 
oi§c2
->symb) {

760 
KVEx¥På
 
	`e1
(
nuŒ±r
), 
	`e2
(nullptr);

761 
ªs
 = 
oi§c1
->
	`gëSymVÆue
(
e1
);

762 
	`as£π
(
ªs
);

763 
ªs
 = 
oi§c2
->
	`gëSymVÆue
(
e2
);

764 
	`as£π
(
ªs
);

767 
€
.
	`ª£t
(
√w
 
	`OrEx¥
(
e1
, 
e2
));

768 
ªs
 = 
oid°
->
	`£tSymVÆue
(
vm
, 
€
);

769 
	`as£π
(
ªs
);

770 } i‡(
oi§c1
->
symb
 && !
oi§c2
->symb) {

771 
KVEx¥På
 
	`e1
(
nuŒ±r
);

772 
ªs
 = 
oi§c1
->
	`gëSymVÆue
(
e1
);

773 
	`as£π
(
ªs
);

775 
v2
;

776 
ªs
 = 
oi§c2
->
	`gëC⁄VÆue
(
v2
);

777 
	`as£π
(
ªs
);

778 
Ex¥På
 
	`c2
(
√w
 
	`C⁄°Ex¥
(
v2
));

779 
€
.
	`ª£t
(
√w
 
	`OrEx¥
(
e1
, 
c2
));

780 
ªs
 = 
oid°
->
	`£tSymVÆue
(
vm
, 
€
);

781 
	`as£π
(
ªs
);

784 i‡(!
oi§c1
->
symb
 && 
oi§c2
->symb) {

785 
KVEx¥På
 
	`e2
(
nuŒ±r
);

786 
ªs
 = 
oi§c2
->
	`gëSymVÆue
(
e2
);

787 
	`as£π
(
ªs
);

789 
v1
;

790 
ªs
 = 
oi§c1
->
	`gëC⁄VÆue
(
v1
);

791 
	`as£π
(
ªs
);

792 
Ex¥På
 
	`c1
(
√w
 
	`C⁄°Ex¥
(
v1
));

793 
€
.
	`ª£t
(
√w
 
	`OrEx¥
(
c1
, 
e2
));

794 
ªs
 = 
oid°
->
	`£tSymVÆue
(
vm
, 
€
);

795 
	`as£π
(
ªs
);

797 
	`ERRR_ME
("Unexpected operands");

798 
	`as£π
(0);

801 
ªs
 = 
vm
->
	`SaveFœgCh™gögIn°ru˘i⁄Ex¥
(
e_‹
, 
€
) ;

802 
	`as£π
 (
ªs
) ;

803  
åue
;

804 
	}
}

806 
boﬁ
 
	gSymExecut‹
::
	$¥o˚ss_x‹
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) {

808 autÿ&
vecOI
 = 
öf›å
->vecOI;

809 
O¥ndInfoPå
 &
oi§c1
 = 
vecOI
[0];

810 
O¥ndInfoPå
 &
oi§c2
 = 
vecOI
[1];

811 
O¥ndInfoPå
 &
oid°
 = 
oi§c1
;

812 
KVEx¥På
 
€
 = 
NULL
 ;

813 
boﬁ
 
ªs
;

815 i‡(
oi§c1
->
symb
 && 
oi§c2
->symb) {

816 
KVEx¥På
 
	`e1
(
nuŒ±r
), 
	`e2
(nullptr);

817 
ªs
 = 
oi§c1
->
	`gëSymVÆue
(
e1
);

818 
	`as£π
(
ªs
);

819 
ªs
 = 
oi§c2
->
	`gëSymVÆue
(
e2
);

820 
	`as£π
(
ªs
);

823 
€
.
	`ª£t
(
√w
 
	`X‹Ex¥
(
e1
, 
e2
));

824 
ªs
 = 
oid°
->
	`£tSymVÆue
(
vm
, 
€
);

825 
	`as£π
(
ªs
);

826 } i‡(
oi§c1
->
symb
 && !
oi§c2
->symb) {

827 
KVEx¥På
 
	`e1
(
nuŒ±r
);

828 
ªs
 = 
oi§c1
->
	`gëSymVÆue
(
e1
);

829 
	`as£π
(
ªs
);

831 
v2
;

832 
ªs
 = 
oi§c2
->
	`gëC⁄VÆue
(
v2
);

833 
	`as£π
(
ªs
);

834 
Ex¥På
 
	`c2
(
√w
 
	`C⁄°Ex¥
(
v2
));

835 
€
.
	`ª£t
(
√w
 
	`X‹Ex¥
(
e1
, 
c2
));

836 
ªs
 = 
oid°
->
	`£tSymVÆue
(
vm
, 
€
);

837 
	`as£π
(
ªs
);

840 i‡(!
oi§c1
->
symb
 && 
oi§c2
->symb) {

841 
KVEx¥På
 
	`e2
(
nuŒ±r
);

842 
ªs
 = 
oi§c2
->
	`gëSymVÆue
(
e2
);

843 
	`as£π
(
ªs
);

845 
v1
;

846 
ªs
 = 
oi§c1
->
	`gëC⁄VÆue
(
v1
);

847 
	`as£π
(
ªs
);

848 
Ex¥På
 
	`c1
(
√w
 
	`C⁄°Ex¥
(
v1
));

849 
€
.
	`ª£t
(
√w
 
	`X‹Ex¥
(
c1
, 
e2
));

850 
ªs
 = 
oid°
->
	`£tSymVÆue
(
vm
, 
€
);

851 
	`as£π
(
ªs
);

853 
	`ERRR_ME
("Unexpected operands");

854 
	`as£π
(0);

857 
ªs
 = 
vm
->
	`SaveFœgCh™gögIn°ru˘i⁄Ex¥
(
e_x‹
, 
€
) ;

858 
	`as£π
 (
ªs
) ;

860  
åue
;

861 
	}
}

863 
boﬁ
 
	gSymExecut‹
::
	$¥o˚ss_shl_ßl
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) {

865 autÿ&
vecOI
 = 
öf›å
->vecOI;

866 
O¥ndInfoPå
 &
oi§c1
 = 
vecOI
[0];

867 
O¥ndInfoPå
 &
oi§c2
 = 
vecOI
[1];

868 
O¥ndInfoPå
 &
oid°
 = 
oi§c1
;

869 
boﬁ
 
ªs
;

871 
	`as£π
 (
oi§c1
->
symb
) ;

872 
	`as£π
 (!
oi§c2
->
symb
) ;

874 
KVEx¥På
 
	`e1
(
nuŒ±r
);

875 
ªs
 = 
oi§c1
->
	`gëSymVÆue
(
e1
);

876 
	`as£π
(
ªs
);

878 
v2
;

879 
ªs
 = 
oi§c2
->
	`gëC⁄VÆue
(
v2
);

880 
	`as£π
(
ªs
);

881 
Ex¥På
 
	`c2
(
√w
 
	`C⁄°Ex¥
(
v2
));

882 
KVEx¥På
 
	`€
(
√w
 
	`Shl_SÆEx¥
(
e1
, 
c2
));

883 
ªs
 = 
oid°
->
	`£tSymVÆue
(
vm
, 
€
);

885 
	`as£π
(
ªs
);

887 
ªs
 = 
vm
->
	`SaveFœgCh™gögIn°ru˘i⁄Ex¥
(
e_shl_ßl
, 
€
) ;

888 
	`as£π
 (
ªs
) ;

889  
åue
;

890 
	}
}

892 
boﬁ
 
	gSymExecut‹
::
	$¥o˚ss_shr
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) {

894 autÿ&
vecOI
 = 
öf›å
->vecOI;

895 
O¥ndInfoPå
 &
oi§c1
 = 
vecOI
[0];

896 
O¥ndInfoPå
 &
oi§c2
 = 
vecOI
[1];

897 
O¥ndInfoPå
 &
oid°
 = 
oi§c1
;

898 
boﬁ
 
ªs
;

900 
	`as£π
 (
oi§c1
->
symb
) ;

901 
	`as£π
 (!
oi§c2
->
symb
) ;

903 
KVEx¥På
 
	`e1
(
nuŒ±r
);

904 
ªs
 = 
oi§c1
->
	`gëSymVÆue
(
e1
);

905 
	`as£π
(
ªs
);

907 
v2
;

908 
ªs
 = 
oi§c1
->
	`gëC⁄VÆue
(
v2
);

909 
	`as£π
(
ªs
);

910 
Ex¥På
 
	`c2
(
√w
 
	`C⁄°Ex¥
(
v2
));

911 
KVEx¥På
 
	`€
(
√w
 
	`ShrEx¥
(
e1
, 
c2
));

912 
ªs
 = 
oid°
->
	`£tSymVÆue
(
vm
, 
€
);

913 
	`as£π
(
ªs
);

915 
ªs
 = 
vm
->
	`SaveFœgCh™gögIn°ru˘i⁄Ex¥
(
e_shr
, 
€
) ;

916 
	`as£π
 (
ªs
) ;

918  
åue
;

919 
	}
}

921 
boﬁ
 
	gSymExecut‹
::
	$¥o˚ss_ßr
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) {

923 autÿ&
vecOI
 = 
öf›å
->vecOI;

924 
O¥ndInfoPå
 &
oi§c1
 = 
vecOI
[0];

925 
O¥ndInfoPå
 &
oi§c2
 = 
vecOI
[1];

926 
O¥ndInfoPå
 &
oid°
 = 
oi§c1
;

927 
boﬁ
 
ªs
;

929 
	`as£π
 (
oi§c1
->
symb
) ;

930 
	`as£π
 (!
oi§c2
->
symb
) ;

932 
KVEx¥På
 
	`e1
(
nuŒ±r
);

933 
ªs
 = 
oi§c1
->
	`gëSymVÆue
(
e1
);

934 
	`as£π
(
ªs
);

936 
v2
;

937 
ªs
 = 
oi§c1
->
	`gëC⁄VÆue
(
v2
);

938 
	`as£π
(
ªs
);

939 
Ex¥På
 
	`c2
(
√w
 
	`C⁄°Ex¥
(
v2
));

940 
KVEx¥På
 
	`€
(
√w
 
	`S¨Ex¥
(
e1
, 
c2
));

941 
ªs
 = 
oid°
->
	`£tSymVÆue
(
vm
, 
€
);

942 
	`as£π
(
ªs
);

944 
ªs
 = 
vm
->
	`SaveFœgCh™gögIn°ru˘i⁄Ex¥
(
e_ßr
, 
€
) ;

945 
	`as£π
 (
ªs
) ;

946  
åue
;

947 
	}
}

949 
boﬁ
 
	gSymExecut‹
::
	$¥o˚ss_idiv
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) {

951 autÿ&
vecOI
 = 
öf›å
->vecOI;

952 
O¥ndInfoPå
 &
o_d
 = 
vecOI
[0];

953 
O¥ndInfoPå
 &
o_a
 = 
vecOI
[1];

954 
O¥ndInfoPå
 &
o_Divis‹
 = 
vecOI
[2];

955 
boﬁ
 
ªs
;

956 
KVEx¥På
 
	`e
(
nuŒ±r
);

957 
KVEx¥På
 
	`e_a
(
nuŒ±r
), 
	`e_d
“uŒ±r), 
	`e_Dividíd
“uŒ±r), 
	`e_Divis‹
(nullptr);

958 
v_a
, 
v_d
, 
v_Dividíd
, 
v_Divis‹
 ;

960 i‡(
o_d
->
symb
 || 
o_a
->symb) {

961 if(
o_d
->
symb
) {

962 
ªs
 = 
o_d
->
	`gëSymVÆue
(
e_d
) ;

963 
	`as£π
 (
ªs
) ;

966 
ªs
 = 
o_d
->
	`gëC⁄VÆue
(
v_d
) ;

967 
	`as£π
 (
ªs
) ;

968 
e_d
.
	`ª£t
(
√w
 
	`C⁄°Ex¥
(
v_d
)) ;

970 if(
o_a
->
symb
) {

971 
ªs
 = 
o_a
->
	`gëSymVÆue
(
e_a
) ;

972 
	`as£π
 (
ªs
) ;

975 
ªs
 = 
o_a
->
	`gëC⁄VÆue
(
v_a
) ;

976 
	`as£π
 (
ªs
) ;

977 
e_a
.
	`ª£t
(
√w
 
	`C⁄°Ex¥
(
v_a
)) ;

981 
ªs
 = 
o_d
->
	`gëC⁄VÆue
(
v_d
) ;

982 
	`as£π
 (
ªs
) ;

983 
e_d
.
	`ª£t
(
√w
 
	`C⁄°Ex¥
(
v_d
)) ;

985 
ªs
 = 
o_a
->
	`gëC⁄VÆue
(
v_a
) ;

986 
	`as£π
 (
ªs
) ;

987 
e_a
.
	`ª£t
(
√w
 
	`C⁄°Ex¥
(
v_a
)) ;

990 
e_Dividíd
.
	`ª£t
(
√w
 
	`ComböeEx¥
(
e_d
, 
e_a
, 
o_d
->
size
, 
o_a
->size, o_d->size + o_a->size, 0)) ;

992 i‡(
o_Divis‹
->
symb
) {

993 
ªs
 = 
o_Divis‹
->
	`gëSymVÆue
(
e_Divis‹
) ;

994 
	`as£π
 (
ªs
) ;

996 
ªs
 = 
o_Divis‹
->
	`gëC⁄VÆue
(
v_Divis‹
) ;

997 
	`as£π
 (
ªs
) ;

998 
e_Divis‹
.
	`ª£t
(
√w
 
	`C⁄°Ex¥
(
v_Divis‹
)) ;

1001 
KVEx¥På
 
	`e_QuŸõ¡
(
√w
 
	`iDivEx¥
(
e_Dividíd
, 
e_Divis‹
, 
o_Divis‹
->
size
, 0));

1002 
KVEx¥På
 
	`e_Remaödî
(
√w
 
	`iDivEx¥
(
e_Dividíd
, 
e_Divis‹
, 
o_Divis‹
->
size
, 0));

1004 
ªs
 = 
o_a
->
	`£tSymVÆue
(
vm
, 
e_QuŸõ¡
) ;

1005 
	`as£π
 (
ªs
) ;

1006 
ªs
 = 
o_d
->
	`£tSymVÆue
(
vm
, 
e_Remaödî
) ;

1007 
	`as£π
 (
ªs
) ;

1009  
åue
 ;

1010 
	}
}

1011 
__uöt128_t
 
	$Sig√dTOUnsig√d
 (
v
, 
size
) {

1012 
size
) {

1014  (
__uöt128_t
)(
uöt8_t
)(
v
) ;

1016  (
__uöt128_t
)(
uöt16_t
)(
v
) ;

1018  (
__uöt128_t
)(
uöt32_t
)(
v
) ;

1020  (
__uöt128_t
)(
uöt64_t
)(
v
) ;

1022 
	`as£π
 (0) ;

1024 
	}
}

1025 
boﬁ
 
	gSymExecut‹
::
	$¥o˚ss_mul
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) {

1027 autÿ&
vecOI
 = 
öf›å
->vecOI;

1028 
O¥ndInfoPå
 &
o_d
 = 
vecOI
[0];

1029 
O¥ndInfoPå
 &
o_a
 = 
vecOI
[1];

1030 
O¥ndInfoPå
 &
o_m
 = 
vecOI
[2];

1031 
KVEx¥På
 
e_d
, 
e_a
, 
e_m
 ;

1032 
v_d
, 
v_a
, 
v_m
 ;

1033 
boﬁ
 
ªs
;

1034 
__uöt128_t
 
v_r
=0, 
u_a
, 
u_m
 ;

1036 if(
o_a
->
symb
) {

1037 
o_a
->
	`gëSymVÆue
(
e_a
) ;

1038 
	`as£π
 (
ªs
) ;

1041 
ªs
 = 
o_a
->
	`gëC⁄VÆue
(
v_a
) ;

1042 
	`as£π
 (
ªs
) ;

1043 
e_a
.
	`ª£t
(
√w
 
	`C⁄°Ex¥
(
v_a
)) ;

1045 if(
o_m
->
symb
) {

1046 
ªs
 = 
o_m
->
	`gëSymVÆue
(
e_m
) ;

1047 
	`as£π
 (
ªs
) ;

1050 
o_m
->
	`gëC⁄VÆue
(
v_m
) ;

1051 
	`as£π
 (
ªs
) ;

1052 
e_m
.
	`ª£t
(
√w
 
	`C⁄°Ex¥
(
v_m
)) ;

1055 if(!
o_a
->
symb
 && !
o_m
->symb) {

1056 autÿ&
I
 = 
öf›å
->
PI
;

1057 
íåyID
 
id
 = 
I
->
	`gëO≥øti⁄
().
	`gëID
() ;

1059 i‡(
id
 =
e_mul
) {

1060 
u_a
 = 
	`Sig√dTOUnsig√d
 (
v_a
, 
o_a
->
size
) ;

1061 
u_m
 = 
	`Sig√dTOUnsig√d
 (
v_m
, 
o_m
->
size
) ;

1062 
v_r
 = 
u_a
 * 
u_m
 ;

1064 
v_r
 = 
v_a
 * 
v_m
 ;

1066 
uöt64_t
 
væ
 = (uöt64_t)(
v_r
 & ((((
__uöt128_t
)1)<<
o_a
->
size
*8)-1)) ;

1067 
uöt64_t
 
vrh
 = (uöt64_t)((
v_r
>>(
o_d
->
size
*8)Ë& ((((
__uöt128_t
)1)<<o_d->size*8)-1)) ;

1068 
ªs
 = 
o_a
->
	`£tC⁄VÆue
(
vm
, 
væ
) ;

1069 
	`as£π
 (
ªs
) ;

1070 
ªs
 = 
o_d
->
	`£tC⁄VÆue
(
vm
, 
vrh
) ;

1071 
	`as£π
 (
ªs
) ;

1073  
åue
 ;

1076 
KVEx¥På
 
	`e_r
(
√w
 
	`MulEx¥
(
e_a
, 
e_m
, 
o_m
->
size
, 0)) ;

1077 
e_a
.
	`ª£t
(
√w
 
	`Exåa˘Ex¥
(
e_r
, 0, 
o_a
->
size
, o_a->size, 0)) ;

1078 
e_d
.
	`ª£t
(
√w
 
	`Exåa˘Ex¥
(
e_r
, 
o_a
->
size
, o_a->size*2, o_a->size, 0)) ;

1080 
e_a
->
	`¥öt
 () ;

1081 
°d
::
cout
 << std::
ídl
 ;

1082 
e_d
->
	`¥öt
 () ;

1083 
°d
::
cout
 << std::
ídl
 ;

1085 
ªs
 = 
o_a
->
	`£tSymVÆue
(
vm
, 
e_a
) ;

1086 
	`as£π
 (
ªs
) ;

1087 
ªs
 = 
o_d
->
	`£tSymVÆue
(
vm
, 
e_d
) ;

1088 
	`as£π
 (
ªs
) ;

1090  
åue
 ;

1091 
	}
}

1093 
boﬁ
 
	gSymExecut‹
::
	$¥o˚ss_nŸ
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) {

1095 autÿ&
vecOI
 = 
öf›å
->vecOI;

1096 
O¥ndInfoPå
 &
oi§c1
 = 
vecOI
[0];

1097 
O¥ndInfoPå
 &
oid°
 = 
oi§c1
;

1098 
KVEx¥På
 
€
 = 
NULL
 ;

1099 
boﬁ
 
ªs
;

1101 i‡(
oi§c1
->
symb
) {

1102 
KVEx¥På
 
	`e1
(
nuŒ±r
) ;

1103 
ªs
 = 
oi§c1
->
	`gëSymVÆue
(
e1
);

1104 
	`as£π
(
ªs
);

1106 
€
.
	`ª£t
(
√w
 
	`NŸEx¥
(
e1
));

1107 
ªs
 = 
oid°
->
	`£tSymVÆue
(
vm
, 
€
);

1108 
	`as£π
(
ªs
);

1110 
	`ERRR_ME
("Unexpected operands");

1111 
	`as£π
(0);

1113 
ªs
 = 
vm
->
	`SaveFœgCh™gögIn°ru˘i⁄Ex¥
(
e_nŸ
, 
€
) ;

1114 
	`as£π
 (
ªs
) ;

1115  
åue
 ;

1116 
	}
}

1118 
boﬁ
 
	gSymExecut‹
::
	$¥o˚ss_√g
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) {

1120 autÿ&
vecOI
 = 
öf›å
->vecOI;

1121 
O¥ndInfoPå
 &
oi§c1
 = 
vecOI
[0];

1122 
O¥ndInfoPå
 &
oid°
 = 
oi§c1
;

1123 
boﬁ
 
ªs
;

1125 
	`as£π
 (
oi§c1
->
symb
) ;

1127 
KVEx¥På
 
	`e1
(
nuŒ±r
) ;

1128 
ªs
 = 
oi§c1
->
	`gëSymVÆue
(
e1
);

1129 
	`as£π
(
ªs
);

1131 
KVEx¥På
 
	`€
(
√w
 
	`NegEx¥
(
e1
));

1132 
ªs
 = 
oid°
->
	`£tSymVÆue
(
vm
, 
€
);

1133 
	`as£π
 (
ªs
) ;

1135 
ªs
 = 
vm
->
	`SaveFœgCh™gögIn°ru˘i⁄Ex¥
(
e_√g
, 
€
) ;

1137 
	`as£π
(
ªs
);

1138  
åue
 ;

1139 
	}
}

1141 
boﬁ
 
	gSymExecut‹
::
	$¥o˚ss_p›
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) {

1143 autÿ&
vecOI
 = 
öf›å
->vecOI;

1144 
O¥ndInfoPå
 &
oi§c1
 = 
vecOI
[0];

1145 
O¥ndInfoPå
 &
oi§c2
 = 
vecOI
[1];

1146 
boﬁ
 
ªs
;

1147 
RegVÆue
 
V
 ;

1149 
	`as£π
(!
oi§c2
->
symb
) ;

1151 
V
.
ödx
 = 
oi§c2
->
ªg_ödex
;

1152 
V
.
size
 = 
oi§c2
->size ;

1154 
ªs
 = 
vm
->
	`ªadRegi°î
(
V
);

1155 
	`as£π
 (
ªs
) ;

1156 
	`as£π
 (
V
.
size
==8) ;

1159 #ifde‡
_DEBUG_OUTPUT


1160 
°d
::
cout
 << "p› :" << std::
hex
 << 
V
.
u64
 << " " ;

1164 
MemVÆue
 
MV
;

1165 
MV
.
addr
 = 
V
.
u64
 ;

1166 
MV
.
size
 = 
oi§c1
->size ;

1167 
ªs
 = 
vm
->
	`ªadMem‹y
(
MV
) ;

1168 
	`as£π
(
ªs
) ;

1170 if(
MV
.
bsym
) {

1171 
ªs
 = 
oi§c1
->
	`£tSymVÆue
(
vm
, 
MV
.
ex¥
) ;

1173 #ifde‡
_DEBUG_OUTPUT


1174 
MV
.
ex¥
->
	`¥öt
 () ;

1175 
°d
::
cout
 << "\n" ;

1180 
ªs
 = 
oi§c1
->
	`£tC⁄VÆue
(
vm
, 
MV
.
u64
) ;

1182 #ifde‡
_DEBUG_OUTPUT


1183 
°d
::
cout
 << std::
hex
 << "0x" << 
MV
.
u64
 << std::
ídl
 ;

1188 
	`as£π
(
ªs
) ;

1190 
V
.
u64
 +V.
size
 ;

1191 
ªs
 = 
vm
->
	`wrôeRegi°î
(
V
);

1192 
	`as£π
(
ªs
) ;

1194  
åue
;

1195 
	}
}

1197 
boﬁ
 
	gSymExecut‹
::
	$¥o˚ss_push
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) {

1199 autÿ&
vecOI
 = 
öf›å
->vecOI;

1200 
O¥ndInfoPå
 &
oi§c1
 = 
vecOI
[0];

1201 
O¥ndInfoPå
 &
oi§c2
 = 
vecOI
[1];

1202 
boﬁ
 
ªs
;

1203 
RegVÆue
 
V
 ;

1206 
	`as£π
(!
oi§c2
->
symb
) ;

1208 
V
.
ödx
 = 
oi§c2
->
ªg_ödex
;

1209 
V
.
size
 = 
oi§c2
->size ;

1211 
ªs
 = 
vm
->
	`ªadRegi°î
(
V
);

1213 
	`as£π
(
ªs
) ;

1214 
	`as£π
 (
V
.
size
==8) ;

1215 
V
.
u64
 -V.
size
 ;

1216 
ªs
 = 
vm
->
	`wrôeRegi°î
(
V
);

1217 
	`as£π
(
ªs
) ;

1220 #ifde‡
_DEBUG_OUTPUT


1221 
°d
::
cout
 << "push :" << std::
hex
 << 
V
.
u64
 << " " ;

1225 
MemVÆue
 
MV
;

1226 
MV
.
addr
 = 
V
.
u64
 ;

1227 
MV
.
size
 = 
oi§c1
->size ;

1229 
KVEx¥På
 
	`e1
(
nuŒ±r
) ;

1230 if(
oi§c1
->
symb
) {

1231 
ªs
 = 
oi§c1
->
	`gëSymVÆue
(
e1
);

1232 
	`as£π
(
ªs
) ;

1233 
MV
.
bsym
 = 
åue
 ;

1234 
MV
.
ex¥
 = 
e1
 ;

1237 #ifde‡
_DEBUG_OUTPUT


1238 
e1
->
	`¥öt
 () ;

1239 
°d
::
cout
 << "\n" ;

1244 
v
 ;

1245 
ªs
 = 
oi§c1
->
	`gëC⁄VÆue
(
v
);

1246 
	`as£π
(
ªs
) ;

1247 
MV
.
bsym
 = 
Ál£
 ;

1248 
MV
.
i64
 = 
v
 ;

1251 #ifde‡
_DEBUG_OUTPUT


1252 
°d
::
cout
 << std::
hex
 << "0x" << 
v
 << std::
ídl
 ;

1257 
ªs
 = 
vm
->
	`wrôeMem‹y
(
MV
) ;

1258 
	`as£π
(
ªs
) ;

1260  
åue
;

1261 
	}
}

1264 
boﬁ
 
	gSymExecut‹
::
	$¥o˚ss_xchg
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) {

1265 autÿ&
vecOI
 = 
öf›å
->vecOI;

1266 
O¥ndInfoPå
 &
oi§c1
 = 
vecOI
[0];

1267 
O¥ndInfoPå
 &
oi§c2
 = 
vecOI
[1];

1268 
boﬁ
 
ªs
;

1270 i‡(
oi§c1
->
symb
 && 
oi§c2
->symb) {

1271 
KVEx¥På
 
	`e1
(
nuŒ±r
), 
	`e2
(nullptr);

1272 
ªs
 = 
oi§c1
->
	`gëSymVÆue
(
e1
);

1273 
	`as£π
(
ªs
);

1274 
ªs
 = 
oi§c2
->
	`gëSymVÆue
(
e2
);

1275 
	`as£π
(
ªs
);

1277 
ªs
 = 
oi§c1
->
	`£tSymVÆue
(
vm
, 
e2
);

1278 
	`as£π
(
ªs
);

1279 
ªs
 = 
oi§c2
->
	`£tSymVÆue
(
vm
, 
e1
);

1280 
	`as£π
(
ªs
);

1282 } i‡(
oi§c1
->
symb
 && !
oi§c2
->symb) {

1283 
KVEx¥På
 
	`e1
(
nuŒ±r
);

1284 
v2
;

1286 
ªs
 = 
oi§c1
->
	`gëSymVÆue
(
e1
);

1287 
	`as£π
(
ªs
);

1288 
ªs
 = 
oi§c2
->
	`gëC⁄VÆue
(
v2
);

1289 
	`as£π
(
ªs
);

1291 
ªs
 = 
oi§c1
->
	`£tC⁄VÆue
(
vm
, 
v2
);

1292 
	`as£π
(
ªs
);

1293 
ªs
 = 
oi§c2
->
	`£tSymVÆue
(
vm
, 
e1
);

1294 
	`as£π
(
ªs
);

1296 } i‡(!
oi§c1
->
symb
 && 
oi§c2
->symb) {

1297 
KVEx¥På
 
	`e2
(
nuŒ±r
);

1298 
v1
;

1300 
ªs
 = 
oi§c2
->
	`gëSymVÆue
(
e2
);

1301 
	`as£π
(
ªs
);

1302 
ªs
 = 
oi§c1
->
	`gëC⁄VÆue
(
v1
);

1303 
	`as£π
(
ªs
);

1305 
ªs
 = 
oi§c1
->
	`£tSymVÆue
(
vm
, 
e2
);

1306 
	`as£π
(
ªs
);

1307 
ªs
 = 
oi§c2
->
	`£tC⁄VÆue
(
vm
, 
v1
);

1308 
	`as£π
(
ªs
);

1310 
	`ERRR_ME
("Unexpected operands");

1311 
	`as£π
(0);

1314  
åue
;

1315 
	}
}

1317 
boﬁ
 
	gSymExecut‹
::
	$¥o˚ss_movsx
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) {

1319 autÿ&
vecOI
 = 
öf›å
->vecOI;

1320 
O¥ndInfoPå
 &
oid°
 = 
vecOI
[0];

1321 
O¥ndInfoPå
 &
oi§c
 = 
vecOI
[1];

1322 
boﬁ
 
ªs
;

1324 if(
oi§c
->
symb
) {

1325 
KVEx¥På
 
e
;

1327 
ªs
 = 
oi§c
->
	`gëSymVÆue
(
e
);

1328 
	`as£π
(
ªs
);

1330 
KVEx¥På
 
	`€
(
√w
 
	`SignExtEx¥
(
e
));

1333 
ªs
 = 
oid°
->
	`£tSymVÆue
(
vm
, 
€
);

1334 
	`as£π
(
ªs
);

1336 
vÆ
;

1337 
	`as£π
 (
oid°
->
symb
) ;

1339 
ªs
 = 
oi§c
->
	`gëC⁄VÆue
(
vÆ
);

1340 
	`as£π
(
ªs
);

1343 
ªs
 = 
oid°
->
	`£tC⁄VÆue
(
vm
, 
vÆ
);

1344 
	`as£π
(
ªs
);

1347  
åue
;

1348 
	}
}

1350 
boﬁ
 
	gSymExecut‹
::
	$¥o˚ss_movzx
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) {

1352 autÿ&
vecOI
 = 
öf›å
->vecOI;

1353 
O¥ndInfoPå
 &
oid°
 = 
vecOI
[0];

1354 
O¥ndInfoPå
 &
oi§c
 = 
vecOI
[1];

1355 
boﬁ
 
ªs
;

1357 if(
oi§c
->
symb
) {

1358 
KVEx¥På
 
e
;

1360 
ªs
 = 
oi§c
->
	`gëSymVÆue
(
e
);

1361 
	`as£π
(
ªs
);

1363 
KVEx¥På
 
	`€
(
√w
 
	`ZîoExtEx¥
(
e
));

1366 
ªs
 = 
oid°
->
	`£tSymVÆue
(
vm
, 
€
);

1367 
	`as£π
(
ªs
);

1369 
vÆ
;

1370 
	`as£π
 (
oid°
->
symb
) ;

1372 
ªs
 = 
oi§c
->
	`gëC⁄VÆue
(
vÆ
);

1373 
	`as£π
(
ªs
);

1376 
ªs
 = 
oid°
->
	`£tC⁄VÆue
(
vm
, 
vÆ
);

1377 
	`as£π
(
ªs
);

1380  
åue
;

1381 
	}
}

1383 
boﬁ
 
	gSymExecut‹
::
	$¥o˚ss_cbw
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) {

1385 autÿ&
vecOI
 = 
öf›å
->vecOI;

1386 
O¥ndInfoPå
 &
oi§c
 = 
vecOI
[0];

1387 
KVEx¥På
 
e
, 
€
 ;

1388 
vÆ
;

1389 
RegVÆue
 
rv
 ;

1390 
boﬁ
 
ªs
 ;

1391 i‡(
oi§c
->
symb
) {

1392 
ªs
 = 
oi§c
->
	`gëSymVÆue
(
e
) ;

1393 
	`as£π
 (
ªs
) ;

1395 
ªs
 = 
oi§c
->
	`gëC⁄VÆue
(
vÆ
) ;

1396 
	`as£π
 (
ªs
) ;

1399 
rv
.
bsym
 = 
oi§c
->
symb
 ;

1400 
rv
.
size
 = 
oi§c
->size *2 ;

1402 
oi§c
->
size
) {

1404 
rv
.
ödx
 = 
x86_64
::
ax
 ;

1407 
rv
.
ödx
 = 
x86_64
::
óx
 ;

1410 
rv
.
ödx
 = 
x86_64
::
øx
 ;

1414 
	`as£π
 (0) ;

1417 if(
rv
.
bsym
) {

1418 
€
.
	`ª£t
(
√w
 
	`SignEx¥
(
e
, 
rv
.
size
, 0)) ;

1419 
rv
.
ex¥
 = 
€
 ;

1421 
rv
.
i64
 = 
vÆ
 ;

1424 
ªs
 = 
vm
->
	`wrôeRegi°î
(
rv
) ;

1425 
	`as£π
 (
ªs
) ;

1427  
åue
;

1428 
	}
}

1430 
boﬁ
 
	gSymExecut‹
::
	$¥o˚ss_cdq
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) {

1432 autÿ&
vecOI
 = 
öf›å
->vecOI;

1433 
O¥ndInfoPå
 &
o_d
 = 
vecOI
[0];

1434 
O¥ndInfoPå
 &
o_a
 = 
vecOI
[1];

1435 
KVEx¥På
 
e_a
, 
e_r
, 
e_d
;

1436 
RegVÆue
 
rv_d
 ;

1437 
v_a
;

1438 
boﬁ
 
ªs
;

1440 i‡(
o_a
->
symb
) {

1441 
ªs
 = 
o_a
->
	`gëSymVÆue
 (
e_a
) ;

1442 
	`as£π
 (
ªs
) ;

1443 
e_r
.
	`ª£t
 (
√w
 
	`SignExtEx¥
(
e_a
, 
o_a
->
size
*2, 0)) ;

1444 
e_d
.
	`ª£t
 (
√w
 
	`Exåa˘Ex¥
(
e_r
, 
o_a
->
size
, o_a->size*2, 
o_d
->size, 0)) ;

1445 
e_d
->
	`¥öt
() ;

1446 
°d
::
cout
 << std::
ídl
 ;

1447 
ªs
 = 
o_d
->
	`£tSymVÆue
(
vm
, 
e_d
) ;

1448 
	`as£π
 (
ªs
) ;

1449  
åue
 ;

1451 
ªs
 = 
o_a
->
	`gëC⁄VÆue
 (
v_a
) ;

1452 
	`as£π
 (
ªs
) ;

1453 i‡(
v_a
>=0)

1454 
v_a
 = 0 ;

1456 
v_a
 = -1 ;

1457 
ªs
 = 
o_d
->
	`£tC⁄VÆue
(
vm
, 
v_a
) ;

1458 
	`as£π
 (
ªs
) ;

1459  
åue
 ;

1461  
åue
;

1462 
	}
}

1463 
boﬁ
 
	gSymExecut‹
::
	$¥o˚ss_£t
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) {

1465 autÿ&
vecOI
 = 
öf›å
->vecOI;

1466 
O¥ndInfoPå
 &
oid°
 = 
vecOI
[0];

1467 
v
 = 1 ;

1468 
boﬁ
 
ªs
 ;

1470 
ªs
 = 
oid°
->
	`£tC⁄VÆue
(
vm
, 
v
) ;

1471 
	`as£π
 (
ªs
) ;

1473  
åue
 ;

1474 
	}
}

1476 
boﬁ
 
	gSymExecut‹
::
	$¥o˚ss_shrd
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) {

1477 
	`as£π
 (0) ;

1478  
åue
 ;

1479 
	}
}

1481 
boﬁ
 
	gSymExecut‹
::
	$Pröt_In°
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
, c⁄° * 
c°r
) {

1482 autÿ&
vecOI
 = 
öf›å
->vecOI ;

1483 
i
 = 0;

1484 
DAPIIn°rPå
 &
I
 = 
öf›å
->
PI
;

1487 
°d
::
cout
 << 
c°r
 << 
I
->
	`f‹m©
(Ë<< std::
ídl
 ;

1489 
i
=0; i<
vecOI
.
	`size
(); i++) {

1490 
O¥ndInfoPå
 &
o
=
vecOI
[
i
] ;

1491 
KVEx¥På
 
e
 ;

1492 
v
 ;

1493 if(
o
->
symb
) {

1494 
o
->
	`gëSymVÆue
 (
e
) ;

1495 
e
->
	`¥öt
() ;

1496 
°d
::
cout
 << "," ;

1498 if((
o
->
rdwr
 & 
OPAC_RD
) != 0){

1499 
o
->
	`gëC⁄VÆue
(
v
) ;

1500 
°d
::
cout
 << std::
hex
 << 
v
 << ", " ;

1502 
°d
::
cout
 << "----, " ;

1507 
°d
::
cout
 << 
ídl
 ;

1508  
åue
 ;

1509 
	}
}

	@/home/jqhong/Documents/KernelSE/symexec.h

1 #i‚de‡
_SYM_EXEC_H__


2 
	#_SYM_EXEC_H__


	)

4 
	~<löux/ty≥s.h
>

6 
	~<io°ªam
>

7 
	~<mem‹y
>

8 
	~<ve˘‹
>

11 
	~"VMSèã.h
"

13 
	gO¥ndInfo
;

14 
˛ass
 
	gSymInfoDB
;

15 
˛ass
 
	gVMSèã
;

17 
«me•a˚
 
	gDynö°
::
In°ru˘i⁄API
 {

18 
˛ass
 
In°ru˘i⁄
;

21 ˛as†
	cSymExecut‹
 {

22 
	m¥Ÿe˘ed
:

23 
°d
::
ve˘‹
<
In°rInfoPå
> 
m_IOIs
;

24 
boﬁ
 
	mm_RIPUpd©ed
;

26 
	mpublic
:

27 
	$SymExecut‹
(Ë: 
	$m_IOIs
(){};

28 ~
	$SymExecut‹
(){
	}
};

33 
boﬁ
 
pushIn°r
(
In°rInfoPå
 &
±r
);

34 
boﬁ
 
run
(
VMSèã
 *
cs
);

35 
boﬁ
 
_run_¥ﬁogue
();

36 
boﬁ
 
_run_po°logue
();

38 
boﬁ
 
¥o˚ss_jmp
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
);

39 
boﬁ
 
¥o˚ss_ˇŒ
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
);

40 
boﬁ
 
¥o˚ss_jcc
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
);

41 
boﬁ
 
¥o˚ss_add
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
);

42 
boﬁ
 
¥o˚ss_Àa
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
);

43 
boﬁ
 
¥o˚ss_mov
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
);

44 
boﬁ
 
¥o˚ss_ã°
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
);

47 
boﬁ
 
¥o˚ss_cmovxx
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) ;

48 
boﬁ
 
¥o˚ss_cmp
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
);

49 
boﬁ
 
¥o˚ss_sub
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
);

51 
boﬁ
 
¥o˚ss_jxx
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
);

53 
boﬁ
 
¥o˚ss_™d
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
);

54 
boﬁ
 
¥o˚ss_‹
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
);

55 
boﬁ
 
¥o˚ss_x‹
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
);

56 
boﬁ
 
¥o˚ss_shl_ßl
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) ;

57 
boﬁ
 
¥o˚ss_shr
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) ;

58 
boﬁ
 
¥o˚ss_shrd
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) ;

59 
boﬁ
 
¥o˚ss_ßr
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) ;

61 
boﬁ
 
¥o˚ss_idiv
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) ;

62 
boﬁ
 
¥o˚ss_mul
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) ;

63 
boﬁ
 
¥o˚ss_nŸ
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) ;

64 
boﬁ
 
¥o˚ss_√g
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) ;

66 
boﬁ
 
¥o˚ss_p›
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) ;

67 
boﬁ
 
¥o˚ss_push
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) ;

69 
boﬁ
 
¥o˚ss_xchg
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) ;

71 
boﬁ
 
¥o˚ss_movsx
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) ;

72 
boﬁ
 
¥o˚ss_movzx
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) ;

74 
boﬁ
 
¥o˚ss_cdq
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) ;

75 
boﬁ
 
¥o˚ss_cbw
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) ;

77 
boﬁ
 
¥o˚ss_£t
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) ;

79 
boﬁ
 
Pröt_In°
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
, c⁄° * 
c°r
) ;

	@/home/jqhong/Documents/KernelSE/syminstr.h

1 #i‚de‡
SYM_INSTR_H__


2 
	#SYM_INSTR_H__


	)

4 
	~<io°ªam
>

5 
	~<mem‹y
>

6 
	~<ve˘‹
>

	@/home/jqhong/Documents/KernelSE/test.cpp

3 
	~<löux/ty≥s.h
>

4 
	~<sig«l.h
>

5 
	~<uc⁄ãxt.h
>

7 
	~<io°ªam
>

9 
	~"CodeObje˘.h
"

10 
	~"In°ru˘i⁄Decodî.h
"

11 
	~"öãrÁ˚.h
"

12 
	~"xcode.h
"

14 
usög
 
«me•a˚
 
	g°d
;

15 
usög
 
«me•a˚
 
	gDynö°
;

16 
usög
 
«me•a˚
 
	gP¨£API
;

17 
usög
 
«me•a˚
 
	gIn°ru˘i⁄API
;

19 
	$maö
(
¨gc
, **
¨gv
) {

20 
In°ru˘i⁄
 
ö°r
;

22 c⁄° *
hex°ªam
 = (const *)"\x41\x5c\x48\x83\xc4\x08\xc3";

25 
In°ru˘i⁄Decodî
 
	`decodî
(
hex°ªam
, In°ru˘i⁄Decodî::
maxIn°ru˘i⁄Lígth
,

26 
Archôe˘uª
::
Arch_x86_64
);

30 
Addªss
 
¸tAddr
 = 0x400000;

36 
Addªss
 
œ°Addr
 = 
¸tAddr
 + 7;

41 
ul⁄g
 
curs‹
 = 0;

42 
¸tAddr
 < 
œ°Addr
) {

44 
ö°r
 = 
decodî
.
	`decode
(
hex°ªam
 + 
curs‹
);

45 
cout
 << 
hex
 << 
¸tAddr
 << ": ";

46 
cout
 << 
ö°r
.
	`f‹m©
() << "\n";

48 
¸tAddr
 +
ö°r
.
	`size
();

49 
curs‹
 +
ö°r
.
	`size
();

52 
	`SymbﬁicQuîy
(&
ö°r
);

55 
	}
}

	@/home/jqhong/Documents/KernelSE/thinctrl.cpp

1 
	~<io°ªam
>

2 
	~<f°ªam
>

4 
	~"thö˘æ.h
"

6 
	~<löux/ty≥s.h
>

7 
	~<sig«l.h
>

8 
	~<uc⁄ãxt.h
>

12 
	~"CPUSèã.h
"

13 
	~"CodeObje˘.h
"

14 
	~"In°ru˘i⁄Decodî.h
"

15 
	~"Visô‹.h
"

16 
	~"O≥øti⁄_im∂.h
"

19 
	~"c⁄exec.h
"

20 
	~"deföes.h
"

21 
	~"öãrÁ˚.h
"

22 
	~"symexec.h
"

24 
	~"EFœgsM™agî.h
"

26 
	~"Ex¥.h
"

28 
usög
 
«me•a˚
 
	g°d
;

34 
	gMyCodeRegi⁄
::
	$MyCodeRegi⁄
(
Addªss
 
add1
, Addªs†
add2
)

36 
knowD©a
[
add1
] = 
add2
;

37 
	}
}

39 
	gMyCodeRegi⁄
::~
	$MyCodeRegi⁄
()

42 
	}
}

44 
boﬁ
 
MyCodeRegi⁄
::
	$isVÆidAddªss
(c⁄° 
Addªss
 
addr
) const

47  
	`c⁄èös
(
addr
);

48 
	}
}

50 * 
	gMyCodeRegi⁄
::
	$gëPåToIn°ru˘i⁄
(c⁄° 
Addªss
 
addr
) const

52 i‡(
	`isVÆidAddªss
(
addr
))

54  (*)
addr
;

56  
NULL
;

57 
	}
}

59 * 
	gMyCodeRegi⁄
::
	$gëPåToD©a
(c⁄° 
Addªss
 
addr
) const

61 i‡(
	`isVÆidAddªss
(
addr
))

63  (*)
addr
;

65  
NULL
;

66 
	}
}

68 
	gMyCodeRegi⁄
::
	$gëAddªssWidth
() const

74 
	}
}

76 
boﬁ
 
	gMyCodeRegi⁄
::
	$isCode
(c⁄° 
Addªss
 
addr
) const

78  
åue
;

79 
	}
}

81 
boﬁ
 
	gMyCodeRegi⁄
::
	$isD©a
(c⁄° 
Addªss
 
addr
) const

83  
Ál£
;

84 
	}
}

86 
boﬁ
 
	gMyCodeRegi⁄
::
	$isRódO∆y
(c⁄° 
Addªss
 
addr
) const

88  
åue
;

89 
	}
}

91 
Addªss
 
	gMyCodeRegi⁄
::
	$off£t
() const

94  
knowD©a
.
	`begö
()->
fú°
;

95 
	}
}

97 
Addªss
 
	gMyCodeRegi⁄
::
	$Àngth
() const

100  
knowD©a
.
	`begö
()->
£c⁄d
 - knowD©a.begö()->
fú°
 ;

101 
	}
}

103 
Archôe˘uª
 
	gMyCodeRegi⁄
::
	$gëArch
() const

105 
Archôe˘uª
 
¨ch
 = 
Arch_x86_64
;

106  
¨ch
;

107 
	}
}

110 
	gMyCodeSour˚
::
	$öô_ªgi⁄s
(
Addªss
 
adds
, Addªs†
adde
)

112 
MyCodeRegi⁄
 *
¸
;

117 
¸
 = 
√w
 
	`MyCodeRegi⁄
(
adds
, 
adde
);

118 
	`MyaddRegi⁄
(
¸
);

119 
	}
}

122 
	gMyCodeSour˚
::
	$öô_höts
()

126 
	}
}

128 
	gMyCodeSour˚
::~
	$MyCodeSour˚
()

131 
	}
}

133 
MyCodeSour˚
::
	$MyCodeSour˚
(
Addªss
 
adds
, Addªs†
adde
)

135 
	`öô_ªgi⁄s
(
adds
, 
adde
);

137 
	`öô_höts
();

138 
	}
}

140 
ölöe
 
CodeRegi⁄
* 
	gMyCodeSour˚
::
	$lookup_ªgi⁄
(c⁄° 
Addªss
 
addr
) const

142 
CodeRegi⁄
 *
ªt
 = 
NULL
;

143 i‡(
_lookup_ˇche
 && _lookup_ˇche->
	`c⁄èös
(
addr
))

144 
ªt
 = 
_lookup_ˇche
;

146 
£t
<
CodeRegi⁄
 *> 
°ab
;

147 
r˙t
 = 
	`födRegi⁄s
(
addr
, 
°ab
);

149 
	`as£π
(
r˙t
 <=1 || 
	`ªgi⁄sOvîœp
());

151 i‡(
r˙t
) {

152 
ªt
 = *
°ab
.
	`begö
();

153 
_lookup_ˇche
 = 
ªt
;

157  
ªt
;

158 
	}
}

160 
boﬁ
 
	gMyCodeSour˚
::
	$isVÆidAddªss
(c⁄° 
Addªss
 
addr
) const

162 
CodeRegi⁄
 *
¸
 = 
	`lookup_ªgi⁄
(
addr
);

163 i‡(
¸
)

165  
¸
->
	`isVÆidAddªss
(
addr
);

169  
Ál£
;

171 
	}
}

173 * 
	gMyCodeSour˚
::
	$gëPåToIn°ru˘i⁄
(c⁄° 
Addªss
 
addr
) const

184  (*)
addr
;

185 
	}
}

187 * 
	gMyCodeSour˚
::
	$gëPåToD©a
(c⁄° 
Addªss
 
addr
) const

189  
NULL
;

190 
	}
}

192 
	gMyCodeSour˚
::
	$gëAddªssWidth
() const

195 
	`¥ötf
 ("in MyCodeSource, getAddressWidth \n");

199 
	}
}

201 
boﬁ
 
	gMyCodeSour˚
::
	$isCode
(c⁄° 
Addªss
 
addr
) const

203  
åue
;

204 
	}
}

206 
boﬁ
 
	gMyCodeSour˚
::
	$isD©a
(c⁄° 
Addªss
 
addr
) const

208  
Ál£
;

209 
	}
}

211 
boﬁ
 
	gMyCodeSour˚
::
	$isRódO∆y
(c⁄° 
Addªss
 
addr
) const

213  
åue
;

214 
	}
}

216 
Addªss
 
	gMyCodeSour˚
::
	$off£t
() const

219  
_ªgi⁄s
[0]->
	`off£t
();

220 
	}
}

222 
Addªss
 
	gMyCodeSour˚
::
	$Àngth
() const

225  
_ªgi⁄s
[0]->
	`Àngth
();

226 
	}
}

228 
Archôe˘uª
 
	gMyCodeSour˚
::
	$gëArch
() const

230 
Archôe˘uª
 
¨ch
 = 
Arch_x86_64
;

231  
¨ch
;

232 
	}
}

235 
__©åibuã__
 ((
noölöe
)Ë
	$rdtsc
()

237 
hi
, 
lo
;

238 
asm
 vﬁ©ûê("rdtsc" : "˜"(
lo
), "=d"(
hi
));

240  ((Ë
lo
 | ((Ë
hi
 << 32));

241 
	}
}

243 ˛as†
	cPrötVisô‹
 : 
public
 
Visô‹
 {

244 
public
:

245 
	$PrötVisô‹
() {};

246 ~
	$PrötVisô‹
(Ë{
	}
};

247 
vútuÆ
 
	$visô
(
Bö¨yFun˘i⁄
* 
b
) {

248 
°d
::
cout
 << "\tVisôög bö¨y fun˘i⁄ " << 
b
->
	`f‹m©
(
deÁu…StyÀ
Ë<< std::
ídl
;

249 
	}
}

250 
vútuÆ
 
	$visô
(
Immedüã
* 
i
) {

251 
°d
::
cout
 << "\tVisôög imm " << 
i
->
	`f‹m©
(
Arch_x86_64
, 
deÁu…StyÀ
Ë<< std::
ídl
;

252 
	}
}

253 
vútuÆ
 
	$visô
(
Regi°îAST
* 
r
) {

254 
°d
::
cout
 << "\tVisôögÑegsôî " << 
r
->
	`gëID
().
	`«me
(Ë<< std::
ídl
;

255 autÿ
A
 = 
r
->
	`evÆ
();

256 
	`as£π
(
A
.
deföed
);

257 
°d
::
cout
 << "ªg böd vÆuê" << 
A
.
c⁄vît
<
ul⁄g
>(Ë<< std::
ídl
;

258 
	}
}

259 
vútuÆ
 
	$visô
(
Dîe„ªn˚
* 
d
) {

260 
°d
::
cout
 << "\tVisôög de„ªn˚ " << std::
ídl
;

261 
	}
}

266 ˛as†
	cEx¥EvÆVisô‹
 : 
public
 
Visô‹
 {

267 
¥iv©e
:

268 
VMSèã
* 
°©e
;

269 
	mpublic
:

270 
	$Ex¥EvÆVisô‹
(
VMSèã
* 
VM
Ë: 
	$°©e
(
VM
) {};

271 
	$Ex¥EvÆVisô‹
(Ë: 
	$°©e
(
NULL
Ë{
	}
};

272 ~
	$Ex¥EvÆVisô‹
(Ë{
	}
};

273 
vútuÆ
 
	$visô
(
Bö¨yFun˘i⁄
* 
b
Ë{
	}
};

274 
vútuÆ
 
	$visô
(
Immedüã
* 
i
Ë{
	}
};

275 
vútuÆ
 
	$visô
(
Regi°îAST
* 
r
) {

276 
uöt
 
ödx
 = 
r
->
	`gëID
();

277 
uöt
 
size
 = 
r
->
	`size
();

278 
RegVÆue
 
RV
 = {
ödx
, 
size
};

279 
boﬁ
 
ªs
 = 
°©e
->
	`ªadRegi°î
(
RV
);

280 
	`as£π
(
ªs
);

282 i‡(
RV
.
bsym
) {

284 
cout
 << 
r
->
	`f‹m©
() << " is sym!!!" << "\n";

286 
size
) {

288 
r
->
	`£tVÆue
(
	`Resu…
(
s64
, 
RV
.
i64
));

291 
r
->
	`£tVÆue
(
	`Resu…
(
s32
, 
RV
.
i32
));

294 
r
->
	`£tVÆue
(
	`Resu…
(
s16
, 
RV
.
i16
));

297 
r
->
	`£tVÆue
(
	`Resu…
(
s8
, 
RV
.
i8
));

300 
	`FIX_ME
();

304 
	}
}

305 
vútuÆ
 
	$visô
(
Dîe„ªn˚
* 
d
Ë{
	}
};

310 
	gCThöCål
::
	$CThöCål
(
VMSèã
* 
VM
, 
ul⁄g
 
adds
, ul⁄g 
adde
) {

311 
m_VM
 = 
VM
;

312 
m_°s
 = 
√w
 
	`MyCodeSour˚
(
adds
, 
adde
);

313 
m_co
 = 
√w
 
	`CodeObje˘
(
m_°s
);

314 
m_¸
 = *(
m_°s
->
	`ªgi⁄s
().
	`begö
());

315 
decodî
 = 
√w
 
	`In°ru˘i⁄Decodî
((*)
m_°s
->
	`gëPåToIn°ru˘i⁄
(
m_¸
->
	`low
()), 
In°ru˘i⁄Decodî
::
maxIn°ru˘i⁄Lígth
, m_°s->
	`gëArch
());

317 
	`¥ötf
 ("m_°s: %p, m_¸: %p, decodî: %∞.\n", 
m_°s
, 
m_¸
, 
decodî
);

318 
	`¥ötf
 ("low: %lx. \n", 
m_¸
->
	`low
());

319 
	`¥ötf
 ("high: %lx. \n", 
m_¸
->
	`high
());

320 
m_SymExecut‹
.
	`ª£t
(
√w
 
	`SymExecut‹
());

321 
m_C⁄Execut‹
.
	`ª£t
(
√w
 
	`C⁄Execut‹
());

323 
m_EFœgsMgr
 = 
m_VM
->m_EFlagsMgr;

324 
	}
}

326 
	gCThöCål
::~
	$CThöCål
(Ë{
	}
}

328 
boﬁ
 
CThöCål
::
	$dïídFœgC⁄
(
In°ru˘i⁄
* 
ö¢
, 
boﬁ
 &
bChoi˚
) {

330 if(
m_EFœgsMgr
->
	`isC⁄dôi⁄ÆExecuãIn°r
(
ö¢
->
	`gëO≥øti⁄
().
	`gëID
()))

332  
m_EFœgsMgr
->
	`DïídícyFœgC⁄¸ëed
(
ö¢
->
	`gëO≥øti⁄
().
	`gëID
(), 
bChoi˚
) ;

336  
åue
 ;

338 
	}
}

340 
boﬁ
 
	gCThöCål
::
	$chkC⁄dFaû
 (
íåyID
 
›îa_id
, 
±_ªgs
* 
ªgs
)

342 
boﬁ
 
ªt
;

343 
eÊags
;

344 
eÊags
 = 
ªgs
->eflags;

345 
boﬁ
 
cf
, 
pf
, 
zf
, 
sf
, 
of
;

346 
cf
 = 
eÊags
 & 0x1;

347 
pf
 = (
eÊags
 >> 2) & 0x1;

348 
zf
 = (
eÊags
 >> 6) & 0x1;

349 
sf
 = (
eÊags
 >> 7) & 0x1;

350 
of
 = (
eÊags
 >> 11) & 0x1;

352 
ªt
 = 
Ál£
;

355 
›îa_id
)

357 
e_jnbe
:

359 i‡(
cf
 || 
zf
)

360 
ªt
 = 
åue
;

362 
e_jb
:

363 i‡(!
cf
)

364 
ªt
 = 
åue
;

366 
e_jnb
:

367 i‡(
cf
)

368 
ªt
 = 
åue
;

370 
e_jnb_j´_j
:

371 i‡(
cf
)

372 
ªt
 = 
åue
;

374 
e_jb_j«ej_j
:

375 i‡(!
cf
)

376 
ªt
 = 
åue
;

378 
e_jbe
:

379 i‡((!
cf
Ë&& (!
zf
))

380 
ªt
 = 
åue
;

382 
e_jz
:

383 i‡(!
zf
)

384 
ªt
 = 
åue
;

386 
e_jnz
:

387 i‡(
zf
)

388 
ªt
 = 
åue
;

391 
e_j≈
:

392 i‡(
pf
)

393 
ªt
 = 
åue
;

395 
e_jp
:

396 i‡(!
pf
)

397 
ªt
 = 
åue
;

399 
e_jcxz_jec
:

400 
ecx
;

402 
ecx
 = (Ë(
ªgs
->
rcx
 & 0xffffffff);

405 i‡(
ecx
)

406 
ªt
 = 
åue
;

409 
e_j∆e
:

411 i‡(
zf
 || (
sf
 ^ 
of
))

412 
ªt
 = 
åue
;

414 
e_j∆
:

415 i‡((
sf
 ^ 
of
))

416 
ªt
 = 
åue
;

418 
e_jl
:

419 i‡(!(
sf
 ^ 
of
))

420 
ªt
 = 
åue
;

422 
e_jÀ
:

424 i‡(!((
sf
 ^ 
of
Ë|| 
zf
))

425 
ªt
 = 
åue
;

427 
e_jno
:

428 i‡(
of
)

429 
ªt
 = 
åue
;

431 
e_jns
:

432 i‡(
sf
)

433 
ªt
 = 
åue
;

435 
e_jo
:

436 i‡(!
of
)

437 
ªt
 = 
åue
;

439 
e_js
:

440 i‡(!
sf
)

441 
ªt
 = 
åue
;

445 
asm
 volatile ("vmcall; \n\t");

448  
ªt
;

449 
	}
}

452 
boﬁ
 
	gCThöCål
::
	$bödRegVÆF‹MemOpd
(
DIAPIO≥øndPå
 
›
)

454 
°d
::
£t
<
Regi°îAST
::
På
> 
ªgsRód
;

455 
›
->
	`gëRódSë
(
ªgsRód
);

457 autÿ
ªg
 : 
ªgsRód
)

459 
uöt
 
ödx
 = 
ªg
->
	`gëID
();

460 
uöt
 
size
 = 
ªg
->
	`size
();

461 
°d
:: 
cout
 << "ªg f‹m©: " << 
ªg
->
	`f‹m©
(Ë<< ".Ñeg idx: " << 
ödx
 << ". size: " << 
size
 << std::
ídl
;

462 
RegVÆue
 
V
 = {
ödx
, 
size
};

463 
boﬁ
 
ªs
 = 
m_VM
->
	`ªadRegi°î
(
V
);

464 
	`as£π
(
ªs
);

465 
°d
::
cout
 << 
V
.
i64
 << std::
ídl
;

467 i‡(
V
.
bsym
) {

469 
cout
 << 
ªg
->
	`f‹m©
() << "\n";

470  
Ál£
;

472 
size
) {

475 
ªg
->
	`£tVÆue
(
	`Resu…
(
s64
, 
V
.
i64
));

479 
ªg
->
	`£tVÆue
(
	`Resu…
(
s64
, 
V
.
i32
));

483 
ªg
->
	`£tVÆue
(
	`Resu…
(
s64
, 
V
.
i16
));

487 
ªg
->
	`£tVÆue
(
	`Resu…
(
s64
, 
V
.
i8
));

490 
	`FIX_ME
();

497  
åue
;

498 
	}
}

500 
boﬁ
 
	gCThöCål
::
	$checkIm∂icôMemAc˚ss
(
In°ru˘i⁄
 *
I
)

502 
Ex¥EvÆVisô‹
 
visô‹
;

503 
visô‹
 = 
	`Ex¥EvÆVisô‹
(
m_VM
);

505 
°d
::
£t
<
Ex¥essi⁄
::
På
> 
memrd
 = 
I
->
	`gëO≥øti⁄
().
	`gëIm∂icôMemRóds
();

506 if(
memrd
.
	`size
() != 0)

508 autÿ
ô
 : 
memrd
)

510 
ô
->
	`≠∂y
(&
visô‹
);

511 autÿ
rdaddr
 = 
ô
->
	`evÆ
();

512 
	`as£π
(
rdaddr
.
deföed
);

513 #ifde‡
_DEBUG_OUTPUT


514 
°d
::
cout
 << "$$$$$$$$$$$$check im∂icôÑód f‹ in¢ " << 
I
->
	`f‹m©
(Ë<< "áàadd∏" << std::
hex
 << 
rdaddr
.
c⁄vît
<
ul⁄g
>(Ë<< std::
ídl
;

516 i‡(
m_VM
->
	`isSYMem‹yCñl
(
rdaddr
.
c⁄vît
<
ul⁄g
>(), (ul⁄g)
ô
->
	`size
()))

517  
åue
;

521 
°d
::
£t
<
Ex¥essi⁄
::
På
> 
memwr
 = 
I
->
	`gëO≥øti⁄
().
	`gëIm∂icôMemWrôes
();

522 i‡(
memwr
.
	`size
() != 0)

524 autÿ
ô
 : 
memwr
)

526 
ô
->
	`≠∂y
(&
visô‹
);

527 autÿ
wøddr
 = 
ô
->
	`evÆ
();

528 
	`as£π
(
wøddr
.
deföed
);

530 #ifde‡
_DEBUG_OUTPUT


531 
°d
::
cout
 << "@@@@@@@@@@222check im∂icô wrôêf‹ in¢ " << 
I
->
	`f‹m©
(Ë<< "áàadd∏" << std::
hex
 << 
wøddr
.
c⁄vît
<
ul⁄g
>(Ë<< std::
ídl
;

533 i‡(
m_VM
->
	`isSYMem‹yCñl
(
wøddr
.
c⁄vît
<
ul⁄g
>(), (ul⁄g)
ô
->
	`size
()))

534  
åue
;

537  
Ál£
;

538 
	}
}

540 
boﬁ
 
	gCThöCål
::
	$di•©chRë
(
In°ru˘i⁄
* 
ö
, 
±_ªgs
* 
m_ªgs
)

543 
idx
 = 
x86_64
::
r•
;

544 
	`as£π
(!
m_VM
->
	`isSYReg
(
idx
));

546 
Addªss
 
°ack_±r
 = 
m_ªgs
->
r•
;

547 
Addªss
 
ãmpT¨gë
 = *((*Ë
°ack_±r
);

548 
m_ªgs
->
rù
 = 
ãmpT¨gë
;

549 
m_ªgs
->
r•
 += 0x8;

552  
åue
;

553 
	}
}

555 
boﬁ
 
	gCThöCål
::
	$di•©chCÆl
(
In°ru˘i⁄
* 
ö
, 
±_ªgs
* 
m_ªgs
)

557 #ifde‡
_DEBUG_OUTPUT


558 
RegVÆue
 
TMPV
 = {
x86_64
::
rdi
, 8};

559 
boﬁ
 
tm¥es
 = 
m_VM
->
	`ªadRegi°î
(
TMPV
);

560 i‡(
TMPV
.
bsym
)

563 
	`¥ötf
 ("rdi: %lx,Ñsi: %lx. \n", 
m_ªgs
->
rdi
, m_ªgs->
rsi
);

564 
	`¥ötf
 ("rdi is sym \n");

565 
TMPV
.
ex¥
->
	`¥öt
();

566 
	`¥ötf
 ("\n");

570 
°d
::
ve˘‹
<
O≥ønd
> 
›ønds
;

571 
ö
->
	`gëO≥ønds
(
›ønds
);

572 
	`as£π
(
›ønds
.
	`size
() == 1);

573 autÿ
O
 = *
›ønds
.
	`begö
();

574 
O¥ndInfoPå
 
	`oi
(
√w
 
	`O¥ndInfo
(
O
));

578 i‡(!
O
.
	`ªadsMem‹y
())

580 
Ex¥essi⁄
::
På
 
èrgë
 = 
oi
->
PO
->
	`gëVÆue
();

581 
Regi°îAST
* 
ø°
 = 
√w
 
	`Regi°îAST
(
MachRegi°î
::
	`gëPC
(
Arch_x86_64
));

582 
èrgë
->
	`böd
(
ø°
, 
	`Resu…
(
s64
, 
m_ªgs
->
rù
));

583 
Resu…
 
ªs
 = 
èrgë
->
	`evÆ
();

584 
Addªss
 
ãmpT¨gë
;

585 i‡(
ªs
.
deföed
)

587 
ãmpT¨gë
 = 
ªs
.
c⁄vît
<
Addªss
>();

588 
ãmpT¨gë
 -
ö
->
	`size
();

589 
m_ªgs
->
r•
 -= 0x8;

590 *((*Ë(
m_ªgs
->
r•
)Ëm_ªgs->
rù
;

591 
m_ªgs
->
rù
 = 
ãmpT¨gë
;

595 
°d
::
£t
<
Regi°îAST
::
På
> 
ªgsRód
;

596 
oi
->
PO
->
	`gëRódSë
(
ªgsRód
);

597 
	`as£π
(
ªgsRód
.
	`size
() == 1);

598 autÿ
R
 = *
ªgsRód
.
	`begö
();

599 
oi
->
ªg_ödex
 = 
R
->
	`gëID
();

601 
RegVÆue
 
RV
{
oi
->
ªg_ödex
, (
uöt
)
R
->
	`size
()};

602 
boﬁ
 
ªt
 = 
m_VM
->
	`ªadRegi°î
(
RV
);

603 
	`as£π
(
ªt
);

604 
	`as£π
(!
RV
.
bsym
);

606 
ãmpT¨gë
 = 
RV
.
i64
;

607 
m_ªgs
->
r•
 -= 0x8;

608 *((*Ë(
m_ªgs
->
r•
)Ëm_ªgs->
rù
;

609 
m_ªgs
->
rù
 = 
ãmpT¨gë
;

614 
boﬁ
 
noSymReg
 = 
	`bödRegVÆF‹MemOpd
(
oi
->
PO
);

615 
	`as£π
(
noSymReg
);

617 
Ex¥essi⁄
::
På
 
èrgë
 = 
oi
->
PO
->
	`gëVÆue
();

618 
°d
::
ve˘‹
<
Ex¥essi⁄
::
På
> 
exps
;

619 
èrgë
->
	`gëChûdªn
(
exps
);

621 
	`as£π
(
exps
.
	`size
() == 1);

624 autÿ
A
 = *
exps
.
	`begö
();

625 autÿ
RS
 = 
A
->
	`evÆ
();

626 
	`as£π
(
RS
.
deföed
);

627 
oi
->
mem_c⁄addr
 = 
RS
.
c⁄vît
<
ul⁄g
>();

630 
MemVÆue
 
MV
{
oi
->
mem_c⁄addr
, 8};

631 
boﬁ
 
ªt
 = 
m_VM
->
	`ªadMem‹y
(
MV
);

632 
	`as£π
(
ªt
);

633 
	`as£π
(!
MV
.
bsym
);

635 
m_ªgs
->
r•
 -= 0x8;

636 *((*Ë(
m_ªgs
->
r•
)Ëm_ªgs->
rù
;

637 
m_ªgs
->
rù
 = 
MV
.
i64
;

640 #ifde‡
_DEBUG_OUTPUT


641 
°d
::
cout
 << "/////// cÆ»ö¢, de°: " << 
m_ªgs
->
rù
 << std::
ídl
;

643  
åue
;

644 
	}
}

646 
boﬁ
 
	gCThöCål
::
	$upd©eJCCDecisi⁄
(
In°ru˘i⁄
* 
ö
, 
±_ªgs
* 
m_ªgs
, 
ul⁄g
 
¸tAddr
, 
cc_ö¢_cou¡
)

648 
boﬁ
 
bExecuã
 = 
Ál£
;

649 
íåyID
 
ãmp_›î©i⁄_id
 = 
ö
->
	`gëO≥øti⁄
().
	`gëID
();

651 i‡(!
	`dïídFœgC⁄
(
ö
, 
bExecuã
))

653 #ifde‡
_SYM_DEBUG_OUTPUT


654 
°d
::
cout
 << "++++++++++dïíd o¿sym fœg, cª©êc⁄°øöà©Ñù "<< std::
hex
 << 
¸tAddr
 << std::
ídl
;

661 
bExecuã
 = 
m_EFœgsMgr
->
	`EvÆC⁄dôi⁄
(
ö
->
	`gëO≥øti⁄
().
	`gëID
());

665 
m_EFœgsMgr
->
	`C⁄¸ëeFœg
(
ö
->
	`gëO≥øti⁄
().
	`gëID
(), 
bExecuã
) ;

669 
bExecuã
 = !
	`chkC⁄dFaû
(
ãmp_›î©i⁄_id
, 
m_ªgs
);

671 #ifde‡
_DEBUG_OUTPUT


672 
°d
::
cout
 << "check föÆ decisi⁄ f‹ " << 
¸tAddr
 << " . decisi⁄: " << 
bExecuã
 << std::
ídl
;

674  
bExecuã
;

675 
	}
}

677 
boﬁ
 
	gCThöCål
::
	$di•©chBønch
(
In°ru˘i⁄
* 
ö
, 
±_ªgs
* 
m_ªgs
, 
ul⁄g
 
¸tAddr
, 
cc_ö¢_cou¡
)

679 
°d
::
ve˘‹
<
O≥ønd
> 
›ønds
;

680 
ö
->
	`gëO≥ønds
(
›ønds
);

681 
	`as£π
(
›ønds
.
	`size
() == 1);

682 autÿ
O
 = *
›ønds
.
	`begö
();

683 
O¥ndInfoPå
 
	`oi
(
√w
 
	`O¥ndInfo
(
O
));

684 i‡(!
O
.
	`ªadsMem‹y
())

686 
Ex¥essi⁄
::
På
 
èrgë
 = 
oi
->
PO
->
	`gëVÆue
();

687 
Regi°îAST
* 
ø°
 = 
√w
 
	`Regi°îAST
(
MachRegi°î
::
	`gëPC
(
Arch_x86_64
));

688 
èrgë
->
	`böd
(
ø°
, 
	`Resu…
(
s64
, 
m_ªgs
->
rù
));

689 
Resu…
 
ªs
 = 
èrgë
->
	`evÆ
();

690 
Addªss
 
ãmpT¨gë
;

691 i‡(
ªs
.
deföed
)

693 
ãmpT¨gë
 = 
ªs
.
c⁄vît
<
Addªss
>();

694 
ãmpT¨gë
 -
ö
->
	`size
();

695 i‡(
ö
->
	`ÆlowsFÆlThrough
())

697 
boﬁ
 
bExecuã
 = 
	`upd©eJCCDecisi⁄
(
ö
, 
m_ªgs
, 
¸tAddr
, 
cc_ö¢_cou¡
);

699 i‡(!
bExecuã
)

701 
ãmpT¨gë
 = 
m_ªgs
->
rù
;

704 
m_ªgs
->
rù
 = 
ãmpT¨gë
;

708 
°d
::
£t
<
Regi°îAST
::
På
> 
ªgsRód
;

709 
oi
->
PO
->
	`gëRódSë
(
ªgsRód
);

710 
	`as£π
(
ªgsRód
.
	`size
() == 1);

711 autÿ
R
 = *
ªgsRód
.
	`begö
();

712 
oi
->
ªg_ödex
 = 
R
->
	`gëID
();

714 
RegVÆue
 
RV
{
oi
->
ªg_ödex
, (
uöt
)
R
->
	`size
()};

715 
boﬁ
 
ªt
 = 
m_VM
->
	`ªadRegi°î
(
RV
);

716 
	`as£π
(
ªt
);

717 
	`as£π
(!
RV
.
bsym
);

719 
ãmpT¨gë
 = 
RV
.
i64
;

720 i‡(
ö
->
	`ÆlowsFÆlThrough
())

722 
boﬁ
 
bExecuã
 = 
	`upd©eJCCDecisi⁄
(
ö
, 
m_ªgs
, 
¸tAddr
, 
cc_ö¢_cou¡
);

724 i‡(!
bExecuã
)

726 
ãmpT¨gë
 = 
m_ªgs
->
rù
;

729 
m_ªgs
->
rù
 = 
ãmpT¨gë
;

734 
boﬁ
 
noSymReg
 = 
	`bödRegVÆF‹MemOpd
(
oi
->
PO
);

735 
	`as£π
(
noSymReg
);

736 
Ex¥essi⁄
::
På
 
èrgë
 = 
oi
->
PO
->
	`gëVÆue
();

738 
°d
::
ve˘‹
<
Ex¥essi⁄
::
På
> 
exps
;

739 
èrgë
->
	`gëChûdªn
(
exps
);

741 
	`as£π
(
exps
.
	`size
() == 1);

744 autÿ
A
 = *
exps
.
	`begö
();

745 autÿ
RS
 = 
A
->
	`evÆ
();

746 
	`as£π
(
RS
.
deföed
);

747 
oi
->
mem_c⁄addr
 = 
RS
.
c⁄vît
<
ul⁄g
>();

748 #ifde‡
_DEBUG_OUTTPUT


749 
°d
::
cout
 << "„tch jm∞de° fromádd∏" << 
oi
->
mem_c⁄addr
 << std::
ídl
;

751 
MemVÆue
 
MV
{
oi
->
mem_c⁄addr
, 8};

752 
boﬁ
 
ªt
 = 
m_VM
->
	`ªadMem‹y
(
MV
);

753 
	`as£π
(
ªt
);

754 
	`as£π
(
MV
.
bsym
);

756 
Addªss
 
ãmpT¨gë
 = 
MV
.
i64
;

757 i‡(
ö
->
	`ÆlowsFÆlThrough
())

759 
boﬁ
 
bExecuã
 = 
	`upd©eJCCDecisi⁄
(
ö
, 
m_ªgs
, 
¸tAddr
, 
cc_ö¢_cou¡
);

761 i‡(!
bExecuã
)

763 
ãmpT¨gë
 = 
m_ªgs
->
rù
;

767 
m_ªgs
->
rù
 = 
ãmpT¨gë
;

769  
åue
;

770 
	}
}

772 
boﬁ
 
	gCThöCål
::
	$OpdhasSymReg
(
O≥ønd
* 
OP
)

775 
°d
::
£t
<
Regi°îAST
::
På
> 
ªadRegs
;

776 
OP
->
	`gëRódSë
(
ªadRegs
);

777 autÿ
R
 : 
ªadRegs
)

779 i‡(
m_VM
->
	`isSYReg
(
R
->
	`gëID
()))

781 #ifde‡
_DEBUG_OUTPUT


782 
	`¥ötf
 ("ªadÑeg %lx i†sym. \n", 
R
->
	`gëID
());

784  
åue
;

789 
°d
::
£t
<
Regi°îAST
::
På
> 
wrôeRegs
;

790 
OP
->
	`gëWrôeSë
(
wrôeRegs
);

791 autÿ
R
 : 
wrôeRegs
)

793 i‡(
m_VM
->
	`isSYReg
(
R
->
	`gëID
()))

795 #ifde‡
_DEBUG_OUTPUT


796 
	`¥ötf
 ("wrôêªg %lx i†sym. \n", 
R
->
	`gëID
());

798  
åue
;

801  
Ál£
;

802 
	}
}

804 
boﬁ
 
	gCThöCål
::
	$OpdhasSymMemCñl
(
O≥ønd
* 
OP
, 
ul⁄g
 
gs_ba£
)

806 
ul⁄g
 
mem_addr
;

809 
Ex¥EvÆVisô‹
 
visô‹
;

810 
visô‹
 = 
	`Ex¥EvÆVisô‹
(
m_VM
);

820 i‡(
OP
->
	`ªadsMem‹y
())

822 
°d
::
£t
<
Ex¥essi⁄
::
På
> 
memrd
;

823 
OP
->
	`addEf„˘iveRódAddªs£s
(
memrd
);

824 
	`as£π
(
memrd
.
	`size
() == 1);

825 autÿ
ô
 = *
memrd
.
	`begö
();

827 
ô
->
	`≠∂y
(&
visô‹
);

828 autÿ
rdaddr
 = 
ô
->
	`evÆ
();

829 
	`as£π
(
rdaddr
.
deföed
);

831 i‡(
gs_ba£
 == 0)

832 
mem_addr
 = 
rdaddr
.
c⁄vît
<
ul⁄g
>();

834 
mem_addr
 = 
rdaddr
.
c⁄vît
<
ul⁄g
>(Ë+ 
gs_ba£
;

835 #ifde‡
_DEBUG_OUTPUT


836 
°d
::
cout
 << "ô f‹m© " << 
ô
->
	`f‹m©
(Ë<< std::
ídl
;

837 
°d
::
cout
 << "ªadáddr: " << 
hex
 << 
mem_addr
 << std::
ídl
;

839 i‡(
m_VM
->
	`isSYMem‹yCñl
(
mem_addr
, (
ul⁄g
)
ô
->
	`size
()))

841  
åue
;

846 i‡(
OP
->
	`wrôesMem‹y
())

848 
°d
::
£t
<
Ex¥essi⁄
::
På
> 
memwr
;

849 
OP
->
	`addEf„˘iveWrôeAddªs£s
(
memwr
);

850 
	`as£π
(
memwr
.
	`size
() == 1);

851 autÿ
ô
 = *
memwr
.
	`begö
();

853 
ô
->
	`≠∂y
(&
visô‹
);

854 autÿ
wøddr
 = 
ô
->
	`evÆ
();

855 
	`as£π
(
wøddr
.
deföed
);

857 i‡(
gs_ba£
 == 0)

858 
mem_addr
 = 
wøddr
.
c⁄vît
<
ul⁄g
>();

860 
mem_addr
 = 
wøddr
.
c⁄vît
<
ul⁄g
>(Ë+ 
gs_ba£
;

861 #ifde‡
_DEBUG_OUTPUT


862 
°d
::
cout
 << "ô f‹m© " << 
ô
->
	`f‹m©
(Ë<< std::
ídl
;

863 
°d
::
cout
 << "wrôêaddr: " << 
hex
 << 
mem_addr
 << std::
ídl
;

865 i‡(
m_VM
->
	`isSYMem‹yCñl
(
mem_addr
, (
ul⁄g
)
ô
->
	`size
()))

867  
åue
;

870  
Ál£
;

871 
	}
}

873 
ul⁄g
 
	gCThöCål
::
	$isU£GS
(
In°ru˘i⁄
* 
ö
)

876 
°d
::
£t
<
Regi°îAST
::
På
> 
ªgrd
 = 
ö
->
	`gëO≥øti⁄
().
	`im∂icôRóds
();

877 i‡(
ªgrd
.
	`size
() != 0)

879 autÿ
ô
 : 
ªgrd
)

881 i‡(
ô
->
	`gëID
(Ë=
x86_64
::
gs
)

883 
RegVÆue
 
RV
{
ô
->
	`gëID
(), 8};

884 
boﬁ
 
ªt
 = 
m_VM
->
	`ªadRegi°î
(
RV
);

885 
	`as£π
(
ªt
);

886  
RV
.
u64
;

891 
	}
}

893 
boﬁ
 
	gCThöCål
::
	$hasSymO≥ønd
(
In°ru˘i⁄
* 
ö
)

895 
°d
::
ve˘‹
<
O≥ønd
> 
›ønds
;

896 
ö
->
	`gëO≥ønds
(
›ønds
);

897 
boﬁ
 
ªt
 = 
Ál£
;

898 autÿ
O
 : 
›ønds
) {

899 i‡(!
O
.
	`ªadsMem‹y
(Ë&& !O.
	`wrôesMem‹y
())

901 
ªt
 = 
	`OpdhasSymReg
(&
O
);

902 i‡(
ªt
)

903  
åue
;

908 
ul⁄g
 
gs_ba£
 = 
	`isU£GS
(
ö
);

909 
ªt
 = 
	`OpdhasSymMemCñl
(&
O
, 
gs_ba£
);

910 i‡(
ªt
)

911  
åue
;

914 
ªt
 = 
	`checkIm∂icôMemAc˚ss
(
ö
);

915  
ªt
;

916 
	}
}

918 #ifde‡
_PªDißs£mbÀ


919 
boﬁ
 
	gCThöCål
::
	$PªP¨£O≥ønd
(
In°ru˘i⁄
* 
ö
)

921 
°d
::
ve˘‹
<
O≥ønd
> 
›ønds
;

922 
ö
->
	`gëO≥ønds
(
›ønds
);

923 
boﬁ
 
ªt
 = 
Ál£
;

924 autÿ
OP
 : 
›ønds
) {

925 i‡(!
OP
.
	`ªadsMem‹y
(Ë&& !OP.
	`wrôesMem‹y
())

928 
°d
::
£t
<
Regi°îAST
::
På
> 
ªadRegs
;

929 
OP
.
	`gëRódSë
(
ªadRegs
);

932 
°d
::
£t
<
Regi°îAST
::
På
> 
wrôeRegs
;

933 
OP
.
	`gëWrôeSë
(
wrôeRegs
);

938 i‡(
OP
.
	`ªadsMem‹y
())

940 
°d
::
£t
<
Ex¥essi⁄
::
På
> 
memrd
;

941 
OP
.
	`addEf„˘iveRódAddªs£s
(
memrd
);

942 
	`as£π
(
memrd
.
	`size
() == 1);

946 i‡(
OP
.
	`wrôesMem‹y
())

948 
°d
::
£t
<
Ex¥essi⁄
::
På
> 
memwr
;

949 
OP
.
	`addEf„˘iveWrôeAddªs£s
(
memwr
);

950 
	`as£π
(
memwr
.
	`size
() == 1);

955 
°d
::
£t
<
Ex¥essi⁄
::
På
> 
memrd
 = 
ö
->
	`gëO≥øti⁄
().
	`gëIm∂icôMemRóds
();

958 
°d
::
£t
<
Ex¥essi⁄
::
På
> 
memwr
 = 
ö
->
	`gëO≥øti⁄
().
	`gëIm∂icôMemWrôes
();

960  
åue
;

961 
	}
}

963 
boﬁ
 
	gCThöCål
::
	$RódNextIPFromFûe
()

965 
if°ªam
 
theFûe
;

966 
°rög
 
‚ame
 = "/home/jqhong/Documents/KernelSE/nextIPofTransInsn.txt";

967 
°rög
 
löe
;

968 
ul⁄g
 
ídRIP
;

969 
ul⁄g
 
¸tRIP
, 
√xtRIP
;

970 
uöt64_t
 
key
;

971 
uöt64_t
 
cou¡î
 = 0;

972 
ul⁄g
 
vÆ
;

973 
theFûe
.
	`›í
(
‚ame
);

974 i‡(!
theFûe
) {

975 
°d
::
cout
 << "îr‹ o≥¿√xàRIP fûê" << std::
ídl
;

976  
Ál£
;

979 
°d
::
	`gëlöe
(
theFûe
, 
löe
);

980 
	`ssˇnf
(
löe
.
	`c_°r
(), "%lx", &
ídRIP
);

981 
m_ídRIP
 = 
ídRIP
;

982 
°d
::
cout
 << "ídÑù " << 
m_ídRIP
 << std::
ídl
;

984 
°d
::
	`gëlöe
(
theFûe
, 
löe
)) {

985 
cou¡î
 ++;

986 
	`ssˇnf
(
löe
.
	`c_°r
(), "%lx, %lx.", &
¸tRIP
, &
√xtRIP
);

987 
key
 = 
¸tRIP
 & 0xFFFFFFFF;

988 
key
 = key | (
cou¡î
 << 48);

989 
vÆ
 = 
√xtRIP
 & 0xFFFFFFFFFFFFFFFF;

990 
m_NextIP
[
key
] = 
vÆ
;

993 
°d
::
cout
 << "√xàRIP m≠ cª©ed " << std::
ídl
;

994 
theFûe
.
	`˛o£
();

995  
åue
;

996 
	}
}

999 
boﬁ
 
	gCThöCål
::
	$¥o˚ssFun˘i⁄
(
addr
) {

1001 
In°ru˘i⁄
 
I
;

1002 
In°ru˘i⁄
* 
ö
;

1003 
±_ªgs
* 
m_ªgs
 = 
m_VM
->
	`gëPTRegs
();

1004 
Addªss
 
¸tAddr
;

1006 
°d
::
cout
 << "bef‹êrun,Ñù " << std::
hex
 << 
m_ªgs
->
rù
 << std::
ídl
;

1015 
ul⁄g
 
ãrm_r•
 = 
m_ªgs
->
r•
;

1018 
cc_ö¢_cou¡
 = 0;

1019 
boﬁ
 
bExecuã
 = 
Ál£
;

1021 
uöt64_t
 
ö¢_cou¡
 = 0;

1022 
uöt64_t
 
symExe_cou¡
 = 0;

1023 
uöt64_t
 
symFœg_cou¡
 = 0;

1025 
t0
, 
t1
, 
t
;

1026 
â0
, 
â1
, 
â
;

1027 
ât0
, 
ât1
, 
ât
;

1029 
uni_ö¢
 = 0;

1030 
â
 = 
â0
 = 
â1
 = 0;

1031 
ât
 = 
ât0
 = 
ât1
 = 0;

1033 #ifde‡
_PªDißs£mbÀ


1035 i‡(
	`RódNextIPFromFûe
(Ë=
Ál£
)

1036  
Ál£
;

1038 
¸tAddr
 = 
m_ªgs
->
rù
;

1039 
cou¡
 = 0;

1040 
uöt64_t
 
cf_cou¡î
 = 0;

1041 
åue
) {

1042 
idx
 = 
¸tAddr
 & 0xFFFFFFF;

1043 i‡(
m_In¢Cache
[
idx
] =
nuŒ±r
)

1045 
I
 = 
decodî
->
	`decode
((*)
m_¸
->
	`gëPåToIn°ru˘i⁄
(
¸tAddr
));

1046 
ö
 = 
√w
 
	`In°ru˘i⁄
(
I
);

1047 
m_In¢Cache
[
idx
] = 
ö
;

1049 
	`PªP¨£O≥ønd
(
ö
);

1052 
ö
 = 
m_In¢Cache
[
idx
];

1056 
In¢C©eg‹y
 
ˇã
 = 
ö
->
	`gëC©eg‹y
();

1057 
uöt64_t
 
key
;

1058 i‡(
ˇã
 =
c_Rëu∫In¢
 || c©ê=
c_CÆlIn¢
 || c©ê=
c_BønchIn¢
)

1060 
cf_cou¡î
 ++;

1061 
key
 = 
¸tAddr
 & 0xFFFFFFFF;

1062 
key
 = key | (
cf_cou¡î
 << 48);

1063 
¸tAddr
 = 
m_NextIP
[
key
];

1067 
¸tAddr
 +
ö
->
	`size
();

1070 i‡(
¸tAddr
 =
m_ídRIP
)

1075 
t0
 = 
	`rdtsc
();

1078 
åue
) {

1079 
¸tAddr
 = 
m_ªgs
->
rù
;

1082 
idx
 = 
¸tAddr
 & 0xFFFFFFF;

1083 i‡(
m_In¢Cache
[
idx
] !
nuŒ±r
)

1086 
ö
 = 
m_In¢Cache
[
idx
];

1090 
uni_ö¢
 ++;

1093 
I
 = 
decodî
->
	`decode
((*)
m_¸
->
	`gëPåToIn°ru˘i⁄
(
¸tAddr
));

1094 
ö
 = 
√w
 
	`In°ru˘i⁄
(
I
);

1095 
m_In¢Cache
[
idx
] = 
ö
;

1097 
	`¥ötf
 ("ö¢ÇŸ found i¿ˇchê:%lx. \n", 
¸tAddr
);

1107 i‡(
ö
->
	`gëO≥øti⁄
().
	`gëID
(Ë=
e_n›
)

1109 
m_ªgs
->
rù
 +
ö
->
	`size
();

1114 
ö¢_cou¡
 ++;

1122 
In¢C©eg‹y
 
ˇã
 = 
ö
->
	`gëC©eg‹y
();

1124 
m_ªgs
->
rù
 +
ö
->
	`size
();

1138 i‡(
m_EFœgsMgr
->
	`isC⁄dôi⁄ÆExecuãIn°r
(
ö
->
	`gëO≥øti⁄
().
	`gëID
()))

1140 
cc_ö¢_cou¡
 ++;

1141 
bExecuã
 = 
m_EFœgsMgr
->
	`födDecisi⁄
(
¸tAddr
, 
cc_ö¢_cou¡
);

1147 
ˇã
) {

1148 
c_Rëu∫In¢
:

1150 
	`di•©chRë
(
ö
, 
m_ªgs
);

1153 
c_CÆlIn¢
:

1175 
	`di•©chCÆl
(
ö
, 
m_ªgs
);

1178 
c_BønchIn¢
:

1180 
	`di•©chBønch
(
ö
, 
m_ªgs
, 
¸tAddr
, 
cc_ö¢_cou¡
);

1186 
bExecuã
 = 
Ál£
;

1187 i‡(!
	`dïídFœgC⁄
(
ö
, 
bExecuã
))

1189 #ifde‡
_SYM_DEBUG_OUTPUT


1191 
°d
::
cout
 << "++++++++++dïíd o¿sym fœg, cª©êc⁄°øöà© ip" << std::
hex
 << 
¸tAddr
 << std::
ídl
;

1193 
symFœg_cou¡
 ++;

1200 
bExecuã
 = 
m_EFœgsMgr
->
	`EvÆC⁄dôi⁄
(
ö
->
	`gëO≥øti⁄
().
	`gëID
());

1201 
°d
::
cout
 << "bExecuã: " << 
bExecuã
 << std::
ídl
;

1202 
m_EFœgsMgr
->
	`C⁄¸ëeFœg
(
ö
->
	`gëO≥øti⁄
().
	`gëID
(), 
bExecuã
) ;

1204 i‡(
bExecuã
 =
Ál£
)

1208 #ifde‡
_SYM_DEBUG_OUTPUT


1209 
°d
::
cout
 << "---------Tÿsymexecut‹ duêtÿdïíd o¿sym fœg,áàrù "<< std::
hex
 << 
¸tAddr
 << " . " << 
ö
->
	`f‹m©
(Ë<< ". in¢ idex: " << 
ö¢_cou¡
 << ". symÉxecuãd in¢: " << 
symExe_cou¡
 << std::
ídl
;

1212 
symExe_cou¡
 ++;

1214 
In°rInfo
 *
ioi
 = 
√w
 
	`In°rInfo
(
ö
);

1215 
	`∑r£O≥ønds
(
ioi
);

1216 
In°rInfoPå
 
	`±r
(
ioi
);

1218 
m_SymExecut‹
->
	`pushIn°r
(
±r
);

1219 
m_SymExecut‹
->
	`run
(
m_VM
);

1225 
boﬁ
 
shouldSymExe
 = 
Ál£
;

1227 
shouldSymExe
 = 
	`hasSymO≥ønd
(
ö
);

1229 i‡(
shouldSymExe
)

1231 #ifde‡
_SYM_DEBUG_OUTPUT


1232 
°d
::
cout
 << "-------Tÿsymexecut‹ duêtÿsymbﬁi¯›î™dáàrù "<< std::
hex
 << 
¸tAddr
 << " . " << 
ö
->
	`f‹m©
(Ë<< std::
ídl
;

1233 
°d
::
cout
 << "ö¢ cou¡: " << 
ö¢_cou¡
 << ". symÉxecuãd in¢: " << 
symExe_cou¡
 << std::
ídl
;

1236 
symExe_cou¡
 ++;

1238 
In°rInfo
 *
ioi
 = 
√w
 
	`In°rInfo
(
ö
);

1242 
	`∑r£O≥ønds
(
ioi
);

1248 
In°rInfoPå
 
	`±r
(
ioi
);

1249 
m_SymExecut‹
->
	`pushIn°r
(
±r
);

1250 
m_SymExecut‹
->
	`run
(
m_VM
);

1255 
m_C⁄Execut‹
->
	`In¢Di•©ch
(
ö
, 
m_ªgs
);

1261 i‡(
m_EFœgsMgr
->
	`isFœgCh™gögIn°r
(
ö
->
	`gëO≥øti⁄
().
	`gëID
()))

1263 
m_VM
->
	`˛órAŒSymFœg
();

1271 #ifde‡
_Rec‹dNextRIP


1273 i‡(
ˇã
 =
c_Rëu∫In¢
 || c©ê=
c_CÆlIn¢
 || c©ê=
c_BønchIn¢
)

1275 
	`¥ötf
 ("¸tAddr: %lx,Çexàrù: %lx. \n", 
¸tAddr
, 
m_ªgs
->
rù
);

1284 i‡(
m_ªgs
->
r•
 >
ãrm_r•
)

1286 
t1
 = 
	`rdtsc
();

1287 
	`¥ötf
 ("t0: %Œx,Å1: %Œx,Å: %Œx. \n", 
t0
, 
t1
,Å1-t0);

1288 
	`¥ötf
 ("â: %Œx. \n", 
â
);

1289 
	`¥ötf
 ("uniq in¢: %d. \n", 
uni_ö¢
);

1290 
	`¥ötf
 ("SEÉnds~~~~~~~~~~~~,ÅŸÆ in¢ %Œd. symbﬁi¯Êag dïíd in¢: %Œd, symbﬁi¯execuãd in¢: %Œd. \n", 
ö¢_cou¡
, 
symFœg_cou¡
, 
symExe_cou¡
);

1292 
m_EFœgsMgr
->
	`PrötC⁄°øöt
();

1293 
m_EFœgsMgr
->
	`SﬁveC⁄°øöts
();

1294 
	`¥ötf
 ("SEÉnds~~~~~~~~~~~~,Ñax: %lx. \n", 
m_ªgs
->
øx
);

1300  
åue
;

1301 
	}
}

1304 
boﬁ
 
	gCThöCål
::
	$ExecO√In¢
(
addr
)

1306 
In°ru˘i⁄
 
I
 = 
decodî
->
	`decode
((*)
m_¸
->
	`gëPåToIn°ru˘i⁄
(
addr
));

1308 
±_ªgs
* 
m_ªgs
 = 
m_VM
->
	`gëPTRegs
();

1310 
m_C⁄Execut‹
->
	`In¢Di•©ch
(&
I
, 
m_ªgs
);

1311  
åue
;

1312 
	}
}

1314 
boﬁ
 
	gCThöCål
::
	$∑r£O≥ønds
(
In°rInfo
 *
öfo
) {

1315 
DAPIIn°rPå
 &
I
 = 
öfo
->
PI
;

1316 
°d
::
ve˘‹
<
O¥ndInfoPå
> &
vecOI
 = 
öfo
->vecOI;

1319 
	`£tRódRegs
(
I
);

1321 
boﬁ
 
bUS
 = 
Ál£
;

1322 
°d
::
ve˘‹
<
O≥ønd
> 
›ønds
;

1323 
I
->
	`gëO≥ønds
(
›ønds
);

1324 autÿ
O
 : 
›ønds
) {

1325 
O¥ndInfoPå
 
	`oi
(
√w
 
	`O¥ndInfo
(
O
));

1326 
oi
->
size
 = 
O
.
	`gëVÆue
()->
	`size
();

1327 
oi
->
symb
 = 
Ál£
;

1329 
boﬁ
 
ªs
 = 
Ál£
;

1332 i‡(!
O
.
	`ªadsMem‹y
(Ë&& !O.
	`wrôesMem‹y
()) {

1333 
ªs
 = 
	`_mayO≥øndU£Symbﬁ_XX
(
oi
);

1334 } i‡(
O
.
	`ªadsMem‹y
(Ë&& !O.
	`wrôesMem‹y
()) {

1335 
ªs
 = 
	`_mayO≥øndU£Symbﬁ_RX
(
I
, 
oi
);

1336 } i‡(!
O
.
	`ªadsMem‹y
(Ë&& O.
	`wrôesMem‹y
()) {

1337 
ªs
 = 
	`_mayO≥øndU£Symbﬁ_XW
(
I
, 
oi
);

1338 } i‡(
O
.
	`ªadsMem‹y
(Ë&& O.
	`wrôesMem‹y
()) {

1339 
ªs
 = 
	`_mayO≥øndU£Symbﬁ_RW
(
I
, 
oi
);

1342 
bUS
 |
ªs
;

1343 
vecOI
.
	`push_back
(
oi
);

1346  
bUS
;

1347 
	}
}

1349 
boﬁ
 
	gCThöCål
::
	$£tRódRegs
(
DAPIIn°r
 *
I
) {

1350 
°d
::
£t
<
Regi°îAST
::
På
> 
ªadRegs
;

1351 
I
->
	`gëRódSë
(
ªadRegs
);

1355 autÿ
P
 : 
ªadRegs
) {

1356 
uöt
 
ödx
 = 
P
->
	`gëID
();

1357 
uöt
 
size
 = 
P
->
	`size
();

1361 if((
ödx
&(
x86_64
::
BIT
| x86_64::
FLAG
 | 
Arch_x86_64
)) == (x86_64::BIT| x86_64::FLAG | Arch_x86_64))

1365 
RegVÆue
 
V
 = {
ödx
, 
size
};

1366 
boﬁ
 
ªs
 = 
m_VM
->
	`ªadRegi°î
(
V
);

1367 
	`as£π
(
ªs
);

1371 i‡(
V
.
bsym
) {

1375 
size
) {

1377 
P
->
	`£tVÆue
(
	`Resu…
(
s64
, 
V
.
i64
));

1380 
P
->
	`£tVÆue
(
	`Resu…
(
s32
, 
V
.
i32
));

1383 
P
->
	`£tVÆue
(
	`Resu…
(
s16
, 
V
.
i16
));

1386 
P
->
	`£tVÆue
(
	`Resu…
(
s8
, 
V
.
i8
));

1389 
	`FIX_ME
();

1394 
	}
}

1396 
boﬁ
 
	gCThöCål
::
	$£tRódRegs
(
DAPIIn°rPå
 &
I
) {

1397  
	`£tRódRegs
(
I
.
	`gë
());

1398 
	}
}

1405 
boﬁ
 
	gCThöCål
::
	$_mayO≥øndU£Symbﬁ_XX
(
O¥ndInfoPå
 &
oi
) {

1406 
boﬁ
 
ªs
 = 
Ál£
;

1407 
DIAPIO≥øndPå
 &
O
 = 
oi
->
PO
;

1408 i‡(
O
->
	`isRód
()) {

1409 
°d
::
£t
<
Regi°îAST
::
På
> 
rdwrRegs
;

1410 
oi
->
rdwr
 = 
OPAC_RD
;

1412 
O
->
	`gëRódSë
(
rdwrRegs
);

1413 i‡(
rdwrRegs
.
	`size
() == 0) {

1416 
oi
->
›ty
 = 
OPTY_IMM
;

1417 autÿ
RS
 = 
O
->
	`gëVÆue
()->
	`evÆ
();

1418 
	`as£π
(
RS
.
deföed
);

1419 
oi
->
imm_vÆue
 = 
RS
.
c⁄vît
<
ul⁄g
>();

1420  
åue
;

1426 
oi
->
›ty
 = 
OPTY_REG
;

1430 
boﬁ
 
symReg
 = 
Ál£
;

1431 autÿ
R
 : 
rdwrRegs
)

1433 
RegVÆue
 
RV
{
R
->
	`gëID
(), (
uöt
)R->
	`size
()};

1434 
ªs
 = 
m_VM
->
	`ªadRegi°î
(
RV
);

1435 
	`as£π
(
ªs
);

1436 i‡(
RV
.
bsym
)

1438 
symReg
 = 
åue
;

1443 if(
symReg
 =
Ál£
)

1445 
oi
->
ªg_ödex
 = (*
rdwrRegs
.
	`begö
())->
	`gëID
();

1447 
oi
->
›ty
 = 
OPTY_REGCON
;

1448 autÿ
RS
 = 
O
->
	`gëVÆue
()->
	`evÆ
();

1449 
	`as£π
(
RS
.
deföed
);

1450 
oi
->
ªg_c⁄vÆ
 = 
RS
.
c⁄vît
<
ul⁄g
>();

1454 
oi
->
›ty
 = 
OPTY_REGSYM
;

1455 
oi
->
symb
 = 
åue
;

1456 autÿ
V
 = 
O
->
	`gëVÆue
();

1457 
°d
::
ve˘‹
<
Ex¥essi⁄
::
På
> 
exps
;

1458 
V
->
	`gëChûdªn
(
exps
);

1461 i‡(
exps
.
	`size
() == 0) {

1462 autÿ
R
 = *
rdwrRegs
.
	`begö
();

1463 
oi
->
ªg_ödex
 = 
R
->
	`gëID
();

1465 
RegVÆue
 
RV
{
oi
->
ªg_ödex
, (
uöt
)
R
->
	`size
()};

1466 
ªs
 = 
m_VM
->
	`ªadRegi°î
(
RV
);

1467 
	`as£π
(
ªs
);

1468 
oi
->
ªg_symvÆ
 = 
RV
.
ex¥
;

1470 
	`FIX_ME
();

1471 
°d
::
cout
 << 
O
->
	`f‹m©
(
Arch_x86_64
Ë<< std::
ídl
;

1472 
°d
::
cout
 << "*****************ex¥ sizê" << 
exps
.
	`size
(Ë<< std::
ídl
;

1473 
Bö¨yFun˘i⁄
* 
bf
 = 
dy«mic_ˇ°
<Bö¨yFun˘i⁄*>(
V
.
	`gë
());

1474 
	`as£π
(
bf
 !
nuŒ±r
);

1475 i‡(
bf
->
	`isAdd
())

1477 
	`as£π
(
exps
.
	`size
() == 2);

1478 
°d
::
ve˘‹
<
KVEx¥På
> 
KVE
;

1479 autÿ
E
 : 
exps
)

1481 
Regi°îAST
* 
R
 = 
dy«mic_ˇ°
<Regi°îAST*>(
E
.
	`gë
());

1482 i‡(
R
 !
nuŒ±r
)

1484 
RegVÆue
 
RV
{
R
->
	`gëID
(), (
uöt
)R->
	`size
()};

1485 
ªs
 = 
m_VM
->
	`ªadRegi°î
(
RV
);

1486 
	`as£π
(
ªs
);

1487 
	`as£π
(
RV
.
bsym
);

1488 
KVE
.
	`push_back
(
RV
.
ex¥
);

1492 
Immedüã
* 
IMM
 = 
dy«mic_ˇ°
<Immedüã*>(
E
.
	`gë
());

1493 i‡(
IMM
 !
nuŒ±r
)

1495 
Resu…
 
imm
 = 
IMM
->
	`evÆ
();

1496 
	`as£π
(
imm
.
deföed
);

1497 
cvÆ
 = 
imm
.
c⁄vît
<>();

1498 
KVEx¥På
 
ïå
;

1499 
ïå
.
	`ª£t
(
√w
 
	`C⁄°Ex¥
(
cvÆ
));

1500 
KVE
.
	`push_back
(
ïå
);

1504 
°d
::
cout
 << "subÉx¥ i†nŸáÑeg o∏imm " << std::
ídl
;

1505 
	`as£π
(0);

1510 
oi
->
ªg_symvÆ
.
	`ª£t
(
√w
 
	`AddEx¥
(
KVE
[0], KVE[1]));

1511 
°d
::
cout
 << "¸óãÉx¥ i¿∑r£O≥ønd " << std::
ídl
;

1512 
oi
->
ªg_symvÆ
->
	`¥öt
();

1513 
°d
::
cout
 << "\n" ;

1518 
°d
::
cout
 << "bö¨yFun˘i⁄Åy≥ÇŸ h™dÀd " << 
bf
->
	`f‹m©
(
deÁu…StyÀ
Ë<< std::
ídl
;

1519 
	`as£π
(0);

1575  
åue
;

1577 } i‡(
O
->
	`isWrôãn
()) {

1580 
°d
::
£t
<
Regi°îAST
::
På
> 
rdwrRegs
;

1581 
oi
->
rdwr
 = 
OPAC_WR
;

1584 
O
->
	`gëWrôeSë
(
rdwrRegs
);

1586 
	`as£π
(
rdwrRegs
.
	`size
() == 1);

1587 autÿ
R
 = *
rdwrRegs
.
	`begö
();

1588 
oi
->
ªg_ödex
 = 
R
->
	`gëID
();

1589 
oi
->
symb
 = 
m_VM
->
	`isSYReg
(oi->
ªg_ödex
);

1590 i‡(
oi
->
symb
)

1591 
oi
->
›ty
 = 
OPTY_REGSYM
;

1593 
oi
->
›ty
 = 
OPTY_REGCON
;

1595  
åue
;

1597 
	`ERRR_ME
("Unexpected operand");

1598 
	`exô
(
EXIT_FAILURE
);

1599  
Ál£
;

1601 
	}
}

1608 
boﬁ
 
	gCThöCål
::
	$_mayO≥øndU£Symbﬁ_RX
(
DAPIIn°rPå
& 
I
, 
O¥ndInfoPå
 &
oi
) {

1609 
boﬁ
 
ªs
 = 
Ál£
;

1610 
DIAPIO≥øndPå
 &
O
 = 
oi
->
PO
;

1611 i‡(
O
->
	`isRód
()) {

1614 
°d
::
£t
<
Regi°îAST
::
På
> 
rdwrRegs
;

1615 
oi
->
rdwr
 = 
OPAC_RD
;

1616 
oi
->
›ty
 = 
OPTY_MEMCELL
;

1619 
ul⁄g
 
gs_ba£
 = 
	`isU£GS
(
I
.
	`gë
());

1622 
O
->
	`gëRódSë
(
rdwrRegs
);

1623 i‡(
rdwrRegs
.
	`size
() == 0) {

1644 
	`as£π
(
gs_ba£
 != 0);

1646 
°d
::
ve˘‹
<
Ex¥essi⁄
::
På
> 
exps
;

1647 autÿ
V
 = 
O
->
	`gëVÆue
();

1648 
V
->
	`gëChûdªn
(
exps
);

1649 
	`as£π
(
exps
.
	`size
() == 1);

1652 autÿ
A
 = *
exps
.
	`begö
();

1653 autÿ
RS
 = 
A
->
	`evÆ
();

1654 
	`as£π
(
RS
.
deföed
);

1656 
oi
->
mem_c⁄addr
 = 
RS
.
c⁄vît
<
ul⁄g
>(Ë+ 
gs_ba£
;

1658 
	`¥ötf
 ("dúe˘ memác˚s†through gs, memaddr: %lx. \n", 
oi
->
mem_c⁄addr
);

1659 
	`¥ötf
 ("size: %d. \n", 
oi
->
size
);

1663 
MemVÆue
 
MV
{
oi
->
mem_c⁄addr
, oi->
size
};

1664 
ªs
 = 
m_VM
->
	`ªadMem‹y
(
MV
);

1665 
	`as£π
(
ªs
);

1666 i‡(
MV
.
bsym
) {

1667 
oi
->
›ty
 = 
OPTY_MEMCELLSYM
;

1668 
oi
->
symb
 = 
åue
;

1669 
oi
->
mem_symvÆ
 = 
MV
.
ex¥
;

1671 
oi
->
›ty
 = 
OPTY_MEMCELLCON
;

1672 
oi
->
mem_c⁄vÆ
 = 
MV
.
i64
;

1689 
boﬁ
 
bSymbﬁic
;

1690 
boﬁ
 
hasSymReg
 = 
Ál£
;

1691 autÿ
R
 : 
rdwrRegs
)

1692 
hasSymReg
 |
	`maySymbﬁicRegi°î
(
R
.
	`gë
()->
	`gëID
());

1694 i‡(
hasSymReg
) {

1696 
°d
::
cout
 << "symbﬁi¯memáddªs†övﬁved i¿In¢ " << 
I
.
	`gë
()->
	`f‹m©
(Ë<< std::
ídl
;

1697 
	`as£π
(0);

1699 
oi
->
symb
 = 
åue
;

1700 
oi
->
›ty
 = 
OPTY_MEMADDRSYM
;

1701 
	`FIX_ME
();

1702  
Ál£
;

1748 
°d
::
ve˘‹
<
Ex¥essi⁄
::
På
> 
exps
;

1749 autÿ
V
 = 
O
->
	`gëVÆue
();

1751 
V
->
	`gëChûdªn
(
exps
);

1753 
	`as£π
(
exps
.
	`size
() == 1);

1756 autÿ
A
 = *
exps
.
	`begö
();

1757 autÿ
RS
 = 
A
->
	`evÆ
();

1758 
	`as£π
(
RS
.
deföed
);

1759 i‡(
gs_ba£
 == 0)

1760 
oi
->
mem_c⁄addr
 = 
RS
.
c⁄vît
<
ul⁄g
>();

1762 
oi
->
mem_c⁄addr
 = 
RS
.
c⁄vît
<
ul⁄g
>(Ë+ 
gs_ba£
;

1772 
MemVÆue
 
MV
{
oi
->
mem_c⁄addr
, oi->
size
};

1773 
ªs
 = 
m_VM
->
	`ªadMem‹y
(
MV
);

1774 
	`as£π
(
ªs
);

1775 i‡(
MV
.
bsym
) {

1776 
oi
->
›ty
 = 
OPTY_MEMCELLSYM
;

1777 
oi
->
symb
 = 
åue
;

1778 
oi
->
mem_symvÆ
 = 
MV
.
ex¥
;

1780 
oi
->
›ty
 = 
OPTY_MEMCELLCON
;

1781 
oi
->
mem_c⁄vÆ
 = 
MV
.
i64
;

1783  
åue
;

1786 } i‡(
O
->
	`isWrôãn
()) {

1787 
°d
::
£t
<
Regi°îAST
::
På
> 
rdwrRegs
;

1789 
	`as£π
(0);

1790 
oi
->
rdwr
 = 
OPAC_WR
;

1791 
O
->
	`gëWrôeSë
(
rdwrRegs
);

1794 
	`as£π
(
rdwrRegs
.
	`size
() == 1);

1795 autÿ
R
 = *
rdwrRegs
.
	`begö
();

1796 
oi
->
ªg_ödex
 = 
R
.
	`gë
()->
	`gëID
();

1797 
cout
 << "246: Wrôe: " << 
O
->
	`gëVÆue
()->
	`f‹m©
() << "\n";

1798  
Ál£
;

1800 
˚º
 << "249: U√x≥˘ed o≥ønd" << 
O
->
	`gëVÆue
()->
	`f‹m©
() << "\n";

1801  
Ál£
;

1803 
	}
}

1807 
boﬁ
 
	gCThöCål
::
	$_mayO≥øndU£Symbﬁ_XW
(
DAPIIn°rPå
& 
I
, 
O¥ndInfoPå
 &
oi
) {

1809 
boﬁ
 
ªs
 = 
Ál£
;

1810 
DIAPIO≥øndPå
 &
O
 = 
oi
->
PO
;

1811 i‡(
O
->
	`isRód
()) {

1812 
°d
::
£t
<
Regi°îAST
::
På
> 
rdwrRegs
;

1814 
	`as£π
(0);

1816 
oi
->
rdwr
 = 
OPAC_RD
;

1817 
O
->
	`gëRódSë
(
rdwrRegs
);

1818 i‡(
rdwrRegs
.
	`size
() == 0) {

1819 
oi
->
›ty
 = 
OPTY_IMM
;

1820 autÿ
RS
 = 
O
->
	`gëVÆue
()->
	`evÆ
();

1821 
oi
->
imm_vÆue
 = 
RS
.
c⁄vît
<
ul⁄g
>();

1822  
Ál£
;

1824 
boﬁ
 
bSymbﬁic
;

1827 
	`as£π
(
rdwrRegs
.
	`size
() == 1);

1828 autÿ
R
 = *
rdwrRegs
.
	`begö
();

1829 
oi
->
ªg_ödex
 = 
R
.
	`gë
()->
	`gëID
();

1830 
oi
->
symb
 = 
bSymbﬁic
 = 
	`maySymbﬁicRegi°î
(oi->
ªg_ödex
);

1832 i‡(
bSymbﬁic
) {

1833 
oi
->
symb
 = 
åue
;

1834 
oi
->
ªg_symvÆ
 = 
NULL
;

1835 
cout
 << "282: Ród: " << 
O
->
	`gëVÆue
()->
	`f‹m©
() << "@SYReg"

1837  
åue
;

1839 
cout
 << "285: Ród: " << 
O
->
	`gëVÆue
()->
	`f‹m©
() << "@NMreg"

1841  
Ál£
;

1844 } i‡(
O
->
	`isWrôãn
()) {

1846 
°d
::
£t
<
Regi°îAST
::
På
> 
rdwrRegs
;

1847 
oi
->
rdwr
 = 
OPAC_WR
;

1848 
oi
->
›ty
 = 
OPTY_MEMCELL
;

1851 
ul⁄g
 
gs_ba£
 = 
	`isU£GS
(
I
.
	`gë
());

1854 
O
->
	`gëRódSë
(
rdwrRegs
);

1855 i‡(
rdwrRegs
.
	`size
() == 0) {

1857 
	`as£π
(0);

1859 
°d
::
ve˘‹
<
Ex¥essi⁄
::
På
> 
exps
;

1860 autÿ
V
 = 
O
->
	`gëVÆue
();

1861 
V
->
	`gëChûdªn
(
exps
);

1862 
	`as£π
(
exps
.
	`size
() == 1);

1865 autÿ
A
 = *
exps
.
	`begö
();

1866 autÿ
RS
 = 
A
->
	`evÆ
();

1867 
	`as£π
(
RS
.
deföed
);

1869 
oi
->
symb
 = 
Ál£
;

1871  
Ál£
;

1875 
boﬁ
 
hasSymReg
 = 
Ál£
;

1876 autÿ
R
 : 
rdwrRegs
)

1877 
hasSymReg
 |
	`maySymbﬁicRegi°î
(
R
->
	`gëID
());

1879 i‡(
hasSymReg
) {

1881 
	`as£π
(0);

1883 
oi
->
symb
 = 
åue
;

1888  
Ál£
;

1893 
°d
::
ve˘‹
<
Ex¥essi⁄
::
På
> 
exps
;

1894 autÿ
V
 = 
O
->
	`gëVÆue
();

1895 
V
->
	`gëChûdªn
(
exps
);

1896 
	`as£π
(
exps
.
	`size
() == 1);

1899 autÿ
A
 = *
exps
.
	`begö
();

1900 autÿ
RS
 = 
A
->
	`evÆ
();

1901 
	`as£π
(
RS
.
deföed
);

1902 
oi
->
mem_c⁄addr
 = 
RS
.
c⁄vît
<
ul⁄g
>();

1903  
åue
;

1908 
	`as£π
(0);

1909 
˚º
 << "345: U√x≥˘ed o≥ønd" << 
O
->
	`gëVÆue
()->
	`f‹m©
() << "\n";

1910  
Ál£
;

1912 
	}
}

1916 
boﬁ
 
	gCThöCål
::
	$_mayO≥øndU£Symbﬁ_RW
(
DAPIIn°rPå
& 
I
, 
O¥ndInfoPå
 &
oi
) {

1918 
boﬁ
 
ªs
 = 
Ál£
;

1919 
DIAPIO≥øndPå
 &
O
 = 
oi
->
PO
;

1921 
oi
->
rdwr
 = 
OPAC_RDWR
;

1922 
oi
->
›ty
 = 
OPTY_MEMCELL
;

1926 
ul⁄g
 
gs_ba£
 = 
	`isU£GS
(
I
.
	`gë
());

1929 
°d
::
£t
<
Regi°îAST
::
På
> 
rdwrRegs
;

1930 
O
->
	`gëRódSë
(
rdwrRegs
);

1931 i‡(
rdwrRegs
.
	`size
() == 0) {

1933 
	`as£π
(0);

1935 
°d
::
ve˘‹
<
Ex¥essi⁄
::
På
> 
exps
;

1936 autÿ
V
 = 
O
->
	`gëVÆue
();

1937 
V
->
	`gëChûdªn
(
exps
);

1938 
	`as£π
(
exps
.
	`size
() == 1);

1941 autÿ
A
 = *
exps
.
	`begö
();

1942 autÿ
RS
 = 
A
->
	`evÆ
();

1943 
	`as£π
(
RS
.
deföed
);

1944 
boﬁ
 
bSymbﬁic
;

1947 i‡(
bSymbﬁic
) {

1949 
cout
 << "385: Ród symbﬁi¯mem‹y cñl:" << 
O
->
	`gëVÆue
()->
	`f‹m©
(Ë<< "@" << 
hex
 << 
RS
.
vÆ
.
u64vÆ
 << "\n";

1950  
åue
;

1952 
cout
 << "388: RódÇ‹mÆ mem‹y cñl:" << 
O
->
	`gëVÆue
()->
	`f‹m©
(Ë<< "@" << 
hex
 << 
RS
.
vÆ
.
u64vÆ
 << "\n";

1953  
Ál£
;

1959 
boﬁ
 
hasSymReg
 = 
Ál£
;

1960 autÿ
R
 : 
rdwrRegs
)

1961 
hasSymReg
 |
	`maySymbﬁicRegi°î
(
R
->
	`gëID
());

1963 i‡(
hasSymReg
) {

1964 
	`FIX_ME
();

1966 
	`as£π
(0);

1968 
oi
->
symb
 = 
åue
;

1971 
cout
 << "406: Ród mem‹y wôh symbﬁi¯ªgi°î:" << 
O
->
	`gëVÆue
()->
	`f‹m©
() << "\n";

1972  
åue
;

1975 
°d
::
ve˘‹
<
Ex¥essi⁄
::
På
> 
exps
;

1976 autÿ
V
 = 
O
->
	`gëVÆue
();

1977 
V
->
	`gëChûdªn
(
exps
);

1978 
	`as£π
(
exps
.
	`size
() == 1);

1981 autÿ
A
 = *
exps
.
	`begö
();

1982 autÿ
RS
 = 
A
->
	`evÆ
();

1983 
	`as£π
(
RS
.
deföed
);

1985 i‡(
gs_ba£
 == 0)

1986 
oi
->
mem_c⁄addr
 = 
RS
.
c⁄vît
<
ul⁄g
>();

1988 
oi
->
mem_c⁄addr
 = 
RS
.
c⁄vît
<
ul⁄g
>(Ë+ 
gs_ba£
;

1990 
MemVÆue
 
MV
{
oi
->
mem_c⁄addr
, oi->
size
};

1991 
ªs
 = 
m_VM
->
	`ªadMem‹y
(
MV
);

1992 
	`as£π
(
ªs
);

1993 i‡(
MV
.
bsym
) {

1994 
oi
->
›ty
 = 
OPTY_MEMCELLSYM
;

1995 
oi
->
symb
 = 
åue
;

1996 
oi
->
mem_symvÆ
 = 
MV
.
ex¥
;

1998 
oi
->
›ty
 = 
OPTY_MEMCELLCON
;

1999 
oi
->
mem_c⁄vÆ
 = 
MV
.
i64
;

2001  
åue
;

2005  
Ál£
;

2006 
	}
}

2008 
boﬁ
 
	gCThöCål
::
	$maySymbﬁicRegi°î
(
uöt
 
ID
) {

2009  
m_VM
->
	`isSYReg
(
ID
);

2010 
	}
}

2016 
boﬁ
 
	gCThöCål
::
	$maySymbﬁicMem‹yCñl
(
ul⁄g
 
mem‹y_addr
, 
width
) {

2017  
m_VM
->
	`isSYMem‹yCñl
(
mem‹y_addr
, 
width
);

2018 
	}
}

	@/home/jqhong/Documents/KernelSE/thinctrl.h

1 #i‚de‡
_THINCTRL_H__


2 
	#_THINCTRL_H__


	)

6 
	~<io°ªam
>

7 
	~<ve˘‹
>

10 
	~"VMSèã.h
"

12 
	~"CodeSour˚.h
"

13 
	~"In°ru˘i⁄Decodî.h
"

15 
	~"deföes.h
"

18 
˛ass
 
	gVMSèã
;

19 
˛ass
 
	gCF©tCål
;

20 
˛ass
 
	gSymExecut‹
;

21 
˛ass
 
	gC⁄Execut‹
;

36 
usög
 
«me•a˚
 
	gDynö°
;

37 
usög
 
«me•a˚
 
	gP¨£API
;

38 
usög
 
«me•a˚
 
	gIn°ru˘i⁄API
;

43 ˛as†
	cMyCodeRegi⁄
 : 
public
 
CodeRegi⁄
 {

44 
¥iv©e
:

45 
°d
::
m≠
<
Addªss
, 
	mAddªss
> 
	mknowD©a
;

46 
	mpublic
:

47 
MyCodeRegi⁄
 (
Addªss
 
add1
, Addªs†
add2
);

48 ~
MyCodeRegi⁄
();

51 
boﬁ
 
	$isVÆidAddªss
(c⁄° 
Addªss
) const;

52 * 
	$gëPåToIn°ru˘i⁄
(c⁄° 
Addªss
) const;

53 * 
	$gëPåToD©a
(c⁄° 
Addªss
) const;

54 
	$gëAddªssWidth
() const;

55 
boﬁ
 
	$isCode
(c⁄° 
Addªss
) const;

56 
boﬁ
 
	$isD©a
(c⁄° 
Addªss
) const;

57 
boﬁ
 
	$isRódO∆y
(c⁄° 
Addªss
) const;

59 
Addªss
 
	$off£t
() const;

60 
Addªss
 
	$Àngth
() const;

61 
Archôe˘uª
 
	$gëArch
() const;

64 
Addªss
 
	$low
(Ëc⁄° {  
	`off£t
(); }

65 
Addªss
 
	$high
(Ëc⁄° {  
	`off£t
(Ë+ 
	`Àngth
(); 
	}
}

70 ˛as†
	cPARSER_EXPORT
 
	mMyCodeSour˚
: 
public
 
CodeSour˚
 {

71 
¥iv©e
:

73 
öô_ªgi⁄s
(
Addªss
 
adds
, Addªs†
adde
);

74 
öô_höts
();

76 
muèbÀ
 
CodeRegi⁄
* 
	m_lookup_ˇche
;

77 
	mpublic
:

79 
MyCodeSour˚
(
Addªss
 
adds
, Addªs†
adde
);

80 ~
MyCodeSour˚
();

83 
boﬁ
 
	$isVÆidAddªss
(c⁄° 
Addªss
) const;

84 * 
	$gëPåToIn°ru˘i⁄
(c⁄° 
Addªss
) const;

85 * 
	$gëPåToD©a
(c⁄° 
Addªss
) const;

86 
	$gëAddªssWidth
() const;

87 
boﬁ
 
	$isCode
(c⁄° 
Addªss
) const;

88 
boﬁ
 
	$isD©a
(c⁄° 
Addªss
) const;

89 
boﬁ
 
	$isRódO∆y
(c⁄° 
Addªss
) const;

91 
Addªss
 
	$off£t
() const;

92 
Addªss
 
	$Àngth
() const;

93 
Archôe˘uª
 
	$gëArch
() const;

96 
	$MyaddRegi⁄
 (
CodeRegi⁄
 *
¸
)

98 
	`addRegi⁄
(
¸
);

103 
¥iv©e
:

104 
CodeRegi⁄
* 
	$lookup_ªgi⁄
(c⁄° 
Addªss
 
addr
) const;

105 
	}
};

109 ˛as†
	cCThöCål
 {

110 
MyCodeSour˚
* 
	mm_°s
;

111 
CodeObje˘
* 
	mm_co
;

112 
CodeRegi⁄
* 
	mm_¸
;

114 
In°ru˘i⁄Decodî
* 
	mdecodî
;

115 
	m°d
::
m≠
<
uöt
, 
	mIn°ru˘i⁄
*> 
	mm_In¢Cache
;

117 
VMSèã
 *
	mm_VM
;

119 
	m°d
::
sh¨ed_±r
<
SymExecut‹
> 
m_SymExecut‹
;

120 
	m°d
::
sh¨ed_±r
<
C⁄Execut‹
> 
m_C⁄Execut‹
;

122 
	m°d
::
sh¨ed_±r
<
EFœgsM™agî
> 
m_EFœgsMgr
;

124 #ifde‡
_PªDißs£mbÀ


125 
ul⁄g
 
	mm_ídRIP
;

126 
	m°d
::
m≠
<
uöt64_t
, 
	mul⁄g
> 
	mm_NextIP
;

127 
boﬁ
 
RódNextIPFromFûe
();

128 
boﬁ
 
PªP¨£O≥ønd
(
In°ru˘i⁄
* 
ö
);

131 
	mpublic
:

132 
CThöCål
(
VMSèã
* 
VM
, 
ul⁄g
 
adds
, ul⁄g 
adde
);

133 ~
CThöCål
();

138 
boﬁ
 
¥o˚ssFun˘i⁄
(
ul⁄g
 
addr
);

142 
boﬁ
 
ExecO√In¢
(
ul⁄g
 
addr
);

144 
	m¥iv©e
:

149 
boﬁ
 
£tRódRegs
(
DAPIIn°r
 *
I
);

150 
boﬁ
 
£tRódRegs
(
DAPIIn°rPå
 &
I
);

151 
boﬁ
 
∑r£O≥ønds
(
In°rInfo
 *
öfo
);

152 
boﬁ
 
maySymbﬁicRegi°î
(
uöt
 
ID
);

154 
boﬁ
 
maySymbﬁicMem‹yCñl
(
ul⁄g
 
mem‹y_addr
, 
width
);

156 
boﬁ
 
_mayO≥øndU£Symbﬁ_XX
(
O¥ndInfoPå
 &
oi
);

157 
boﬁ
 
_mayO≥øndU£Symbﬁ_RX
(
DAPIIn°rPå
 &
I
, 
O¥ndInfoPå
 &
oi
);

158 
boﬁ
 
_mayO≥øndU£Symbﬁ_XW
(
DAPIIn°rPå
 &
I
, 
O¥ndInfoPå
 &
oi
);

159 
boﬁ
 
_mayO≥øndU£Symbﬁ_RW
(
DAPIIn°rPå
 &
I
, 
O¥ndInfoPå
 &
oi
);

161 
boﬁ
 
chkC⁄dFaû
 (
íåyID
 
›îa_id
, 
±_ªgs
* 
ªgs
);

163 
boﬁ
 
dïídFœgC⁄
(
In°ru˘i⁄
* 
ö¢
, boﬁ &
bChoi˚
);

167 
boﬁ
 
di•©chRë
(
In°ru˘i⁄
* 
ö
, 
±_ªgs
* 
m_ªgs
);

168 
boﬁ
 
di•©chCÆl
(
In°ru˘i⁄
* 
ö
, 
±_ªgs
* 
m_ªgs
);

169 
boﬁ
 
di•©chBønch
(
In°ru˘i⁄
* 
ö
, 
±_ªgs
* 
m_ªgs
, 
ul⁄g
 
¸tAddr
, 
cc_ö¢_cou¡
);

170 
boﬁ
 
upd©eJCCDecisi⁄
(
In°ru˘i⁄
* 
ö
, 
±_ªgs
* 
m_ªgs
, 
ul⁄g
 
¸tAddr
, 
cc_ö¢_cou¡
);

172 
boﬁ
 
bödRegVÆF‹MemOpd
(
DIAPIO≥øndPå
 
›
);

174 
ul⁄g
 
isU£GS
(
In°ru˘i⁄
* 
ö
);

175 
boﬁ
 
OpdhasSymReg
(
O≥ønd
* 
OP
);

176 
boﬁ
 
OpdhasSymMemCñl
(
O≥ønd
* 
OP
, 
ul⁄g
 
gs_ba£
);

177 
boﬁ
 
checkIm∂icôMemAc˚ss
(
In°ru˘i⁄
 *
I
);

178 
boﬁ
 
hasSymO≥ønd
(
In°ru˘i⁄
* 
ö
);

	@/home/jqhong/Documents/KernelSE/unittests/test_OperandParser.cpp

5 
	~<löux/ty≥s.h
>

6 
	~<sig«l.h
>

7 
	~<uc⁄ãxt.h
>

9 
	~<f°ªam
>

10 
	~<io°ªam
>

12 
	~"BP©ch.h
"

13 
	~"BP©ch_basicBlock.h
"

14 
	~"BP©ch_bö¨yEdô.h
"

15 
	~"BP©ch_ÊowGøph.h
"

16 
	~"BP©ch_fun˘i⁄.h
"

17 
	~"CodeObje˘.h
"

18 
	~"In°ru˘i⁄Decodî.h
"

19 
	~"dyn_ªgs.h
"

21 
	#¥iv©e
 
public


	)

22 
	~"ExecCål.h
"

23 
	~"VMSèã.h
"

24 
	~"thö˘æ.h
"

26 
usög
 
«me•a˚
 
	g°d
;

27 
usög
 
«me•a˚
 
	gDynö°
;

28 
usög
 
«me•a˚
 
	gP¨£API
;

29 
usög
 
«me•a˚
 
	gIn°ru˘i⁄API
;

31 
	#ñf_fûe
 "./wøµî"

	)

32 
	#ñf_code
 " void wøµî(Ë{ásm(\"MYINSTR\"); }\¿öàmaö(öà¨gc, ch¨*árgv[]Ë{Ñëu∫ 0; }"

	)

34 
boﬁ
 
	$°rög_ª∂a˚
(
°d
::
°rög
& 
°r
, c⁄° std::°rög& 
‰om
, c⁄° std::°rög& 
to
) {

35 
size_t
 
°¨t_pos
 = 
°r
.
	`föd
(
‰om
);

36 i‡(
°¨t_pos
 =
°d
::
°rög
::
≈os
)

37  
Ál£
;

38 
°r
.
	`ª∂a˚
(
°¨t_pos
, 
‰om
.
	`Àngth
(), 
to
);

39  
åue
;

40 
	}
}

42 
In°ru˘i⁄
* 
	$gí_ö°ru˘i⁄
(c⁄° * 
ö°r
) {

44 
°rög
 
code
 = 
ñf_code
;

45 
	`°rög_ª∂a˚
(
code
, "MYINSTR", 
ö°r
);

48 
°rög
 
szRemove
 = "rm -rf wrapper.c ";

49 
szRemove
 +
ñf_fûe
;

50 
	`sy°em
(
szRemove
.
	`c_°r
());

53 
of°ªam
 
of
;

54 
of
.
	`›í
("wøµî.c", 
ios
::
out
 | ios::
åunc
);

55 
of
 << 
code
 << "\n";

56 
of
.
	`˛o£
();

59 
°rög
 
szCompûe
 = "gcc wrapper.c -o ";

60 
szCompûe
 +
ñf_fûe
;

61 
	`sy°em
(
szCompûe
.
	`c_°r
());

64 
BP©ch
 
b∑tch
;

65 
BP©ch_bö¨yEdô
* 
≠pBö
 = 
b∑tch
.
	`›íBö¨y
(
ñf_fûe
, 
Ál£
);

66 i‡(
≠pBö
 =
NULL
) {

67 
˚º
 << "FaûedÅÿ›í bö¨y" << 
ídl
;

68 
	`exô
(
EXIT_FAILURE
);

70 
BP©ch_image
* 
≠pImage
 = 
≠pBö
->
	`gëImage
();

72 
BP©ch_Ve˘‹
<
BP©ch_fun˘i⁄
*> 
funcs
;

73 i‡(
≠pImage
->
	`födFun˘i⁄
("wøµî", 
funcs
Ë=
NULL
) {

74 
˚º
 << "FaûedÅÿföd fun˘i⁄ *myasm*" << 
ídl
;

75 
	`exô
(
EXIT_FAILURE
);

79 
BP©ch_fun˘i⁄
* 
F
 = 
funcs
[0];

80 
BP©ch_ÊowGøph
* 
cfg
 = 
F
->
	`gëCFG
();

81 
°d
::
ve˘‹
<
BP©ch_basicBlock
*> 
íåõs
;

82 i‡(!
cfg
->
	`gëE¡ryBasicBlock
(
íåõs
)) {

83 
˚º
 << "FaûedÅÿgë basi¯block" << 
ídl
;

84  
NULL
;

86 
BP©ch_basicBlock
* 
B
 = 
íåõs
[0];

89 
°d
::
ve˘‹
<
Dynö°
::
In°ru˘i⁄API
::
In°ru˘i⁄
> 
ö¢s
;

90 i‡(!
B
->
	`gëIn°ru˘i⁄s
(
ö¢s
))

91  
NULL
;

97 
	`as£π
(
ö¢s
.
	`size
() >= 3);

98 
In°ru˘i⁄
* 
I
 = 
√w
 
	`In°ru˘i⁄
(
ö¢s
[2]);

100  
I
;

101 
	}
}

103 
VMSèã
* 
	gVM
;

104 
CThöCål
* 
	gT
;

106 
	$ã°_öô
() {

107 
VM
 = 
√w
 
	`VMSèã
();

108 
T
 = 
√w
 
	`CThöCål
(
VM
);

109 
	}
}

111 
	$ã°_föi
() {

112 i‡(
VM
Ë
dñëe
 VM;

113 i‡(
T
Ë
dñëe
 T;

114 
	}
}

116 
boﬁ
 
	$ã°_je
() {

118 
In°ru˘i⁄
* 
I
 = 
	`gí_ö°ru˘i⁄
(".byte 0x74, 0x02");

119 i‡(
I
 !
NULL
) {

120 
cout
 << 
I
->
	`f‹m©
(Ë<< 
ídl
;

123 
In°rInfo
* 
ioi
 = 
√w
 
	`In°rInfo
(
I
);

124 
T
->
	`∑r£O≥ønds
(
ioi
);

126 auto& 
vecOI
 = 
ioi
->vecOI;

127 
O¥ndInfoPå
& 
oôgt
 = 
vecOI
[0];

129 
	`as£π
(
oôgt
->
rdwr
 =
OPAC_RD
);

130 
	`as£π
((
oôgt
->
›ty
 & 
OPTY_REG
) == OPTY_REG);

131 
	`as£π
(
oôgt
->
ªg_ödex
 =(
uöt
)
x86_64
::
rù
);

132 
	`as£π
(
oôgt
->
ªg_c⁄vÆ
 == 0x4);

133 
cout
 << 
__PRETTY_FUNCTION__
 << " -> Suc˚ssful" << 
ídl
;

134 
	}
}

136 
boﬁ
 
	$ã°_Àa
() {

138 
In°ru˘i⁄
* 
I
 = 
	`gí_ö°ru˘i⁄
(".byte 0x48, 0x8d, 0x3d, 0x10, 0x00, 0x00, 0x00");

139 i‡(
I
 !
NULL
) {

140 
cout
 << 
I
->
	`f‹m©
(Ë<< 
ídl
;

143 
In°rInfo
* 
ioi
 = 
√w
 
	`In°rInfo
(
I
);

144 
T
->
	`∑r£O≥ønds
(
ioi
);

146 auto& 
vecOI
 = 
ioi
->vecOI;

147 
O¥ndInfoPå
& 
oid°
 = 
vecOI
[0];

148 
O¥ndInfoPå
& 
oi§c
 = 
vecOI
[1];

150 
	`as£π
(
oid°
->
rdwr
 =
OPAC_WR
);

151 
	`as£π
((
oid°
->
›ty
 & 
OPTY_REG
) == OPTY_REG);

152 
	`as£π
(
oid°
->
ªg_ödex
 =(
uöt
)
x86_64
::
rdi
);

154 
	`as£π
(
oi§c
->
rdwr
 =
OPAC_RD
);

155 
	`as£π
((
oi§c
->
›ty
 & 
OPTY_REG
) == OPTY_REG);

156 
	`as£π
(
oi§c
->
ªg_ödex
 =(
uöt
)
x86_64
::
rù
);

157 
	`as£π
(
oi§c
->
ªg_c⁄vÆ
 == 0x17);

158 
cout
 << 
__PRETTY_FUNCTION__
 << " -> Suc˚ssful" << 
ídl
;

159 
	}
}

161 
boﬁ
 
	$ã°_ˇŒ
() {

163 
In°ru˘i⁄
* 
I
 = 
	`gí_ö°ru˘i⁄
(".byte 0xe8, 0xb5, 0xfe, 0xff, 0xff");

164 i‡(
I
 !
NULL
) {

165 
cout
 << 
I
->
	`f‹m©
(Ë<< 
ídl
;

168 
RegVÆue
 
V
{(
uöt
)
x86_64
::
rù
, 8, 
Ál£
, 0x656};

169 
VM
->
	`wrôeRegi°î
(
V
);

170 
In°rInfo
* 
ioi
 = 
√w
 
	`In°rInfo
(
I
);

171 
T
->
	`∑r£O≥ønds
(
ioi
);

173 auto& 
vecOI
 = 
ioi
->vecOI;

174 
O¥ndInfoPå
& 
oôgt
 = 
vecOI
[0];

176 
	`as£π
(
oôgt
->
rdwr
 =
OPAC_RD
);

177 
	`as£π
((
oôgt
->
›ty
 & 
OPTY_REG
) == OPTY_REG);

178 
	`as£π
(
oôgt
->
ªg_ödex
 =(
uöt
)
x86_64
::
rù
);

179 
	`as£π
(
oôgt
->
ªg_c⁄vÆ
 == 0x510);

180 
cout
 << 
__PRETTY_FUNCTION__
 << " -> Suc˚ssful" << 
ídl
;

181 
	}
}

183 
	$maö
(
ac
, ** 
av
) {

184 
	`ã°_öô
();

187 
	`ã°_ˇŒ
();

188 
	`ã°_föi
();

189 
	}
}

	@/usr/include/asm/ptrace.h

2 #i‚de‡
_ASM_X86_PTRACE_H


3 
	#_ASM_X86_PTRACE_H


	)

6 
	~<asm/±ø˚-abi.h
>

7 
	~<asm/¥o˚ss‹-Êags.h
>

10 #i‚de‡
__ASSEMBLY__


12 #ifde‡
__i386__


17 
	s±_ªgs
 {

18 
	mebx
;

19 
	mecx
;

20 
	medx
;

21 
	mesi
;

22 
	medi
;

23 
	mebp
;

24 
	móx
;

25 
	mxds
;

26 
	mxes
;

27 
	mxfs
;

28 
	mxgs
;

29 
	m‹ig_óx
;

30 
	meù
;

31 
	mxcs
;

32 
	meÊags
;

33 
	me•
;

34 
	mxss
;

41 
	s±_ªgs
 {

46 
	mr15
;

47 
	mr14
;

48 
	mr13
;

49 
	mr12
;

50 
	mrbp
;

51 
	mrbx
;

53 
	mr11
;

54 
	mr10
;

55 
	mr9
;

56 
	mr8
;

57 
	møx
;

58 
	mrcx
;

59 
	mrdx
;

60 
	mrsi
;

61 
	mrdi
;

66 
	m‹ig_øx
;

68 
	mrù
;

69 
	mcs
;

70 
	meÊags
;

71 
	mr•
;

72 
	mss
;

	@/usr/include/assert.h

22 #ifdef 
_ASSERT_H


24 #unde‡
_ASSERT_H


25 #unde‡
as£π


26 #unde‡
__ASSERT_VOID_CAST


28 #ifdef 
__USE_GNU


29 #unde‡
as£π_≥º‹


34 
	#_ASSERT_H
 1

	)

35 
	~<„©uªs.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

38 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

40 
	#__ASSERT_VOID_CAST
 ()

	)

48 #ifdef 
NDEBUG


50 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

58 #ifdef 
__USE_GNU


59 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

64 #i‚de‡
_ASSERT_H_DECLS


65 
	#_ASSERT_H_DECLS


	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

70 
__löe
, c⁄° *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

75 
__löe
, c⁄° *
__fun˘i⁄
)

76 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

81 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

82 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_DECLS


91 #i‡
deföed
 
__˝lu•lus


92 
	#as£π
(
ex¥
) \

93 (
°©ic_ˇ°
 <
boﬁ
> (
ex¥
) \

95 : 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

96 #ñi‡!
deföed
 
__GNUC__
 || deföed 
__STRICT_ANSI__


97 
	#as£π
(
ex¥
) \

98 ((
ex¥
) \

99 ? 
	`__ASSERT_VOID_CAST
 (0) \

100 : 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

107 
	#as£π
(
ex¥
) \

108 ((Ë ((
ex¥
Ë? 1 : 0), 
	`__exãnsi⁄__
 ({ \

109 i‡(
ex¥
) \

112 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
); \

113 
	}
}))

	)

116 #ifdef 
__USE_GNU


117 
	#as£π_≥º‹
(
î∫um
) \

118 (!(
î∫um
) \

119 ? 
	`__ASSERT_VOID_CAST
 (0) \

120 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

128 #i‡
deföed
 
__˝lu•lus
 ? 
__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

129 
	#__ASSERT_FUNCTION
 
__exãnsi⁄__
 
__PRETTY_FUNCTION__


	)

131 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

132 
	#__ASSERT_FUNCTION
 
__func__


	)

134 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

141 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


142 #unde‡
°©ic_as£π


143 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/dlfcn.h

19 #i‚def 
_DLFCN_H


20 
	#_DLFCN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

27 
	~<bôs/dlf˙.h
>

30 #ifde‡
__USE_GNU


35 
	#RTLD_NEXT
 ((*Ë-1l)

	)

40 
	#RTLD_DEFAULT
 ((*Ë0)

	)

44 
	tLmid_t
;

47 
	#LM_ID_BASE
 0

	)

48 
	#LM_ID_NEWLM
 -1

	)

52 
__BEGIN_DECLS


56 *
	$dl›í
 (c⁄° *
__fûe
, 
__mode
Ë
__THROWNL
;

60 
	$dl˛o£
 (*
__h™dÀ
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1));

64 *
	$dlsym
 (*
__ª°ri˘
 
__h™dÀ
,

65 c⁄° *
__ª°ri˘
 
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

67 #ifde‡
__USE_GNU


69 *
	$dlm›í
 (
Lmid_t
 
__nsid
, c⁄° *
__fûe
, 
__mode
Ë
__THROWNL
;

73 *
	$dlvsym
 (*
__ª°ri˘
 
__h™dÀ
,

74 c⁄° *
__ª°ri˘
 
__«me
,

75 c⁄° *
__ª°ri˘
 
__vîsi⁄
)

76 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

82 *
	$dÀº‹
 (Ë
__THROW
;

85 #ifde‡
__USE_GNU


90 c⁄° *
dli_‚ame
;

91 *
dli_fba£
;

92 c⁄° *
dli_¢ame
;

93 *
dli_ßddr
;

94 } 
	tDl_öfo
;

98 
	$dœddr
 (c⁄° *
__addªss
, 
Dl_öfo
 *
__öfo
)

99 
__THROW
 
	`__n⁄nuŒ
 ((2));

102 
	$dœddr1
 (c⁄° *
__addªss
, 
Dl_öfo
 *
__öfo
,

103 **
__exåa_öfo
, 
__Êags
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

111 
RTLD_DL_SYMENT
 = 1,

114 
RTLD_DL_LINKMAP
 = 2

123 
	$dlöfo
 (*
__ª°ri˘
 
__h™dÀ
,

124 
__ªque°
, *
__ª°ri˘
 
__¨g
)

125 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

131 
RTLD_DI_LMID
 = 1,

135 
RTLD_DI_LINKMAP
 = 2,

137 
RTLD_DI_CONFIGADDR
 = 3,

144 
RTLD_DI_SERINFO
 = 4,

145 
RTLD_DI_SERINFOSIZE
 = 5,

149 
RTLD_DI_ORIGIN
 = 6,

151 
RTLD_DI_PROFILENAME
 = 7,

152 
RTLD_DI_PROFILEOUT
 = 8,

157 
RTLD_DI_TLS_MODID
 = 9,

163 
RTLD_DI_TLS_DATA
 = 10,

165 
RTLD_DI_MAX
 = 10

173 *
dls_«me
;

174 
dls_Êags
;

175 } 
	tDl_£Ω©h
;

181 
size_t
 
dls_size
;

182 
dls_˙t
;

183 #i‡
	`__GNUC_PREREQ
 (3, 0)

188 
__exãnsi⁄__
 union

190 
Dl_£Ω©h
 
dls_£Ω©h
[0];

191 
Dl_£Ω©h
 
__dls_£Ω©h_∑d
[1];

194 
Dl_£Ω©h
 
dls_£Ω©h
[1];

196 } 
	tDl_£röfo
;

200 
__END_DECLS


	@/usr/include/link.h

20 #i‚def 
_LINK_H


21 
	#_LINK_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<ñf.h
>

25 
	~<dlf˙.h
>

26 
	~<sys/ty≥s.h
>

30 
	#ElfW
(
ty≥
Ë
	`_ElfW
 (
Elf
, 
__ELF_NATIVE_CLASS
,Åy≥)

	)

31 
	#_ElfW
(
e
,
w
,
t
Ë
	`_ElfW_1
 (e, w, 
_
##t)

	)

32 
	#_ElfW_1
(
e
,
w
,
t
Ëe##w##
	)
t

34 
	~<bôs/ñf˛ass.h
>

35 
	~<bôs/lök.h
>

42 
	sr_debug


44 
	mr_vîsi⁄
;

46 
lök_m≠
 *
	mr_m≠
;

53 
ElfW
(
Addr
Ë
	mr_brk
;

58 
	mRT_CONSISTENT
,

59 
	mRT_ADD
,

60 
	mRT_DELETE


61 } 
	mr_°©e
;

63 
ElfW
(
Addr
Ë
	mr_ldba£
;

67 
r_debug
 
_r_debug
;

76 
	$ElfW
(
Dyn
Ë
_DYNAMIC
[];

84 
	slök_m≠


89 
	`ElfW
(
Addr
Ë
l_addr
;

91 *
l_«me
;

92 
	`ElfW
(
Dyn
Ë*
l_ld
;

93 
lök_m≠
 *
l_√xt
, *
l_¥ev
;

96 #ifde‡
__USE_GNU


99 
	#LAV_CURRENT
 1

	)

104 
LA_ACT_CONSISTENT
,

105 
LA_ACT_ADD
,

106 
LA_ACT_DELETE


112 
LA_SER_ORIG
 = 0x01,

113 
LA_SER_LIBPATH
 = 0x02,

114 
LA_SER_RUNPATH
 = 0x04,

115 
LA_SER_CONFIG
 = 0x08,

116 
LA_SER_DEFAULT
 = 0x40,

117 
LA_SER_SECURE
 = 0x80

123 
LA_FLG_BINDTO
 = 0x01,

124 
LA_FLG_BINDFROM
 = 0x02

130 
LA_SYMB_NOPLTENTER
 = 0x01,

131 
LA_SYMB_NOPLTEXIT
 = 0x02,

132 
LA_SYMB_STRUCTCALL
 = 0x04,

133 
LA_SYMB_DLSYM
 = 0x08,

134 
LA_SYMB_ALTVALUE
 = 0x10

138 
	sdl_phdr_öfo


140 
	`ElfW
(
Addr
Ë
dÕi_addr
;

141 c⁄° *
dÕi_«me
;

142 c⁄° 
	`ElfW
(
Phdr
Ë*
dÕi_phdr
;

143 
	`ElfW
(
HÆf
Ë
dÕi_phnum
;

151 
__exãnsi⁄__
 
dÕi_adds
;

153 
__exãnsi⁄__
 
dÕi_subs
;

157 
size_t
 
dÕi_és_modid
;

162 *
dÕi_és_d©a
;

165 
__BEGIN_DECLS


167 
	`dl_ôî©e_phdr
 ((*
__ˇŒback
Ë(
dl_phdr_öfo
 *,

168 
size_t
, *),

169 *
__d©a
);

175 
	`œ_vîsi⁄
 (
__vîsi⁄
);

176 
	`œ_a˘ivôy
 (
uöçå_t
 *
__cookõ
, 
__Êag
);

177 *
	`œ_obj£¨ch
 (c⁄° *
__«me
, 
uöçå_t
 *
__cookõ
,

178 
__Êag
);

179 
	`œ_obj›í
 (
lök_m≠
 *
__m≠
, 
Lmid_t
 
__lmid
,

180 
uöçå_t
 *
__cookõ
);

181 
	`œ_¥eöô
 (
uöçå_t
 *
__cookõ
);

182 
uöçå_t
 
	`œ_symböd32
 (
Elf32_Sym
 *
__sym
, 
__ndx
,

183 
uöçå_t
 *
__ªfcook
, uöçå_à*
__defcook
,

184 *
__Êags
, c⁄° *
__sym«me
);

185 
uöçå_t
 
	`œ_symböd64
 (
Elf64_Sym
 *
__sym
, 
__ndx
,

186 
uöçå_t
 *
__ªfcook
, uöçå_à*
__defcook
,

187 *
__Êags
, c⁄° *
__sym«me
);

188 
	`œ_obj˛o£
 (
uöçå_t
 *
__cookõ
);

190 
__END_DECLS


	@/usr/include/linux/types.h

2 #i‚de‡
_LINUX_TYPES_H


3 
	#_LINUX_TYPES_H


	)

5 
	~<asm/ty≥s.h
>

7 #i‚de‡
__ASSEMBLY__


9 
	~<löux/posix_ty≥s.h
>

17 #ifde‡
__CHECKER__


18 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

20 
	#__bôwi£__


	)

22 
	#__bôwi£
 
__bôwi£__


	)

24 
__u16
 
	t__bôwi£
 
	t__À16
;

25 
__u16
 
	t__bôwi£
 
	t__be16
;

26 
__u32
 
	t__bôwi£
 
	t__À32
;

27 
__u32
 
	t__bôwi£
 
	t__be32
;

28 
__u64
 
	t__bôwi£
 
	t__À64
;

29 
__u64
 
	t__bôwi£
 
	t__be64
;

31 
__u16
 
	t__bôwi£
 
	t__sum16
;

32 
__u32
 
	t__bôwi£
 
	t__wsum
;

43 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

44 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

45 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	t__bôwi£
 
	t__pﬁl_t
;

	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


23 
	#_SIGNAL_H


	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

30 
	~<bôs/signum.h
>

32 
	~<bôs/ty≥s/sig_©omic_t.h
>

34 #i‡
deföed
 
__USE_POSIX


35 
	~<bôs/ty≥s/sig£t_t.h
>

38 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


39 #i‚de‡
__pid_t_deföed


40 
__pid_t
 
	tpid_t
;

41 
	#__pid_t_deföed


	)

43 #ifde‡
__USE_XOPEN


45 #i‚de‡
__uid_t_deföed


46 
__uid_t
 
	tuid_t
;

47 
	#__uid_t_deföed


	)

51 #ifde‡
__USE_POSIX199309


53 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

56 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


57 
	~<bôs/ty≥s/sigöfo_t.h
>

58 
	~<bôs/sigöfo-c⁄°s.h
>

61 #ifde‡
__USE_MISC


62 
	~<bôs/ty≥s/sigvÆ_t.h
>

65 #ifde‡
__USE_POSIX199309


66 
	~<bôs/ty≥s/sigevít_t.h
>

67 
	~<bôs/sigevít-c⁄°s.h
>

72 (*
	t__sigh™dÀr_t
) ();

77 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

78 
__THROW
;

79 #ifde‡
__USE_GNU


80 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

81 
__THROW
;

87 #ifde‡
__USE_MISC


88 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

89 
__THROW
;

92 #ifde‡
__REDIRECT_NTH


93 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

94 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

95 
__sysv_sig«l
);

97 
	#sig«l
 
__sysv_sig«l


	)

101 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8


104 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

105 
__THROW
;

111 #ifde‡
__USE_POSIX


112 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

115 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


119 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

123 
	$øi£
 (
__sig
Ë
__THROW
;

125 #ifde‡
__USE_MISC


127 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

128 
__THROW
;

129 
	$gsig«l
 (
__sig
Ë
__THROW
;

132 #ifde‡
__USE_XOPEN2K8


134 
	`psig«l
 (
__sig
, c⁄° *
__s
);

137 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

149 #ifde‡
__USE_XOPEN_EXTENDED


150 #ifde‡
__GNUC__


151 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

153 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

155 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

160 #ifde‡
__USE_MISC


167 
	#sigmask
(
sig
Ë(()(1u << ((sigË- 1)))

	)

170 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

173 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

176 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

180 #ifde‡
__USE_MISC


181 
	#NSIG
 
_NSIG


	)

184 #ifde‡
__USE_GNU


185 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

189 #ifde‡
__USE_MISC


190 
__sigh™dÀr_t
 
	tsig_t
;

193 #ifde‡
__USE_POSIX


196 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

202 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

205 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

208 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

209 
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #ifde‡
__USE_GNU


213 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

216 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

217 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

220 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

221 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

226 
	~<bôs/siga˘i⁄.h
>

229 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

230 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

237 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

240 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

241 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

244 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__USE_POSIX199506


252 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

253 
	`__n⁄nuŒ
 ((1, 2));

256 #ifde‡
__USE_POSIX199309


261 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

262 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

269 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

270 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

271 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

272 
	`__n⁄nuŒ
 ((1));

276 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

277 
__THROW
;

282 #ifde‡
__USE_MISC


286 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

287 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

291 
	~<bôs/sigc⁄ãxt.h
>

294 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

299 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


300 
	#__√ed_size_t


	)

301 
	~<°ddef.h
>

303 
	~<bôs/ty≥s/°ack_t.h
>

304 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


306 
	~<sys/uc⁄ãxt.h
>

310 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_MISC


314 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

316 
	~<bôs/sig°ack.h
>

317 
	~<bôs/ss_Êags.h
>

321 
	$sigÆt°ack
 (c⁄° 
°ack_t
 *
__ª°ri˘
 
__ss
,

322 
°ack_t
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

325 #i‡((
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

326 || 
deföed
 
__USE_MISC
)

327 
	~<bôs/ty≥s/°ru˘_sig°ack.h
>

330 #i‡((
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

331 || 
deföed
 
__USE_MISC
)

335 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

336 
__THROW
 
__©åibuã_dïªˇãd__
;

339 #ifde‡
__USE_XOPEN_EXTENDED


343 
	$sighﬁd
 (
__sig
Ë
__THROW
;

346 
	$sigªl£
 (
__sig
Ë
__THROW
;

349 
	$sigign‹e
 (
__sig
Ë
__THROW
;

352 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

355 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


358 
	~<bôs/±hªadty≥s.h
>

359 
	~<bôs/sigthªad.h
>

366 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

368 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

370 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

371 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

374 
	~<bôs/sig«l_ext.h
>

376 
__END_DECLS


	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


24 
	#_STDIO_H
 1

	)

26 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

27 
	~<bôs/libc-hódî-°¨t.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	#__√ed___va_li°


	)

36 
	~<°d¨g.h
>

38 
	~<bôs/ty≥s.h
>

39 
	~<bôs/ty≥s/__Âos_t.h
>

40 
	~<bôs/ty≥s/__Âos64_t.h
>

41 
	~<bôs/ty≥s/__FILE.h
>

42 
	~<bôs/ty≥s/FILE.h
>

43 
	~<bôs/ty≥s/°ru˘_FILE.h
>

45 #ifde‡
__USE_GNU


46 
	~<bôs/ty≥s/cookõ_io_fun˘i⁄s_t.h
>

49 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


50 #ifde‡
__GNUC__


51 #i‚de‡
_VA_LIST_DEFINED


52 
__gnuc_va_li°
 
	tva_li°
;

53 
	#_VA_LIST_DEFINED


	)

56 
	~<°d¨g.h
>

60 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__off_t_deföed


62 #i‚de‡
__USE_FILE_OFFSET64


63 
__off_t
 
	toff_t
;

65 
__off64_t
 
	toff_t
;

67 
	#__off_t_deföed


	)

69 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


70 
__off64_t
 
	toff64_t
;

71 
	#__off64_t_deföed


	)

75 #ifde‡
__USE_XOPEN2K8


76 #i‚de‡
__ssize_t_deföed


77 
__ssize_t
 
	tssize_t
;

78 
	#__ssize_t_deföed


	)

83 #i‚de‡
__USE_FILE_OFFSET64


84 
__Âos_t
 
	tÂos_t
;

86 
__Âos64_t
 
	tÂos_t
;

88 #ifde‡
__USE_LARGEFILE64


89 
__Âos64_t
 
	tÂos64_t
;

93 
	#_IOFBF
 0

	)

94 
	#_IOLBF
 1

	)

95 
	#_IONBF
 2

	)

99 
	#BUFSIZ
 8192

	)

104 
	#EOF
 (-1)

	)

109 
	#SEEK_SET
 0

	)

110 
	#SEEK_CUR
 1

	)

111 
	#SEEK_END
 2

	)

112 #ifde‡
__USE_GNU


113 
	#SEEK_DATA
 3

	)

114 
	#SEEK_HOLE
 4

	)

118 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


120 
	#P_tmpdú
 "/tmp"

	)

133 
	~<bôs/°dio_lim.h
>

137 
FILE
 *
°dö
;

138 
FILE
 *
°dout
;

139 
FILE
 *
°dîr
;

141 
	#°dö
 
°dö


	)

142 
	#°dout
 
°dout


	)

143 
	#°dîr
 
°dîr


	)

146 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

148 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

150 #ifde‡
__USE_ATFILE


152 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

153 c⁄° *
__√w
Ë
__THROW
;

156 #ifde‡
__USE_GNU


158 
	#RENAME_NOREPLACE
 (1 << 0)

	)

159 
	#RENAME_EXCHANGE
 (1 << 1)

	)

160 
	#RENAME_WHITEOUT
 (1 << 2)

	)

164 
	$ª«mót2
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

165 c⁄° *
__√w
, 
__Êags
Ë
__THROW
;

172 #i‚de‡
__USE_FILE_OFFSET64


173 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

175 #ifde‡
__REDIRECT


176 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

178 
	#tmpfûe
 
tmpfûe64


	)

182 #ifde‡
__USE_LARGEFILE64


183 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

187 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

189 #ifde‡
__USE_MISC


192 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

196 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


204 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

205 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

213 
	`f˛o£
 (
FILE
 *
__°ªam
);

218 
	`fÊush
 (
FILE
 *
__°ªam
);

220 #ifde‡
__USE_MISC


227 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

230 #ifde‡
__USE_GNU


237 
	`f˛o£Æl
 ();

241 #i‚de‡
__USE_FILE_OFFSET64


246 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

247 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

252 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

253 c⁄° *
__ª°ri˘
 
__modes
,

254 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

256 #ifde‡
__REDIRECT


257 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

258 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

259 
__wur
;

260 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

261 c⁄° *
__ª°ri˘
 
__modes
,

262 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

263 
__wur
;

265 
	#f›í
 
f›í64


	)

266 
	#‰e›í
 
‰e›í64


	)

269 #ifde‡
__USE_LARGEFILE64


270 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

271 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

272 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
,

274 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

277 #ifdef 
__USE_POSIX


279 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

282 #ifdef 
__USE_GNU


285 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

286 c⁄° *
__ª°ri˘
 
__modes
,

287 
cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

290 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

292 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

293 
__THROW
 
__wur
;

298 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

304 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

308 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

309 
__modes
, 
size_t
 
__n
Ë
__THROW
;

311 #ifdef 
__USE_MISC


314 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

315 
size_t
 
__size
Ë
__THROW
;

318 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

326 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

327 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

332 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

334 
	$•rötf
 (*
__ª°ri˘
 
__s
,

335 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

341 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

342 
__gnuc_va_li°
 
__¨g
);

347 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
);

349 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

350 
__gnuc_va_li°
 
__¨g
Ë
__THROWNL
;

352 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


354 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

355 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

356 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

358 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

359 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

360 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

363 #i‡
	`__GLIBC_USE
 (
LIB_EXT2
)

366 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

367 
__gnuc_va_li°
 
__¨g
)

368 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

369 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

370 c⁄° *
__ª°ri˘
 
__fmt
, ...)

371 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

372 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

373 c⁄° *
__ª°ri˘
 
__fmt
, ...)

374 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

377 #ifde‡
__USE_XOPEN2K8


379 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

380 
__gnuc_va_li°
 
__¨g
)

381 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

382 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

383 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

391 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

392 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

397 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

399 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

400 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

405 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
Ë&& !
deföed
 
__LDBL_COMPAT


406 #ifde‡
__REDIRECT


407 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

408 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

409 
__isoc99_fsˇnf
Ë
__wur
;

410 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

411 
__isoc99_sˇnf
Ë
__wur
;

412 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

413 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

414 
__isoc99_ssˇnf
);

416 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

417 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

418 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

419 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

420 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

421 
	#fsˇnf
 
__isoc99_fsˇnf


	)

422 
	#sˇnf
 
__isoc99_sˇnf


	)

423 
	#ssˇnf
 
__isoc99_ssˇnf


	)

427 #ifdef 
__USE_ISOC99


432 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

433 
__gnuc_va_li°
 
__¨g
)

434 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

440 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

441 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

444 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

445 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

446 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

449 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
)

450 #i‡
deföed
 
__REDIRECT
 && !deföed 
__LDBL_COMPAT


451 
	`__REDIRECT
 (
vfsˇnf
,

452 (
FILE
 *
__ª°ri˘
 
__s
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
),

454 
__isoc99_vfsˇnf
)

455 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

456 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

457 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

458 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

459 
	`__REDIRECT_NTH
 (
vssˇnf
,

460 (c⁄° *
__ª°ri˘
 
__s
,

461 c⁄° *
__ª°ri˘
 
__f‹m©
,

462 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

463 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

464 #ñi‡!
deföed
 
__REDIRECT


465 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

466 c⁄° *
__ª°ri˘
 
__f‹m©
,

467 
__gnuc_va_li°
 
__¨g
Ë
__wur
;

468 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

469 
__gnuc_va_li°
 
__¨g
Ë
__wur
;

470 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

471 c⁄° *
__ª°ri˘
 
__f‹m©
,

472 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

473 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

474 
	#vsˇnf
 
__isoc99_vsˇnf


	)

475 
	#vssˇnf
 
__isoc99_vssˇnf


	)

485 
	`fgëc
 (
FILE
 *
__°ªam
);

486 
	`gëc
 (
FILE
 *
__°ªam
);

492 
	`gëch¨
 ();

494 #ifde‡
__USE_POSIX199506


499 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

500 
	`gëch¨_u∆ocked
 ();

503 #ifde‡
__USE_MISC


510 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

521 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

522 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

528 
	`putch¨
 (
__c
);

530 #ifde‡
__USE_MISC


537 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

540 #ifde‡
__USE_POSIX199506


545 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

546 
	`putch¨_u∆ocked
 (
__c
);

550 #i‡
deföed
 
__USE_MISC
 \

551 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

553 
	`gëw
 (
FILE
 *
__°ªam
);

556 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

564 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

565 
__wur
;

567 #i‡
	`__GLIBC_USE
 (
DEPRECATED_GETS
)

577 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

580 #ifde‡
__USE_GNU


587 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

588 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

592 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

603 
__ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

604 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

605 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

606 
__ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

607 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

608 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

616 
__ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

617 
size_t
 *
__ª°ri˘
 
__n
,

618 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

626 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

632 
	`puts
 (c⁄° *
__s
);

639 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

646 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

647 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

652 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

653 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

655 #ifde‡
__USE_GNU


662 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

663 
FILE
 *
__ª°ri˘
 
__°ªam
);

666 #ifde‡
__USE_MISC


673 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

674 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

675 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

676 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

684 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

689 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

694 
	`ªwöd
 (
FILE
 *
__°ªam
);

701 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


702 #i‚de‡
__USE_FILE_OFFSET64


707 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

712 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

714 #ifde‡
__REDIRECT


715 
	`__REDIRECT
 (
f£eko
,

716 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

717 
f£eko64
);

718 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

720 
	#f£eko
 
f£eko64


	)

721 
	#·ñlo
 
·ñlo64


	)

726 #i‚de‡
__USE_FILE_OFFSET64


731 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

736 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

738 #ifde‡
__REDIRECT


739 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

740 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

741 
	`__REDIRECT
 (
f£ços
,

742 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

744 
	#fgëpos
 
fgëpos64


	)

745 
	#f£ços
 
f£ços64


	)

749 #ifde‡
__USE_LARGEFILE64


750 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

751 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

752 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

753 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

757 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

759 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

761 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

763 #ifde‡
__USE_MISC


765 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

766 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

767 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

775 
	`≥º‹
 (c⁄° *
__s
);

781 
	~<bôs/sys_îæi°.h
>

784 #ifdef 
__USE_POSIX


786 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

789 #ifde‡
__USE_MISC


791 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

795 #ifde‡
__USE_POSIX2


800 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

806 
	`p˛o£
 (
FILE
 *
__°ªam
);

810 #ifdef 
__USE_POSIX


812 *
	$˘îmid
 (*
__s
Ë
__THROW
;

816 #i‡(
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
Ë|| deföed 
__USE_GNU


818 *
	`cu£rid
 (*
__s
);

822 #ifdef 
__USE_GNU


823 
ob°ack
;

826 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

827 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

828 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

829 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

830 c⁄° *
__ª°ri˘
 
__f‹m©
,

831 
__gnuc_va_li°
 
__¨gs
)

832 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

836 #ifde‡
__USE_POSIX199506


840 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

844 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

847 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

850 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


853 
	~<bôs/gë›t_posix.h
>

858 
	`__uÊow
 (
FILE
 *);

859 
	`__ovîÊow
 (
FILE
 *, );

863 #ifde‡
__USE_EXTERN_INLINES


864 
	~<bôs/°dio.h
>

866 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


867 
	~<bôs/°dio2.h
>

869 #ifde‡
__LDBL_COMPAT


870 
	~<bôs/°dio-ldbl.h
>

873 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

25 
	~<bôs/libc-hódî-°¨t.h
>

28 
	#__√ed_size_t


	)

29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

31 
	~<°ddef.h
>

33 
	g__BEGIN_DECLS


35 
	#_STDLIB_H
 1

	)

37 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


39 
	~<bôs/waôÊags.h
>

40 
	~<bôs/waô°©us.h
>

43 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (°©us)

	)

44 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (°©us)

	)

45 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (°©us)

	)

46 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (°©us)

	)

47 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (°©us)

	)

48 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (°©us)

	)

49 #ifde‡
__WIFCONTINUED


50 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (°©us)

	)

55 
	~<bôs/Êﬂä.h
>

60 
	mquŸ
;

61 
	mªm
;

62 } 
	tdiv_t
;

65 #i‚de‡
__ldiv_t_deföed


68 
	mquŸ
;

69 
	mªm
;

70 } 
	tldiv_t
;

71 
	#__ldiv_t_deföed
 1

	)

74 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


76 
__exãnsi⁄__
 struct

78 
	mquŸ
;

79 
	mªm
;

80 } 
	tŒdiv_t
;

81 
	#__Œdiv_t_deföed
 1

	)

86 
	#RAND_MAX
 2147483647

	)

91 
	#EXIT_FAILURE
 1

	)

92 
	#EXIT_SUCCESS
 0

	)

96 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

97 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

101 
	$©of
 (c⁄° *
__≈å
)

102 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

104 
	$©oi
 (c⁄° *
__≈å
)

105 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

107 
	$©ﬁ
 (c⁄° *
__≈å
)

108 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

110 #ifde‡
__USE_ISOC99


112 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

113 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

117 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

118 **
__ª°ri˘
 
__íd±r
)

119 
__THROW
 
	`__n⁄nuŒ
 ((1));

121 #ifdef 
__USE_ISOC99


123 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

124 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

126 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

127 **
__ª°ri˘
 
__íd±r
)

128 
__THROW
 
	`__n⁄nuŒ
 ((1));

133 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

134 
_Flﬂt16
 
	$°πof16
 (c⁄° *
__ª°ri˘
 
__≈å
,

135 **
__ª°ri˘
 
__íd±r
)

136 
__THROW
 
	`__n⁄nuŒ
 ((1));

139 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

140 
_Flﬂt32
 
	$°πof32
 (c⁄° *
__ª°ri˘
 
__≈å
,

141 **
__ª°ri˘
 
__íd±r
)

142 
__THROW
 
	`__n⁄nuŒ
 ((1));

145 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

146 
_Flﬂt64
 
	$°πof64
 (c⁄° *
__ª°ri˘
 
__≈å
,

147 **
__ª°ri˘
 
__íd±r
)

148 
__THROW
 
	`__n⁄nuŒ
 ((1));

151 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

152 
_Flﬂt128
 
	$°πof128
 (c⁄° *
__ª°ri˘
 
__≈å
,

153 **
__ª°ri˘
 
__íd±r
)

154 
__THROW
 
	`__n⁄nuŒ
 ((1));

157 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

158 
_Flﬂt32x
 
	$°πof32x
 (c⁄° *
__ª°ri˘
 
__≈å
,

159 **
__ª°ri˘
 
__íd±r
)

160 
__THROW
 
	`__n⁄nuŒ
 ((1));

163 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

164 
_Flﬂt64x
 
	$°πof64x
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

169 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

170 
_Flﬂt128x
 
	$°πof128x
 (c⁄° *
__ª°ri˘
 
__≈å
,

171 **
__ª°ri˘
 
__íd±r
)

172 
__THROW
 
	`__n⁄nuŒ
 ((1));

176 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1));

180 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

181 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

182 
__THROW
 
	`__n⁄nuŒ
 ((1));

184 #ifde‡
__USE_MISC


186 
__exãnsi⁄__


187 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

191 
__exãnsi⁄__


192 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

193 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

194 
__THROW
 
	`__n⁄nuŒ
 ((1));

197 #ifde‡
__USE_ISOC99


199 
__exãnsi⁄__


200 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

204 
__exãnsi⁄__


205 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

206 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

207 
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

212 
	$°r‰omd
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

213 
__f
)

214 
__THROW
 
	`__n⁄nuŒ
 ((3));

216 
	$°r‰omf
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

217 
__f
)

218 
__THROW
 
	`__n⁄nuŒ
 ((3));

220 
	$°r‰oml
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

221 
__f
)

222 
__THROW
 
	`__n⁄nuŒ
 ((3));

225 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

226 
	$°r‰omf16
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

227 
_Flﬂt16
 
__f
)

228 
__THROW
 
	`__n⁄nuŒ
 ((3));

231 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

232 
	$°r‰omf32
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

233 
_Flﬂt32
 
__f
)

234 
__THROW
 
	`__n⁄nuŒ
 ((3));

237 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

238 
	$°r‰omf64
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

239 
_Flﬂt64
 
__f
)

240 
__THROW
 
	`__n⁄nuŒ
 ((3));

243 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

244 
	$°r‰omf128
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

245 
_Flﬂt128
 
__f
)

246 
__THROW
 
	`__n⁄nuŒ
 ((3));

249 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

250 
	$°r‰omf32x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

251 
_Flﬂt32x
 
__f
)

252 
__THROW
 
	`__n⁄nuŒ
 ((3));

255 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

256 
	$°r‰omf64x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

257 
_Flﬂt64x
 
__f
)

258 
__THROW
 
	`__n⁄nuŒ
 ((3));

261 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

262 
	$°r‰omf128x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

263 
_Flﬂt128x
 
__f
)

264 
__THROW
 
	`__n⁄nuŒ
 ((3));

268 #ifde‡
__USE_GNU


272 
	~<bôs/ty≥s/loˇÀ_t.h
>

274 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

275 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

276 
loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

278 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

279 **
__ª°ri˘
 
__íd±r
,

280 
__ba£
, 
loˇÀ_t
 
__loc
)

281 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

283 
__exãnsi⁄__


284 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

285 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

286 
loˇÀ_t
 
__loc
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

289 
__exãnsi⁄__


290 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

291 **
__ª°ri˘
 
__íd±r
,

292 
__ba£
, 
loˇÀ_t
 
__loc
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

295 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

296 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

299 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

300 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

301 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

303 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

304 **
__ª°ri˘
 
__íd±r
,

305 
loˇÀ_t
 
__loc
)

306 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

308 #i‡
__HAVE_FLOAT16


309 
_Flﬂt16
 
	$°πof16_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

310 **
__ª°ri˘
 
__íd±r
,

311 
loˇÀ_t
 
__loc
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

315 #i‡
__HAVE_FLOAT32


316 
_Flﬂt32
 
	$°πof32_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

317 **
__ª°ri˘
 
__íd±r
,

318 
loˇÀ_t
 
__loc
)

319 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

322 #i‡
__HAVE_FLOAT64


323 
_Flﬂt64
 
	$°πof64_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

324 **
__ª°ri˘
 
__íd±r
,

325 
loˇÀ_t
 
__loc
)

326 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

329 #i‡
__HAVE_FLOAT128


330 
_Flﬂt128
 
	$°πof128_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 **
__ª°ri˘
 
__íd±r
,

332 
loˇÀ_t
 
__loc
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

336 #i‡
__HAVE_FLOAT32X


337 
_Flﬂt32x
 
	$°πof32x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

338 **
__ª°ri˘
 
__íd±r
,

339 
loˇÀ_t
 
__loc
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

343 #i‡
__HAVE_FLOAT64X


344 
_Flﬂt64x
 
	$°πof64x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

345 **
__ª°ri˘
 
__íd±r
,

346 
loˇÀ_t
 
__loc
)

347 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

350 #i‡
__HAVE_FLOAT128X


351 
_Flﬂt128x
 
	$°πof128x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

352 **
__ª°ri˘
 
__íd±r
,

353 
loˇÀ_t
 
__loc
)

354 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

359 #ifde‡
__USE_EXTERN_INLINES


360 
__exã∫_ölöe
 

361 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

363  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

364 
	}
}

365 
__exã∫_ölöe
 

366 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

368  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

369 
	}
}

371 #ifde‡
__USE_ISOC99


372 
__exãnsi⁄__
 
__exã∫_ölöe
 

373 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

375  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

376 
	}
}

381 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


385 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

388 
	$a64l
 (c⁄° *
__s
)

389 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

393 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


394 
	~<sys/ty≥s.h
>

401 
	$øndom
 (Ë
__THROW
;

404 
	$§™dom
 (
__£ed
Ë
__THROW
;

410 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

411 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

415 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

418 #ifde‡
__USE_MISC


423 
	søndom_d©a


425 
öt32_t
 *
Âå
;

426 
öt32_t
 *
Ωå
;

427 
öt32_t
 *
°©e
;

428 
ønd_ty≥
;

429 
ønd_deg
;

430 
ønd_£p
;

431 
öt32_t
 *
íd_±r
;

434 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

435 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

437 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

438 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

441 
size_t
 
__°©ñí
,

442 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

443 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

445 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

446 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

447 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$ønd
 (Ë
__THROW
;

455 
	$§™d
 (
__£ed
Ë
__THROW
;

457 #ifde‡
__USE_POSIX199506


459 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

463 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


467 
	$dønd48
 (Ë
__THROW
;

468 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

471 
	$Ã™d48
 (Ë
__THROW
;

472 
	$ƒ™d48
 (
__xsubi
[3])

473 
__THROW
 
	`__n⁄nuŒ
 ((1));

476 
	$mønd48
 (Ë
__THROW
;

477 
	$jønd48
 (
__xsubi
[3])

478 
__THROW
 
	`__n⁄nuŒ
 ((1));

481 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

482 *
	$£ed48
 (
__£ed16v
[3])

483 
__THROW
 
	`__n⁄nuŒ
 ((1));

484 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

486 #ifde‡
__USE_MISC


490 
	sdønd48_d©a


492 
__x
[3];

493 
__ﬁd_x
[3];

494 
__c
;

495 
__öô
;

496 
__exãnsi⁄__
 
__a
;

501 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

502 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

503 
	$î™d48_r
 (
__xsubi
[3],

504 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

505 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

508 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

509 *
__ª°ri˘
 
__ªsu…
)

510 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

511 
	$ƒ™d48_r
 (
__xsubi
[3],

512 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

513 *
__ª°ri˘
 
__ªsu…
)

514 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

517 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

518 *
__ª°ri˘
 
__ªsu…
)

519 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

520 
	$jønd48_r
 (
__xsubi
[3],

521 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

522 *
__ª°ri˘
 
__ªsu…
)

523 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

526 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

527 
__THROW
 
	`__n⁄nuŒ
 ((2));

529 
	$£ed48_r
 (
__£ed16v
[3],

530 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

532 
	$lc⁄g48_r
 (
__∑øm
[7],

533 
dønd48_d©a
 *
__buf„r
)

534 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

539 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__


540 
	`__©åibuã_Æloc_size__
 ((1)Ë
__wur
;

542 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

543 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((1, 2)Ë
__wur
;

550 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

551 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
 
	`__©åibuã_Æloc_size__
 ((2));

553 #ifde‡
__USE_MISC


559 *
	$ªÆloˇºay
 (*
__±r
, 
size_t
 
__nmemb
, size_à
__size
)

560 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__


561 
	`__©åibuã_Æloc_size__
 ((2, 3));

565 
	$‰ì
 (*
__±r
Ë
__THROW
;

567 #ifde‡
__USE_MISC


568 
	~<Æloˇ.h
>

571 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

572 || 
deföed
 
__USE_MISC


574 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__


575 
	`__©åibuã_Æloc_size__
 ((1)Ë
__wur
;

578 #ifde‡
__USE_XOPEN2K


580 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

581 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

584 #ifde‡
__USE_ISOC11


586 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

587 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

591 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

595 
	$©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

597 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


599 #ifde‡
__˝lu•lus


600 "C++" 
	$©_quick_exô
 ((*
__func
) ())

601 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

603 
	$©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

607 #ifdef 
__USE_MISC


610 
	$⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

611 
__THROW
 
	`__n⁄nuŒ
 ((1));

617 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

619 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


623 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

626 #ifde‡
__USE_ISOC99


629 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

634 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

636 #ifde‡
__USE_GNU


639 *
	$£cuª_gëív
 (c⁄° *
__«me
)

640 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


647 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

650 #ifde‡
__USE_XOPEN2K


653 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

654 
__THROW
 
	`__n⁄nuŒ
 ((2));

657 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

660 #ifdef 
__USE_MISC


664 
	$˛óªnv
 (Ë
__THROW
;

668 #i‡
deföed
 
__USE_MISC
 \

669 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

675 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

678 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


687 #i‚de‡
__USE_FILE_OFFSET64


688 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

690 #ifde‡
__REDIRECT


691 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

692 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

694 
	#mk°emp
 
mk°emp64


	)

697 #ifde‡
__USE_LARGEFILE64


698 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 #ifde‡
__USE_MISC


709 #i‚de‡
__USE_FILE_OFFSET64


710 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 #ifde‡
__REDIRECT


713 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

714 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

716 
	#mk°emps
 
mk°emps64


	)

719 #ifde‡
__USE_LARGEFILE64


720 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

721 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

725 #ifde‡
__USE_XOPEN2K8


731 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

734 #ifde‡
__USE_GNU


741 #i‚de‡
__USE_FILE_OFFSET64


742 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

744 #ifde‡
__REDIRECT


745 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

746 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

748 
	#mko°emp
 
mko°emp64


	)

751 #ifde‡
__USE_LARGEFILE64


752 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

761 #i‚de‡
__USE_FILE_OFFSET64


762 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

763 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

765 #ifde‡
__REDIRECT


766 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

767 
__Êags
), 
mko°emps64
)

768 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

770 
	#mko°emps
 
mko°emps64


	)

773 #ifde‡
__USE_LARGEFILE64


774 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

775 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

784 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

787 #ifdef 
__USE_GNU


790 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

794 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


800 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

801 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

806 #i‚de‡
__COMPAR_FN_T


807 
	#__COMPAR_FN_T


	)

808 (*
	t__com∑r_‚_t
) (const *, const *);

810 #ifdef 
__USE_GNU


811 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

814 #ifde‡
__USE_GNU


815 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

820 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

821 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

822 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

824 #ifde‡
__USE_EXTERN_INLINES


825 
	~<bôs/°dlib-b£¨ch.h
>

830 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

831 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

832 #ifde‡
__USE_GNU


833 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

834 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

835 
	`__n⁄nuŒ
 ((1, 4));

840 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

841 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

843 #ifde‡
__USE_ISOC99


844 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

845 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

852 
div_t
 
	$div
 (
__numî
, 
__díom
)

853 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

854 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

855 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

857 #ifde‡
__USE_ISOC99


858 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

859 
__díom
)

860 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

864 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

865 || 
deföed
 
__USE_MISC


872 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

873 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

878 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

879 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

884 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

885 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

888 #ifde‡
__USE_MISC


890 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

891 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

892 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

893 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

894 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

895 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

896 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

897 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

902 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

903 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

904 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

905 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

906 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

907 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

909 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

910 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

911 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

912 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

913 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

914 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

915 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

916 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

922 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

925 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

926 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

929 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

933 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

934 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

936 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

937 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

938 
__THROW
;

941 #ifde‡
__USE_MISC


946 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

950 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


957 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

958 *c⁄° *
__ª°ri˘
 
__tokís
,

959 **
__ª°ri˘
 
__vÆuï
)

960 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

966 #ifde‡
__USE_XOPEN2KXSI


968 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

971 #ifde‡
__USE_XOPEN_EXTENDED


976 
	$gø¡±
 (
__fd
Ë
__THROW
;

980 
	$u∆ock±
 (
__fd
Ë
__THROW
;

985 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

988 #ifde‡
__USE_GNU


992 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

993 
__THROW
 
	`__n⁄nuŒ
 ((2));

996 
	`gë±
 ();

999 #ifde‡
__USE_MISC


1003 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

1004 
__THROW
 
	`__n⁄nuŒ
 ((1));

1007 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K


1010 
	$ây¶Ÿ
 (Ë
__THROW
;

1013 
	~<bôs/°dlib-Êﬂt.h
>

1016 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1017 
	~<bôs/°dlib.h
>

1019 #ifde‡
__LDBL_COMPAT


1020 
	~<bôs/°dlib-ldbl.h
>

1023 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

28 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

37 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

46 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

52 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


53 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

54 
__c
, 
size_t
 
__n
)

55 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

60 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

63 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

64 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

67 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


70 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

71 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

72 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

75 #ifde‡
__OPTIMIZE__


76 
__exã∫_Æways_ölöe
 *

77 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


79  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

82 
__exã∫_Æways_ölöe
 const *

83 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


85  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

88 
	}
}

90 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

91 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

94 #ifde‡
__USE_GNU


97 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


98 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

99 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

100 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

101 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

103 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

104 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

108 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


109 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

110 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

112 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

121 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

122 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

124 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

125 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

129 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

132 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

133 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

137 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

139 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

140 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

147 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

148 
__THROW
 
	`__n⁄nuŒ
 ((2));

150 #ifde‡
__USE_XOPEN2K8


152 
	~<bôs/ty≥s/loˇÀ_t.h
>

155 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__l
)

156 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

159 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

160 
loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

163 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8
 \

164 || 
	$__GLIBC_USE
 (
LIB_EXT2
))

166 *
	$°rdup
 (c⁄° *
__s
)

167 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

173 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

174 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

175 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

178 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


180 
	#°rdu∑
(
s
) \

181 (
__exãnsi⁄__
 \

183 c⁄° *
__ﬁd
 = (
s
); \

184 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

185 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

186 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

187 
	}
}))

	)

190 
	#°∫du∑
(
s
, 
n
) \

191 (
__exãnsi⁄__
 \

193 c⁄° *
__ﬁd
 = (
s
); \

194 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

195 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

196 
__√w
[
__Àn
] = '\0'; \

197 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

198 }))

	)

202 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


205 *
°rchr
 (*
__s
, 
__c
)

206 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

207 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

208 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

210 #ifde‡
__OPTIMIZE__


211 
__exã∫_Æways_ölöe
 *

212 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


214  
__buûtö_°rchr
 (
__s
, 
__c
);

217 
__exã∫_Æways_ölöe
 const *

218 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


220  
__buûtö_°rchr
 (
__s
, 
__c
);

225 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

226 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

229 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


232 *
	`°ºchr
 (*
__s
, 
__c
)

233 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

234 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

235 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__OPTIMIZE__


238 
__exã∫_Æways_ölöe
 *

239 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


241  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

244 
__exã∫_Æways_ölöe
 const *

245 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


247  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

250 
	}
}

252 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

253 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

256 #ifde‡
__USE_GNU


259 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


260 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

261 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

262 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

263 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

266 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

272 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

273 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

276 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

279 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


282 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

283 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

284 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

285 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

287 #ifde‡
__OPTIMIZE__


288 
__exã∫_Æways_ölöe
 *

289 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


291  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

294 
__exã∫_Æways_ölöe
 const *

295 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


297  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

300 
	}
}

302 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

303 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

306 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


309 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

310 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

311 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

312 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

314 #ifde‡
__OPTIMIZE__


315 
__exã∫_Æways_ölöe
 *

316 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


318  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

321 
__exã∫_Æways_ölöe
 const *

322 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


324  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

327 
	}
}

329 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

330 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

335 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

336 
__THROW
 
	`__n⁄nuŒ
 ((2));

340 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

341 c⁄° *
__ª°ri˘
 
__dñim
,

342 **
__ª°ri˘
 
__ßve_±r
)

343 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

344 #ifde‡
__USE_POSIX


345 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

346 **
__ª°ri˘
 
__ßve_±r
)

347 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

350 #ifde‡
__USE_GNU


352 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


353 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

354 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

355 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

356 c⁄° *
__√edÀ
)

357 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

359 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

360 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

364 #ifde‡
__USE_GNU


368 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

369 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

370 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

374 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

375 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

377 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

378 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

379 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

384 
size_t
 
	$°æí
 (c⁄° *
__s
)

385 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

387 #ifdef 
__USE_XOPEN2K8


390 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

391 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

396 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

397 #ifde‡
__USE_XOPEN2K


405 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


408 #ifde‡
__REDIRECT_NTH


409 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

410 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

411 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

413 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

414 
__THROW
 
	`__n⁄nuŒ
 ((2));

415 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

420 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

425 #ifde‡
__USE_XOPEN2K8


427 *
	$°ªº‹_l
 (
__î∫um
, 
loˇÀ_t
 
__l
Ë
__THROW
;

430 #ifde‡
__USE_MISC


431 
	~<°rögs.h
>

435 
	$ex∂icô_bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

439 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

440 c⁄° *
__ª°ri˘
 
__dñim
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 #ifdef 
__USE_XOPEN2K8


446 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

449 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

451 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

452 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

456 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

457 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

458 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

460 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

464 #ifdef 
__USE_GNU


466 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

467 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

470 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

473 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

475 #i‚de‡
ba£«me


480 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


481 "C++" *
	$ba£«me
 (*
__fûíame
)

482 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

483 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

484 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

486 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

491 #i‡
	`__GNUC_PREREQ
 (3,4)

492 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


494 
	~<bôs/°rög_f‹tifõd.h
>

498 
__END_DECLS


	@/usr/include/sys/mman.h

19 #i‚def 
_SYS_MMAN_H


20 
	#_SYS_MMAN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 #i‚de‡
__off_t_deföed


28 #i‚de‡
__USE_FILE_OFFSET64


29 
__off_t
 
	toff_t
;

31 
__off64_t
 
	toff_t
;

33 
	#__off_t_deföed


	)

36 #i‚de‡
__mode_t_deföed


37 
__mode_t
 
	tmode_t
;

38 
	#__mode_t_deföed


	)

41 
	~<bôs/mm™.h
>

44 
	#MAP_FAILED
 ((*Ë-1)

	)

46 
	g__BEGIN_DECLS


56 #i‚de‡
__USE_FILE_OFFSET64


57 *
	$mm≠
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

58 
__Êags
, 
__fd
, 
__off_t
 
__off£t
Ë
__THROW
;

60 #ifde‡
__REDIRECT_NTH


61 * 
	`__REDIRECT_NTH
 (
mm≠
,

62 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

63 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
),

64 
mm≠64
);

66 
	#mm≠
 
mm≠64


	)

69 #ifde‡
__USE_LARGEFILE64


70 *
	$mm≠64
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

71 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
Ë
__THROW
;

76 
	$munm≠
 (*
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

81 
	$m¥Ÿe˘
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
Ë
__THROW
;

89 
	`msync
 (*
__addr
, 
size_t
 
__Àn
, 
__Êags
);

91 #ifde‡
__USE_MISC


94 
	$madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

96 #ifde‡
__USE_XOPEN2K


98 
	$posix_madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

103 
	$mlock
 (c⁄° *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

106 
	$mu∆ock
 (c⁄° *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

111 
	$mlockÆl
 (
__Êags
Ë
__THROW
;

115 
	$mu∆ockÆl
 (Ë
__THROW
;

117 #ifde‡
__USE_MISC


123 
	$möc‹e
 (*
__°¨t
, 
size_t
 
__Àn
, *
__vec
)

124 
__THROW
;

127 #ifde‡
__USE_GNU


133 *
	$mªm≠
 (*
__addr
, 
size_t
 
__ﬁd_Àn
, size_à
__√w_Àn
,

134 
__Êags
, ...Ë
__THROW
;

138 
	$ªm≠_fûe_∑ges
 (*
__°¨t
, 
size_t
 
__size
, 
__¥Ÿ
,

139 
size_t
 
__pgoff
, 
__Êags
Ë
__THROW
;

144 
	`shm_›í
 (c⁄° *
__«me
, 
__oÊag
, 
mode_t
 
__mode
);

147 
	`shm_u∆ök
 (c⁄° *
__«me
);

149 
__END_DECLS


	@/usr/include/ucontext.h

20 #i‚de‡
_UCONTEXT_H


21 
	#_UCONTEXT_H
 1

	)

23 
	~<„©uªs.h
>

26 
	~<bôs/ödúe˘-ªtu∫.h
>

29 
	~<sys/uc⁄ãxt.h
>

31 
__BEGIN_DECLS


34 
	$gëc⁄ãxt
 (
uc⁄ãxt_t
 *
__u˝
Ë
__THROWNL
;

37 
	$£tc⁄ãxt
 (c⁄° 
uc⁄ãxt_t
 *
__u˝
Ë
__THROWNL
;

41 
	$sw≠c⁄ãxt
 (
uc⁄ãxt_t
 *
__ª°ri˘
 
__ou˝
,

42 c⁄° 
uc⁄ãxt_t
 *
__ª°ri˘
 
__u˝
)

43 
__THROWNL
 
__INDIRECT_RETURN
;

51 
	$makec⁄ãxt
 (
uc⁄ãxt_t
 *
__u˝
, (*
__func
) (),

52 
__¨gc
, ...Ë
__THROW
;

54 
__END_DECLS


	@CPUState.h

2 #i‚de‡
__CPU_STATE_H__


3 
	#__CPU_STATE_H__


	)

5 
	~<asm/±ø˚.h
>

6 
	~<löux/ty≥s.h
>

7 
	~<sig«l.h
>

8 
	~<uc⁄ãxt.h
>

10 
	~<m≠
>

12 
	~"›ønd.h
"

13 
	~"deföes.h
"

16 
	g±_ªgs
;

17 
˛ass
 
	gCFaˇde
;

18 
˛ass
 
	gSymInfoDB
;

27 
	sDyö°EC
 {

28 
uöt32_t
 
	mof·
, 
	msize
;

31 
	sMacReg
 {

32 
±_ªgs
 
	mªgs
;

33 
ul⁄g
 
	mfs_ba£
;

34 
ul⁄g
 
	mgs_ba£
;

41 
	#PTREGS_REG_TOTAL
 23

42 
	#DYINST_REG_TOTAL
 32

43 ˛as†
	cSYCPUSèã
 {

	)

51 
	m¥iv©e
:

52 
°d
::
m≠
<
uöt
, 
	m°d
::
°rög
> 
PTRegsEncodög
;

53 
	m°d
::
m≠
<
uöt
, 
	mDyö°EC
> 
	mDyö°Encodög
;

55 
ul⁄g
 
	mm_AºRegs
[
DYINST_REG_TOTAL
];

57 
MacReg
 
	mm_PTRegs
;

68 
	#REG_32H
 6

	)

69 
	#REG_16H
 5

	)

70 
	#REG_D
 4

	)

71 
	#REG_W
 3

	)

72 
	#REG_H
 2

	)

73 
	#REG_L
 1

	)

74 
	#REG_FULL
 0

	)

76 
	sSymMachöeReg
 {

77 
boﬁ
 
	gbSym
 ;

78 
boﬁ
 
	gbVÆid
 ;

79 
KVEx¥På
 
	gsymvÆ
 ;

81 
SymMachöeReg
 () {

82 
	gbSym
 = 
Ál£
 ;

83 
	gbVÆid
 = 
Ál£
 ;

84 
	gsymvÆ
 = 
NULL
 ;

88 
SymMachöeReg
 
	gm_symMR
[
DYINST_REG_TOTAL
][7] ;

92 
	sMachöeReg
 {

93 
uöt
 
	gödx
;

94 
uöt
 
	gsize
;

95 
boﬁ
 
	gbsym_Êag
;

97 
öt64_t
 *
	gpi64
;

98 
öt32_t
 *
	gpi32
;

99 
öt16_t
 *
	gpi16
;

100 
öt8_t
 *
	gpi8
;

101 
uöt64_t
 *
	gpu64
;

102 
uöt32_t
 *
	gpu32
;

103 
uöt16_t
 *
	gpu16
;

104 
uöt8_t
 *
	gpu8
;

106 
SymMachöeReg
 *
	gp_symMR
 ;

108 
KVEx¥På
 
	gsymvÆ
;

109 
FSIn°rPå
 
	gfsö°r
;

113 
MachöeReg
(Ë: 
bsym_Êag
(
Ál£
), 
symvÆ
(
nuŒ±r
) {}

114 ~
MachöeReg
() {}

116 
	g°d
::
	tsh¨ed_±r
<
	tMachöeReg
> 
	tMachöeRegPå
;

118 
	g°d
::
m≠
<
uöt
, 
	gMachöeRegPå
> 
	gm_Regs
;

120 
	gpublic
:

121 
	$SYCPUSèã
(Ë: 
	$m_Regs
() {

122 
MachöeReg
 *
R
;

123 autÿ
E
 : 
Dyö°Encodög
) {

124 
uöt
 
iddy
 = 
E
.
fú°
;

125 
uöt
 
id±
 = 
E
.
£c⁄d
.
of·
;

126 
uöt
 
size
 = 
E
.
£c⁄d
.size;

127 
R
 = 
√w
 
	`MachöeReg
();

128 
R
->
ödx
 = 
iddy
;

129 
R
->
size
 = size;

130 
R
->
pu64
 = &
m_AºRegs
[
id±
];

132 
m_symMR
[
id±
][0].
bVÆid
 = 
åue
 ;

133 
R
->
p_symMR
 = 
m_symMR
[
id±
] ;

135 
m_Regs
[
iddy
].
	`ª£t
(
R
);

137 
	}
}

139 ~
	$SYCPUSèã
() {

140 
m_Regs
.
	`˛ór
();

141 
	}
}

145 
boﬁ
 
£tC⁄¸ëeCPUSèã
(
MacReg
 *
ªgs
);

149 
boﬁ
 
ªadC⁄¸ëeCPUSèã
(
MacReg
 *
ªgs
);

150 
boﬁ
 
˛órAŒSymFœg
();

151 
±_ªgs
* 
gëPTRegs
();

153 
ul⁄g
 
ªadC⁄Reg
(
uöt
 
idx
);

154 
boﬁ
 
wrôeC⁄Reg
(
uöt
 
idx
, 
ul⁄g
 
vÆ
);

157 
boﬁ
 
isSYReg
(
uöt
 
ªg_ödex
);

158 
boﬁ
 
wrôeRegi°î
(
RegVÆue
 &
v
);

159 
boﬁ
 
ªadRegi°î
(
RegVÆue
 &
v
);

161 
boﬁ
 
gëFœgBô
(
uöt
 
Êag_ödex
, 
FSIn°rPå
 &
±r
);

162 
boﬁ
 
£tFœgBô
(
uöt
 
Êag_ödex
, 
FSIn°rPå
 &
±r
);

165 
boﬁ
 
gëFœgBô
(
uöt
 
Êag_ödex
, 
FLAG_STAT
 &
Êag
);

166 
boﬁ
 
£tFœgBô
(
uöt
 
Êag_ödex
, 
FLAG_STAT
 &
Êag
);

168 
boﬁ
 
FœgBôDeföôed
(
uöt
 
Êag_ödex
) ;

171 
	g¥iv©e
:

172 
boﬁ
 
wrôeSymbﬁicVÆue
(
MachöeReg
 *
R
, 
KVEx¥På
 &
e
);

173 
boﬁ
 
ªadSymbﬁicVÆue
(
MachöeReg
 *
R
, 
KVEx¥På
 &
e
);

175 
boﬁ
 
wrôeC⁄¸ëeVÆue
(
MachöeReg
 *
R
, 
RegVÆue
 &
V
);

176 
boﬁ
 
ªadC⁄¸ëeVÆue
(
MachöeReg
 *
R
, 
RegVÆue
 &
V
);

179 
RegToIndex
 (
MachöeReg
 *
R
);

180 
boﬁ
 
RódSubRegVÆue
 (
MachöeReg
* 
R
, 
RegVÆue
 &
V
) ;

182 
boﬁ
 
wrôeC⁄¸ëeVÆue
(
MachöeReg
 *
R
, 
subRegIdx
, 
RegVÆue
 &
V
);

183 
boﬁ
 
ªadC⁄¸ëeVÆue
(
MachöeReg
 *
R
, 
subRegIdx
, 
RegVÆue
 &
V
);

185 
boﬁ
 
comböeChûdªn
(
MachöeReg
 *
R
, 
subRegIndex
) ;

186 
boﬁ
 
comböeChûdªn
(
MachöeReg
 *
R
, 
ªsu…Index
, 
chûd_H
, 
chûd_L
, 
chûd_size
) ;

188 
boﬁ
 
övÆid©eTªe
(
MachöeReg
 *
R
, 
subRegIndex
) ;

189 
boﬁ
 
•lôP¨ítOf
(
MachöeReg
 *
R
, 
subRegIndex
) ;

190 
boﬁ
 
•lôP¨ít
(
MachöeReg
 *
R
, 
p
, 
chûd_H
, 
chûd_L
, 
chûd_size
) ;

192 
boﬁ
 
isSubRegSymbﬁ
(
MachöeReg
 *
R
, 
subRegIndex
, boﬁ &
bSym
) ;

193 
boﬁ
 
isP¨ítRegSymbﬁ
(
MachöeReg
 *
R
, 
subRegIndex
, boﬁ &
bSym
) ;

195 
boﬁ
 
£tP¨ítSymbﬁSèã
(
MachöeReg
 *
R
, 
subRegIndex
, boﬁ 
bsym
) ;

196 
boﬁ
 
£tChûdSymbﬁSèã
(
MachöeReg
 *
R
, 
subRegIndex
, boﬁ 
bsym
) ;

197 
boﬁ
 
åyC⁄¸ëeP¨ítOf
(
MachöeReg
 *
R
, 
subRegIndex
) ;

199 
boﬁ
 
¥ötsymMR
(
MachöeReg
 *
R
) ;

	@EFlagsManager.h

1 #i‚de‡
_SYM_EFLAGSMANAGER_H__


2 
	#_SYM_EFLAGSMANAGER_H__


	)

5 
	~"VMSèã.h
"

6 
	~"Z3H™dÀr.h
"

8 
˛ass
 
	gVMSèã
;

11 
usög
 
«me•a˚
 
	gz3
;

12 
usög
 
«me•a˚
 
	gEXPR
;

13 
usög
 
«me•a˚
 
	gZ3HANDLER
;

16 
	#FLAG_CHANGING_ATTR
 0x1

	)

17 
	#FLAG_SETING_ATTR
 0x2

	)

18 
	#CONDITIONAL_EXEC_ATTR
 0x4

	)

20 ˛as†
	cEFœgsM™agî
 {

21 
VMSèã
 *
	mm_VM
 ;

22 
	m°d
::
£t
<
KVEx¥På
> 
m_C⁄°øöt
;

24 
KVEx¥På
 
	mm_La°Ex¥
 ;

25 
FSIn°rPå
 
	mm_La°In°r
;

27 
	m°d
::
m≠
<
ul⁄g
, 
	mboﬁ
> 
	mbønchDecisi⁄
;

29 
	m°d
::
sh¨ed_±r
<
Z3H™dÀr
> 
m_Z3H™dÀr
;

31 
	m¥Ÿe˘ed
:

32 
boﬁ
 
DoCª©eC⁄°øöt
(
ex¥ID
, boﬁ 
bChoi˚
 ) ;

34 
	mpublic
:

35 
EFœgsM™agî
(
VMSèã
 *
vm
) ;

36 ~
	$EFœgsM™agî
 () {} ;

38 
FLAG_STAT
 
	$GëFœg
(
Êag
Ë{ 
FLAG_UNCERTAIN
 ;
	}
} ;

41 
boﬁ
 
isFœgSëtögIn°r
(
íåyID
 
id
) ;

42 
boﬁ
 
isFœgCh™gögIn°r
(
íåyID
 
id
) ;

44 
boﬁ
 
isC⁄dôi⁄ÆExecuãIn°r
(
íåyID
 
id
) ;

45 
InôIn°ru˘i⁄Aâr
() ;

47 
boﬁ
 
DïídícyFœgC⁄¸ëed
(
íåyID
 
ö°rID
, boﬁ &
bChoi˚
) ;

48 
boﬁ
 
Cª©eC⁄°øöt
(
íåyID
 
ö°rID
, boﬁ 
bChoi˚
) ;

50 
boﬁ
 
C⁄¸ëeFœg
 (
íåyID
 
ö°rID
, boﬁ 
bChoi˚
) ;

52 
boﬁ
 
SaveFœgCh™gögIn°ru˘i⁄
 (
FSIn°rPå
 &
±r
) ;

53 
boﬁ
 
SaveFœgCh™gögIn°ru˘i⁄Ex¥
 (
íåyID
 
ö°rID
, 
KVEx¥På
 
ex¥På
) ;

55 
boﬁ
 
födDecisi⁄
(
ul⁄g
 
addr
, 
cou¡î
);

56 
boﬁ
 
födDecisi⁄
(
ul⁄g
 
addr
);

58 
KVEx¥På
 
DoGëC⁄dôi⁄
(
ex¥ID
);

59 
KVEx¥På
 
GëC⁄dôi⁄
(
íåyID
 
ö°rID
);

60 
boﬁ
 
EvÆC⁄dôi⁄
(
íåyID
 
ö¢ID
);

62 
boﬁ
 
RódAddrBoﬁM≠FromFûe
 () ;

64 
boﬁ
 
PrötC⁄°øöt
() ;

66 
boﬁ
 
SﬁveC⁄°øöts
();

68 
	g°d
::
m≠
<
uöt64_t
, 
	gboﬁ
> 
	gm_AddrBoﬁ
 ;

	@Expr.h

1 #i‚de‡
_EXPR_H__


2 
	#_EXPR_H__


	)

4 
	~<mem‹y
>

5 
	~<°dio.h
>

6 
	~"VMSèã.h
"

8 
	#EXPR_UNDEFINED
 -1

	)

10 
	#EXPR_Add
 7

	)

11 
	#EXPR_Sub
 8

	)

12 
	#EXPR_Mul
 9

	)

13 
	#EXPR_UDiv
 10

	)

14 
	#EXPR_SDiv
 11

	)

15 
	#EXPR_URem
 12

	)

16 
	#EXPR_SRem
 13

	)

17 
	#EXPR_Neg
 14

	)

18 
	#EXPR_NŸ
 15

	)

19 
	#EXPR_And
 16

	)

20 
	#EXPR_Or
 17

	)

21 
	#EXPR_X‹
 18

	)

22 
	#EXPR_Shl
 19

	)

23 
	#EXPR_LShr
 20

	)

24 
	#EXPR_AShr
 21

	)

25 
	#EXPR_EquÆ
 22

	)

26 
	#EXPR_Di°ö˘
 23

	)

27 
	#EXPR_U…
 24

	)

28 
	#EXPR_UÀ
 25

	)

29 
	#EXPR_Ugt
 26

	)

30 
	#EXPR_Uge
 27

	)

31 
	#EXPR_S…
 28

	)

32 
	#EXPR_SÀ
 29

	)

33 
	#EXPR_Sgt
 30

	)

34 
	#EXPR_Sge
 31

	)

35 
	#EXPR_LOr
 32

	)

36 
	#EXPR_LAnd
 33

	)

37 
	#EXPR_LNŸ
 34

	)

39 
	#EXPR_SignEXT
 35

	)

40 
	#EXPR_ZîoEXT
 36

	)

41 
	#EXPR_Shrd
 37

	)

43 
	#EXPR_Sign
 38

	)

44 
	#EXPR_NoSign
 39

	)

45 
	#EXPR_OvîÊow
 40

	)

46 
	#EXPR_NoOvîÊow
 41

	)

48 
	#EXPR_Comböe
 42

	)

49 
	#EXPR_Exåa˘
 43

	)

61 
˛ass
 
	gVMSèã
;

63 
«me•a˚
 
	gEXPR
 {

65 ˛as†
	cEx¥
 {

66 
	g¥Ÿe˘ed
:

69 
public
:

70 
	eKöd
 {

72 
UNDEFINED
 = -1,

75 
	gC⁄°
 = 3,

76 
	gBö
,

77 
	gTri
,

78 
	gUry
,

80 
	gAdd
 = 7,

81 
	gSub
,

82 
	gMul
,

83 
	gUDiv
,

85 
	gSDiv
,

86 
	gURem
,

87 
	gSRem
,

88 
	gNeg
,

89 
	gNŸ
,

90 
	gAnd
,

91 
	gOr
,

92 
	gX‹
,

93 
	gShl
,

94 
	gLShr
,

96 
	gAShr
,

97 
	gEquÆ
,

98 
	gDi°ö˘
,

99 
	gU…
,

100 
	gUÀ
,

101 
	gUgt
,

102 
	gUge
,

103 
	gS…
,

104 
	gSÀ
,

105 
	gSgt
,

107 
	gSge
,

108 
	gL‹
,

109 
	gLAnd
,

110 
	gLNŸ
,

111 
	gSignEXT
,

112 
	gZîoEXT
,

113 
	gShrd
,

114 
	gSign
,

115 
	gNoSign
,

116 
	gOvîÊow
,

118 
	gNoOvîÊow
,

119 
	gComböe
,

120 
	gExåa˘


124 
	gpublic
:

125 
ex¥ID
 ;

126 
	gsize
;

127 
	goff£t
;

129 
Ex¥
(
sz
, 
off
=0) {

130 
this
->
size
 = 
sz
, 
	gthis
->
	goff£t
 = 
off
;Åhis->
	gex¥ID
 = -1 ;

132 
Ex¥
() {

133 
	gthis
->
	gsize
 = 4,Åhis->
	goff£t
 = 0;Åhis->
	gex¥ID
 = -1 ;

135 ~
Ex¥
() {} ;

136 
boﬁ
 
Excuã
(&
size
, &
vÆ
) {

137 
	gsize
 = 
this
->
size
 ;

138 
	gvÆ
 = 0 ;

139  
	gåue
 ;

142 
vútuÆ
 
¥öt
() {};

146 
vútuÆ
 
Köd
 
gëKöd
() const = 0;

150 
	g°d
::
	tsh¨ed_±r
<
	tEx¥
> 
	tEx¥På
;

153 ˛as†
	cUDefEx¥
 : 
public
 
Ex¥
 {

154 
¥Ÿe˘ed
:

155 *
O
;

157 
	gpublic
:

158 
UDefEx¥
(*
obj
Ë:
Ex¥
() {

159 
O
 = 
obj
;

163 
UDefEx¥
(*
obj
, 
sz
, 
off
Ë: 
Ex¥
(sz, off) {

164 
	gO
 = 
obj
;

167 
¥öt
 ();

170 
Köd
 
gëKöd
(Ëc⁄° {  
	gUNDEFINED
; }

171 
	gVMSèã
::
SYMemObje˘
 * 
gëObje˘
(Ë{  (
VMSèã
::SYMemObje˘*Ë
O
; }

174 ˛as†
	cC⁄°Ex¥
 : 
public
 
Ex¥
 {

175 
¥Ÿe˘ed
:

176 
uöt64_t
 
V
;

178 
	gpublic
:

179 
C⁄°Ex¥
(
uöt64_t
 
vÆue
) {

180 
V
 = 
vÆue
;

183 
¥öt
 () ;

186 
Köd
 
gëKöd
(Ëc⁄° {  
	gC⁄°
; }

187 
uöt64_t
 
gëVÆue
(Ë{  
	gV
; }

190 ˛as†
	cBöEx¥
 : 
public
 
Ex¥
 {

192 
public
:

193 
Ex¥På
 
R
, 
	gL
;

197 
Ex¥På
 
gëR
(Ë{ 
	gL
;}

198 
Ex¥På
 
gëL
(Ë{ 
	gR
;}

199 
BöEx¥
(
Ex¥På
 
r
, Ex¥På 
l
Ë: 
R
‘), 
L
(l) {}

200 
BöEx¥
(
Ex¥På
 
r
, Ex¥På 
l
, 
sz
, 
off
Ë: 
Ex¥
(sz, off), 
R
‘), 
L
(l) {}

202 
	gpublic
:

203 
¥öt
 () ;

206 
Köd
 
gëKöd
(Ëc⁄° {  
	gBö
; }

207 
Ex¥På
 
gëEx¥PåR
(Ë{  
	gR
; }

208 
Ex¥På
 
gëEx¥PåL
(Ë{  
	gL
; }

211 ˛as†
	cAddEx¥
 : 
public
 
BöEx¥
 {

212 
public
:

213 
AddEx¥
(
Ex¥På
 
r
, Ex¥På 
l
Ë: 
BöEx¥
‘,ÜË{
	gex¥ID
 = 
EXPR_Add
;}

214 
AddEx¥
(
Ex¥På
 
r
, Ex¥På 
l
, 
sz
, 
off
Ë: 
BöEx¥
‘,Ü, sz, offË{
	gex¥ID
 = 
EXPR_Add
;}

217 
Köd
 
gëKöd
(Ëc⁄° {  
	gAdd
; }

218 
Ex¥På
 
gëEx¥PåR
(Ë{  
	gR
; }

219 
Ex¥På
 
gëEx¥PåL
(Ë{  
	gL
; }

222 ˛as†
	cSubEx¥
 : 
public
 
BöEx¥
 {

223 
public
:

224 
SubEx¥
(
Ex¥På
 
r
, Ex¥På 
l
Ë: 
BöEx¥
‘,ÜË{
	gex¥ID
 = 
EXPR_Sub
;}

225 
SubEx¥
(
Ex¥På
 
r
, Ex¥På 
l
, 
sz
, 
off
Ë: 
BöEx¥
‘,Ü, sz, offË{
	gex¥ID
 = 
EXPR_Sub
;}

228 
Köd
 
gëKöd
(Ëc⁄° {  
	gSub
; }

229 
Ex¥På
 
gëEx¥PåR
(Ë{  
	gR
; }

230 
Ex¥På
 
gëEx¥PåL
(Ë{  
	gL
; }

233 ˛as†
	cMulEx¥
 : 
public
 
BöEx¥
 {

234 
public
:

236 
MulEx¥
(
Ex¥På
 
r
, Ex¥På 
l
Ë: 
BöEx¥
‘,ÜË{
	gex¥ID
 = 
EXPR_Mul
;}

237 
MulEx¥
(
Ex¥På
 
r
, Ex¥På 
l
, 
sz
, 
off
Ë: 
BöEx¥
‘,Ü, sz, offË{
	gex¥ID
 = 
EXPR_Mul
;}

240 
Köd
 
gëKöd
(Ëc⁄° {  
	gMul
; }

241 
Ex¥På
 
gëEx¥PåR
(Ë{  
	gR
; }

242 
Ex¥På
 
gëEx¥PåL
(Ë{  
	gL
; }

245 ˛as†
	cDivEx¥
 : 
public
 
BöEx¥
 {

246 
public
:

247 
DivEx¥
(
Ex¥På
 
r
, Ex¥På 
l
Ë: 
BöEx¥
‘,ÜË{
	gex¥ID
 = 
EXPR_UDiv
;}

248 
DivEx¥
(
Ex¥På
 
r
, Ex¥På 
l
, 
sz
, 
off
Ë: 
BöEx¥
‘,Ü, sz, offË{
	gex¥ID
 = 
EXPR_UDiv
;}

251 
Köd
 
gëKöd
(Ëc⁄° {  
	gUDiv
; }

252 
Ex¥På
 
gëEx¥PåR
(Ë{  
	gR
; }

253 
Ex¥På
 
gëEx¥PåL
(Ë{  
	gL
; }

256 ˛as†
	cAndEx¥
 : 
public
 
BöEx¥
 {

257 
public
:

258 
AndEx¥
(
Ex¥På
 
r
, Ex¥På 
l
Ë: 
BöEx¥
‘,ÜË{
	gex¥ID
 = 
EXPR_And
;}

259 
AndEx¥
(
Ex¥På
 
r
, Ex¥På 
l
, 
sz
, 
off
Ë: 
BöEx¥
‘,Ü, sz, offË{
	gex¥ID
 = 
EXPR_And
;}

262 
Köd
 
gëKöd
(Ëc⁄° {  
	gAnd
; }

263 
Ex¥På
 
gëEx¥PåR
(Ë{  
	gR
; }

264 
Ex¥På
 
gëEx¥PåL
(Ë{  
	gL
; }

267 ˛as†
	cOrEx¥
 : 
public
 
BöEx¥
 {

268 
public
:

269 
OrEx¥
(
Ex¥På
 
r
, Ex¥På 
l
Ë: 
BöEx¥
‘,ÜË{
	gex¥ID
 = 
EXPR_Or
;}

270 
OrEx¥
(
Ex¥På
 
r
, Ex¥På 
l
, 
sz
, 
off
Ë: 
BöEx¥
‘,Ü, sz, offË{
	gex¥ID
 = 
EXPR_Or
;}

273 
Köd
 
gëKöd
(Ëc⁄° {  
	gOr
; }

274 
Ex¥På
 
gëEx¥PåR
(Ë{  
	gR
; }

275 
Ex¥På
 
gëEx¥PåL
(Ë{  
	gL
; }

278 ˛as†
	cX‹Ex¥
 : 
public
 
BöEx¥
 {

279 
public
:

280 
X‹Ex¥
(
Ex¥På
 
r
, Ex¥På 
l
Ë: 
BöEx¥
‘,ÜË{
	gex¥ID
 = 
EXPR_X‹
;}

281 
X‹Ex¥
(
Ex¥På
 
r
, Ex¥På 
l
, 
sz
, 
off
Ë: 
BöEx¥
‘,Ü, sz, offË{
	gex¥ID
 = 
EXPR_X‹
;}

284 
Köd
 
gëKöd
(Ëc⁄° {  
	gX‹
; }

285 
Ex¥På
 
gëEx¥PåR
(Ë{  
	gR
; }

286 
Ex¥På
 
gëEx¥PåL
(Ë{  
	gL
; }

289 ˛as†
	cShl_SÆEx¥
 : 
public
 
BöEx¥
 {

290 
public
:

291 
Shl_SÆEx¥
(
Ex¥På
 
r
, Ex¥På 
l
Ë: 
BöEx¥
‘,ÜË{
	gex¥ID
 = 
EXPR_Shl
;}

292 
Shl_SÆEx¥
(
Ex¥På
 
r
, Ex¥På 
l
, 
sz
, 
off
Ë: 
BöEx¥
‘,Ü, sz, offË{
	gex¥ID
 = 
EXPR_Shl
;}

295 
Köd
 
gëKöd
(Ëc⁄° {  
	gShl
; }

296 
Ex¥På
 
gëEx¥PåR
(Ë{  
	gR
; }

297 
Ex¥På
 
gëEx¥PåL
(Ë{  
	gL
; }

299 ˛as†
	cShrEx¥
 : 
public
 
BöEx¥
 {

300 
public
:

301 
ShrEx¥
(
Ex¥På
 
r
, Ex¥På 
l
Ë: 
BöEx¥
‘,ÜË{
	gex¥ID
 = 
EXPR_LShr
;}

302 
ShrEx¥
(
Ex¥På
 
r
, Ex¥På 
l
, 
sz
, 
off
Ë: 
BöEx¥
‘,Ü, sz, offË{
	gex¥ID
 = 
EXPR_LShr
;}

305 
Köd
 
gëKöd
(Ëc⁄° {  
	gLShr
; }

306 
Ex¥På
 
gëEx¥PåR
(Ë{  
	gR
; }

307 
Ex¥På
 
gëEx¥PåL
(Ë{  
	gL
; }

310 ˛as†
	cS¨Ex¥
 : 
public
 
BöEx¥
 {

311 
public
:

312 
S¨Ex¥
(
Ex¥På
 
r
, Ex¥På 
l
Ë: 
BöEx¥
‘,ÜË{
	gex¥ID
 = 
EXPR_AShr
;}

313 
S¨Ex¥
(
Ex¥På
 
r
, Ex¥På 
l
, 
sz
, 
off
Ë: 
BöEx¥
‘,Ü, sz, offË{
	gex¥ID
 = 
EXPR_AShr
;}

316 
Köd
 
gëKöd
(Ëc⁄° {  
	gAShr
; }

317 
Ex¥På
 
gëEx¥PåR
(Ë{  
	gR
; }

318 
Ex¥På
 
gëEx¥PåL
(Ë{  
	gL
; }

321 ˛as†
	ciDivEx¥
 : 
public
 
BöEx¥
 {

322 
public
:

324 
iDivEx¥
(
Ex¥På
 
r
, Ex¥På 
l
Ë: 
BöEx¥
‘,ÜË{
	gex¥ID
 = 
EXPR_SDiv
;}

325 
iDivEx¥
(
Ex¥På
 
r
, Ex¥På 
l
, 
sz
, 
off
Ë: 
BöEx¥
‘,Ü, sz, offË{
	gex¥ID
 = 
EXPR_SDiv
;}

328 
Köd
 
gëKöd
(Ëc⁄° {  
	gSDiv
; }

329 
Ex¥På
 
gëEx¥PåR
(Ë{  
	gR
; }

330 
Ex¥På
 
gëEx¥PåL
(Ë{  
	gL
; }

333 ˛as†
	ciRemEx¥
 : 
public
 
BöEx¥
 {

334 
public
:

335 
iRemEx¥
(
Ex¥På
 
r
, Ex¥På 
l
Ë: 
BöEx¥
‘,ÜË{
	gex¥ID
 = 
EXPR_SRem
;}

336 
iRemEx¥
(
Ex¥På
 
r
, Ex¥På 
l
, 
sz
, 
off
Ë: 
BöEx¥
‘,Ü, sz, offË{
	gex¥ID
 = 
EXPR_SRem
;}

339 
Köd
 
gëKöd
(Ëc⁄° {  
	gSRem
; }

340 
Ex¥På
 
gëEx¥PåR
(Ë{  
	gR
; }

341 
Ex¥På
 
gëEx¥PåL
(Ë{  
	gL
; }

344 ˛as†
	cUryEx¥
 : 
public
 
Ex¥
 {

345 
¥Ÿe˘ed
:

346 
Ex¥På
 
E
;

347 
UryEx¥
(
Ex¥På
 
e
Ë: 
E
(e) {}

348 
UryEx¥
(
Ex¥På
 
e
, 
sz
, 
off
Ë: 
Ex¥
(sz, off), 
E
(e) {}

350 
	gpublic
:

351 
vútuÆ
 
¥öt
 () ;

354 
Köd
 
gëKöd
(Ëc⁄° {  
	gUry
; }

355 
Ex¥På
 
gëEx¥På
(Ë{  
	gE
; }

359 ˛as†
	cNegEx¥
 : 
public
 
UryEx¥
 {

360 
public
:

361 
NegEx¥
(
Ex¥På
 
e
Ë: 
UryEx¥
”Ë{
ex¥ID
 = 
EXPR_Neg
;}

362 
NegEx¥
(
Ex¥På
 
e
, 
sz
, 
off
Ë: 
UryEx¥
”, sz, offË{
	gex¥ID
 = 
EXPR_Neg
;}

365 
Köd
 
gëKöd
(Ëc⁄° {  
	gNeg
; }

366 
Ex¥På
 
gëEx¥På
(Ë{  
	gE
; }

369 ˛as†
	cNŸEx¥
 : 
public
 
UryEx¥
 {

370 
public
:

371 
NŸEx¥
(
Ex¥På
 
e
Ë: 
UryEx¥
”Ë{
ex¥ID
 = 
EXPR_NŸ
;}

372 
NŸEx¥
(
Ex¥På
 
e
, 
sz
, 
off
Ë: 
UryEx¥
”, sz, offË{
	gex¥ID
 = 
EXPR_NŸ
;}

375 
Köd
 
gëKöd
(Ëc⁄° {  
	gNŸ
; }

376 
Ex¥På
 
gëEx¥På
(Ë{  
	gE
; }

379 ˛as†
	cLNŸEx¥
 : 
public
 
UryEx¥
 {

380 
public
:

381 
LNŸEx¥
(
Ex¥På
 
e
Ë: 
UryEx¥
”Ë{
ex¥ID
 = 
EXPR_LNŸ
;}

382 
LNŸEx¥
(
Ex¥På
 
e
, 
sz
, 
off
Ë: 
UryEx¥
”, sz, offË{
	gex¥ID
 = 
EXPR_LNŸ
;}

385 
Köd
 
gëKöd
(Ëc⁄° {  
	gLNŸ
; }

386 
Ex¥På
 
gëEx¥På
(Ë{  
	gE
; }

389 ˛as†
	cSignExtEx¥
 : 
public
 
UryEx¥
 {

390 
public
:

391 
SignExtEx¥
(
Ex¥På
 
e
Ë: 
UryEx¥
”Ë{
ex¥ID
 = 
EXPR_SignEXT
;}

392 
SignExtEx¥
(
Ex¥På
 
e
, 
sz
, 
off
Ë: 
UryEx¥
”, sz, offË{
	gex¥ID
 = 
EXPR_SignEXT
;}

395 
Köd
 
gëKöd
(Ëc⁄° {  
	gSign
; }

396 
Ex¥På
 
gëEx¥På
(Ë{  
	gE
; }

399 ˛as†
	cZîoExtEx¥
 : 
public
 
UryEx¥
 {

400 
public
:

401 
ZîoExtEx¥
(
Ex¥På
 
e
Ë: 
UryEx¥
”Ë{
ex¥ID
 = 
EXPR_ZîoEXT
;}

402 
ZîoExtEx¥
(
Ex¥På
 
e
, 
sz
, 
off
Ë: 
UryEx¥
”, sz, offË{
	gex¥ID
 = 
EXPR_ZîoEXT
;}

405 
Köd
 
gëKöd
(Ëc⁄° {  
	gZîoEXT
; }

406 
Ex¥På
 
gëEx¥På
(Ë{  
	gE
; }

409 ˛as†
	cEquÆEx¥
 : 
public
 
UryEx¥
 {

410 
public
:

411 
EquÆEx¥
(
Ex¥På
 
e
Ë: 
UryEx¥
”Ë{
ex¥ID
 = 
EXPR_EquÆ
;}

412 
EquÆEx¥
(
Ex¥På
 
e
, 
sz
, 
off
Ë: 
UryEx¥
”, sz, offË{
	gex¥ID
 = 
EXPR_EquÆ
;}

415 
Köd
 
gëKöd
(Ëc⁄° {  
	gEquÆ
; }

416 
Ex¥På
 
gëEx¥På
(Ë{ 
	gE
; }

419 ˛as†
	cDi°ö˘Ex¥
 : 
public
 
UryEx¥
 {

420 
public
:

421 
Di°ö˘Ex¥
(
Ex¥På
 
e
Ë: 
UryEx¥
”Ë{
ex¥ID
 = 
EXPR_Di°ö˘
;}

422 
Di°ö˘Ex¥
(
Ex¥På
 
e
, 
sz
, 
off
Ë: 
UryEx¥
”, sz, offË{
	gex¥ID
 = 
EXPR_Di°ö˘
;}

425 
Köd
 
gëKöd
(Ëc⁄° {  
	gDi°ö˘
; }

426 
Ex¥På
 
gëEx¥På
(Ë{  
	gE
; }

429 ˛as†
	cU…Ex¥
 : 
public
 
BöEx¥
 {

430 
public
:

431 
U…Ex¥
(
Ex¥På
 
r
, Ex¥På 
l
Ë: 
BöEx¥
‘,ÜË{
	gex¥ID
 = 
EXPR_U…
;}

432 
U…Ex¥
(
Ex¥På
 
r
, Ex¥På 
l
, 
sz
, 
off
Ë: 
BöEx¥
‘,Ü, sz, offË{
	gex¥ID
 = 
EXPR_U…
;}

435 
Köd
 
gëKöd
(Ëc⁄° {  
	gU…
; }

436 
Ex¥På
 
gëEx¥PåR
(Ë{  
	gR
; }

437 
Ex¥På
 
gëEx¥PåL
(Ë{  
	gL
; }

440 ˛as†
	cUÀEx¥
 : 
public
 
BöEx¥
 {

441 
public
:

442 
UÀEx¥
(
Ex¥På
 
r
, Ex¥På 
l
Ë: 
BöEx¥
‘,ÜË{
	gex¥ID
 = 
EXPR_UÀ
;}

443 
UÀEx¥
(
Ex¥På
 
r
, Ex¥På 
l
, 
sz
, 
off
Ë: 
BöEx¥
‘,Ü, sz, offË{
	gex¥ID
 = 
EXPR_UÀ
;}

446 
Köd
 
gëKöd
(Ëc⁄° {  
	gUÀ
; }

447 
Ex¥På
 
gëEx¥PåR
(Ë{  
	gR
; }

448 
Ex¥På
 
gëEx¥PåL
(Ë{  
	gL
; }

451 ˛as†
	cUgtEx¥
 : 
public
 
BöEx¥
 {

452 
public
:

453 
UgtEx¥
(
Ex¥På
 
r
, Ex¥På 
l
Ë: 
BöEx¥
‘,ÜË{
	gex¥ID
 = 
EXPR_Ugt
;}

454 
UgtEx¥
(
Ex¥På
 
r
, Ex¥På 
l
, 
sz
, 
off
Ë: 
BöEx¥
‘,Ü, sz, offË{
	gex¥ID
 = 
EXPR_Ugt
;}

457 
Köd
 
gëKöd
(Ëc⁄° {  
	gUgt
; }

458 
Ex¥På
 
gëEx¥PåR
(Ë{  
	gR
; }

459 
Ex¥På
 
gëEx¥PåL
(Ë{  
	gL
; }

462 ˛as†
	cUgeEx¥
 : 
public
 
BöEx¥
 {

463 
public
:

464 
UgeEx¥
(
Ex¥På
 
r
, Ex¥På 
l
Ë: 
BöEx¥
‘,ÜË{
	gex¥ID
 = 
EXPR_Uge
;}

465 
UgeEx¥
(
Ex¥På
 
r
, Ex¥På 
l
, 
sz
, 
off
Ë: 
BöEx¥
‘,Ü, sz, offË{
	gex¥ID
 = 
EXPR_Uge
;}

468 
Köd
 
gëKöd
(Ëc⁄° {  
	gUge
; }

469 
Ex¥På
 
gëEx¥PåR
(Ë{  
	gR
; }

470 
Ex¥På
 
gëEx¥PåL
(Ë{  
	gL
; }

473 ˛as†
	cS…Ex¥
 : 
public
 
BöEx¥
 {

474 
public
:

475 
S…Ex¥
(
Ex¥På
 
r
, Ex¥På 
l
Ë: 
BöEx¥
‘,ÜË{
	gex¥ID
 = 
EXPR_S…
;}

476 
S…Ex¥
(
Ex¥På
 
r
, Ex¥På 
l
, 
sz
, 
off
Ë: 
BöEx¥
‘,Ü, sz, offË{
	gex¥ID
 = 
EXPR_S…
;}

479 
Köd
 
gëKöd
(Ëc⁄° {  
	gS…
; }

480 
Ex¥På
 
gëEx¥PåR
(Ë{  
	gR
; }

481 
Ex¥På
 
gëEx¥PåL
(Ë{  
	gL
; }

484 ˛as†
	cSÀEx¥
 : 
public
 
BöEx¥
 {

485 
public
:

486 
SÀEx¥
(
Ex¥På
 
r
, Ex¥På 
l
Ë: 
BöEx¥
‘,ÜË{
	gex¥ID
 = 
EXPR_SÀ
;}

487 
SÀEx¥
(
Ex¥På
 
r
, Ex¥På 
l
, 
sz
, 
off
Ë: 
BöEx¥
‘,Ü, sz, offË{
	gex¥ID
 = 
EXPR_SÀ
;}

490 
Köd
 
gëKöd
(Ëc⁄° {  
	gSÀ
; }

491 
Ex¥På
 
gëEx¥PåR
(Ë{  
	gR
; }

492 
Ex¥På
 
gëEx¥PåL
(Ë{  
	gL
; }

495 ˛as†
	cSgtEx¥
 : 
public
 
BöEx¥
 {

496 
public
:

497 
SgtEx¥
(
Ex¥På
 
r
, Ex¥På 
l
Ë: 
BöEx¥
‘,ÜË{
	gex¥ID
 = 
EXPR_Sgt
;}

498 
SgtEx¥
(
Ex¥På
 
r
, Ex¥På 
l
, 
sz
, 
off
Ë: 
BöEx¥
‘,Ü, sz, offË{
	gex¥ID
 = 
EXPR_Sgt
;}

501 
Köd
 
gëKöd
(Ëc⁄° {  
	gSgt
; }

502 
Ex¥På
 
gëEx¥PåR
(Ë{  
	gR
; }

503 
Ex¥På
 
gëEx¥PåL
(Ë{  
	gL
; }

506 ˛as†
	cSgeEx¥
 : 
public
 
BöEx¥
 {

507 
public
:

508 
SgeEx¥
(
Ex¥På
 
r
, Ex¥På 
l
Ë: 
BöEx¥
‘,ÜË{
	gex¥ID
 = 
EXPR_Sge
;}

509 
SgeEx¥
(
Ex¥På
 
r
, Ex¥På 
l
, 
sz
, 
off
Ë: 
BöEx¥
‘,Ü, sz, offË{
	gex¥ID
 = 
EXPR_Sge
;}

512 
Köd
 
gëKöd
(Ëc⁄° {  
	gSge
; }

513 
Ex¥På
 
gëEx¥PåR
(Ë{  
	gR
; }

514 
Ex¥På
 
gëEx¥PåL
(Ë{  
	gL
; }

517 ˛as†
	cSignEx¥
 : 
public
 
UryEx¥
 {

518 
public
:

519 
SignEx¥
(
Ex¥På
 
e
Ë: 
UryEx¥
”Ë{
ex¥ID
 = 
EXPR_Sign
;}

520 
SignEx¥
(
Ex¥På
 
e
, 
sz
, 
off
Ë: 
UryEx¥
”, sz, offË{
	gex¥ID
 = 
EXPR_Sign
;}

523 
Köd
 
gëKöd
(Ëc⁄° {  
	gSign
; }

524 
Ex¥På
 
gëEx¥På
(Ë{  
	gE
; }

527 ˛as†
	cNoSignEx¥
 : 
public
 
UryEx¥
 {

528 
public
:

529 
NoSignEx¥
(
Ex¥På
 
e
Ë: 
UryEx¥
”Ë{
ex¥ID
 = 
EXPR_NoSign
;}

530 
NoSignEx¥
(
Ex¥På
 
e
, 
sz
, 
off
Ë: 
UryEx¥
”, sz, offË{
	gex¥ID
 = 
EXPR_NoSign
;}

533 
Köd
 
gëKöd
(Ëc⁄° {  
	gNoSign
; }

534 
Ex¥På
 
gëEx¥På
(Ë{  
	gE
; }

536 ˛as†
	cOvîÊowEx¥
 : 
public
 
UryEx¥
 {

537 
public
:

538 
OvîÊowEx¥
(
Ex¥På
 
e
Ë: 
UryEx¥
”Ë{
ex¥ID
 = 
EXPR_OvîÊow
;}

539 
OvîÊowEx¥
(
Ex¥På
 
e
, 
sz
, 
off
Ë: 
UryEx¥
”, sz, offË{
	gex¥ID
 = 
EXPR_OvîÊow
;}

542 
Köd
 
gëKöd
(Ëc⁄° {  
	gOvîÊow
;}

543 
Ex¥På
 
gëEx¥På
(Ë{  
	gE
; }

545 ˛as†
	cNoOvîÊowEx¥
 : 
public
 
UryEx¥
 {

546 
public
:

547 
NoOvîÊowEx¥
(
Ex¥På
 
e
Ë: 
UryEx¥
”Ë{
ex¥ID
 = 
EXPR_NoOvîÊow
;}

548 
NoOvîÊowEx¥
(
Ex¥På
 
e
, 
sz
, 
off
Ë: 
UryEx¥
”, sz, offË{
	gex¥ID
 = 
EXPR_NoOvîÊow
;}

551 
Köd
 
gëKöd
(Ëc⁄° {  
	gNoOvîÊow
; }

552 
Ex¥På
 
gëEx¥På
(Ë{  
	gE
; }

555 ˛as†
	cTriEx¥
 : 
public
 
Ex¥
 {

556 
¥Ÿe˘ed
:

557 
Ex¥På
 
R
, 
	gM
, 
	gL
;

559 
TriEx¥
(
Ex¥På
 
r
, Ex¥På 
m
, Ex¥På 
l
Ë: 
R
‘), 
M
(m), 
L
(l) {}

560 
TriEx¥
(
Ex¥På
 
r
, Ex¥På 
m
, Ex¥På 
l
, 
sz
, 
off
Ë: 
Ex¥
(sz, off), 
R
‘), 
M
(m), 
L
(l) {}

562 
¥öt
 () ;

565 
Köd
 
gëKöd
(Ëc⁄° {  
	gTri
; }

566 
Ex¥På
 
gëEx¥PåR
(Ë{  
	gR
; }

567 
Ex¥På
 
gëEx¥PåM
(Ë{  
	gM
; }

568 
Ex¥På
 
gëEx¥PåL
(Ë{  
	gL
; }

571 ˛as†
	cShrdEx¥
 :
public
 
TriEx¥
 {

572 
public
:

573 
ShrdEx¥
(
Ex¥På
 
r
, Ex¥På 
m
, Ex¥På 
l
Ë:
TriEx¥
‘, m,ÜË{
	gex¥ID
 = 
EXPR_Shrd
;}

574 
ShrdEx¥
(
Ex¥På
 
r
, Ex¥På 
m
, Ex¥På 
l
, 
sz
, 
off
Ë: 
TriEx¥
‘, m,Ü, sz, offË{
	gex¥ID
 = 
EXPR_Shrd
;}

577 
Köd
 
gëKöd
(Ëc⁄° {  
	gShrd
; }

578 
Ex¥På
 
gëEx¥PåR
(Ë{  
	gR
; }

579 
Ex¥På
 
gëEx¥PåM
(Ë{  
	gM
; }

580 
Ex¥På
 
gëEx¥PåL
(Ë{  
	gL
; }

583 ˛as†
	cComböeEx¥
 :
public
 
BöEx¥
 {

584 
public
:

585 
rsz
, 
	glsz
 ;

587 
ComböeEx¥
(
Ex¥På
 
r
, Ex¥På 
l
, 
rsize
, 
lsize
Ë:
BöEx¥
‘,ÜË{
	gex¥ID
 = 
EXPR_Comböe
;
	grsz
Ùsize; 
	glsz
=lsize;}

588 
ComböeEx¥
(
Ex¥På
 
r
, Ex¥På 
l
, 
rsize
, 
lsize
, 
sz
, 
off
Ë: 
BöEx¥
‘,Ü, sz, offË{
	gex¥ID
 = 
EXPR_Comböe
;
	grsz
Ùsize; 
	glsz
=lsize;}

591 
Köd
 
gëKöd
(Ëc⁄° {  
	gComböe
; }

592 
Ex¥På
 
gëEx¥PåR
(Ë{  
	gR
; }

593 
Ex¥På
 
gëEx¥PåL
(Ë{  
	gL
; }

595 ˛as†
	cExåa˘Ex¥
 : 
public
 
UryEx¥
 {

596 
public
:

597 
s
, 
	ge
;

598 
Exåa˘Ex¥
(
Ex¥På
 
ex¥
, 
°¨t
, 
íd
Ë: 
UryEx¥
”x¥Ë{
ex¥ID
 = 
EXPR_Exåa˘
;
	gs
=°¨t; 
	ge
=end;}

599 
Exåa˘Ex¥
(
Ex¥På
 
ex¥
, 
°¨t
, 
íd
, 
sz
, 
off
Ë: 
UryEx¥
”x¥, sz, offË{
	gex¥ID
 = 
EXPR_Exåa˘
;
	gs
=°¨t; 
	ge
=end;}

601 
vútuÆ
 
¥öt
 () ;

604 
Köd
 
gëKöd
(Ëc⁄° {  
	gExåa˘
; }

605 
Ex¥På
 
gëEx¥På
(Ë{ 
	gE
; }

606 
gëSèπ
(){  
	gs
; }

607 
gëEnd
(){  
	ge
; }

	@MemState.h

1 #i‚de‡
_SYMINFO_DB_H__


2 
	#_SYMINFO_DB_H__


	)

4 
	~<löux/ty≥s.h
>

6 
	~<m≠
>

8 
	~"CodeObje˘.h
"

10 
	~"In°ru˘i⁄Decodî.h
"

11 
	~"deföes.h
"

15 
uöt32_t
 
	tSYMEM_CHUNK_TY
;

16 
	#SYMEM_BLOCK_SIZE
 32UL

	)

17 
	#SYMEM_BLOCK_MASK
 (~(
SYMEM_BLOCK_SIZE
 - 1))

	)

22 
	sSYMemChunk
 {

23 
SYMEM_CHUNK_TY
 
	mbôm≠
;

24 
SYMEM_CHUNK_TY
 
	mobjmask
;

25 
SYMemChunk
 *
	ml
, *
	mr
;

27 
SYMemChunk
() {

28 
	mbôm≠
 = 0;

29 
	mobjmask
 = 0;

30 
	ml
 = 
r
 = 
NULL
;

32 ~
SYMemChunk
() {

33 i‡(
	ml
)

34 
	ml
->
	mr
 = 
NULL
;

35 i‡(
	mr
)

36 
	mr
->
	ml
 = 
NULL
;

39 
	g°d
::
	tsh¨ed_±r
<
	tSYMemChunk
> 
	tSYMemChunkPå
;

41 ˛as†
	cSYMemBôm≠
 {

42 
	m¥iv©e
:

44 
°d
::
m≠
<
ul⁄g
, 
	mSYMemChunkPå
> 
	mm_SYMemBôm≠
;

46 
	mpublic
:

47 
	$SYMemBôm≠
(Ë: 
	$m_SYMemBôm≠
() {}

48 ~
	$SYMemBôm≠
(Ë{ 
m_SYMemBôm≠
.
	`˛ór
(); 
	}
}

51 
SYMemChunk
 *
m¨kSYMemBôm≠
(
ul⁄g
 
addr
, ul⁄g 
size
);

52 
unm¨kSYMemBôm≠
(
ul⁄g
 
addr
, ul⁄g 
size
);

53 
boﬁ
 
ã°SYMemBôm≠
(
ul⁄g
 
addr
, ul⁄g 
size
);

56 
SYMemChunk
 *
födSYMemChunk
(
ul⁄g
 
addr
);

58 
	g¥iv©e
:

59 
SYMemChunk
 *
_maskSYMemBôm≠
(
ul⁄g
 
Æig√d_addr
, ul⁄g 
ˇve_size
, ul⁄g 
symbﬁ_size
);

60 
_unmaskSYMemBôm≠
(
ul⁄g
 
Æig√d_addr
, ul⁄g 
ˇve_size
, ul⁄g 
symbﬁ_size
);

61 
boﬁ
 
_ã°SYMemBôm≠
(
ul⁄g
 
Æig√d_addr
, ul⁄g 
ˇve_size
, ul⁄g 
symbﬁ_size
);

64 
	sSymCñlS∂ôî
 {

65 
boﬁ
 
	mbSym
 ;

66 
boﬁ
 
	mbVÆid
 ;

67 
ul⁄g
 
	maddr
 ;

68 
KVEx¥På
 
	msymvÆ
 ;

70 
SymCñlS∂ôî
 () {

71 
	mbSym
 = 
Ál£
 ;

72 
	mbVÆid
 = 
Ál£
 ;

73 
	msymvÆ
 = 
NULL
 ;

76 
	#CELL_FULL
 6

	)

77 
	#CELL_8L
 4

	)

78 
	#CELL_8H
 5

	)

79 
	#CELL_4_0
 0

	)

80 
	#CELL_4_1
 1

	)

81 
	#CELL_4_2
 2

	)

82 
	#CELL_4_3
 3

	)

83 
˛ass
 
	gSYMemSèã
 ;

85 
	sSYMemCñlVÆue
 {

86 
ul⁄g
 
	maddr
;

87 
ul⁄g
 
	msize
;

88 
KVEx¥På
 
	me
;

89 
SymCñlS∂ôî
 
	mm_CñlS∂ôî
[7] ;

90 
SYMemSèã
 *
	mm_Mem
 ;

92 
Off£tSizeToIndex
(
ul⁄g
 
addr
, 
size
, ul⁄g &
˚Œaddr
, &
˚Œsize
) ;

93 
boﬁ
 
ªadRóº™ge
 (
ul⁄g
 
addr
, 
size
, 
KVEx¥På
 &
e
) ;

94 
boﬁ
 
wrôeRóº™ge
 (
ul⁄g
 
addr
, 
siz
, 
KVEx¥På
 
e
) ;

96 
boﬁ
 
S∂ô
(
idx
, 
size
) ;

97 
boﬁ
 
övÆidTªe
 (
idx
) ;

98 
boﬁ
 
övÆidP¨ít
 (
idx
) ;

99 
boﬁ
 
övÆidChûdªn
 (
idx
) ;

101 
boﬁ
 
comböeChûdªn
(
idx
) ;

102 
boﬁ
 
comböeChûdªn
(
CELL_p
, 
CELL_ch
, 
CELL_˛
, 
chûd_SZ
) ;

104 
boﬁ
 
£tChûdSymbﬁSèã
(
idx
, boﬁ 
bsym
) ;

106 
boﬁ
 
£tP¨ítSymbﬁSèã
(
idx
, boﬁ 
bsym
) ;

108 
boﬁ
 
TryC⁄¸ëeP¨ítOf
 (
idx
) ;

110 
boﬁ
 
Pröt
 (
idx
) ;

112 
SYMemCñlVÆue
(
ul⁄g
 
a
, ul⁄g 
s
, 
KVEx¥På
 
E
, 
SYMemSèã
* 
mem
) {

113 
	maddr
=
a
;

114 
	msize
=
s
;

115 
	me
=
E
;

116 
	mm_Mem
 = 
mem
 ;

117 
	mm_CñlS∂ôî
[
CELL_FULL
].
	maddr
 = 
m_CñlS∂ôî
[
CELL_8L
].
addr
 = m_CñlS∂ôî[
CELL_4_0
].addr =áddr&(~0xf) ;

118 
	mm_CñlS∂ôî
[
CELL_8H
].
	maddr
 = 
m_CñlS∂ôî
[
CELL_4_2
].
addr
 = (addr&(~0xf)) + 8;

119 
	mm_CñlS∂ôî
[
CELL_4_1
].
	maddr
 = (
addr
&(~0xf)) + 4 ;

120 
	mm_CñlS∂ôî
[
CELL_4_3
].
	maddr
 = (
addr
&(~0xf)) + 12 ;

124 
	g°d
::
	tsh¨ed_±r
<
	tSYMemCñlVÆue
> 
	tSYMemCñlVÆuePå
;

127 ˛as†
	cSYMemSèã
 {

135 
	m¥iv©e
:

137 
°d
::
m≠
<
ul⁄g
, 
	mSYMemCñlVÆuePå
> 
	mm_SYMemCñls
;

139 
SYMemBôm≠
 
	mm_Bôm≠
;

141 
	mpublic
:

142 
	$SYMemSèã
(Ë: 
	`m_SYMemCñls
(), 
	$m_Bôm≠
() {}

143 ~
	$SYMemSèã
(Ë{ 
m_SYMemCñls
.
	`˛ór
(); 
	}
}

145 
boﬁ
 
isSYMem‹yCñl
(
ul⁄g
 
addr
, ul⁄g 
size
);

146 
boﬁ
 
wrôeMem‹yCñl
(
MemVÆue
 &
v
);

147 
boﬁ
 
ªadMem‹yCñl
(
MemVÆue
 &
v
);

149 
	g¥iv©e
:

150 
boﬁ
 
wrôeSymbﬁicVÆue
(
ul⁄g
 
addr
, ul⁄g 
size
, 
KVEx¥På
 &
e
);

151 
boﬁ
 
ªadSymbﬁicVÆue
(
ul⁄g
 
addr
, ul⁄g 
size
, 
KVEx¥På
 &
e
);

153 
boﬁ
 
wrôeC⁄¸ëeVÆue
(
ul⁄g
 
addr
, ul⁄g 
size
, 
v
);

154 
	gpublic
:

155 
boﬁ
 
ªadC⁄¸ëeVÆue
(
ul⁄g
 
addr
, ul⁄g 
size
, &
v
);

	@VMState.h

1 #i‚de‡
_VMSTATE__H__


2 
	#_VMSTATE__H__


	)

4 
	~<löux/ty≥s.h
>

6 
	~<m≠
>

8 
	~"CodeObje˘.h
"

9 
	~"CPUSèã.h
"

10 
	~"In°ru˘i⁄Decodî.h
"

11 
	~"deföes.h
"

13 
˛ass
 
	gSYCPUSèã
;

14 
˛ass
 
	gSYMemSèã
;

15 
˛ass
 
	gEFœgsM™agî
 ;

16 
˛ass
 
	gCPU_EFœgs
 ;

19 ˛as†
	cVMSèã
 {

20 
	mpublic
:

22 
	sSYMemObje˘
 {

23 
°d
::
°rög
 
«me
;

24 
ul⁄g
 
	maddr
;

25 
ul⁄g
 
	msize
;

26 
KVEx¥På
 
	mex¥
;

29 
öt64_t
 
	mi64
;

30 
öt32_t
 
	mi32
;

31 
öt16_t
 
	mi16
;

32 
öt8_t
 
	mi8
;

33 
uöt64_t
 
	mu64
;

34 
uöt32_t
 
	mu32
;

35 
uöt16_t
 
	mu16
;

36 
uöt8_t
 
	mu8
;

38 
SYMemObje˘
(Ë: 
ex¥
(
nuŒ±r
) {}

42 
	sSYRegObje˘
 {

43 
	g°d
::
°rög
 
«me
;

44 
uöt
 
	gödx
;

45 
uöt
 
	gsize
;

46 
KVEx¥På
 
	gex¥
;

49 
öt64_t
 
	gi64
;

50 
öt32_t
 
	gi32
;

51 
öt16_t
 
	gi16
;

52 
öt8_t
 
	gi8
;

53 
uöt64_t
 
	gu64
;

54 
uöt32_t
 
	gu32
;

55 
uöt16_t
 
	gu16
;

56 
uöt8_t
 
	gu8
;

58 
SYRegObje˘
(Ë: 
ex¥
(
nuŒ±r
) {}

61 
	g°d
::
m≠
<
ul⁄g
, 
	gSYMemObje˘
 *> 
	gm_SYMemObje˘s
;

62 
	g°d
::
m≠
<
ul⁄g
, 
	gSYRegObje˘
 *> 
	gm_SYRegObje˘s
;

64 
	g°d
::
sh¨ed_±r
<
SYCPUSèã
> 
m_CPU
;

65 
	g°d
::
sh¨ed_±r
<
SYMemSèã
> 
m_MEM
;

68 
	gpublic
:

69 
°d
::
sh¨ed_±r
<
EFœgsM™agî
> 
m_EFœgsMgr
;

72 
	gpublic
:

73 
VMSèã
();

74 ~
VMSèã
();

76 
	gpublic
:

78 
boﬁ
 
¸óãSYMemObje˘
(
ul⁄g
 
addr
, ul⁄g 
size
, 
c⁄VÆ
, c⁄° *
«me
 = 
NULL
);

79 
de°roySYMemObje˘
(
ul⁄g
 
addr
, ul⁄g 
size
);

81 
boﬁ
 
¸óãSYRegObje˘
(
uöt
 
ödex
, uöà
size
, 
c⁄VÆ
, c⁄° *
«me
 = 
NULL
);

82 
de°roySYRegObje˘
(
uöt
 
ödex
, uöà
size
);

86 
boﬁ
 
SëCPUSèã
(
VMSèã
 *
VM
, 
MacReg
 *
ªgs
);

89 
boﬁ
 
RódCPUSèã
(
VMSèã
 *
VM
, 
MacReg
 *
ªgs
);

90 
ul⁄g
 
ªadC⁄Reg
(
uöt
 
idx
);

91 
boﬁ
 
wrôeC⁄Reg
(
uöt
 
idx
, 
ul⁄g
 
vÆ
);

95 
boﬁ
 
isSYReg
(
uöt
 
ªg_ödex
);

96 
boﬁ
 
ªadRegi°î
(
RegVÆue
 &
V
);

97 
boﬁ
 
wrôeRegi°î
(
RegVÆue
 &
V
);

99 
±_ªgs
* 
gëPTRegs
();

102 
boﬁ
 
isSYMem‹yCñl
(
ul⁄g
 
addr
, ul⁄g 
size
);

103 
boﬁ
 
ªadMem‹y
(
MemVÆue
 &
V
);

104 
boﬁ
 
wrôeMem‹y
(
MemVÆue
 &
V
);

107 
boﬁ
 
gëFœgBô
(
uöt
 
Êag_ödex
, 
FSIn°rPå
 &
±r
);

108 
boﬁ
 
£tFœgBô
(
uöt
 
Êag_ödex
, 
FSIn°rPå
 &
±r
);

110 
boﬁ
 
˛órAŒSymFœg
();

113 
boﬁ
 
gëFœgBô
(
uöt
 
Êag_ödex
, 
FLAG_STAT
 &
Êag
);

114 
boﬁ
 
£tFœgBô
(
uöt
 
Êag_ödex
, 
FLAG_STAT
 &
Êag
);

116 
boﬁ
 
FœgBôDeföôed
(
uöt
 
Êag_ödex
);

118 
boﬁ
 
SaveFœgCh™gögIn°ru˘i⁄
 (
FSIn°rPå
 &
±r
);

119 
boﬁ
 
SaveFœgCh™gögIn°ru˘i⁄Ex¥
 (
íåyID
 
ö°rID
, 
KVEx¥På
 
ex¥På
);

124 
boﬁ
 
RódC⁄O≥ønd_RM
(
VMSèã
 *
vm
, 
O¥ndInfo
 *
oi
);

125 
boﬁ
 
WrôeC⁄OPî™d_RM
(
VMSèã
 *
vm
, 
O¥ndInfo
 *
oi
);

127 
boﬁ
 
RódSymOPî™d_RM
(
VMSèã
 *
vm
, 
O¥ndInfoPå
 &
oi
);

128 
boﬁ
 
WrôeSymOPî™d_RM
(
VMSèã
 *
vm
, 
O¥ndInfoPå
 &
oi
);

	@Z3Handler.h

1 #i‚de‡
_Z3HANDLER_H__


2 
	#_Z3HANDLER_H__


	)

10 
	~"z3++.h
"

11 
	~"Ex¥.h
"

12 
	~<m≠
>

13 
	~<£t
>

15 
	gEXPR
::
	tEx¥
 
	tKVEx¥
;

16 
	g°d
::
	tsh¨ed_±r
<
	tKVEx¥
> 
	tKVEx¥På
;

18 
usög
 
«me•a˚
 
	gEXPR
;

20 
«me•a˚
 
	gZ3HANDLER
 {

21 ˛as†
	cZ3H™dÀr
{

22 
	g¥Ÿe˘ed
:

23 
z3
::
c⁄ãxt
& 
c⁄ãxt_
;

24 
	gpublic
:

25 
Z3H™dÀr
();

26 
	gvútuÆ
 ~
Z3H™dÀr
();

29 
	g°d
::
m≠
<
VMSèã
::
SYMemObje˘
*, 
	gz3
::
ex¥
> 
symObje˘sM≠
;

31 
	g°d
::
m≠
<
°d
::
°rög
, > 
Z3SﬁveO√
(°d::
£t
<
KVEx¥På
> 
c⁄°øöts
);

35 
boﬁ
 
Z3SﬁveC⁄¸ëize
(
°d
::
ve˘‹
<
VMSèã
::
SYMemObje˘
*> 
symobjs
, std::
£t
<
KVEx¥På
> 
c⁄°øöts
);

37 
	gz3
::
ex¥
 
Z3H™dlögEx¥På
(
Ex¥På
 
±r
);

40 
	gz3
::
ex¥
 
Z3H™dÀUND
(
Ex¥På
 
undef_ex¥
);

42 
	gz3
::
ex¥
 
Z3H™dÀC⁄°
(
Ex¥På
 
c⁄°_ex¥
);

43 
	gz3
::
ex¥
 
Z3H™dÀBö
(
Ex¥På
 
r
, Ex¥På 
l
);

44 
	gz3
::
ex¥
 
Z3H™dÀTri
(
Ex¥På
 
r
, Ex¥På 
m
, Ex¥På 
l
);

45 
	gz3
::
ex¥
 
Z3H™dÀUry
(
Ex¥På
 
ury_ex¥
);

47 
	gz3
::
ex¥
 
Z3H™dÀAdd
(
Ex¥På
 
r
, Ex¥På 
l
);

48 
	gz3
::
ex¥
 
Z3H™dÀSub
(
Ex¥På
 
r
, Ex¥På 
l
);

49 
	gz3
::
ex¥
 
Z3H™dÀMul
(
Ex¥På
 
r
, Ex¥På 
l
);

50 
	gz3
::
ex¥
 
Z3H™dÀUDiv
(
Ex¥På
 
r
, Ex¥På 
l
);

52 
	gz3
::
ex¥
 
Z3H™dÀSDiv
(
Ex¥På
 
r
, Ex¥På 
l
);

53 
	gz3
::
ex¥
 
Z3H™dÀURem
();

54 
	gz3
::
ex¥
 
Z3H™dÀSRem
(
Ex¥På
 
r
, Ex¥På 
l
);

55 
	gz3
::
ex¥
 
Z3H™dÀNeg
(
Ex¥På
 
√g_ex¥
);

56 
	gz3
::
ex¥
 
Z3H™dÀNŸ
(
Ex¥På
 
nŸ_ex¥
);

57 
	gz3
::
ex¥
 
Z3H™dÀAnd
(
Ex¥På
 
r
, Ex¥På 
l
);

58 
	gz3
::
ex¥
 
Z3H™dÀOr
(
Ex¥På
 
r
, Ex¥På 
l
);

59 
	gz3
::
ex¥
 
Z3H™dÀX‹
(
Ex¥På
 
r
, Ex¥På 
l
);

60 
	gz3
::
ex¥
 
Z3H™dÀShl
(
Ex¥På
 
r
, Ex¥På 
l
);

61 
	gz3
::
ex¥
 
Z3H™dÀLShr
(
Ex¥På
 
r
, Ex¥På 
l
);

63 
	gz3
::
ex¥
 
Z3H™dÀAShr
(
Ex¥På
 
r
, Ex¥På 
l
);

64 
	gz3
::
ex¥
 
Z3H™dÀEquÆ
(
Ex¥På
 
equÆ_ex¥
);

65 
	gz3
::
ex¥
 
Z3H™dÀDi°ö˘
(
Ex¥På
 
di°_ex¥
);

66 
	gz3
::
ex¥
 
Z3H™dÀU…
(
Ex¥På
 
r
, Ex¥På 
l
);

67 
	gz3
::
ex¥
 
Z3H™dÀUÀ
(
Ex¥På
 
r
, Ex¥På 
l
);

68 
	gz3
::
ex¥
 
Z3H™dÀUgt
(
Ex¥På
 
r
, Ex¥På 
l
);

69 
	gz3
::
ex¥
 
Z3H™dÀUge
(
Ex¥På
 
r
, Ex¥På 
l
);

70 
	gz3
::
ex¥
 
Z3H™dÀS…
(
Ex¥På
 
r
, Ex¥På 
l
);

71 
	gz3
::
ex¥
 
Z3H™dÀSÀ
(
Ex¥På
 
r
, Ex¥På 
l
);

72 
	gz3
::
ex¥
 
Z3H™dÀSgt
(
Ex¥På
 
r
, Ex¥På 
l
);

74 
	gz3
::
ex¥
 
Z3H™dÀSge
(
Ex¥På
 
r
, Ex¥På 
l
);

75 
	gz3
::
ex¥
 
Z3H™dÀL‹
(
Ex¥På
 
l‹_ex¥
);

76 
	gz3
::
ex¥
 
Z3H™dÀLAnd
(
Ex¥På
 
œnd_ex¥
);

77 
	gz3
::
ex¥
 
Z3H™dÀLNŸ
(
Ex¥På
 
 Ÿ_ex¥
);

78 
	gz3
::
ex¥
 
Z3H™dÀSignExt
(
Ex¥På
 
sig√xt_ex¥
);

79 
	gz3
::
ex¥
 
Z3H™dÀZîoEXT
(
Ex¥På
 
zîo_ex¥
);

80 
	gz3
::
ex¥
 
Z3H™dÀShrd
(
Ex¥På
 
r
, Ex¥På 
m
, Ex¥På 
l
);

81 
	gz3
::
ex¥
 
Z3H™dÀSign
(
Ex¥På
 
sign_ex¥
);

82 
	gz3
::
ex¥
 
Z3H™dÀNoSign
(
Ex¥På
 
nosign_ex¥
);

83 
	gz3
::
ex¥
 
Z3H™dÀOvîÊow
(
Ex¥På
 
ovîÊow_ex¥
);

85 
	gz3
::
ex¥
 
Z3H™dÀNoOvîÊow
(
Ex¥På
 
noovîÊow_ex¥
);

86 
	gz3
::
ex¥
 
Z3H™dÀComböe
(
Ex¥På
 
r
, Ex¥På 
l
);

87 
	gz3
::
ex¥
 
Z3H™dÀExåa˘
(
Ex¥På
 
±r
);

	@centralhub.h

1 #i‚de‡
_CENTRAL_HUB_H__


2 
	#_CENTRAL_HUB_H__


	)

4 
	~<mem‹y
>

5 
	~<ve˘‹
>

27 
˛ass
 
	gVMSèã
;

29 
˛ass
 
	gCF©tCål
;

30 
˛ass
 
	gCThöCål
;

31 
	g±_ªgs
;

61 
	sEvítMëa
 {

62 
	mt_pf_°ack
;

63 
	mt_öt3_°ack
;

64 
	mt_ve_°ack
;

65 
	mt_db_°ack
;

66 * 
	mvút_ex˚_¨ó
;

67 } 
	tEveMëa
;

69 ˛as†
	cExecSèã
 {

70 
	m°d
::
sh¨ed_±r
<
VMSèã
> 
m_VM
;

74 
	m°d
::
sh¨ed_±r
<
CThöCål
> 
m_ThöCål
;

77 
	mpublic
:

79 
°d
::
sh¨ed_±r
<
CF©tCål
> 
m_F©tCål
;

80 
	m°d
::
sh¨ed_±r
<
EveMëa
> 
m_emëa
;

83 
ExecSèã
(
ul⁄g
 
adds
, ul⁄g 
adde
);

84 ~
ExecSèã
();

88 
boﬁ
 
de˛¨eSymbﬁicObje˘
(
ul⁄g
 
addr
, ul⁄g 
size
, 
c⁄VÆ
, c⁄° *
«me
);

92 
boﬁ
 
de˛¨eSymbﬁicRegi°î
(
uöt
 
ödex
, uöà
size
, 
c⁄VÆ
, c⁄° *
«me
);

96 
boﬁ
 
SynRegsFromN©ive
(
MacReg
* 
ªgs
);

97 
boﬁ
 
SynRegsToN©ive
(
MacReg
* 
ªgs
);

98 
boﬁ
 
¥o˚ssAt
(
ul⁄g
 
addr
);

99 
boﬁ
 
M⁄iSèπOfSE
(
ul⁄g
 
addr
);

100 
InôRediPagePoﬁ
();

101 
DBH™dÀr
();

	@conexec.h

1 #i‚de‡
_CON_EXEC_H__


2 
	#_CON_EXEC_H__


	)

4 
	~<löux/ty≥s.h
>

6 
	~<io°ªam
>

7 
	~<ve˘‹
>

9 
	~<asm/±ø˚.h
>

11 
	~"CodeObje˘.h
"

12 
	~"In°ru˘i⁄Decodî.h
"

13 
	~"thö˘æ.h
"

14 
	~"˚¡ølhub.h
"

15 
	~"deföes.h
"

17 
	gO¥ndInfo
;

18 
˛ass
 
	gSymInfoDB
;

19 
˛ass
 
	gVMSèã
;

21 
«me•a˚
 
	gDynö°
::
In°ru˘i⁄API
 {

22 
˛ass
 
In°ru˘i⁄
;

23 
˛ass
 
	gEx¥essi⁄
;

26 ˛as†
	cC⁄Execut‹
 {

32 
	m¥iv©e
:

40 * 
T_∑ge
;

41 
	mJmp_RIP_In¢
[6];

43 
	mN›Byãs
[15] = {0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90};

45 
boﬁ
 
if_c⁄dôi⁄_Áû
 (
íåyID
 
›îa_id
, 
±_ªgs
* 
ªgs
);

46 
boﬁ
 
böd_vÆue_f‹_exp
(
In°ru˘i⁄
* 
ö°r
, 
Ex¥essi⁄
::
På
 
èrgë
, 
±_ªgs
* 
ªgs
);

47 
boﬁ
 
emul_cf_ö°
(
In°ru˘i⁄
* 
ö°r
, 
In¢C©eg‹y
 
C©e
, 
±_ªgs
* 
ªgs
);

49 
boﬁ
 
RewRIPIn¢
(* 
‹ig_ö¢_addr
, 
In°ru˘i⁄
* 
ö°r
);

50 
boﬁ
 
CÀ¨Tö¢
(* 
T_addr
, 
size
);

54 
	gpublic
:

58 
C⁄Execut‹
();

59 ~
	$C⁄Execut‹
(){
	}
};

75 
boﬁ
 
In¢Di•©ch
(
In°ru˘i⁄
* 
ö°r
, 
±_ªgs
* 
ªgs
);

	@defines.h

2 #i‚de‡
_DEFINE_S_H__


3 
	#_DEFINE_S_H__


	)

9 #i‚de‡
_SYM_DEBUG_OUTPUT


10 
	#_SYM_DEBUG_OUTPUT


	)

18 #i‚de‡
_PªDißs£mbÀ


19 
	#_PªDißs£mbÀ


	)

22 
	~<löux/ty≥s.h
>

24 
	~<m≠
>

26 
«me•a˚
 
	gEXPR
 {

27 
˛ass
 
	gEx¥
;

30 
	gEXPR
::
	tEx¥
 
	tKVEx¥
;

31 
	g°d
::
	tsh¨ed_±r
<
	tKVEx¥
> 
	tKVEx¥På
;

33 
	sRegVÆue
 {

34 
uöt
 
	mödx
;

35 
uöt
 
	msize
;

36 
boﬁ
 
	mbsym
;

38 
öt64_t
 
	mi64
;

39 
öt32_t
 
	mi32
;

40 
öt16_t
 
	mi16
;

41 
öt8_t
 
	mi8
;

42 
uöt64_t
 
	mu64
;

43 
uöt32_t
 
	mu32
;

44 
uöt16_t
 
	mu16
;

45 
uöt8_t
 
	mu8
;

49 
KVEx¥På
 
	mex¥
;

52 
	sMemVÆue
 {

53 
ul⁄g
 
	maddr
;

54 
ul⁄g
 
	msize
;

55 
boﬁ
 
	mbsym
;

57 
öt64_t
 
	mi64
;

58 
öt32_t
 
	mi32
;

59 
öt16_t
 
	mi16
;

60 
öt8_t
 
	mi8
;

61 
uöt64_t
 
	mu64
;

62 
uöt32_t
 
	mu32
;

63 
uöt16_t
 
	mu16
;

64 
uöt8_t
 
	mu8
;

68 
KVEx¥På
 
	mex¥
;

71 
	#FIX_ME
(Ë
	`¥ötf
("Fix-me: %s:%d %s\n", 
__FILE__
, 
__LINE__
, 
__FUNCTION__
)

	)

72 
	#LOCOUT1
(
O
Ë
°d
::
cout
 << 
__FILE__
 << ":" << 
dec
 << 
__LINE__
 << " => " << O << std::
ídl


	)

73 
	#LOCOUT2
(
O1
, 
O2
Ë
°d
::
cout
 << 
__FILE__
 << ":" << 
dec
 << 
__LINE__
 << " => " << O1 << O2 << std::
ídl


	)

74 
	#DBG
(
fmt
, ...) \

75 dÿ{
	`¥ötf
 ("%s(): " 
fmt
, 
__func__
, ##
__VA_ARGS__
); } 0)

	)

76 
	#LOG
(
O1
Ë
°d
::
cout
 << O1 << std::
ídl


	)

78 
	#ERRR_ME
(
O
Ë
	`¥ötf
("Eº-me: %s:%d %†=> %s\n", 
__FILE__
, 
__LINE__
, 
__FUNCTION__
, O)

	)

	@fatctrl.h

1 #i‚de‡
_FATCTRL_H__


2 
	#_FATCTRL_H__


	)

4 
	~<löux/ty≥s.h
>

6 
	~<io°ªam
>

7 
	~<m≠
>

9 
	~"˚¡ølhub.h
"

13 
˛ass
 
	gVMSèã
;

15 
˛ass
 
	gCThöCål
;

16 
˛ass
 
	gSymExecut‹
;

17 
˛ass
 
	gC⁄Execut‹
;

20 
	sˇŒ_ö¢
 {

21 
	maddr
;

22 
	mde°
;

23 
	m‹ig_byãs
[5];

24 
	mÀn
;

27 
	sCÆlInAŒFuncs
{

28 
	mfunc_addr
;

29 
ˇŒ_ö¢
* 
	mˇŒ_ö°s
;

30 
	mnum_ˇŒ
;

34 
	shook_öfo
 {

35 
	maddr
;

36 
	mde°
;

38 
	m‹ig_byãs
[1];

39 
	mÀn
;

43 
	spoﬁ


45 * 
	möô
;

46 * 
	m√xt
;

47 * 
	míd
;

48 } 
	tPOOL
;

50 
	sªdú_∑ge_öfo
 {

51 
	m‹ig_t_∑ge_addr
;

52 
	m√w_™a_∑ge_addr
;

53 
	moff£t
;

57 
	#MAX_INT3
 30

	)

58 
	#MAX_Redú_Code_Page
 8

	)

60 ˛as†
	cCF©tCål
 {

62 
VMSèã
 *
	mm_VM
;

65 
POOL
* 
	mm_∑ge_poﬁ
;

71 
	m¸t_max_ªdú_idx
;

72 
	m¸t_ªdú_idx
;

77 
ªdú_∑ge_öfo
 
	mªdú_code_∑ges
[
MAX_Redú_Code_Page
];

79 
CÆlInAŒFuncs
* 
	mm_func_ˇŒ
;

81 
	m≥r_hook
[0x1];

82 
hook_öfo
* 
	m¥obe_‹ig_ö°
;

84 
	m¸t_öt3_idx
;

94 
	mpublic
:

95 
EveMëa
* 
m_emëa
;

96 
CThöCål
 *
	mm_Thö
;

98 
CF©tCål
(
VMSèã
 *
VM
, 
EveMëa
* 
mëa
);

99 ~
CF©tCål
();

106 
boﬁ
 
¥o˚ssFunc
(
ul⁄g
 
addr
);

107 
INT3H™dÀr
();

108 
VEH™dÀr
();

109 
DBH™dÀr
();

110 
boﬁ
 
M⁄iSèπOfSE
 (
ul⁄g
 
addr
);

111 
InôRediPagePoﬁ
();

113 
	m¥iv©e
:

115 
PoﬁInô
 (
size_t
 
size
);

116 
PoﬁDe°roy
 (
POOL
 *
p
);

117 
size_t
 
PoﬁCheckAvaû
 (
POOL
* 
p
);

118 * 
PoﬁAŒoc
 (
POOL
* 
p
, 
size_t
 
size
);

120 
InôFuncDB
(c⁄° * 
fûíame
);

121 
FödFuncCÆlInfo
(
addr
);

122 
In°ÆlPîI¡3
 (
addr
, 
Àn
, 
de°
);

123 
In°ÆlI¡3F‹Func
 (
func_addr
);

124 
föd_¥obe_idx
(
rù
);

125 
upd©e_¸t_ªdú_idx
 (
ãmpAddr
);

127 
RedúCodePageHy≥rCÆl
 (* 
kî_addr
);

128 
emulCÆl
(
±_ªgs
* 
ªgs
);

129 
˛ór_dr
(
idx
);

132 
boﬁ
 
CheckFuncSym
();

134 
boﬁ
 
mu°yesU£Symbﬁ
(
ul⁄g
 
BB_addr
);

135 
boﬁ
 
mu°nŸU£Symbﬁ
(
ul⁄g
 
BB_addr
);

136 
boﬁ
 
mayU£Symbﬁ
(
ul⁄g
 
BB_addr
);

	@interface.h

1 #i‚de‡
_INTER_FACE_H__


2 
	#_INTER_FACE_H__


	)

5 #ifde‡
__˝lu•lus


9 
	#EXPORT_ME


	)

11 
EXPORT_ME
 
boﬁ
 
ﬂsis_lib_öô
(c⁄° *
ñf_fûe
, 
ul⁄g
 
ba£_addªss
);

12 
EXPORT_ME
 
ﬂsis_lib_föi
();

14 
EXPORT_ME
 
boﬁ
 
De˛¨eSymbﬁicObje˘
(
ul⁄g
 
addªss
, ul⁄g 
size
);

16 
±_ªgs
;

17 
EXPORT_ME
 
boﬁ
 
SèπExecuti⁄At
(
±_ªgs
 *
ªgs
);

19 #ifde‡
__˝lu•lus


25 
boﬁ
 
SymbﬁicQuîy
(*
ö°ru˘i⁄
);

26 
boﬁ
 
symExecut‹
(*
¨g
);

	@oprand.h

1 #i‚de‡
OPRAND_H


2 
	#OPRAND_H


	)

3 
	~<mem‹y
>

4 
	~<ve˘‹
>

7 
˛ass
 
	gVMSèã
;

9 
«me•a˚
 
	gDynö°
 {

10 
«me•a˚
 
	gIn°ru˘i⁄API
 {

11 
˛ass
 
	gEx¥essi⁄
;

12 
˛ass
 
	gRegi°îAST
;

13 
˛ass
 
	gO≥ønd
;

14 
˛ass
 
	gIn°ru˘i⁄
;

18 
«me•a˚
 
	gEXPR
 {

19 
˛ass
 
	gEx¥
;

22 
	gDynö°
::
	tIn°ru˘i⁄API
::
	tIn°ru˘i⁄
 
	tDAPIIn°r
;

23 
	g°d
::
	tsh¨ed_±r
<
	tDynö°
::
	tIn°ru˘i⁄API
::
	tIn°ru˘i⁄
> 
	tDAPIIn°rPå
;

24 
	gDynö°
::
	tIn°ru˘i⁄API
::
	tO≥ønd
 
	tDIAPIO≥ønd
;

25 
	g°d
::
	tsh¨ed_±r
<
	tDynö°
::
	tIn°ru˘i⁄API
::
	tO≥ønd
> 
	tDIAPIO≥øndPå
;

26 
	gDynö°
::
	tIn°ru˘i⁄API
::
	tRegi°îAST
 
	tDIAPIRegi°îAST
;

27 
	g°d
::
	tsh¨ed_±r
<
	tDynö°
::
	tIn°ru˘i⁄API
::
	tRegi°îAST
> 
	tDIAPIRegi°îASTPå
;

31 
	gEXPR
::
	tEx¥
 
	tKVEx¥
;

32 
	g°d
::
	tsh¨ed_±r
<
	tKVEx¥
> 
	tKVEx¥På
;

34 
	eO≥øndTy≥
 {

35 
	mOPTY_UNK
 = 0,

36 
	mOPTY_IMM
 = 0x01,

37 
	mOPTY_REG
 = 0x08,

38 
	mOPTY_REGCON
 = 0x0A,

39 
	mOPTY_REGSYM
 = 0x0C,

40 
	mOPTY_MEMCELL
 = 0x80,

41 
	mOPTY_MEMCELLCON
 = 0xC0,

42 
	mOPTY_MEMADDRSYM
 = 0x90,

43 
	mOPTY_MEMCELLSYM
 = 0xB0,

46 
	eO≥øndAccs
 {

47 
	mOPAC_UNK
 = 0,

48 
	mOPAC_RD
 = 1,

49 
	mOPAC_WR
 = 2,

50 
	mOPAC_RDWR
 = 3,

53 
	sO¥ndInfo
 {

54 
DIAPIO≥øndPå
 
	mPO
;

55 
O≥øndTy≥
 
	m›ty
;

56 
O≥øndAccs
 
	mrdwr
;

57 
uöt
 
	msize
;

58 
boﬁ
 
	msymb
;

62 
ul⁄g
 
	mimm_vÆue
;

63 
uöt
 
	mªg_ödex
;

64 
ul⁄g
 
	mmem_c⁄addr
;

65 
KVEx¥På
 
	mmem_symaddr
;

69 
	mªg_c⁄vÆ
;

70 
	mmem_c⁄vÆ
;

71 
KVEx¥På
 
	mªg_symvÆ
;

72 
KVEx¥På
 
	mmem_symvÆ
;

75 
O¥ndInfo
(
DIAPIO≥ønd
 &
O
);

76 ~
O¥ndInfo
() {}

78 
boﬁ
 
gëC⁄VÆue
(&
out
);

79 
boﬁ
 
£tC⁄VÆue
(
VMSèã
 *
vm
, 
ö
);

80 
boﬁ
 
gëSymVÆue
(
KVEx¥På
 &
out
);

81 
boﬁ
 
£tSymVÆue
(
VMSèã
 *
vm
, 
KVEx¥På
 &
ö
);

83 
	g°d
::
	tsh¨ed_±r
<
	tO¥ndInfo
> 
	tO¥ndInfoPå
;

85 
	sIn°rInfo
 {

86 
DAPIIn°rPå
 
	mPI
;

87 
	m°d
::
ve˘‹
<
O¥ndInfoPå
> 
vecOI
;

88 
boﬁ
 
	mhasSymbO¥™d
;

89 
In°rInfo
(
DAPIIn°r
 *
I
);

90 ~
In°rInfo
(Ë{ 
	mvecOI
.
˛ór
(); }

92 
	g°d
::
	tsh¨ed_±r
<
	tIn°rInfo
> 
	tIn°rInfoPå
;

106 
	eFLAG_STAT


108 
	mFLAG_CLEAR
 = 
Ál£
 ,

109 
	mFLAG_SET
 = 
åue
 ,

110 
	mSchrodögîs_ˇt
 = -1

112 
	#FLAG_UNCERTAIN
 
Schrodögîs_ˇt


	)

116 ˛as†
	cFœgSëtögIn°r
 {

117 
	m¥Ÿe˘ed
:

118 
In°rInfoPå
 
m_IOI
;

120 
FLAG_STAT
 
	msf
, 
	mzf
, 
	mof
, 
	mcf
, 
	mpf
, 
	maf
 ;

121 
FLAG_STAT
 
	mÊags_£t
 ;

123 
	mpublic
:

124 
	$FœgSëtögIn°r
(
In°rInfoPå
 &
öfo
Ë: 
	$m_IOI
(
öfo
Ë{
sf
=
zf
=
of
=
cf
=
pf
=
af
=
FLAG_UNCERTAIN
;}

125 ~
	$FœgSëtögIn°r
(Ë{
	}
}

127 
vútuÆ
 
FLAG_STAT
 
	$ˇlc_sÊag
() {

128  
sf
;

129 
	}
};

130 
vútuÆ
 
FLAG_STAT
 
	$ˇlc_zÊag
() {

131  
zf
;

132 
	}
};

135 
vútuÆ
 
FLAG_STAT
 
	$ˇlc_oÊag
() {

136  
of
;

137 
	}
};

139 
vútuÆ
 
FLAG_STAT
 
	$ˇlc_cÊag
() {

140  
cf
;

141 
	}
};

143 
vútuÆ
 
FLAG_STAT
 
	$ˇlc_pÊag
() {

144  
pf
;

145 
	}
};

147 
vútuÆ
 
FLAG_STAT
 
	$ˇlc_aÊag
() {

148  
af
;

149 
	}
};

152 
vútuÆ
 
FLAG_STAT
 
	$£t_sÊag
(
FLAG_STAT
 
Êag
) {

153  
sf
=
Êag
;

154 
	}
};

155 
vútuÆ
 
FLAG_STAT
 
	$£t_zÊag
(
FLAG_STAT
 
Êag
) {

156  
zf
=
Êag
;

157 
	}
};

158 
vútuÆ
 
FLAG_STAT
 
	$£t_oÊag
(
FLAG_STAT
 
Êag
) {

159  
of
=
Êag
;

160 
	}
};

162 
vútuÆ
 
FLAG_STAT
 
	$£t_cÊag
(
FLAG_STAT
 
Êag
) {

163  
cf
=
Êag
;

164 
	}
};

166 
vútuÆ
 
FLAG_STAT
 
	$£t_pÊag
(
FLAG_STAT
 
Êag
) {

167  
pf
=
Êag
;

168 
	}
};

170 
vútuÆ
 
FLAG_STAT
 
	$£t_aÊag
(
FLAG_STAT
 
Êag
) {

171  
af
=
Êag
;

172 
	}
};

173 
boﬁ
 
GëC⁄VÆs
(&
sz1
, &
c⁄vÆ1
, &
sz2
, &
c⁄vÆ2
);

178 
	g°d
::
	tsh¨ed_±r
<
	tFœgSëtögIn°r
> 
	tFSIn°rPå
;

180 
ul⁄g
 
HashTogëhî
(ul⁄g 
addr
, ul⁄g 
size
);

182 
ul⁄g
 
Ex¥Hash
(ul⁄g 
addr
, ul⁄g 
size
) ;

183 
ul⁄g
 
CñlHash
(ul⁄g 
addr
, ul⁄g 
size
) ;

	@symexec.h

1 #i‚de‡
_SYM_EXEC_H__


2 
	#_SYM_EXEC_H__


	)

4 
	~<löux/ty≥s.h
>

6 
	~<io°ªam
>

7 
	~<mem‹y
>

8 
	~<ve˘‹
>

11 
	~"VMSèã.h
"

13 
	gO¥ndInfo
;

14 
˛ass
 
	gSymInfoDB
;

15 
˛ass
 
	gVMSèã
;

17 
«me•a˚
 
	gDynö°
::
In°ru˘i⁄API
 {

18 
˛ass
 
In°ru˘i⁄
;

21 ˛as†
	cSymExecut‹
 {

22 
	m¥Ÿe˘ed
:

23 
°d
::
ve˘‹
<
In°rInfoPå
> 
m_IOIs
;

24 
boﬁ
 
	mm_RIPUpd©ed
;

26 
	mpublic
:

27 
	$SymExecut‹
(Ë: 
	$m_IOIs
(){};

28 ~
	$SymExecut‹
(){
	}
};

33 
boﬁ
 
pushIn°r
(
In°rInfoPå
 &
±r
);

34 
boﬁ
 
run
(
VMSèã
 *
cs
);

35 
boﬁ
 
_run_¥ﬁogue
();

36 
boﬁ
 
_run_po°logue
();

38 
boﬁ
 
¥o˚ss_jmp
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
);

39 
boﬁ
 
¥o˚ss_ˇŒ
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
);

40 
boﬁ
 
¥o˚ss_jcc
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
);

41 
boﬁ
 
¥o˚ss_add
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
);

42 
boﬁ
 
¥o˚ss_Àa
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
);

43 
boﬁ
 
¥o˚ss_mov
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
);

44 
boﬁ
 
¥o˚ss_ã°
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
);

47 
boﬁ
 
¥o˚ss_cmovxx
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) ;

48 
boﬁ
 
¥o˚ss_cmp
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
);

49 
boﬁ
 
¥o˚ss_sub
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
);

51 
boﬁ
 
¥o˚ss_jxx
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
);

53 
boﬁ
 
¥o˚ss_™d
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
);

54 
boﬁ
 
¥o˚ss_‹
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
);

55 
boﬁ
 
¥o˚ss_x‹
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
);

56 
boﬁ
 
¥o˚ss_shl_ßl
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) ;

57 
boﬁ
 
¥o˚ss_shr
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) ;

58 
boﬁ
 
¥o˚ss_shrd
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) ;

59 
boﬁ
 
¥o˚ss_ßr
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) ;

61 
boﬁ
 
¥o˚ss_idiv
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) ;

62 
boﬁ
 
¥o˚ss_mul
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) ;

63 
boﬁ
 
¥o˚ss_nŸ
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) ;

64 
boﬁ
 
¥o˚ss_√g
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) ;

66 
boﬁ
 
¥o˚ss_p›
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) ;

67 
boﬁ
 
¥o˚ss_push
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) ;

69 
boﬁ
 
¥o˚ss_xchg
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) ;

71 
boﬁ
 
¥o˚ss_movsx
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) ;

72 
boﬁ
 
¥o˚ss_movzx
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) ;

74 
boﬁ
 
¥o˚ss_cdq
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) ;

75 
boﬁ
 
¥o˚ss_cbw
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) ;

77 
boﬁ
 
¥o˚ss_£t
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
) ;

79 
boﬁ
 
Pröt_In°
(
VMSèã
 *
vm
, 
In°rInfoPå
 &
öf›å
, c⁄° * 
c°r
) ;

	@thinctrl.h

1 #i‚de‡
_THINCTRL_H__


2 
	#_THINCTRL_H__


	)

6 
	~<io°ªam
>

7 
	~<ve˘‹
>

10 
	~"VMSèã.h
"

12 
	~"CodeSour˚.h
"

13 
	~"In°ru˘i⁄Decodî.h
"

15 
	~"deföes.h
"

18 
˛ass
 
	gVMSèã
;

19 
˛ass
 
	gCF©tCål
;

20 
˛ass
 
	gSymExecut‹
;

21 
˛ass
 
	gC⁄Execut‹
;

36 
usög
 
«me•a˚
 
	gDynö°
;

37 
usög
 
«me•a˚
 
	gP¨£API
;

38 
usög
 
«me•a˚
 
	gIn°ru˘i⁄API
;

43 ˛as†
	cMyCodeRegi⁄
 : 
public
 
CodeRegi⁄
 {

44 
¥iv©e
:

45 
°d
::
m≠
<
Addªss
, 
	mAddªss
> 
	mknowD©a
;

46 
	mpublic
:

47 
MyCodeRegi⁄
 (
Addªss
 
add1
, Addªs†
add2
);

48 ~
MyCodeRegi⁄
();

51 
boﬁ
 
	$isVÆidAddªss
(c⁄° 
Addªss
) const;

52 * 
	$gëPåToIn°ru˘i⁄
(c⁄° 
Addªss
) const;

53 * 
	$gëPåToD©a
(c⁄° 
Addªss
) const;

54 
	$gëAddªssWidth
() const;

55 
boﬁ
 
	$isCode
(c⁄° 
Addªss
) const;

56 
boﬁ
 
	$isD©a
(c⁄° 
Addªss
) const;

57 
boﬁ
 
	$isRódO∆y
(c⁄° 
Addªss
) const;

59 
Addªss
 
	$off£t
() const;

60 
Addªss
 
	$Àngth
() const;

61 
Archôe˘uª
 
	$gëArch
() const;

64 
Addªss
 
	$low
(Ëc⁄° {  
	`off£t
(); }

65 
Addªss
 
	$high
(Ëc⁄° {  
	`off£t
(Ë+ 
	`Àngth
(); 
	}
}

70 ˛as†
	cPARSER_EXPORT
 
	mMyCodeSour˚
: 
public
 
CodeSour˚
 {

71 
¥iv©e
:

73 
öô_ªgi⁄s
(
Addªss
 
adds
, Addªs†
adde
);

74 
öô_höts
();

76 
muèbÀ
 
CodeRegi⁄
* 
	m_lookup_ˇche
;

77 
	mpublic
:

79 
MyCodeSour˚
(
Addªss
 
adds
, Addªs†
adde
);

80 ~
MyCodeSour˚
();

83 
boﬁ
 
	$isVÆidAddªss
(c⁄° 
Addªss
) const;

84 * 
	$gëPåToIn°ru˘i⁄
(c⁄° 
Addªss
) const;

85 * 
	$gëPåToD©a
(c⁄° 
Addªss
) const;

86 
	$gëAddªssWidth
() const;

87 
boﬁ
 
	$isCode
(c⁄° 
Addªss
) const;

88 
boﬁ
 
	$isD©a
(c⁄° 
Addªss
) const;

89 
boﬁ
 
	$isRódO∆y
(c⁄° 
Addªss
) const;

91 
Addªss
 
	$off£t
() const;

92 
Addªss
 
	$Àngth
() const;

93 
Archôe˘uª
 
	$gëArch
() const;

96 
	$MyaddRegi⁄
 (
CodeRegi⁄
 *
¸
)

98 
	`addRegi⁄
(
¸
);

103 
¥iv©e
:

104 
CodeRegi⁄
* 
	$lookup_ªgi⁄
(c⁄° 
Addªss
 
addr
) const;

105 
	}
};

109 ˛as†
	cCThöCål
 {

110 
MyCodeSour˚
* 
	mm_°s
;

111 
CodeObje˘
* 
	mm_co
;

112 
CodeRegi⁄
* 
	mm_¸
;

114 
In°ru˘i⁄Decodî
* 
	mdecodî
;

115 
	m°d
::
m≠
<
uöt
, 
	mIn°ru˘i⁄
*> 
	mm_In¢Cache
;

117 
VMSèã
 *
	mm_VM
;

119 
	m°d
::
sh¨ed_±r
<
SymExecut‹
> 
m_SymExecut‹
;

120 
	m°d
::
sh¨ed_±r
<
C⁄Execut‹
> 
m_C⁄Execut‹
;

122 
	m°d
::
sh¨ed_±r
<
EFœgsM™agî
> 
m_EFœgsMgr
;

124 #ifde‡
_PªDißs£mbÀ


125 
ul⁄g
 
	mm_ídRIP
;

126 
	m°d
::
m≠
<
uöt64_t
, 
	mul⁄g
> 
	mm_NextIP
;

127 
boﬁ
 
RódNextIPFromFûe
();

128 
boﬁ
 
PªP¨£O≥ønd
(
In°ru˘i⁄
* 
ö
);

131 
	mpublic
:

132 
CThöCål
(
VMSèã
* 
VM
, 
ul⁄g
 
adds
, ul⁄g 
adde
);

133 ~
CThöCål
();

138 
boﬁ
 
¥o˚ssFun˘i⁄
(
ul⁄g
 
addr
);

142 
boﬁ
 
ExecO√In¢
(
ul⁄g
 
addr
);

144 
	m¥iv©e
:

149 
boﬁ
 
£tRódRegs
(
DAPIIn°r
 *
I
);

150 
boﬁ
 
£tRódRegs
(
DAPIIn°rPå
 &
I
);

151 
boﬁ
 
∑r£O≥ønds
(
In°rInfo
 *
öfo
);

152 
boﬁ
 
maySymbﬁicRegi°î
(
uöt
 
ID
);

154 
boﬁ
 
maySymbﬁicMem‹yCñl
(
ul⁄g
 
mem‹y_addr
, 
width
);

156 
boﬁ
 
_mayO≥øndU£Symbﬁ_XX
(
O¥ndInfoPå
 &
oi
);

157 
boﬁ
 
_mayO≥øndU£Symbﬁ_RX
(
DAPIIn°rPå
 &
I
, 
O¥ndInfoPå
 &
oi
);

158 
boﬁ
 
_mayO≥øndU£Symbﬁ_XW
(
DAPIIn°rPå
 &
I
, 
O¥ndInfoPå
 &
oi
);

159 
boﬁ
 
_mayO≥øndU£Symbﬁ_RW
(
DAPIIn°rPå
 &
I
, 
O¥ndInfoPå
 &
oi
);

161 
boﬁ
 
chkC⁄dFaû
 (
íåyID
 
›îa_id
, 
±_ªgs
* 
ªgs
);

163 
boﬁ
 
dïídFœgC⁄
(
In°ru˘i⁄
* 
ö¢
, boﬁ &
bChoi˚
);

167 
boﬁ
 
di•©chRë
(
In°ru˘i⁄
* 
ö
, 
±_ªgs
* 
m_ªgs
);

168 
boﬁ
 
di•©chCÆl
(
In°ru˘i⁄
* 
ö
, 
±_ªgs
* 
m_ªgs
);

169 
boﬁ
 
di•©chBønch
(
In°ru˘i⁄
* 
ö
, 
±_ªgs
* 
m_ªgs
, 
ul⁄g
 
¸tAddr
, 
cc_ö¢_cou¡
);

170 
boﬁ
 
upd©eJCCDecisi⁄
(
In°ru˘i⁄
* 
ö
, 
±_ªgs
* 
m_ªgs
, 
ul⁄g
 
¸tAddr
, 
cc_ö¢_cou¡
);

172 
boﬁ
 
bödRegVÆF‹MemOpd
(
DIAPIO≥øndPå
 
›
);

174 
ul⁄g
 
isU£GS
(
In°ru˘i⁄
* 
ö
);

175 
boﬁ
 
OpdhasSymReg
(
O≥ønd
* 
OP
);

176 
boﬁ
 
OpdhasSymMemCñl
(
O≥ønd
* 
OP
, 
ul⁄g
 
gs_ba£
);

177 
boﬁ
 
checkIm∂icôMemAc˚ss
(
In°ru˘i⁄
 *
I
);

178 
boﬁ
 
hasSymO≥ønd
(
In°ru˘i⁄
* 
ö
);

	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/asm/processor-flags.h

2 #i‚de‡
_ASM_X86_PROCESSOR_FLAGS_H


3 
	#_ASM_X86_PROCESSOR_FLAGS_H


	)

6 
	~<löux/c⁄°.h
>

11 
	#X86_EFLAGS_CF_BIT
 0

	)

12 
	#X86_EFLAGS_CF
 
	`_BITUL
(
X86_EFLAGS_CF_BIT
)

	)

13 
	#X86_EFLAGS_FIXED_BIT
 1

	)

14 
	#X86_EFLAGS_FIXED
 
	`_BITUL
(
X86_EFLAGS_FIXED_BIT
)

	)

15 
	#X86_EFLAGS_PF_BIT
 2

	)

16 
	#X86_EFLAGS_PF
 
	`_BITUL
(
X86_EFLAGS_PF_BIT
)

	)

17 
	#X86_EFLAGS_AF_BIT
 4

	)

18 
	#X86_EFLAGS_AF
 
	`_BITUL
(
X86_EFLAGS_AF_BIT
)

	)

19 
	#X86_EFLAGS_ZF_BIT
 6

	)

20 
	#X86_EFLAGS_ZF
 
	`_BITUL
(
X86_EFLAGS_ZF_BIT
)

	)

21 
	#X86_EFLAGS_SF_BIT
 7

	)

22 
	#X86_EFLAGS_SF
 
	`_BITUL
(
X86_EFLAGS_SF_BIT
)

	)

23 
	#X86_EFLAGS_TF_BIT
 8

	)

24 
	#X86_EFLAGS_TF
 
	`_BITUL
(
X86_EFLAGS_TF_BIT
)

	)

25 
	#X86_EFLAGS_IF_BIT
 9

	)

26 
	#X86_EFLAGS_IF
 
	`_BITUL
(
X86_EFLAGS_IF_BIT
)

	)

27 
	#X86_EFLAGS_DF_BIT
 10

	)

28 
	#X86_EFLAGS_DF
 
	`_BITUL
(
X86_EFLAGS_DF_BIT
)

	)

29 
	#X86_EFLAGS_OF_BIT
 11

	)

30 
	#X86_EFLAGS_OF
 
	`_BITUL
(
X86_EFLAGS_OF_BIT
)

	)

31 
	#X86_EFLAGS_IOPL_BIT
 12

	)

32 
	#X86_EFLAGS_IOPL
 (
	`_AC
(3,
UL
Ë<< 
X86_EFLAGS_IOPL_BIT
)

	)

33 
	#X86_EFLAGS_NT_BIT
 14

	)

34 
	#X86_EFLAGS_NT
 
	`_BITUL
(
X86_EFLAGS_NT_BIT
)

	)

35 
	#X86_EFLAGS_RF_BIT
 16

	)

36 
	#X86_EFLAGS_RF
 
	`_BITUL
(
X86_EFLAGS_RF_BIT
)

	)

37 
	#X86_EFLAGS_VM_BIT
 17

	)

38 
	#X86_EFLAGS_VM
 
	`_BITUL
(
X86_EFLAGS_VM_BIT
)

	)

39 
	#X86_EFLAGS_AC_BIT
 18

	)

40 
	#X86_EFLAGS_AC
 
	`_BITUL
(
X86_EFLAGS_AC_BIT
)

	)

41 
	#X86_EFLAGS_VIF_BIT
 19

	)

42 
	#X86_EFLAGS_VIF
 
	`_BITUL
(
X86_EFLAGS_VIF_BIT
)

	)

43 
	#X86_EFLAGS_VIP_BIT
 20

	)

44 
	#X86_EFLAGS_VIP
 
	`_BITUL
(
X86_EFLAGS_VIP_BIT
)

	)

45 
	#X86_EFLAGS_ID_BIT
 21

	)

46 
	#X86_EFLAGS_ID
 
	`_BITUL
(
X86_EFLAGS_ID_BIT
)

	)

51 
	#X86_CR0_PE_BIT
 0

	)

52 
	#X86_CR0_PE
 
	`_BITUL
(
X86_CR0_PE_BIT
)

	)

53 
	#X86_CR0_MP_BIT
 1

	)

54 
	#X86_CR0_MP
 
	`_BITUL
(
X86_CR0_MP_BIT
)

	)

55 
	#X86_CR0_EM_BIT
 2

	)

56 
	#X86_CR0_EM
 
	`_BITUL
(
X86_CR0_EM_BIT
)

	)

57 
	#X86_CR0_TS_BIT
 3

	)

58 
	#X86_CR0_TS
 
	`_BITUL
(
X86_CR0_TS_BIT
)

	)

59 
	#X86_CR0_ET_BIT
 4

	)

60 
	#X86_CR0_ET
 
	`_BITUL
(
X86_CR0_ET_BIT
)

	)

61 
	#X86_CR0_NE_BIT
 5

	)

62 
	#X86_CR0_NE
 
	`_BITUL
(
X86_CR0_NE_BIT
)

	)

63 
	#X86_CR0_WP_BIT
 16

	)

64 
	#X86_CR0_WP
 
	`_BITUL
(
X86_CR0_WP_BIT
)

	)

65 
	#X86_CR0_AM_BIT
 18

	)

66 
	#X86_CR0_AM
 
	`_BITUL
(
X86_CR0_AM_BIT
)

	)

67 
	#X86_CR0_NW_BIT
 29

	)

68 
	#X86_CR0_NW
 
	`_BITUL
(
X86_CR0_NW_BIT
)

	)

69 
	#X86_CR0_CD_BIT
 30

	)

70 
	#X86_CR0_CD
 
	`_BITUL
(
X86_CR0_CD_BIT
)

	)

71 
	#X86_CR0_PG_BIT
 31

	)

72 
	#X86_CR0_PG
 
	`_BITUL
(
X86_CR0_PG_BIT
)

	)

77 
	#X86_CR3_PWT_BIT
 3

	)

78 
	#X86_CR3_PWT
 
	`_BITUL
(
X86_CR3_PWT_BIT
)

	)

79 
	#X86_CR3_PCD_BIT
 4

	)

80 
	#X86_CR3_PCD
 
	`_BITUL
(
X86_CR3_PCD_BIT
)

	)

82 
	#X86_CR3_PCID_BITS
 12

	)

83 
	#X86_CR3_PCID_MASK
 (
	`_AC
((1UL << 
X86_CR3_PCID_BITS
Ë- 1, 
UL
))

	)

85 
	#X86_CR3_PCID_NOFLUSH_BIT
 63

	)

86 
	#X86_CR3_PCID_NOFLUSH
 
	`_BITULL
(
X86_CR3_PCID_NOFLUSH_BIT
)

	)

91 
	#X86_CR4_VME_BIT
 0

	)

92 
	#X86_CR4_VME
 
	`_BITUL
(
X86_CR4_VME_BIT
)

	)

93 
	#X86_CR4_PVI_BIT
 1

	)

94 
	#X86_CR4_PVI
 
	`_BITUL
(
X86_CR4_PVI_BIT
)

	)

95 
	#X86_CR4_TSD_BIT
 2

	)

96 
	#X86_CR4_TSD
 
	`_BITUL
(
X86_CR4_TSD_BIT
)

	)

97 
	#X86_CR4_DE_BIT
 3

	)

98 
	#X86_CR4_DE
 
	`_BITUL
(
X86_CR4_DE_BIT
)

	)

99 
	#X86_CR4_PSE_BIT
 4

	)

100 
	#X86_CR4_PSE
 
	`_BITUL
(
X86_CR4_PSE_BIT
)

	)

101 
	#X86_CR4_PAE_BIT
 5

	)

102 
	#X86_CR4_PAE
 
	`_BITUL
(
X86_CR4_PAE_BIT
)

	)

103 
	#X86_CR4_MCE_BIT
 6

	)

104 
	#X86_CR4_MCE
 
	`_BITUL
(
X86_CR4_MCE_BIT
)

	)

105 
	#X86_CR4_PGE_BIT
 7

	)

106 
	#X86_CR4_PGE
 
	`_BITUL
(
X86_CR4_PGE_BIT
)

	)

107 
	#X86_CR4_PCE_BIT
 8

	)

108 
	#X86_CR4_PCE
 
	`_BITUL
(
X86_CR4_PCE_BIT
)

	)

109 
	#X86_CR4_OSFXSR_BIT
 9

	)

110 
	#X86_CR4_OSFXSR
 
	`_BITUL
(
X86_CR4_OSFXSR_BIT
)

	)

111 
	#X86_CR4_OSXMMEXCPT_BIT
 10

	)

112 
	#X86_CR4_OSXMMEXCPT
 
	`_BITUL
(
X86_CR4_OSXMMEXCPT_BIT
)

	)

113 
	#X86_CR4_UMIP_BIT
 11

	)

114 
	#X86_CR4_UMIP
 
	`_BITUL
(
X86_CR4_UMIP_BIT
)

	)

115 
	#X86_CR4_LA57_BIT
 12

	)

116 
	#X86_CR4_LA57
 
	`_BITUL
(
X86_CR4_LA57_BIT
)

	)

117 
	#X86_CR4_VMXE_BIT
 13

	)

118 
	#X86_CR4_VMXE
 
	`_BITUL
(
X86_CR4_VMXE_BIT
)

	)

119 
	#X86_CR4_SMXE_BIT
 14

	)

120 
	#X86_CR4_SMXE
 
	`_BITUL
(
X86_CR4_SMXE_BIT
)

	)

121 
	#X86_CR4_FSGSBASE_BIT
 16

	)

122 
	#X86_CR4_FSGSBASE
 
	`_BITUL
(
X86_CR4_FSGSBASE_BIT
)

	)

123 
	#X86_CR4_PCIDE_BIT
 17

	)

124 
	#X86_CR4_PCIDE
 
	`_BITUL
(
X86_CR4_PCIDE_BIT
)

	)

125 
	#X86_CR4_OSXSAVE_BIT
 18

	)

126 
	#X86_CR4_OSXSAVE
 
	`_BITUL
(
X86_CR4_OSXSAVE_BIT
)

	)

127 
	#X86_CR4_SMEP_BIT
 20

	)

128 
	#X86_CR4_SMEP
 
	`_BITUL
(
X86_CR4_SMEP_BIT
)

	)

129 
	#X86_CR4_SMAP_BIT
 21

	)

130 
	#X86_CR4_SMAP
 
	`_BITUL
(
X86_CR4_SMAP_BIT
)

	)

131 
	#X86_CR4_PKE_BIT
 22

	)

132 
	#X86_CR4_PKE
 
	`_BITUL
(
X86_CR4_PKE_BIT
)

	)

137 
	#X86_CR8_TPR
 
	`_AC
(0x0000000f,
UL
Ë

	)

146 
	#CX86_PCR0
 0x20

	)

147 
	#CX86_GCR
 0xb8

	)

148 
	#CX86_CCR0
 0xc0

	)

149 
	#CX86_CCR1
 0xc1

	)

150 
	#CX86_CCR2
 0xc2

	)

151 
	#CX86_CCR3
 0xc3

	)

152 
	#CX86_CCR4
 0xe8

	)

153 
	#CX86_CCR5
 0xe9

	)

154 
	#CX86_CCR6
 0xó

	)

155 
	#CX86_CCR7
 0xeb

	)

156 
	#CX86_PCR1
 0xf0

	)

157 
	#CX86_DIR0
 0x„

	)

158 
	#CX86_DIR1
 0xff

	)

159 
	#CX86_ARR_BASE
 0xc4

	)

160 
	#CX86_RCR_BASE
 0xdc

	)

162 
	#CR0_STATE
 (
X86_CR0_PE
 | 
X86_CR0_MP
 | 
X86_CR0_ET
 | \

163 
X86_CR0_NE
 | 
X86_CR0_WP
 | 
X86_CR0_AM
 | \

164 
X86_CR0_PG
)

	)

	@/usr/include/asm/ptrace-abi.h

2 #i‚de‡
_ASM_X86_PTRACE_ABI_H


3 
	#_ASM_X86_PTRACE_ABI_H


	)

5 #ifde‡
__i386__


7 
	#EBX
 0

	)

8 
	#ECX
 1

	)

9 
	#EDX
 2

	)

10 
	#ESI
 3

	)

11 
	#EDI
 4

	)

12 
	#EBP
 5

	)

13 
	#EAX
 6

	)

14 
	#DS
 7

	)

15 
	#ES
 8

	)

16 
	#FS
 9

	)

17 
	#GS
 10

	)

18 
	#ORIG_EAX
 11

	)

19 
	#EIP
 12

	)

20 
	#CS
 13

	)

21 
	#EFL
 14

	)

22 
	#UESP
 15

	)

23 
	#SS
 16

	)

24 
	#FRAME_SIZE
 17

	)

28 #i‡
deföed
(
__ASSEMBLY__
Ë|| deföed(
__FRAME_OFFSETS
)

33 
	#R15
 0

	)

34 
	#R14
 8

	)

35 
	#R13
 16

	)

36 
	#R12
 24

	)

37 
	#RBP
 32

	)

38 
	#RBX
 40

	)

40 
	#R11
 48

	)

41 
	#R10
 56

	)

42 
	#R9
 64

	)

43 
	#R8
 72

	)

44 
	#RAX
 80

	)

45 
	#RCX
 88

	)

46 
	#RDX
 96

	)

47 
	#RSI
 104

	)

48 
	#RDI
 112

	)

53 
	#ORIG_RAX
 120

	)

55 
	#RIP
 128

	)

56 
	#CS
 136

	)

57 
	#EFLAGS
 144

	)

58 
	#RSP
 152

	)

59 
	#SS
 160

	)

63 
	#FRAME_SIZE
 168

	)

68 
	#PTRACE_GETREGS
 12

	)

69 
	#PTRACE_SETREGS
 13

	)

70 
	#PTRACE_GETFPREGS
 14

	)

71 
	#PTRACE_SETFPREGS
 15

	)

72 
	#PTRACE_GETFPXREGS
 18

	)

73 
	#PTRACE_SETFPXREGS
 19

	)

75 
	#PTRACE_OLDSETOPTIONS
 21

	)

78 
	#PTRACE_GET_THREAD_AREA
 25

	)

79 
	#PTRACE_SET_THREAD_AREA
 26

	)

81 #ifde‡
__x86_64__


82 
	#PTRACE_ARCH_PRCTL
 30

	)

85 
	#PTRACE_SYSEMU
 31

	)

86 
	#PTRACE_SYSEMU_SINGLESTEP
 32

	)

88 
	#PTRACE_SINGLEBLOCK
 33

	)

90 #i‚de‡
__ASSEMBLY__


91 
	~<löux/ty≥s.h
>

	@/usr/include/asm/types.h

2 #i‚de‡
_ASM_X86_TYPES_H


3 
	#_ASM_X86_TYPES_H


	)

5 
	~<asm-gíîic/ty≥s.h
>

	@/usr/include/bits/dlfcn.h

19 #i‚de‡
_DLFCN_H


24 
	#RTLD_LAZY
 0x00001

	)

25 
	#RTLD_NOW
 0x00002

	)

26 
	#RTLD_BINDING_MASK
 0x3

	)

27 
	#RTLD_NOLOAD
 0x00004

	)

28 
	#RTLD_DEEPBIND
 0x00008

	)

33 
	#RTLD_GLOBAL
 0x00100

	)

38 
	#RTLD_LOCAL
 0

	)

41 
	#RTLD_NODELETE
 0x01000

	)

43 #ifde‡
__USE_GNU


54 
	#DL_CALL_FCT
(
f˘p
, 
¨gs
) \

55 (
	`_dl_mcou¡_wøµî_check
 ((*Ë(
f˘p
)), (*(f˘p)Ë
¨gs
)

	)

57 
__BEGIN_DECLS


60 
	$_dl_mcou¡_wøµî_check
 (*
__£lÂc
Ë
__THROW
;

62 
__END_DECLS


	@/usr/include/bits/elfclass.h

5 #i‚de‡
_LINK_H


9 
	~<bôs/w‹dsize.h
>

11 
	#__ELF_NATIVE_CLASS
 
__WORDSIZE


	)

14 
uöt32_t
 
	tElf_Symndx
;

	@/usr/include/bits/floatn.h

19 #i‚de‡
_BITS_FLOATN_H


20 
	#_BITS_FLOATN_H


	)

22 
	~<„©uªs.h
>

29 #i‡(
deföed
 
__x86_64__
 \

30 ? 
__GNUC_PREREQ
 (4, 3) \

31 : (
deföed
 
__GNU__
 ? 
	$__GNUC_PREREQ
 (4, 5Ë: 
	`__GNUC_PREREQ
 (4, 4))) \

32 && !
	`deföed
(
__CUDACC__
Ë&& !
	$deföed
(
__ICC
)

33 
	#__HAVE_FLOAT128
 1

	)

35 
	#__HAVE_FLOAT128
 0

	)

40 #i‡
__HAVE_FLOAT128


41 
	#__HAVE_DISTINCT_FLOAT128
 1

	)

43 
	#__HAVE_DISTINCT_FLOAT128
 0

	)

49 
	#__HAVE_FLOAT64X
 1

	)

55 
	#__HAVE_FLOAT64X_LONG_DOUBLE
 1

	)

57 #i‚de‡
__ASSEMBLER__


61 #i‡
__HAVE_FLOAT128


62 #i‡!
	`__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


64 
	#__f128
(
x
Ëx##
q


	)

66 
	#__f128
(
x
Ëx##
f128


	)

71 #i‡
__HAVE_FLOAT128


72 #i‡!
	`__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


75 
_Com∂ex
 
	t__cÊﬂt128
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__TC__
)));

76 
	#__CFLOAT128
 
__cÊﬂt128


	)

78 
	#__CFLOAT128
 
_Com∂ex
 
_Flﬂt128


	)

83 #i‡
__HAVE_FLOAT128


86 #i‡!
	`__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


87 
__Êﬂt128
 
	t_Flﬂt128
;

91 #i‡!
	`__GNUC_PREREQ
 (7, 0)

92 
	#__buûtö_huge_vÆf128
(Ë((
_Flﬂt128
Ë
	`__buûtö_huge_vÆ
 ())

	)

100 #i‡!
	`__GNUC_PREREQ
 (7, 0)

101 
	#__buûtö_c›ysignf128
 
__buûtö_c›ysignq


	)

102 
	#__buûtö_Ábsf128
 
__buûtö_Ábsq


	)

103 
	#__buûtö_öff128
(Ë((
_Flﬂt128
Ë
	`__buûtö_öf
 ())

	)

104 
	#__buûtö_«nf128
(
x
Ë((
_Flﬂt128
Ë
	`__buûtö_«n
 (x))

	)

105 
	#__buûtö_«nsf128
(
x
Ë((
_Flﬂt128
Ë
	`__buûtö_«ns
 (x))

	)

112 #i‡!
	`__GNUC_PREREQ
 (6, 0)

113 
	#__buûtö_signbôf128
 
__signbôf128


	)

120 
	~<bôs/Êﬂä-comm⁄.h
>

	@/usr/include/bits/getopt_posix.h

20 #i‚de‡
_GETOPT_POSIX_H


21 
	#_GETOPT_POSIX_H
 1

	)

23 #i‡!
deföed
 
_UNISTD_H
 && !deföed 
_STDIO_H


27 
	~<bôs/gë›t_c‹e.h
>

29 
	g__BEGIN_DECLS


31 #i‡
deföed
 
__USE_POSIX2
 && !deföed 
__USE_POSIX_IMPLICITLY
 \

32 && !
deföed
 
	g__USE_GNU
 && !deföed 
	g_GETOPT_H


37 #ifde‡
__REDIRECT


38 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

39 c⁄° *
__sh‹t›ts
),

40 
__posix_gë›t
);

42 
	$__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

43 c⁄° *
__sh‹t›ts
)

44 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

45 
	#gë›t
 
__posix_gë›t


	)

49 
__END_DECLS


	@/usr/include/bits/indirect-return.h

19 #i‚de‡
_UCONTEXT_H


26 #i‡
deföed
 
__CET__
 && (__CET__ & 2) != 0

27 #i‡
__glibc_has_©åibuã
 (
__ödúe˘_ªtu∫__
)

28 
	#__INDIRECT_RETURN
 
	`__©åibuã__
 ((
__ödúe˘_ªtu∫__
))

	)

33 
	#__INDIRECT_RETURN
 
	`__©åibuã__
 ((
__ªtu∫s_twi˚__
))

	)

36 
	#__INDIRECT_RETURN


	)

	@/usr/include/bits/libc-header-start.h

27 #i‚de‡
__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


31 #unde‡
__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


33 
	~<„©uªs.h
>

37 #unde‡
__GLIBC_USE_LIB_EXT2


38 #i‡(
deföed
 
__USE_GNU
 \

39 || (
deföed
 
	g__STDC_WANT_LIB_EXT2__
 && __STDC_WANT_LIB_EXT2__ > 0))

40 
	#__GLIBC_USE_LIB_EXT2
 1

	)

42 
	#__GLIBC_USE_LIB_EXT2
 0

	)

47 #unde‡
__GLIBC_USE_IEC_60559_BFP_EXT


48 #i‡
deföed
 
__USE_GNU
 || deföed 
__STDC_WANT_IEC_60559_BFP_EXT__


49 
	#__GLIBC_USE_IEC_60559_BFP_EXT
 1

	)

51 
	#__GLIBC_USE_IEC_60559_BFP_EXT
 0

	)

56 #unde‡
__GLIBC_USE_IEC_60559_FUNCS_EXT


57 #i‡
deföed
 
__USE_GNU
 || deföed 
__STDC_WANT_IEC_60559_FUNCS_EXT__


58 
	#__GLIBC_USE_IEC_60559_FUNCS_EXT
 1

	)

60 
	#__GLIBC_USE_IEC_60559_FUNCS_EXT
 0

	)

65 #unde‡
__GLIBC_USE_IEC_60559_TYPES_EXT


66 #i‡
deföed
 
__USE_GNU
 || deföed 
__STDC_WANT_IEC_60559_TYPES_EXT__


67 
	#__GLIBC_USE_IEC_60559_TYPES_EXT
 1

	)

69 
	#__GLIBC_USE_IEC_60559_TYPES_EXT
 0

	)

	@/usr/include/bits/link.h

18 #i‚def 
_LINK_H


23 #i‚de‡
__x86_64__


25 
	sLa_i86_ªgs


27 
uöt32_t
 
	mÃ_edx
;

28 
uöt32_t
 
	mÃ_ecx
;

29 
uöt32_t
 
	mÃ_óx
;

30 
uöt32_t
 
	mÃ_ebp
;

31 
uöt32_t
 
	mÃ_e•
;

32 } 
	tLa_i86_ªgs
;

35 
	sLa_i86_ªtvÆ


37 
uöt32_t
 
	mÃv_óx
;

38 
uöt32_t
 
	mÃv_edx
;

39 
	mÃv_°0
;

40 
	mÃv_°1
;

41 
uöt64_t
 
	mÃv_bnd0
;

42 
uöt64_t
 
	mÃv_bnd1
;

43 } 
	tLa_i86_ªtvÆ
;

46 
__BEGIN_DECLS


48 
Elf32_Addr
 
œ_i86_gnu_∂ã¡î
 (
Elf32_Sym
 *
__sym
, 
__ndx
,

49 
uöçå_t
 *
__ªfcook
,

50 
uöçå_t
 *
__defcook
,

51 
La_i86_ªgs
 *
__ªgs
,

52 *
__Êags
,

53 c⁄° *
__sym«me
,

54 *
__‰amesizï
);

55 
œ_i86_gnu_∂ãxô
 (
Elf32_Sym
 *
__sym
, 
__ndx
,

56 
uöçå_t
 *
__ªfcook
,

57 
uöçå_t
 *
__defcook
,

58 c⁄° 
La_i86_ªgs
 *
__öªgs
,

59 
La_i86_ªtvÆ
 *
__ouåegs
,

60 c⁄° *
sym«me
);

62 
	g__END_DECLS


67 #i‡
__GNUC_PREREQ
 (4,0)

68 
	tLa_x86_64_xmm
 
	t__©åibuã__
 ((
	t__ve˘‹_size__
 (16)));

69 
	tLa_x86_64_ymm


70 
	t__©åibuã__
 ((
	t__ve˘‹_size__
 (32), 
	t__Æig√d__
 (16)));

71 
	tLa_x86_64_zmm


72 
	t__©åibuã__
 ((
	t__ve˘‹_size__
 (64), 
	t__Æig√d__
 (16)));

74 
	tLa_x86_64_xmm
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__V4SF__
)));

79 #i‡
__GNUC_PREREQ
 (4,0)

80 
La_x86_64_ymm
 
	mymm
[2];

81 
La_x86_64_zmm
 
	mzmm
[1];

83 
La_x86_64_xmm
 
	mxmm
[4];

84 } 
	tLa_x86_64_ve˘‹
 
	t__©åibuã__
 ((
	t__Æig√d__
 (16)));

86 
	sLa_x86_64_ªgs


88 
uöt64_t
 
	mÃ_rdx
;

89 
uöt64_t
 
	mÃ_r8
;

90 
uöt64_t
 
	mÃ_r9
;

91 
uöt64_t
 
	mÃ_rcx
;

92 
uöt64_t
 
	mÃ_rsi
;

93 
uöt64_t
 
	mÃ_rdi
;

94 
uöt64_t
 
	mÃ_rbp
;

95 
uöt64_t
 
	mÃ_r•
;

96 
La_x86_64_xmm
 
	mÃ_xmm
[8];

97 
La_x86_64_ve˘‹
 
	mÃ_ve˘‹
[8];

98 #i‚de‡
__ILP32__


99 
__öt128_t
 
	mÃ_bnd
[4];

101 } 
	tLa_x86_64_ªgs
;

104 
	sLa_x86_64_ªtvÆ


106 
uöt64_t
 
	mÃv_øx
;

107 
uöt64_t
 
	mÃv_rdx
;

108 
La_x86_64_xmm
 
	mÃv_xmm0
;

109 
La_x86_64_xmm
 
	mÃv_xmm1
;

110 
	mÃv_°0
;

111 
	mÃv_°1
;

112 
La_x86_64_ve˘‹
 
	mÃv_ve˘‹0
;

113 
La_x86_64_ve˘‹
 
	mÃv_ve˘‹1
;

114 #i‚de‡
__ILP32__


115 
__öt128_t
 
	mÃv_bnd0
;

116 
__öt128_t
 
	mÃv_bnd1
;

118 } 
	tLa_x86_64_ªtvÆ
;

120 
	#La_x32_ªgs
 
La_x86_64_ªgs


	)

121 
	#La_x32_ªtvÆ
 
La_x86_64_ªtvÆ


	)

123 
__BEGIN_DECLS


125 
Elf64_Addr
 
œ_x86_64_gnu_∂ã¡î
 (
Elf64_Sym
 *
__sym
,

126 
__ndx
,

127 
uöçå_t
 *
__ªfcook
,

128 
uöçå_t
 *
__defcook
,

129 
La_x86_64_ªgs
 *
__ªgs
,

130 *
__Êags
,

131 c⁄° *
__sym«me
,

132 *
__‰amesizï
);

133 
œ_x86_64_gnu_∂ãxô
 (
Elf64_Sym
 *
__sym
,

134 
__ndx
,

135 
uöçå_t
 *
__ªfcook
,

136 
uöçå_t
 *
__defcook
,

137 c⁄° 
La_x86_64_ªgs
 *
__öªgs
,

138 
La_x86_64_ªtvÆ
 *
__ouåegs
,

139 c⁄° *
__sym«me
);

141 
Elf32_Addr
 
œ_x32_gnu_∂ã¡î
 (
Elf32_Sym
 *
__sym
,

142 
__ndx
,

143 
uöçå_t
 *
__ªfcook
,

144 
uöçå_t
 *
__defcook
,

145 
La_x32_ªgs
 *
__ªgs
,

146 *
__Êags
,

147 c⁄° *
__sym«me
,

148 *
__‰amesizï
);

149 
œ_x32_gnu_∂ãxô
 (
Elf32_Sym
 *
__sym
,

150 
__ndx
,

151 
uöçå_t
 *
__ªfcook
,

152 
uöçå_t
 *
__defcook
,

153 c⁄° 
La_x32_ªgs
 *
__öªgs
,

154 
La_x32_ªtvÆ
 *
__ouåegs
,

155 c⁄° *
__sym«me
);

157 
	g__END_DECLS


	@/usr/include/bits/mman.h

19 #i‚de‡
_SYS_MMAN_H


27 #ifde‡
__USE_MISC


28 
	#MAP_32BIT
 0x40

	)

31 
	~<bôs/mm™-m≠-Êags-gíîic.h
>

34 
	~<bôs/mm™-löux.h
>

	@/usr/include/bits/pthreadtypes.h

19 #i‚de‡
_BITS_PTHREADTYPES_COMMON_H


20 
	#_BITS_PTHREADTYPES_COMMON_H
 1

	)

23 
	~<bôs/thªad-sh¨ed-ty≥s.h
>

27 
	t±hªad_t
;

34 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

35 
	m__Æign
;

36 } 
	t±hªad_muãx©å_t
;

43 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

44 
	m__Æign
;

45 } 
	t±hªad_c⁄d©å_t
;

49 
	t±hªad_key_t
;

53 
	t__ONCE_ALIGNMENT
 
	t±hªad_⁄˚_t
;

56 
	u±hªad_©å_t


58 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

59 
	m__Æign
;

61 #i‚de‡
__have_±hªad_©å_t


62 
±hªad_©å_t
 
	t±hªad_©å_t
;

63 
	#__have_±hªad_©å_t
 1

	)

69 
__±hªad_muãx_s
 
	m__d©a
;

70 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

71 
	m__Æign
;

72 } 
	t±hªad_muãx_t
;

77 
__±hªad_c⁄d_s
 
	m__d©a
;

78 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

79 
__exãnsi⁄__
 
	m__Æign
;

80 } 
	t±hªad_c⁄d_t
;

83 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


88 
__±hªad_rwlock_¨ch_t
 
	m__d©a
;

89 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

90 
	m__Æign
;

91 } 
	t±hªad_rwlock_t
;

95 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

96 
	m__Æign
;

97 } 
	t±hªad_rwlock©å_t
;

101 #ifde‡
__USE_XOPEN2K


103 vﬁ©ûê
	t±hªad_•ölock_t
;

110 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

111 
	m__Æign
;

112 } 
	t±hªad_b¨rõr_t
;

116 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

117 
	m__Æign
;

118 } 
	t±hªad_b¨rõøâr_t
;

	@/usr/include/bits/sigaction.h

19 #i‚de‡
_BITS_SIGACTION_H


20 
	#_BITS_SIGACTION_H
 1

	)

22 #i‚de‡
_SIGNAL_H


27 
	ssiga˘i⁄


30 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


34 
__sigh™dÀr_t
 
	mß_h™dÀr
;

36 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

38 
	m__siga˘i⁄_h™dÀr
;

39 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

40 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

42 
__sigh™dÀr_t
 
	mß_h™dÀr
;

46 
__sig£t_t
 
	mß_mask
;

49 
	mß_Êags
;

52 (*
	mß_ª°‹î
) ();

56 
	#SA_NOCLDSTOP
 1

	)

57 
	#SA_NOCLDWAIT
 2

	)

58 
	#SA_SIGINFO
 4

	)

60 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_MISC


61 
	#SA_ONSTACK
 0x08000000

	)

63 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


64 
	#SA_RESTART
 0x10000000

	)

65 
	#SA_NODEFER
 0x40000000

	)

67 
	#SA_RESETHAND
 0x80000000

	)

69 #ifde‡
__USE_MISC


70 
	#SA_INTERRUPT
 0x20000000

	)

73 
	#SA_NOMASK
 
SA_NODEFER


	)

74 
	#SA_ONESHOT
 
SA_RESETHAND


	)

75 
	#SA_STACK
 
SA_ONSTACK


	)

79 
	#SIG_BLOCK
 0

	)

80 
	#SIG_UNBLOCK
 1

	)

81 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

18 #i‚de‡
_BITS_SIGCONTEXT_H


19 
	#_BITS_SIGCONTEXT_H
 1

	)

21 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


25 
	~<bôs/ty≥s.h
>

27 
	#FP_XSTATE_MAGIC1
 0x46505853U

	)

28 
	#FP_XSTATE_MAGIC2
 0x46505845U

	)

29 
	#FP_XSTATE_MAGIC2_SIZE
  (
FP_XSTATE_MAGIC2
)

	)

31 
	s_Âx_sw_byãs


33 
__uöt32_t
 
	mmagic1
;

34 
__uöt32_t
 
	mexãnded_size
;

35 
__uöt64_t
 
	mx°©e_bv
;

36 
__uöt32_t
 
	mx°©e_size
;

37 
__uöt32_t
 
	m__glibc_ª£rved1
[7];

40 
	s_Âªg


42 
	msignifiˇnd
[4];

43 
	mexp⁄ít
;

46 
	s_Âxªg


48 
	msignifiˇnd
[4];

49 
	mexp⁄ít
;

50 
	m__glibc_ª£rved1
[3];

53 
	s_xmmªg


55 
__uöt32_t
 
	mñemít
[4];

60 #i‚de‡
__x86_64__


62 
	s_Â°©e


65 
__uöt32_t
 
	mcw
;

66 
__uöt32_t
 
	msw
;

67 
__uöt32_t
 
	mèg
;

68 
__uöt32_t
 
	mùoff
;

69 
__uöt32_t
 
	mcs£l
;

70 
__uöt32_t
 
	md©aoff
;

71 
__uöt32_t
 
	md©a£l
;

72 
_Âªg
 
	m_°
[8];

73 
	m°©us
;

74 
	mmagic
;

77 
__uöt32_t
 
	m_fx§_ív
[6];

78 
__uöt32_t
 
	mmxc§
;

79 
__uöt32_t
 
	m__glibc_ª£rved1
;

80 
_Âxªg
 
	m_fx§_°
[8];

81 
_xmmªg
 
	m_xmm
[8];

82 
__uöt32_t
 
	m__glibc_ª£rved2
[56];

85 #i‚de‡
sigc⁄ãxt_°ru˘


90 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

93 
	#X86_FXSR_MAGIC
 0x0000

	)

95 
	ssigc⁄ãxt


97 
	mgs
, 
	m__gsh
;

98 
	mfs
, 
	m__fsh
;

99 
	mes
, 
	m__esh
;

100 
	mds
, 
	m__dsh
;

101 
	medi
;

102 
	mesi
;

103 
	mebp
;

104 
	me•
;

105 
	mebx
;

106 
	medx
;

107 
	mecx
;

108 
	móx
;

109 
	må≠no
;

110 
	mîr
;

111 
	meù
;

112 
	mcs
, 
	m__csh
;

113 
	meÊags
;

114 
	me•_©_sig«l
;

115 
	mss
, 
	m__ssh
;

116 
_Â°©e
 * 
	mÂ°©e
;

117 
	mﬁdmask
;

118 
	m¸2
;

123 
	s_Â°©e


126 
__uöt16_t
 
	mcwd
;

127 
__uöt16_t
 
	mswd
;

128 
__uöt16_t
 
	m·w
;

129 
__uöt16_t
 
	mf›
;

130 
__uöt64_t
 
	mrù
;

131 
__uöt64_t
 
	mrdp
;

132 
__uöt32_t
 
	mmxc§
;

133 
__uöt32_t
 
	mmx¸_mask
;

134 
_Âxªg
 
	m_°
[8];

135 
_xmmªg
 
	m_xmm
[16];

136 
__uöt32_t
 
	m__glibc_ª£rved1
[24];

139 
	ssigc⁄ãxt


141 
__uöt64_t
 
	mr8
;

142 
__uöt64_t
 
	mr9
;

143 
__uöt64_t
 
	mr10
;

144 
__uöt64_t
 
	mr11
;

145 
__uöt64_t
 
	mr12
;

146 
__uöt64_t
 
	mr13
;

147 
__uöt64_t
 
	mr14
;

148 
__uöt64_t
 
	mr15
;

149 
__uöt64_t
 
	mrdi
;

150 
__uöt64_t
 
	mrsi
;

151 
__uöt64_t
 
	mrbp
;

152 
__uöt64_t
 
	mrbx
;

153 
__uöt64_t
 
	mrdx
;

154 
__uöt64_t
 
	møx
;

155 
__uöt64_t
 
	mrcx
;

156 
__uöt64_t
 
	mr•
;

157 
__uöt64_t
 
	mrù
;

158 
__uöt64_t
 
	meÊags
;

159 
	mcs
;

160 
	mgs
;

161 
	mfs
;

162 
	m__∑d0
;

163 
__uöt64_t
 
	mîr
;

164 
__uöt64_t
 
	må≠no
;

165 
__uöt64_t
 
	mﬁdmask
;

166 
__uöt64_t
 
	m¸2
;

167 
__exãnsi⁄__
 union

169 
_Â°©e
 * 
	mÂ°©e
;

170 
__uöt64_t
 
	m__Â°©e_w‹d
;

172 
__uöt64_t
 
	m__ª£rved1
 [8];

177 
	s_xßve_hdr


179 
__uöt64_t
 
	mx°©e_bv
;

180 
__uöt64_t
 
	m__glibc_ª£rved1
[2];

181 
__uöt64_t
 
	m__glibc_ª£rved2
[5];

184 
	s_ymmh_°©e


186 
__uöt32_t
 
	mymmh_•a˚
[64];

189 
	s_x°©e


191 
_Â°©e
 
	mÂ°©e
;

192 
_xßve_hdr
 
	mx°©e_hdr
;

193 
_ymmh_°©e
 
	mymmh
;

	@/usr/include/bits/sigevent-consts.h

19 #i‚de‡
_BITS_SIGEVENT_CONSTS_H


20 
	#_BITS_SIGEVENT_CONSTS_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_AIO_H


29 
	mSIGEV_SIGNAL
 = 0,

30 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

31 
	mSIGEV_NONE
,

32 
	#SIGEV_NONE
 
SIGEV_NONE


	)

33 
	mSIGEV_THREAD
,

34 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

36 
	mSIGEV_THREAD_ID
 = 4

38 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/siginfo-consts.h

19 #i‚de‡
_BITS_SIGINFO_CONSTS_H


20 
	#_BITS_SIGINFO_CONSTS_H
 1

	)

22 #i‚de‡
_SIGNAL_H


28 
	~<bôs/sigöfo-¨ch.h
>

29 #i‚de‡
__SI_ASYNCIO_AFTER_SIGIO


30 
	#__SI_ASYNCIO_AFTER_SIGIO
 1

	)

37 
	mSI_ASYNCNL
 = -60,

38 
	mSI_DETHREAD
 = -7,

40 
	mSI_TKILL
,

41 
	mSI_SIGIO
,

42 #i‡
__SI_ASYNCIO_AFTER_SIGIO


43 
	mSI_ASYNCIO
,

44 
	mSI_MESGQ
,

45 
	mSI_TIMER
,

47 
	mSI_MESGQ
,

48 
	mSI_TIMER
,

49 
	mSI_ASYNCIO
,

51 
	mSI_QUEUE
,

52 
	mSI_USER
,

53 
	mSI_KERNEL
 = 0x80

55 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

56 
	#SI_DETHREAD
 
SI_DETHREAD


	)

57 
	#SI_TKILL
 
SI_TKILL


	)

58 
	#SI_SIGIO
 
SI_SIGIO


	)

59 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

60 
	#SI_MESGQ
 
SI_MESGQ


	)

61 
	#SI_TIMER
 
SI_TIMER


	)

62 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

63 
	#SI_QUEUE
 
SI_QUEUE


	)

64 
	#SI_USER
 
SI_USER


	)

65 
	#SI_KERNEL
 
SI_KERNEL


	)

69 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


73 
	mILL_ILLOPC
 = 1,

74 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

75 
	mILL_ILLOPN
,

76 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

77 
	mILL_ILLADR
,

78 
	#ILL_ILLADR
 
ILL_ILLADR


	)

79 
	mILL_ILLTRP
,

80 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

81 
	mILL_PRVOPC
,

82 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

83 
	mILL_PRVREG
,

84 
	#ILL_PRVREG
 
ILL_PRVREG


	)

85 
	mILL_COPROC
,

86 
	#ILL_COPROC
 
ILL_COPROC


	)

87 
	mILL_BADSTK
,

88 
	#ILL_BADSTK
 
ILL_BADSTK


	)

89 
	mILL_BADIADDR


90 
	#ILL_BADIADDR
 
ILL_BADIADDR


	)

96 
	mFPE_INTDIV
 = 1,

97 
	#FPE_INTDIV
 
FPE_INTDIV


	)

98 
	mFPE_INTOVF
,

99 
	#FPE_INTOVF
 
FPE_INTOVF


	)

100 
	mFPE_FLTDIV
,

101 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

102 
	mFPE_FLTOVF
,

103 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

104 
	mFPE_FLTUND
,

105 
	#FPE_FLTUND
 
FPE_FLTUND


	)

106 
	mFPE_FLTRES
,

107 
	#FPE_FLTRES
 
FPE_FLTRES


	)

108 
	mFPE_FLTINV
,

109 
	#FPE_FLTINV
 
FPE_FLTINV


	)

110 
	mFPE_FLTSUB
,

111 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

112 
	mFPE_FLTUNK
 = 14,

113 
	#FPE_FLTUNK
 
FPE_FLTUNK


	)

114 
	mFPE_CONDTRAP


115 
	#FPE_CONDTRAP
 
FPE_CONDTRAP


	)

121 
	mSEGV_MAPERR
 = 1,

122 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

123 
	mSEGV_ACCERR
,

124 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

125 
	mSEGV_BNDERR
,

126 
	#SEGV_BNDERR
 
SEGV_BNDERR


	)

127 
	mSEGV_PKUERR
,

128 
	#SEGV_PKUERR
 
SEGV_PKUERR


	)

129 
	mSEGV_ACCADI
,

130 
	#SEGV_ACCADI
 
SEGV_ACCADI


	)

131 
	mSEGV_ADIDERR
,

132 
	#SEGV_ADIDERR
 
SEGV_ADIDERR


	)

133 
	mSEGV_ADIPERR


134 
	#SEGV_ADIPERR
 
SEGV_ADIPERR


	)

140 
	mBUS_ADRALN
 = 1,

141 
	#BUS_ADRALN
 
BUS_ADRALN


	)

142 
	mBUS_ADRERR
,

143 
	#BUS_ADRERR
 
BUS_ADRERR


	)

144 
	mBUS_OBJERR
,

145 
	#BUS_OBJERR
 
BUS_OBJERR


	)

146 
	mBUS_MCEERR_AR
,

147 
	#BUS_MCEERR_AR
 
BUS_MCEERR_AR


	)

148 
	mBUS_MCEERR_AO


149 
	#BUS_MCEERR_AO
 
BUS_MCEERR_AO


	)

153 #ifde‡
__USE_XOPEN_EXTENDED


157 
	mTRAP_BRKPT
 = 1,

158 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

159 
	mTRAP_TRACE
,

160 
	#TRAP_TRACE
 
TRAP_TRACE


	)

161 
	mTRAP_BRANCH
,

162 
	#TRAP_BRANCH
 
TRAP_BRANCH


	)

163 
	mTRAP_HWBKPT
,

164 
	#TRAP_HWBKPT
 
TRAP_HWBKPT


	)

165 
	mTRAP_UNK


166 
	#TRAP_UNK
 
TRAP_UNK


	)

170 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


174 
	mCLD_EXITED
 = 1,

175 
	#CLD_EXITED
 
CLD_EXITED


	)

176 
	mCLD_KILLED
,

177 
	#CLD_KILLED
 
CLD_KILLED


	)

178 
	mCLD_DUMPED
,

179 
	#CLD_DUMPED
 
CLD_DUMPED


	)

180 
	mCLD_TRAPPED
,

181 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

182 
	mCLD_STOPPED
,

183 
	#CLD_STOPPED
 
CLD_STOPPED


	)

184 
	mCLD_CONTINUED


185 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

191 
	mPOLL_IN
 = 1,

192 
	#POLL_IN
 
POLL_IN


	)

193 
	mPOLL_OUT
,

194 
	#POLL_OUT
 
POLL_OUT


	)

195 
	mPOLL_MSG
,

196 
	#POLL_MSG
 
POLL_MSG


	)

197 
	mPOLL_ERR
,

198 
	#POLL_ERR
 
POLL_ERR


	)

199 
	mPOLL_PRI
,

200 
	#POLL_PRI
 
POLL_PRI


	)

201 
	mPOLL_HUP


202 
	#POLL_HUP
 
POLL_HUP


	)

208 #ifde‡
__USE_GNU


209 
	~<bôs/sigöfo-c⁄°s-¨ch.h
>

	@/usr/include/bits/signal_ext.h

19 #i‚de‡
_SIGNAL_H


23 #ifde‡
__USE_GNU


29 
tgkûl
 (
__pid_t
 
__tgid
, __pid_à
__tid
, 
__sig«l
);

	@/usr/include/bits/signum.h

19 #i‚de‡
_BITS_SIGNUM_H


20 
	#_BITS_SIGNUM_H
 1

	)

22 #i‚de‡
_SIGNAL_H


26 
	~<bôs/signum-gíîic.h
>

31 
	#SIGSTKFLT
 16

	)

32 
	#SIGPWR
 30

	)

34 #unde‡
SIGBUS


35 
	#SIGBUS
 7

	)

36 #unde‡
SIGUSR1


37 
	#SIGUSR1
 10

	)

38 #unde‡
SIGUSR2


39 
	#SIGUSR2
 12

	)

40 #unde‡
SIGCHLD


41 
	#SIGCHLD
 17

	)

42 #unde‡
SIGCONT


43 
	#SIGCONT
 18

	)

44 #unde‡
SIGSTOP


45 
	#SIGSTOP
 19

	)

46 #unde‡
SIGTSTP


47 
	#SIGTSTP
 20

	)

48 #unde‡
SIGURG


49 
	#SIGURG
 23

	)

50 #unde‡
SIGPOLL


51 
	#SIGPOLL
 29

	)

52 #unde‡
SIGSYS


53 
	#SIGSYS
 31

	)

55 #unde‡
__SIGRTMAX


56 
	#__SIGRTMAX
 64

	)

	@/usr/include/bits/sigstack.h

19 #i‚de‡
_BITS_SIGSTACK_H


20 
	#_BITS_SIGSTACK_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


27 
	#MINSIGSTKSZ
 2048

	)

30 
	#SIGSTKSZ
 8192

	)

	@/usr/include/bits/sigthread.h

19 #i‚de‡
_BITS_SIGTHREAD_H


20 
	#_BITS_SIGTHREAD_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


27 
	~<bôs/ty≥s/__sig£t_t.h
>

31 
	$±hªad_sigmask
 (
__how
,

32 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

33 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

36 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

38 #ifde‡
__USE_GNU


40 
	$±hªad_sigqueue
 (
±hªad_t
 
__thªadid
, 
__signo
,

41 c⁄° 
sigvÆ
 
__vÆue
Ë
__THROW
;

	@/usr/include/bits/ss_flags.h

19 #i‚de‡
_BITS_SS_FLAGS_H


20 
	#_BITS_SS_FLAGS_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


29 
	mSS_ONSTACK
 = 1,

30 
	#SS_ONSTACK
 
SS_ONSTACK


	)

31 
	mSS_DISABLE


32 
	#SS_DISABLE
 
SS_DISABLE


	)

	@/usr/include/bits/stdio-ldbl.h

19 #i‚de‡
_STDIO_H


23 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

24 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

25 
	$__LDBL_REDIR_DECL
 (
•rötf
)

26 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

27 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

28 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

29 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
)

30 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

31 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

32 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

34 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

35 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

36 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

39 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


40 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

41 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

44 #ifdef 
__USE_ISOC99


45 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
)

46 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

47 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

48 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

50 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

51 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

52 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

56 #ifde‡
__USE_XOPEN2K8


57 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

58 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

61 #ifde‡
__USE_GNU


62 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

63 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

64 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

65 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

66 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

69 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


70 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

72 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


73 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

74 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

76 #i‡
__USE_FORTIFY_LEVEL
 > 1

77 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

78 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

79 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

80 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

81 #ifde‡
__USE_XOPEN2K8


82 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

83 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

85 #ifde‡
__USE_GNU


86 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

88 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

89 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

19 #i‚de‡
_BITS_STDIO_H


20 
	#_BITS_STDIO_H
 1

	)

22 #i‚de‡
_STDIO_H


26 #i‚de‡
__exã∫_ölöe


27 
	#__STDIO_INLINE
 
ölöe


	)

29 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

33 #ifde‡
__USE_EXTERN_INLINES


36 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
)

38 
__STDIO_INLINE
 

39 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__¨g
)

41  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

42 
	}
}

46 
__STDIO_INLINE
 

47 
	$gëch¨
 ()

49  
	`gëc
 (
°dö
);

50 
	}
}

53 #ifde‡
__USE_MISC


55 
__STDIO_INLINE
 

56 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

58  
	`__gëc_u∆ocked_body
 (
__Â
);

59 
	}
}

63 #ifde‡
__USE_POSIX


65 
__STDIO_INLINE
 

66 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

68  
	`__gëc_u∆ocked_body
 (
__Â
);

69 
	}
}

72 
__STDIO_INLINE
 

73 
	$gëch¨_u∆ocked
 ()

75  
	`__gëc_u∆ocked_body
 (
°dö
);

76 
	}
}

81 
__STDIO_INLINE
 

82 
	$putch¨
 (
__c
)

84  
	`putc
 (
__c
, 
°dout
);

85 
	}
}

88 #ifde‡
__USE_MISC


90 
__STDIO_INLINE
 

91 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

93  
	`__putc_u∆ocked_body
 (
__c
, 
__°ªam
);

94 
	}
}

98 #ifde‡
__USE_POSIX


100 
__STDIO_INLINE
 

101 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

103  
	`__putc_u∆ocked_body
 (
__c
, 
__°ªam
);

104 
	}
}

107 
__STDIO_INLINE
 

108 
	$putch¨_u∆ocked
 (
__c
)

110  
	`__putc_u∆ocked_body
 (
__c
, 
°dout
);

111 
	}
}

115 #ifdef 
__USE_GNU


117 
__STDIO_INLINE
 
__ssize_t


118 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

120  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

121 
	}
}

125 #ifde‡
__USE_MISC


127 
__STDIO_INLINE
 

128 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

130  
	`__„of_u∆ocked_body
 (
__°ªam
);

131 
	}
}

134 
__STDIO_INLINE
 

135 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

137  
	`__„º‹_u∆ocked_body
 (
__°ªam
);

138 
	}
}

144 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

145 && !
deföed
 
	g__˝lu•lus


147 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

148 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

149 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

150 && (
size_t
Ë(
size
) != 0) \

151 ? ({ *
__±r
 = (*Ë(
±r
); \

152 
FILE
 *
__°ªam
 = (
°ªam
); \

153 
size_t
 
__˙t
; \

154 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

155 
__˙t
 > 0; --__cnt) \

157 
__c
 = 
	`gëc_u∆ocked
 (
__°ªam
); \

158 i‡(
__c
 =
EOF
) \

160 *
__±r
++ = 
__c
; \

162 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

163 / (
size_t
Ë(
size
); }) \

164 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

165 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

167 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

168 (Ë(
n
), (
size_t
) 0) \

169 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

171 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

172 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

173 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

174 && (
size_t
Ë(
size
) != 0) \

175 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

176 
FILE
 *
__°ªam
 = (
°ªam
); \

177 
size_t
 
__˙t
; \

178 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

179 
__˙t
 > 0; --__cnt) \

180 i‡(
	`putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

182 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

183 / (
size_t
Ë(
size
); }) \

184 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

185 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

187 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

188 (Ë(
n
), (
size_t
) 0) \

189 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

193 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

19 #i‚de‡
_BITS_STDIO2_H


20 
	#_BITS_STDIO2_H
 1

	)

22 #i‚de‡
_STDIO_H


26 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

27 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

28 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

29 c⁄° *
__ª°ri˘
 
__f‹m©
,

30 
__gnuc_va_li°
 
__≠
Ë
__THROW
;

32 #ifde‡
__va_¨g_∑ck


33 
__f‹tify_fun˘i⁄
 

34 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
, ...))

36  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

37 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

38 
	}
}

39 #ñi‡!
deföed
 
__˝lu•lus


40 
	#•rötf
(
°r
, ...) \

41 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

42 
__VA_ARGS__
)

	)

45 
__f‹tify_fun˘i⁄
 

46 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
,

47 
__gnuc_va_li°
 
__≠
))

49  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

50 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

51 
	}
}

53 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


55 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

56 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

57 ...Ë
__THROW
;

58 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

59 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

60 
__gnuc_va_li°
 
__≠
Ë
__THROW
;

62 #ifde‡
__va_¨g_∑ck


63 
__f‹tify_fun˘i⁄
 

64 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

65 c⁄° *
__ª°ri˘
 
__fmt
, ...))

67  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

68 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

69 
	}
}

70 #ñi‡!
deföed
 
__˝lu•lus


71 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

72 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

73 
__VA_ARGS__
)

	)

76 
__f‹tify_fun˘i⁄
 

77 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

78 c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

80  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

81 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

82 
	}
}

86 #i‡
__USE_FORTIFY_LEVEL
 > 1

88 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

89 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

90 
__¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

91 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

92 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__≠
);

93 
__v¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

94 
__gnuc_va_li°
 
__≠
);

96 #ifde‡
__va_¨g_∑ck


97 
__f‹tify_fun˘i⁄
 

98 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° *__ª°ri˘ 
__fmt
, ...)

100  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

101 
	`__va_¨g_∑ck
 ());

102 
	}
}

104 
__f‹tify_fun˘i⁄
 

105 
	$¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, ...)

107  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

108 
	}
}

109 #ñi‡!
deföed
 
__˝lu•lus


110 
	#¥ötf
(...) \

111 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

112 
	#Ârötf
(
°ªam
, ...) \

113 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

116 
__f‹tify_fun˘i⁄
 

117 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

119 #ifde‡
__USE_EXTERN_INLINES


120  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

122  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

124 
	}
}

126 
__f‹tify_fun˘i⁄
 

127 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

128 c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

130  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

131 
	}
}

133 #ifde‡
__USE_XOPEN2K8


134 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, c⁄° *
__ª°ri˘
 
__fmt
,

135 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

136 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

137 c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__¨g
)

138 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

140 #ifde‡
__va_¨g_∑ck


141 
__f‹tify_fun˘i⁄
 

142 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

144  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

145 
	`__va_¨g_∑ck
 ());

146 
	}
}

147 #ñi‡!
deföed
 
__˝lu•lus


148 
	#d¥ötf
(
fd
, ...) \

149 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

152 
__f‹tify_fun˘i⁄
 

153 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

155  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

156 
	}
}

159 #ifde‡
__USE_GNU


161 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

162 c⁄° *
__ª°ri˘
 
__fmt
, ...)

163 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

164 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

165 c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__¨g
)

166 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

167 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

168 
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

170 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

171 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

172 
__Êag
,

173 c⁄° *
__ª°ri˘
 
__f‹m©
,

174 
__gnuc_va_li°
 
__¨gs
)

175 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

177 #ifde‡
__va_¨g_∑ck


178 
__f‹tify_fun˘i⁄
 

179 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
, ...))

181  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

182 
	`__va_¨g_∑ck
 ());

183 
	}
}

185 
__f‹tify_fun˘i⁄
 

186 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

189  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

190 
	`__va_¨g_∑ck
 ());

191 
	}
}

193 
__f‹tify_fun˘i⁄
 

194 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

195 c⁄° *
__ª°ri˘
 
__fmt
, ...))

197  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

198 
	`__va_¨g_∑ck
 ());

199 
	}
}

200 #ñi‡!
deföed
 
__˝lu•lus


201 
	#a•rötf
(
±r
, ...) \

202 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

203 
	#__a•rötf
(
±r
, ...) \

204 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

205 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

206 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

209 
__f‹tify_fun˘i⁄
 

210 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

211 
__gnuc_va_li°
 
__≠
))

213  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

214 
	}
}

216 
__f‹tify_fun˘i⁄
 

217 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

218 c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

220  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

221 
__≠
);

222 
	}
}

228 #i‡
__GLIBC_USE
 (
DEPRECATED_GETS
)

229 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

230 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

231 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

234 
__f‹tify_fun˘i⁄
 
__wur
 *

235 
	$gës
 (*
__°r
)

237 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

238  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

239  
	`__gës_w¨n
 (
__°r
);

240 
	}
}

243 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

244 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

245 *
	`__REDIRECT
 (
__fgës_Æüs
,

246 (*
__ª°ri˘
 
__s
, 
__n
,

247 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

248 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

249 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

250 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

251 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

254 
__f‹tify_fun˘i⁄
 
__wur
 *

255 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

257 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

259 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

260  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

262 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

263  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

265  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

266 
	}
}

268 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

269 
size_t
 
__size
, size_à
__n
,

270 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

271 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

272 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

273 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

274 
‰ód
Ë
__wur
;

275 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

276 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

277 
size_t
 
__size
, size_à
__n
,

278 
FILE
 *
__ª°ri˘
 
__°ªam
),

279 
__‰ód_chk
)

280 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

283 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


284 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

285 
FILE
 *
__ª°ri˘
 
__°ªam
)

287 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

289 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

290 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

291 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

292  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

294 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

295  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

297  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

298 
	}
}

300 #ifde‡
__USE_GNU


301 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

302 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

303 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

304 (*
__ª°ri˘
 
__s
, 
__n
,

305 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

306 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

307 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

308 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

309 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

312 
__f‹tify_fun˘i⁄
 
__wur
 *

313 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

315 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

317 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

318  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

320 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

321  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

323  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

324 
	}
}

327 #ifde‡
__USE_MISC


328 #unde‡
‰ód_u∆ocked


329 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

330 
size_t
 
__size
, size_à
__n
,

331 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

332 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

333 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

334 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

335 
‰ód_u∆ocked
Ë
__wur
;

336 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

337 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

338 
size_t
 
__size
, size_à
__n
,

339 
FILE
 *
__ª°ri˘
 
__°ªam
),

340 
__‰ód_u∆ocked_chk
)

341 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

344 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


345 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

346 
FILE
 *
__ª°ri˘
 
__°ªam
)

348 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

350 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

351 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

352 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

353  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

354 
__°ªam
);

356 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

357  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

358 
__°ªam
);

361 #ifde‡
__USE_EXTERN_INLINES


362 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

363 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

364 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

365 && 
__size
 * 
__n
 <= 8)

367 
size_t
 
__˙t
 = 
__size
 * 
__n
;

368 *
__˝å
 = (*Ë
__±r
;

369 i‡(
__˙t
 == 0)

372 ; 
__˙t
 > 0; --__cnt)

374 
__c
 = 
	`gëc_u∆ocked
 (
__°ªam
);

375 i‡(
__c
 =
EOF
)

377 *
__˝å
++ = 
__c
;

379  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

382  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

383 
	}
}

	@/usr/include/bits/stdio_lim.h

18 #i‚de‡
_BITS_STDIO_LIM_H


19 
	#_BITS_STDIO_LIM_H
 1

	)

21 #i‚de‡
_STDIO_H


25 
	#L_tm≤am
 20

	)

26 
	#TMP_MAX
 238328

	)

27 
	#FILENAME_MAX
 4096

	)

29 #ifde‡
__USE_POSIX


30 
	#L_˘îmid
 9

	)

31 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


32 
	#L_cu£rid
 9

	)

36 #unde‡
FOPEN_MAX


37 
	#FOPEN_MAX
 16

	)

	@/usr/include/bits/stdlib-bsearch.h

19 
__exã∫_ölöe
 *

20 
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

21 
__com∑r_‚_t
 
__com∑r
)

23 
size_t
 
__l
, 
__u
, 
__idx
;

24 c⁄° *
__p
;

25 
__com∑ris⁄
;

27 
__l
 = 0;

28 
__u
 = 
__nmemb
;

29 
__l
 < 
__u
)

31 
__idx
 = (
__l
 + 
__u
) / 2;

32 
__p
 = (*Ë(((c⁄° *Ë
__ba£
Ë+ (
__idx
 * 
__size
));

33 
__com∑ris⁄
 = (*
__com∑r
Ë(
__key
, 
__p
);

34 i‡(
__com∑ris⁄
 < 0)

35 
__u
 = 
__idx
;

36 i‡(
__com∑ris⁄
 > 0)

37 
__l
 = 
__idx
 + 1;

39  (*Ë
__p
;

42  
NULL
;

43 
	}
}

	@/usr/include/bits/stdlib-float.h

19 #i‚de‡
_STDLIB_H


23 #ifde‡
__USE_EXTERN_INLINES


24 
__exã∫_ölöe
 

25 
__NTH
 (
	$©of
 (c⁄° *
__≈å
))

27  
	`°πod
 (
__≈å
, (**Ë
NULL
);

28 
	}
}

	@/usr/include/bits/stdlib-ldbl.h

19 #i‚de‡
_STDLIB_H


23 #ifdef 
__USE_ISOC99


24 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

27 #ifde‡
__USE_GNU


28 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

31 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

32 
	$__LDBL_REDIR1_DECL
 (
°r‰oml
, 
°r‰omd
)

35 #ifde‡
__USE_MISC


36 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

38 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

39 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

40 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

19 #i‚de‡
_STDLIB_H


23 *
	$__ªÆ∑th_chk
 (c⁄° *
__ª°ri˘
 
__«me
,

24 *
__ª°ri˘
 
__ªsﬁved
,

25 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

26 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

27 (c⁄° *
__ª°ri˘
 
__«me
,

28 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

29 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

30 (c⁄° *
__ª°ri˘
 
__«me
,

31 *
__ª°ri˘
 
__ªsﬁved
,

32 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


33 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

36 
__f‹tify_fun˘i⁄
 
__wur
 *

37 
	`__NTH
 (
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

39 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

41 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


42 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

43  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

45  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

48  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

49 
	}
}

52 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

53 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

54 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

55 
size_t
 
__buÊí
), 
±¢ame_r
)

56 
	`__n⁄nuŒ
 ((2));

57 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

58 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

59 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

60 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

63 
__f‹tify_fun˘i⁄
 

64 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

66 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

68 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

69  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

70 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

71  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

73  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

74 
	}
}

77 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

78 
__THROW
 
__wur
;

79 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

80 
w˘omb
Ë
__wur
;

82 
__f‹tify_fun˘i⁄
 
__wur
 

83 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

88 
	#__STDLIB_MB_LEN_MAX
 16

	)

89 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


92 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

93  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

94  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

95 
	}
}

98 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

99 c⁄° *
__ª°ri˘
 
__§c
,

100 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

101 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

102 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

103 c⁄° *
__ª°ri˘
 
__§c
,

104 
size_t
 
__Àn
), 
mb°owcs
);

105 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

106 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

107 c⁄° *
__ª°ri˘
 
__§c
,

108 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

109 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

112 
__f‹tify_fun˘i⁄
 
size_t


113 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° *__ª°ri˘ 
__§c
,

114 
size_t
 
__Àn
))

116 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

118 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

119  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

120 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

122 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

123  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

124 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

126  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

127 
	}
}

130 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

131 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

132 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

133 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

134 (*
__ª°ri˘
 
__d°
,

135 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

136 
size_t
 
__Àn
), 
wc°ombs
);

137 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

138 (*
__ª°ri˘
 
__d°
,

139 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

140 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

141 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

143 
__f‹tify_fun˘i⁄
 
size_t


144 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__§c
,

145 
size_t
 
__Àn
))

147 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

149 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

150  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

151 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

152  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

154  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

155 
	}
}

	@/usr/include/bits/string_fortified.h

18 #i‚de‡
_BITS_STRING_FORTIFIED_H


19 
	#_BITS_STRING_FORTIFIED_H
 1

	)

21 #i‚de‡
_STRING_H


25 #i‡!
__GNUC_PREREQ
 (5,0)

26 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

30 
__f‹tify_fun˘i⁄
 *

31 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

32 
size_t
 
__Àn
))

34  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

35 
	}
}

37 
__f‹tify_fun˘i⁄
 *

38 
__NTH
 (
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__Àn
))

40  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

41 
	}
}

43 #ifde‡
__USE_GNU


44 
__f‹tify_fun˘i⁄
 *

45 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

46 
size_t
 
__Àn
))

48  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

49 
	}
}

58 
__f‹tify_fun˘i⁄
 *

59 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

63 #i‡!
	`__GNUC_PREREQ
 (5,0)

64 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

65 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

67 
	`__w¨n_mem£t_zîo_Àn
 ();

68  
__de°
;

71  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

72 
	}
}

74 #ifde‡
__USE_MISC


75 
	~<bôs/°rögs_f‹tifõd.h
>

77 
	$__ex∂icô_bzîo_chk
 (*
__de°
, 
size_t
 
__Àn
, size_à
__de°Àn
)

78 
__THROW
 
	`__n⁄nuŒ
 ((1));

80 
__f‹tify_fun˘i⁄
 

81 
	`__NTH
 (
	$ex∂icô_bzîo
 (*
__de°
, 
size_t
 
__Àn
))

83 
	`__ex∂icô_bzîo_chk
 (
__de°
, 
__Àn
, 
	`__bos0
 (__dest));

84 
	}
}

87 
__f‹tify_fun˘i⁄
 *

88 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

90  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

91 
	}
}

93 #ifde‡
__USE_GNU


94 
__f‹tify_fun˘i⁄
 *

95 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

97  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

98 
	}
}

102 
__f‹tify_fun˘i⁄
 *

103 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

104 
size_t
 
__Àn
))

106  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

107 
	}
}

110 *
	$__°≤˝y_chk
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

111 
size_t
 
__de°Àn
Ë
__THROW
;

112 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
, c⁄° *
__§c
,

113 
size_t
 
__n
), 
°≤˝y
);

115 
__f‹tify_fun˘i⁄
 *

116 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
))

118 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

119 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿> 
	`__bos
 (
__de°
)))

120  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

121  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

122 
	}
}

125 
__f‹tify_fun˘i⁄
 *

126 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

128  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

129 
	}
}

132 
__f‹tify_fun˘i⁄
 *

133 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

134 
size_t
 
__Àn
))

136  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

137 
	}
}

	@/usr/include/bits/sys_errlist.h

19 #i‚de‡
_STDIO_H


25 #ifde‡ 
__USE_MISC


26 
sys_√º
;

27 c⁄° *c⁄° 
sys_îæi°
[];

29 #ifde‡ 
__USE_GNU


30 
_sys_√º
;

31 c⁄° *c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/types.h

23 #i‚def 
_BITS_TYPES_H


24 
	#_BITS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/w‹dsize.h
>

28 
	~<bôs/timesize.h
>

31 
	t__u_ch¨
;

32 
	t__u_sh‹t
;

33 
	t__u_öt
;

34 
	t__u_l⁄g
;

37 sig√d 
	t__öt8_t
;

38 
	t__uöt8_t
;

39 sig√d 
	t__öt16_t
;

40 
	t__uöt16_t
;

41 sig√d 
	t__öt32_t
;

42 
	t__uöt32_t
;

43 #i‡
__WORDSIZE
 == 64

44 sig√d 
	t__öt64_t
;

45 
	t__uöt64_t
;

47 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

48 
__exãnsi⁄__
 
	t__uöt64_t
;

52 
__öt8_t
 
	t__öt_Àa°8_t
;

53 
__uöt8_t
 
	t__uöt_Àa°8_t
;

54 
__öt16_t
 
	t__öt_Àa°16_t
;

55 
__uöt16_t
 
	t__uöt_Àa°16_t
;

56 
__öt32_t
 
	t__öt_Àa°32_t
;

57 
__uöt32_t
 
	t__uöt_Àa°32_t
;

58 
__öt64_t
 
	t__öt_Àa°64_t
;

59 
__uöt64_t
 
	t__uöt_Àa°64_t
;

62 #i‡
__WORDSIZE
 == 64

63 
	t__quad_t
;

64 
	t__u_quad_t
;

66 
__exãnsi⁄__
 
	t__quad_t
;

67 
__exãnsi⁄__
 
	t__u_quad_t
;

71 #i‡
__WORDSIZE
 == 64

72 
	t__ötmax_t
;

73 
	t__uötmax_t
;

75 
__exãnsi⁄__
 
	t__ötmax_t
;

76 
__exãnsi⁄__
 
	t__uötmax_t
;

109 
	#__S16_TYPE
 

	)

110 
	#__U16_TYPE
 

	)

111 
	#__S32_TYPE
 

	)

112 
	#__U32_TYPE
 

	)

113 
	#__SLONGWORD_TYPE
 

	)

114 
	#__ULONGWORD_TYPE
 

	)

115 #i‡
__WORDSIZE
 == 32

116 
	#__SQUAD_TYPE
 
__öt64_t


	)

117 
	#__UQUAD_TYPE
 
__uöt64_t


	)

118 
	#__SWORD_TYPE
 

	)

119 
	#__UWORD_TYPE
 

	)

120 
	#__SLONG32_TYPE
 

	)

121 
	#__ULONG32_TYPE
 

	)

122 
	#__S64_TYPE
 
__öt64_t


	)

123 
	#__U64_TYPE
 
__uöt64_t


	)

126 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

127 #ñi‡
__WORDSIZE
 == 64

128 
	t__SQUAD_TYPE
 

	)

129 
	t__UQUAD_TYPE
 

	)

130 
	t__SWORD_TYPE
 

	)

131 
	t__UWORD_TYPE
 

	)

132 
	t__SLONG32_TYPE
 

	)

133 
	t__ULONG32_TYPE
 

	)

134 
	t__S64_TYPE
 

	)

135 
	t__U64_TYPE
 

	)

137 
	t__STD_TYPE
 

	)

141 
	~<bôs/ty≥sizes.h
>

142 
	~<bôs/time64.h
>

145 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

146 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

147 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

148 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

149 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

150 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

151 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

152 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

153 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

154 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

155 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

156 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

157 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

158 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

159 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

160 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

161 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

162 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

164 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

165 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

168 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

171 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

174 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

179 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

180 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

183 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

184 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

187 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

188 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

191 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsw‹d_t
;

193 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

196 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__sysˇŒ_¶⁄g_t
;

198 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__sysˇŒ_ul⁄g_t
;

202 
__off64_t
 
	t__loff_t
;

203 *
	t__ˇddr_t
;

206 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

209 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

214 
	t__sig_©omic_t
;

219 #i‡
__TIMESIZE
 =64 && 
deföed
 
__LIBC


220 
	#__time64_t
 
__time_t


	)

221 #ñi‡
__TIMESIZE
 != 64

222 
__STD_TYPE
 
__TIME64_T_TYPE
 
	g__time64_t
;

225 #unde‡
__STD_TYPE


	@/usr/include/bits/types/FILE.h

1 #i‚de‡
__FILE_deföed


2 
	#__FILE_deföed
 1

	)

4 
	g_IO_FILE
;

7 
_IO_FILE
 
	tFILE
;

	@/usr/include/bits/types/__FILE.h

1 #i‚de‡
____FILE_deföed


2 
	#____FILE_deföed
 1

	)

4 
	g_IO_FILE
;

5 
_IO_FILE
 
	t__FILE
;

	@/usr/include/bits/types/__fpos64_t.h

1 #i‚de‡
_____Âos64_t_deföed


2 
	#_____Âos64_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

5 
	~<bôs/ty≥s/__mb°©e_t.h
>

10 
	s_G_Âos64_t


12 
__off64_t
 
	m__pos
;

13 
__mb°©e_t
 
	m__°©e
;

14 } 
	t__Âos64_t
;

	@/usr/include/bits/types/__fpos_t.h

1 #i‚de‡
_____Âos_t_deföed


2 
	#_____Âos_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

5 
	~<bôs/ty≥s/__mb°©e_t.h
>

10 
	s_G_Âos_t


12 
__off_t
 
	m__pos
;

13 
__mb°©e_t
 
	m__°©e
;

14 } 
	t__Âos_t
;

	@/usr/include/bits/types/cookie_io_functions_t.h

18 #i‚de‡
__cookõ_io_fun˘i⁄s_t_deföed


19 
	#__cookõ_io_fun˘i⁄s_t_deföed
 1

	)

21 
	~<bôs/ty≥s.h
>

27 
__ssize_t
 
	tcookõ_ªad_fun˘i⁄_t
 (*
	t__cookõ
, *
	t__buf
,

28 
	tsize_t
 
	t__nbyãs
);

36 
__ssize_t
 
	tcookõ_wrôe_fun˘i⁄_t
 (*
	t__cookõ
, c⁄° *
	t__buf
,

37 
	tsize_t
 
	t__nbyãs
);

45 
	tcookõ_£ek_fun˘i⁄_t
 (*
	t__cookõ
, 
	t__off64_t
 *
	t__pos
, 
	t__w
);

48 
	tcookõ_˛o£_fun˘i⁄_t
 (*
	t__cookõ
);

55 
	s_IO_cookõ_io_fun˘i⁄s_t


57 
cookõ_ªad_fun˘i⁄_t
 *
	mªad
;

58 
cookõ_wrôe_fun˘i⁄_t
 *
	mwrôe
;

59 
cookõ_£ek_fun˘i⁄_t
 *
	m£ek
;

60 
cookõ_˛o£_fun˘i⁄_t
 *
	m˛o£
;

61 } 
	tcookõ_io_fun˘i⁄s_t
;

	@/usr/include/bits/types/locale_t.h

19 #i‚de‡
_BITS_TYPES_LOCALE_T_H


20 
	#_BITS_TYPES_LOCALE_T_H
 1

	)

22 
	~<bôs/ty≥s/__loˇÀ_t.h
>

24 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/bits/types/sig_atomic_t.h

1 #i‚de‡
__sig_©omic_t_deföed


2 
	#__sig_©omic_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

8 
__sig_©omic_t
 
	tsig_©omic_t
;

	@/usr/include/bits/types/sigevent_t.h

1 #i‚de‡
__sigevít_t_deföed


2 
	#__sigevít_t_deföed
 1

	)

4 
	~<bôs/w‹dsize.h
>

5 
	~<bôs/ty≥s.h
>

6 
	~<bôs/ty≥s/__sigvÆ_t.h
>

8 
	#__SIGEV_MAX_SIZE
 64

	)

9 #i‡
__WORDSIZE
 == 64

10 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

12 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

16 #i‚de‡
__have_±hªad_©å_t


17 
±hªad_©å_t
 
	t±hªad_©å_t
;

18 
	#__have_±hªad_©å_t
 1

	)

22 
	ssigevít


24 
__sigvÆ_t
 
	msigev_vÆue
;

25 
	msigev_signo
;

26 
	msigev_nŸify
;

30 
	m_∑d
[
__SIGEV_PAD_SIZE
];

34 
__pid_t
 
	m_tid
;

38 (*
	m_fun˘i⁄
Ë(
	m__sigvÆ_t
);

39 
±hªad_©å_t
 *
	m_©åibuã
;

40 } 
	m_sigev_thªad
;

41 } 
	m_sigev_un
;

42 } 
	tsigevít_t
;

45 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

46 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

	@/usr/include/bits/types/siginfo_t.h

1 #i‚de‡
__sigöfo_t_deföed


2 
	#__sigöfo_t_deföed
 1

	)

4 
	~<bôs/w‹dsize.h
>

5 
	~<bôs/ty≥s.h
>

6 
	~<bôs/ty≥s/__sigvÆ_t.h
>

8 
	#__SI_MAX_SIZE
 128

	)

9 #i‡
__WORDSIZE
 == 64

10 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

12 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

16 
	~<bôs/sigöfo-¨ch.h
>

17 #i‚de‡
__SI_ALIGNMENT


18 
	#__SI_ALIGNMENT


	)

20 #i‚de‡
__SI_BAND_TYPE


21 
	#__SI_BAND_TYPE
 

	)

23 #i‚de‡
__SI_CLOCK_T


24 
	#__SI_CLOCK_T
 
__˛ock_t


	)

26 #i‚de‡
__SI_ERRNO_THEN_CODE


27 
	#__SI_ERRNO_THEN_CODE
 1

	)

29 #i‚de‡
__SI_HAVE_SIGSYS


30 
	#__SI_HAVE_SIGSYS
 1

	)

32 #i‚de‡
__SI_SIGFAULT_ADDL


33 
	#__SI_SIGFAULT_ADDL


	)

38 
	msi_signo
;

39 #i‡
__SI_ERRNO_THEN_CODE


40 
	msi_î∫o
;

42 
	msi_code
;

44 
	msi_code
;

45 
	msi_î∫o
;

47 #i‡
__WORDSIZE
 == 64

48 
	m__∑d0
;

53 
	m_∑d
[
__SI_PAD_SIZE
];

58 
__pid_t
 
	msi_pid
;

59 
__uid_t
 
	msi_uid
;

60 } 
	m_kûl
;

65 
	msi_tid
;

66 
	msi_ovîrun
;

67 
__sigvÆ_t
 
	msi_sigvÆ
;

68 } 
	m_timî
;

73 
__pid_t
 
	msi_pid
;

74 
__uid_t
 
	msi_uid
;

75 
__sigvÆ_t
 
	msi_sigvÆ
;

76 } 
	m_π
;

81 
__pid_t
 
	msi_pid
;

82 
__uid_t
 
	msi_uid
;

83 
	msi_°©us
;

84 
__SI_CLOCK_T
 
	msi_utime
;

85 
__SI_CLOCK_T
 
	msi_°ime
;

86 } 
	m_sigchld
;

91 *
	msi_addr
;

92 
__SI_SIGFAULT_ADDL


93 
	msi_addr_lsb
;

99 *
	m_lowî
;

100 *
	m_uµî
;

101 } 
	m_addr_bnd
;

103 
__uöt32_t
 
	m_pkey
;

104 } 
	m_bounds
;

105 } 
	m_sigÁu…
;

110 
__SI_BAND_TYPE
 
	msi_b™d
;

111 
	msi_fd
;

112 } 
	m_sigpﬁl
;

115 #i‡
__SI_HAVE_SIGSYS


118 *
	m_ˇŒ_addr
;

119 
	m_sysˇŒ
;

120 
	m_¨ch
;

121 } 
	m_sigsys
;

123 } 
	m_sifõlds
;

124 } 
	tsigöfo_t
 
	t__SI_ALIGNMENT
;

128 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

129 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

130 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

131 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

132 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

133 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

134 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

135 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

136 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

137 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

138 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

139 
	#si_addr_lsb
 
_sifõlds
.
_sigÁu…
.
si_addr_lsb


	)

140 
	#si_lowî
 
_sifõlds
.
_sigÁu…
.
_bounds
.
_addr_bnd
.
_lowî


	)

141 
	#si_uµî
 
_sifõlds
.
_sigÁu…
.
_bounds
.
_addr_bnd
.
_uµî


	)

142 
	#si_pkey
 
_sifõlds
.
_sigÁu…
.
_bounds
.
_pkey


	)

143 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

144 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

145 #i‡
__SI_HAVE_SIGSYS


146 
	#si_ˇŒ_addr
 
_sifõlds
.
_sigsys
.
_ˇŒ_addr


	)

147 
	#si_sysˇŒ
 
_sifõlds
.
_sigsys
.
_sysˇŒ


	)

148 
	#si_¨ch
 
_sifõlds
.
_sigsys
.
_¨ch


	)

	@/usr/include/bits/types/sigset_t.h

1 #i‚de‡
__sig£t_t_deföed


2 
	#__sig£t_t_deföed
 1

	)

4 
	~<bôs/ty≥s/__sig£t_t.h
>

7 
__sig£t_t
 
	tsig£t_t
;

	@/usr/include/bits/types/sigval_t.h

1 #i‚de‡
__sigvÆ_t_deföed


2 
	#__sigvÆ_t_deföed


	)

4 
	~<bôs/ty≥s/__sigvÆ_t.h
>

12 #i‚de‡
__USE_POSIX199309


16 
__sigvÆ_t
 
	tsigvÆ_t
;

	@/usr/include/bits/types/stack_t.h

19 #i‚de‡
__°ack_t_deföed


20 
	#__°ack_t_deföed
 1

	)

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

28 *
	mss_•
;

29 
	mss_Êags
;

30 
size_t
 
	mss_size
;

31 } 
	t°ack_t
;

	@/usr/include/bits/types/struct_FILE.h

18 #i‚de‡
__°ru˘_FILE_deföed


19 
	#__°ru˘_FILE_deföed
 1

	)

25 #i‡
deföed
 
_IO_USE_OLD_IO_FILE
 && !deföed 
_LIBC


29 #i‡
deföed
 
_IO_lock_t_deföed
 && !deföed 
_LIBC


33 
	~<bôs/ty≥s.h
>

35 
	g_IO_FILE
;

36 
	g_IO_m¨kî
;

37 
	g_IO_codecvt
;

38 
	g_IO_wide_d©a
;

42 #i‚de‡
_IO_lock_t_deföed


43 
	t_IO_lock_t
;

49 
	s_IO_FILE


51 
	m_Êags
;

54 *
	m_IO_ªad_±r
;

55 *
	m_IO_ªad_íd
;

56 *
	m_IO_ªad_ba£
;

57 *
	m_IO_wrôe_ba£
;

58 *
	m_IO_wrôe_±r
;

59 *
	m_IO_wrôe_íd
;

60 *
	m_IO_buf_ba£
;

61 *
	m_IO_buf_íd
;

64 *
	m_IO_ßve_ba£
;

65 *
	m_IO_backup_ba£
;

66 *
	m_IO_ßve_íd
;

68 
_IO_m¨kî
 *
	m_m¨kîs
;

70 
_IO_FILE
 *
	m_chaö
;

72 
	m_fûío
;

73 
	m_Êags2
;

74 
__off_t
 
	m_ﬁd_off£t
;

77 
	m_cur_cﬁumn
;

78 sig√d 
	m_vèbÀ_off£t
;

79 
	m_sh‹tbuf
[1];

81 
_IO_lock_t
 *
	m_lock
;

82 #ifde‡
_IO_USE_OLD_IO_FILE


85 
	s_IO_FILE_com∂ëe


87 
_IO_FILE
 
	m_fûe
;

89 
__off64_t
 
	m_off£t
;

91 
_IO_codecvt
 *
	m_codecvt
;

92 
_IO_wide_d©a
 *
	m_wide_d©a
;

93 
_IO_FILE
 *
	m_‰ìªs_li°
;

94 *
	m_‰ìªs_buf
;

95 
size_t
 
	m__∑d5
;

96 
	m_mode
;

98 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

102 
	#__gëc_u∆ocked_body
(
_Â
) \

103 (
	`__glibc_u∆ikñy
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
) \

104 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

106 
	#__putc_u∆ocked_body
(
_ch
, 
_Â
) \

107 (
	`__glibc_u∆ikñy
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
) \

108 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

109 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

111 
	#_IO_EOF_SEEN
 0x0010

	)

112 
	#__„of_u∆ocked_body
(
_Â
Ë(((_Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

114 
	#_IO_ERR_SEEN
 0x0020

	)

115 
	#__„º‹_u∆ocked_body
(
_Â
Ë(((_Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

117 
	#_IO_USER_LOCK
 0x8000

	)

	@/usr/include/bits/types/struct_sigstack.h

19 #i‚de‡
__sig°ack_deföed


20 
	#__sig°ack_deföed
 1

	)

23 
	ssig°ack


25 *
	mss_•
;

26 
	mss_⁄°ack
;

	@/usr/include/bits/types/struct_timespec.h

2 #i‚de‡
_STRUCT_TIMESPEC


3 
	#_STRUCT_TIMESPEC
 1

	)

5 
	~<bôs/ty≥s.h
>

9 
	stime•ec


11 
__time_t
 
	mtv_£c
;

12 
__sysˇŒ_¶⁄g_t
 
	mtv_n£c
;

	@/usr/include/bits/waitflags.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


25 
	#WNOHANG
 1

	)

26 
	#WUNTRACED
 2

	)

29 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


30 
	#WSTOPPED
 2

	)

31 
	#WEXITED
 4

	)

32 
	#WCONTINUED
 8

	)

33 
	#WNOWAIT
 0x01000000

	)

36 
	#__WNOTHREAD
 0x20000000

	)

38 
	#__WALL
 0x40000000

	)

39 
	#__WCLONE
 0x80000000

	)

42 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


43 #i‚de‡
__ENUM_IDTYPE_T


44 
	#__ENUM_IDTYPE_T
 1

	)

48 #unde‡
P_ALL


49 #unde‡
P_PID


50 #unde‡
P_PGID


54 
	mP_ALL
,

55 
	mP_PID
,

56 
	mP_PGID


57 } 
	tidty≥_t
;

	@/usr/include/bits/waitstatus.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


28 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

31 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

34 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

37 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

40 
	#__WIFSIGNALED
(
°©us
) \

41 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

44 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

48 #ifde‡
WCONTINUED


49 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

53 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

56 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

57 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

58 
	#__W_CONTINUED
 0xffff

	)

59 
	#__WCOREFLAG
 0x80

	)

	@/usr/include/elf.h

19 #i‚de‡
_ELF_H


20 
	#_ELF_H
 1

	)

22 
	~<„©uªs.h
>

24 
	g__BEGIN_DECLS


28 
	~<°döt.h
>

31 
uöt16_t
 
	tElf32_HÆf
;

32 
uöt16_t
 
	tElf64_HÆf
;

35 
uöt32_t
 
	tElf32_W‹d
;

36 
öt32_t
 
	tElf32_Sw‹d
;

37 
uöt32_t
 
	tElf64_W‹d
;

38 
öt32_t
 
	tElf64_Sw‹d
;

41 
uöt64_t
 
	tElf32_Xw‹d
;

42 
öt64_t
 
	tElf32_Sxw‹d
;

43 
uöt64_t
 
	tElf64_Xw‹d
;

44 
öt64_t
 
	tElf64_Sxw‹d
;

47 
uöt32_t
 
	tElf32_Addr
;

48 
uöt64_t
 
	tElf64_Addr
;

51 
uöt32_t
 
	tElf32_Off
;

52 
uöt64_t
 
	tElf64_Off
;

55 
uöt16_t
 
	tElf32_Se˘i⁄
;

56 
uöt16_t
 
	tElf64_Se˘i⁄
;

59 
Elf32_HÆf
 
	tElf32_Vîsym
;

60 
Elf64_HÆf
 
	tElf64_Vîsym
;

65 
	#EI_NIDENT
 (16)

	)

69 
	me_idít
[
EI_NIDENT
];

70 
Elf32_HÆf
 
	me_ty≥
;

71 
Elf32_HÆf
 
	me_machöe
;

72 
Elf32_W‹d
 
	me_vîsi⁄
;

73 
Elf32_Addr
 
	me_íåy
;

74 
Elf32_Off
 
	me_phoff
;

75 
Elf32_Off
 
	me_shoff
;

76 
Elf32_W‹d
 
	me_Êags
;

77 
Elf32_HÆf
 
	me_ehsize
;

78 
Elf32_HÆf
 
	me_phítsize
;

79 
Elf32_HÆf
 
	me_phnum
;

80 
Elf32_HÆf
 
	me_shítsize
;

81 
Elf32_HÆf
 
	me_shnum
;

82 
Elf32_HÆf
 
	me_sh°∫dx
;

83 } 
	tElf32_Ehdr
;

87 
	me_idít
[
EI_NIDENT
];

88 
Elf64_HÆf
 
	me_ty≥
;

89 
Elf64_HÆf
 
	me_machöe
;

90 
Elf64_W‹d
 
	me_vîsi⁄
;

91 
Elf64_Addr
 
	me_íåy
;

92 
Elf64_Off
 
	me_phoff
;

93 
Elf64_Off
 
	me_shoff
;

94 
Elf64_W‹d
 
	me_Êags
;

95 
Elf64_HÆf
 
	me_ehsize
;

96 
Elf64_HÆf
 
	me_phítsize
;

97 
Elf64_HÆf
 
	me_phnum
;

98 
Elf64_HÆf
 
	me_shítsize
;

99 
Elf64_HÆf
 
	me_shnum
;

100 
Elf64_HÆf
 
	me_sh°∫dx
;

101 } 
	tElf64_Ehdr
;

107 
	#EI_MAG0
 0

	)

108 
	#ELFMAG0
 0x7‡

	)

110 
	#EI_MAG1
 1

	)

111 
	#ELFMAG1
 'E'

	)

113 
	#EI_MAG2
 2

	)

114 
	#ELFMAG2
 'L'

	)

116 
	#EI_MAG3
 3

	)

117 
	#ELFMAG3
 'F'

	)

120 
	#ELFMAG
 "\177ELF"

	)

121 
	#SELFMAG
 4

	)

123 
	#EI_CLASS
 4

	)

124 
	#ELFCLASSNONE
 0

	)

125 
	#ELFCLASS32
 1

	)

126 
	#ELFCLASS64
 2

	)

127 
	#ELFCLASSNUM
 3

	)

129 
	#EI_DATA
 5

	)

130 
	#ELFDATANONE
 0

	)

131 
	#ELFDATA2LSB
 1

	)

132 
	#ELFDATA2MSB
 2

	)

133 
	#ELFDATANUM
 3

	)

135 
	#EI_VERSION
 6

	)

138 
	#EI_OSABI
 7

	)

139 
	#ELFOSABI_NONE
 0

	)

140 
	#ELFOSABI_SYSV
 0

	)

141 
	#ELFOSABI_HPUX
 1

	)

142 
	#ELFOSABI_NETBSD
 2

	)

143 
	#ELFOSABI_GNU
 3

	)

144 
	#ELFOSABI_LINUX
 
ELFOSABI_GNU


	)

145 
	#ELFOSABI_SOLARIS
 6

	)

146 
	#ELFOSABI_AIX
 7

	)

147 
	#ELFOSABI_IRIX
 8

	)

148 
	#ELFOSABI_FREEBSD
 9

	)

149 
	#ELFOSABI_TRU64
 10

	)

150 
	#ELFOSABI_MODESTO
 11

	)

151 
	#ELFOSABI_OPENBSD
 12

	)

152 
	#ELFOSABI_ARM_AEABI
 64

	)

153 
	#ELFOSABI_ARM
 97

	)

154 
	#ELFOSABI_STANDALONE
 255

	)

156 
	#EI_ABIVERSION
 8

	)

158 
	#EI_PAD
 9

	)

162 
	#ET_NONE
 0

	)

163 
	#ET_REL
 1

	)

164 
	#ET_EXEC
 2

	)

165 
	#ET_DYN
 3

	)

166 
	#ET_CORE
 4

	)

167 
	#ET_NUM
 5

	)

168 
	#ET_LOOS
 0x„00

	)

169 
	#ET_HIOS
 0x„f‡

	)

170 
	#ET_LOPROC
 0xff00

	)

171 
	#ET_HIPROC
 0xfff‡

	)

175 
	#EM_NONE
 0

	)

176 
	#EM_M32
 1

	)

177 
	#EM_SPARC
 2

	)

178 
	#EM_386
 3

	)

179 
	#EM_68K
 4

	)

180 
	#EM_88K
 5

	)

181 
	#EM_IAMCU
 6

	)

182 
	#EM_860
 7

	)

183 
	#EM_MIPS
 8

	)

184 
	#EM_S370
 9

	)

185 
	#EM_MIPS_RS3_LE
 10

	)

187 
	#EM_PARISC
 15

	)

189 
	#EM_VPP500
 17

	)

190 
	#EM_SPARC32PLUS
 18

	)

191 
	#EM_960
 19

	)

192 
	#EM_PPC
 20

	)

193 
	#EM_PPC64
 21

	)

194 
	#EM_S390
 22

	)

195 
	#EM_SPU
 23

	)

197 
	#EM_V800
 36

	)

198 
	#EM_FR20
 37

	)

199 
	#EM_RH32
 38

	)

200 
	#EM_RCE
 39

	)

201 
	#EM_ARM
 40

	)

202 
	#EM_FAKE_ALPHA
 41

	)

203 
	#EM_SH
 42

	)

204 
	#EM_SPARCV9
 43

	)

205 
	#EM_TRICORE
 44

	)

206 
	#EM_ARC
 45

	)

207 
	#EM_H8_300
 46

	)

208 
	#EM_H8_300H
 47

	)

209 
	#EM_H8S
 48

	)

210 
	#EM_H8_500
 49

	)

211 
	#EM_IA_64
 50

	)

212 
	#EM_MIPS_X
 51

	)

213 
	#EM_COLDFIRE
 52

	)

214 
	#EM_68HC12
 53

	)

215 
	#EM_MMA
 54

	)

216 
	#EM_PCP
 55

	)

217 
	#EM_NCPU
 56

	)

218 
	#EM_NDR1
 57

	)

219 
	#EM_STARCORE
 58

	)

220 
	#EM_ME16
 59

	)

221 
	#EM_ST100
 60

	)

222 
	#EM_TINYJ
 61

	)

223 
	#EM_X86_64
 62

	)

224 
	#EM_PDSP
 63

	)

225 
	#EM_PDP10
 64

	)

226 
	#EM_PDP11
 65

	)

227 
	#EM_FX66
 66

	)

228 
	#EM_ST9PLUS
 67

	)

229 
	#EM_ST7
 68

	)

230 
	#EM_68HC16
 69

	)

231 
	#EM_68HC11
 70

	)

232 
	#EM_68HC08
 71

	)

233 
	#EM_68HC05
 72

	)

234 
	#EM_SVX
 73

	)

235 
	#EM_ST19
 74

	)

236 
	#EM_VAX
 75

	)

237 
	#EM_CRIS
 76

	)

238 
	#EM_JAVELIN
 77

	)

239 
	#EM_FIREPATH
 78

	)

240 
	#EM_ZSP
 79

	)

241 
	#EM_MMIX
 80

	)

242 
	#EM_HUANY
 81

	)

243 
	#EM_PRISM
 82

	)

244 
	#EM_AVR
 83

	)

245 
	#EM_FR30
 84

	)

246 
	#EM_D10V
 85

	)

247 
	#EM_D30V
 86

	)

248 
	#EM_V850
 87

	)

249 
	#EM_M32R
 88

	)

250 
	#EM_MN10300
 89

	)

251 
	#EM_MN10200
 90

	)

252 
	#EM_PJ
 91

	)

253 
	#EM_OPENRISC
 92

	)

254 
	#EM_ARC_COMPACT
 93

	)

255 
	#EM_XTENSA
 94

	)

256 
	#EM_VIDEOCORE
 95

	)

257 
	#EM_TMM_GPP
 96

	)

258 
	#EM_NS32K
 97

	)

259 
	#EM_TPC
 98

	)

260 
	#EM_SNP1K
 99

	)

261 
	#EM_ST200
 100

	)

262 
	#EM_IP2K
 101

	)

263 
	#EM_MAX
 102

	)

264 
	#EM_CR
 103

	)

265 
	#EM_F2MC16
 104

	)

266 
	#EM_MSP430
 105

	)

267 
	#EM_BLACKFIN
 106

	)

268 
	#EM_SE_C33
 107

	)

269 
	#EM_SEP
 108

	)

270 
	#EM_ARCA
 109

	)

271 
	#EM_UNICORE
 110

	)

272 
	#EM_EXCESS
 111

	)

273 
	#EM_DXP
 112

	)

274 
	#EM_ALTERA_NIOS2
 113

	)

275 
	#EM_CRX
 114

	)

276 
	#EM_XGATE
 115

	)

277 
	#EM_C166
 116

	)

278 
	#EM_M16C
 117

	)

279 
	#EM_DSPIC30F
 118

	)

280 
	#EM_CE
 119

	)

281 
	#EM_M32C
 120

	)

283 
	#EM_TSK3000
 131

	)

284 
	#EM_RS08
 132

	)

285 
	#EM_SHARC
 133

	)

286 
	#EM_ECOG2
 134

	)

287 
	#EM_SCORE7
 135

	)

288 
	#EM_DSP24
 136

	)

289 
	#EM_VIDEOCORE3
 137

	)

290 
	#EM_LATTICEMICO32
 138

	)

291 
	#EM_SE_C17
 139

	)

292 
	#EM_TI_C6000
 140

	)

293 
	#EM_TI_C2000
 141

	)

294 
	#EM_TI_C5500
 142

	)

295 
	#EM_TI_ARP32
 143

	)

296 
	#EM_TI_PRU
 144

	)

298 
	#EM_MMDSP_PLUS
 160

	)

299 
	#EM_CYPRESS_M8C
 161

	)

300 
	#EM_R32C
 162

	)

301 
	#EM_TRIMEDIA
 163

	)

302 
	#EM_QDSP6
 164

	)

303 
	#EM_8051
 165

	)

304 
	#EM_STXP7X
 166

	)

305 
	#EM_NDS32
 167

	)

306 
	#EM_ECOG1X
 168

	)

307 
	#EM_MAXQ30
 169

	)

308 
	#EM_XIMO16
 170

	)

309 
	#EM_MANIK
 171

	)

310 
	#EM_CRAYNV2
 172

	)

311 
	#EM_RX
 173

	)

312 
	#EM_METAG
 174

	)

313 
	#EM_MCST_ELBRUS
 175

	)

314 
	#EM_ECOG16
 176

	)

315 
	#EM_CR16
 177

	)

316 
	#EM_ETPU
 178

	)

317 
	#EM_SLE9X
 179

	)

318 
	#EM_L10M
 180

	)

319 
	#EM_K10M
 181

	)

321 
	#EM_AARCH64
 183

	)

323 
	#EM_AVR32
 185

	)

324 
	#EM_STM8
 186

	)

325 
	#EM_TILE64
 187

	)

326 
	#EM_TILEPRO
 188

	)

327 
	#EM_MICROBLAZE
 189

	)

328 
	#EM_CUDA
 190

	)

329 
	#EM_TILEGX
 191

	)

330 
	#EM_CLOUDSHIELD
 192

	)

331 
	#EM_COREA_1ST
 193

	)

332 
	#EM_COREA_2ND
 194

	)

333 
	#EM_ARC_COMPACT2
 195

	)

334 
	#EM_OPEN8
 196

	)

335 
	#EM_RL78
 197

	)

336 
	#EM_VIDEOCORE5
 198

	)

337 
	#EM_78KOR
 199

	)

338 
	#EM_56800EX
 200

	)

339 
	#EM_BA1
 201

	)

340 
	#EM_BA2
 202

	)

341 
	#EM_XCORE
 203

	)

342 
	#EM_MCHP_PIC
 204

	)

344 
	#EM_KM32
 210

	)

345 
	#EM_KMX32
 211

	)

346 
	#EM_EMX16
 212

	)

347 
	#EM_EMX8
 213

	)

348 
	#EM_KVARC
 214

	)

349 
	#EM_CDP
 215

	)

350 
	#EM_COGE
 216

	)

351 
	#EM_COOL
 217

	)

352 
	#EM_NORC
 218

	)

353 
	#EM_CSR_KALIMBA
 219

	)

354 
	#EM_Z80
 220

	)

355 
	#EM_VISIUM
 221

	)

356 
	#EM_FT32
 222

	)

357 
	#EM_MOXIE
 223

	)

358 
	#EM_AMDGPU
 224

	)

360 
	#EM_RISCV
 243

	)

362 
	#EM_BPF
 247

	)

363 
	#EM_CSKY
 252

	)

365 
	#EM_NUM
 253

	)

369 
	#EM_ARC_A5
 
EM_ARC_COMPACT


	)

375 
	#EM_ALPHA
 0x9026

	)

379 
	#EV_NONE
 0

	)

380 
	#EV_CURRENT
 1

	)

381 
	#EV_NUM
 2

	)

387 
Elf32_W‹d
 
	msh_«me
;

388 
Elf32_W‹d
 
	msh_ty≥
;

389 
Elf32_W‹d
 
	msh_Êags
;

390 
Elf32_Addr
 
	msh_addr
;

391 
Elf32_Off
 
	msh_off£t
;

392 
Elf32_W‹d
 
	msh_size
;

393 
Elf32_W‹d
 
	msh_lök
;

394 
Elf32_W‹d
 
	msh_öfo
;

395 
Elf32_W‹d
 
	msh_addølign
;

396 
Elf32_W‹d
 
	msh_ítsize
;

397 } 
	tElf32_Shdr
;

401 
Elf64_W‹d
 
	msh_«me
;

402 
Elf64_W‹d
 
	msh_ty≥
;

403 
Elf64_Xw‹d
 
	msh_Êags
;

404 
Elf64_Addr
 
	msh_addr
;

405 
Elf64_Off
 
	msh_off£t
;

406 
Elf64_Xw‹d
 
	msh_size
;

407 
Elf64_W‹d
 
	msh_lök
;

408 
Elf64_W‹d
 
	msh_öfo
;

409 
Elf64_Xw‹d
 
	msh_addølign
;

410 
Elf64_Xw‹d
 
	msh_ítsize
;

411 } 
	tElf64_Shdr
;

415 
	#SHN_UNDEF
 0

	)

416 
	#SHN_LORESERVE
 0xff00

	)

417 
	#SHN_LOPROC
 0xff00

	)

418 
	#SHN_BEFORE
 0xff00

	)

420 
	#SHN_AFTER
 0xff01

	)

422 
	#SHN_HIPROC
 0xff1‡

	)

423 
	#SHN_LOOS
 0xff20

	)

424 
	#SHN_HIOS
 0xff3‡

	)

425 
	#SHN_ABS
 0xfff1

	)

426 
	#SHN_COMMON
 0xfff2

	)

427 
	#SHN_XINDEX
 0xfff‡

	)

428 
	#SHN_HIRESERVE
 0xfff‡

	)

432 
	#SHT_NULL
 0

	)

433 
	#SHT_PROGBITS
 1

	)

434 
	#SHT_SYMTAB
 2

	)

435 
	#SHT_STRTAB
 3

	)

436 
	#SHT_RELA
 4

	)

437 
	#SHT_HASH
 5

	)

438 
	#SHT_DYNAMIC
 6

	)

439 
	#SHT_NOTE
 7

	)

440 
	#SHT_NOBITS
 8

	)

441 
	#SHT_REL
 9

	)

442 
	#SHT_SHLIB
 10

	)

443 
	#SHT_DYNSYM
 11

	)

444 
	#SHT_INIT_ARRAY
 14

	)

445 
	#SHT_FINI_ARRAY
 15

	)

446 
	#SHT_PREINIT_ARRAY
 16

	)

447 
	#SHT_GROUP
 17

	)

448 
	#SHT_SYMTAB_SHNDX
 18

	)

449 
	#SHT_NUM
 19

	)

450 
	#SHT_LOOS
 0x60000000

	)

451 
	#SHT_GNU_ATTRIBUTES
 0x6ffffff5

	)

452 
	#SHT_GNU_HASH
 0x6ffffff6

	)

453 
	#SHT_GNU_LIBLIST
 0x6ffffff7

	)

454 
	#SHT_CHECKSUM
 0x6ffffff8

	)

455 
	#SHT_LOSUNW
 0x6fffffÁ

	)

456 
	#SHT_SUNW_move
 0x6fffffÁ

	)

457 
	#SHT_SUNW_COMDAT
 0x6ffffffb

	)

458 
	#SHT_SUNW_symöfo
 0x6ffffffc

	)

459 
	#SHT_GNU_vîdef
 0x6ffffffd

	)

460 
	#SHT_GNU_vî√ed
 0x6fffff„

	)

461 
	#SHT_GNU_vîsym
 0x6ffffff‡

	)

462 
	#SHT_HISUNW
 0x6ffffff‡

	)

463 
	#SHT_HIOS
 0x6ffffff‡

	)

464 
	#SHT_LOPROC
 0x70000000

	)

465 
	#SHT_HIPROC
 0x7ffffff‡

	)

466 
	#SHT_LOUSER
 0x80000000

	)

467 
	#SHT_HIUSER
 0x8ffffff‡

	)

471 
	#SHF_WRITE
 (1 << 0Ë

	)

472 
	#SHF_ALLOC
 (1 << 1Ë

	)

473 
	#SHF_EXECINSTR
 (1 << 2Ë

	)

474 
	#SHF_MERGE
 (1 << 4Ë

	)

475 
	#SHF_STRINGS
 (1 << 5Ë

	)

476 
	#SHF_INFO_LINK
 (1 << 6Ë

	)

477 
	#SHF_LINK_ORDER
 (1 << 7Ë

	)

478 
	#SHF_OS_NONCONFORMING
 (1 << 8Ë

	)

480 
	#SHF_GROUP
 (1 << 9Ë

	)

481 
	#SHF_TLS
 (1 << 10Ë

	)

482 
	#SHF_COMPRESSED
 (1 << 11Ë

	)

483 
	#SHF_MASKOS
 0x0ff00000

	)

484 
	#SHF_MASKPROC
 0xf0000000

	)

485 
	#SHF_ORDERED
 (1 << 30Ë

	)

487 
	#SHF_EXCLUDE
 (1U << 31Ë

	)

494 
Elf32_W‹d
 
	mch_ty≥
;

495 
Elf32_W‹d
 
	mch_size
;

496 
Elf32_W‹d
 
	mch_addølign
;

497 } 
	tElf32_Chdr
;

501 
Elf64_W‹d
 
	mch_ty≥
;

502 
Elf64_W‹d
 
	mch_ª£rved
;

503 
Elf64_Xw‹d
 
	mch_size
;

504 
Elf64_Xw‹d
 
	mch_addølign
;

505 } 
	tElf64_Chdr
;

508 
	#ELFCOMPRESS_ZLIB
 1

	)

509 
	#ELFCOMPRESS_LOOS
 0x60000000

	)

510 
	#ELFCOMPRESS_HIOS
 0x6ffffff‡

	)

511 
	#ELFCOMPRESS_LOPROC
 0x70000000

	)

512 
	#ELFCOMPRESS_HIPROC
 0x7ffffff‡

	)

515 
	#GRP_COMDAT
 0x1

	)

521 
Elf32_W‹d
 
	m°_«me
;

522 
Elf32_Addr
 
	m°_vÆue
;

523 
Elf32_W‹d
 
	m°_size
;

524 
	m°_öfo
;

525 
	m°_Ÿhî
;

526 
Elf32_Se˘i⁄
 
	m°_shndx
;

527 } 
	tElf32_Sym
;

531 
Elf64_W‹d
 
	m°_«me
;

532 
	m°_öfo
;

533 
	m°_Ÿhî
;

534 
Elf64_Se˘i⁄
 
	m°_shndx
;

535 
Elf64_Addr
 
	m°_vÆue
;

536 
Elf64_Xw‹d
 
	m°_size
;

537 } 
	tElf64_Sym
;

544 
Elf32_HÆf
 
	msi_boundto
;

545 
Elf32_HÆf
 
	msi_Êags
;

546 } 
	tElf32_Symöfo
;

550 
Elf64_HÆf
 
	msi_boundto
;

551 
Elf64_HÆf
 
	msi_Êags
;

552 } 
	tElf64_Symöfo
;

555 
	#SYMINFO_BT_SELF
 0xfff‡

	)

556 
	#SYMINFO_BT_PARENT
 0xff„

	)

557 
	#SYMINFO_BT_LOWRESERVE
 0xff00

	)

560 
	#SYMINFO_FLG_DIRECT
 0x0001

	)

561 
	#SYMINFO_FLG_PASSTHRU
 0x0002

	)

562 
	#SYMINFO_FLG_COPY
 0x0004

	)

563 
	#SYMINFO_FLG_LAZYLOAD
 0x0008

	)

566 
	#SYMINFO_NONE
 0

	)

567 
	#SYMINFO_CURRENT
 1

	)

568 
	#SYMINFO_NUM
 2

	)

573 
	#ELF32_ST_BIND
(
vÆ
Ë(((Ë(vÆ)Ë>> 4)

	)

574 
	#ELF32_ST_TYPE
(
vÆ
Ë((vÆË& 0xf)

	)

575 
	#ELF32_ST_INFO
(
böd
, 
ty≥
Ë(((bödË<< 4Ë+ (—y≥Ë& 0xf))

	)

578 
	#ELF64_ST_BIND
(
vÆ
Ë
	`ELF32_ST_BIND
 (vÆ)

	)

579 
	#ELF64_ST_TYPE
(
vÆ
Ë
	`ELF32_ST_TYPE
 (vÆ)

	)

580 
	#ELF64_ST_INFO
(
böd
, 
ty≥
Ë
	`ELF32_ST_INFO
 ((böd), (ty≥))

	)

584 
	#STB_LOCAL
 0

	)

585 
	#STB_GLOBAL
 1

	)

586 
	#STB_WEAK
 2

	)

587 
	#STB_NUM
 3

	)

588 
	#STB_LOOS
 10

	)

589 
	#STB_GNU_UNIQUE
 10

	)

590 
	#STB_HIOS
 12

	)

591 
	#STB_LOPROC
 13

	)

592 
	#STB_HIPROC
 15

	)

596 
	#STT_NOTYPE
 0

	)

597 
	#STT_OBJECT
 1

	)

598 
	#STT_FUNC
 2

	)

599 
	#STT_SECTION
 3

	)

600 
	#STT_FILE
 4

	)

601 
	#STT_COMMON
 5

	)

602 
	#STT_TLS
 6

	)

603 
	#STT_NUM
 7

	)

604 
	#STT_LOOS
 10

	)

605 
	#STT_GNU_IFUNC
 10

	)

606 
	#STT_HIOS
 12

	)

607 
	#STT_LOPROC
 13

	)

608 
	#STT_HIPROC
 15

	)

615 
	#STN_UNDEF
 0

	)

620 
	#ELF32_ST_VISIBILITY
(
o
Ë((oË& 0x03)

	)

623 
	#ELF64_ST_VISIBILITY
(
o
Ë
	`ELF32_ST_VISIBILITY
 (o)

	)

626 
	#STV_DEFAULT
 0

	)

627 
	#STV_INTERNAL
 1

	)

628 
	#STV_HIDDEN
 2

	)

629 
	#STV_PROTECTED
 3

	)

636 
Elf32_Addr
 
	mr_off£t
;

637 
Elf32_W‹d
 
	mr_öfo
;

638 } 
	tElf32_Rñ
;

647 
Elf64_Addr
 
	mr_off£t
;

648 
Elf64_Xw‹d
 
	mr_öfo
;

649 } 
	tElf64_Rñ
;

655 
Elf32_Addr
 
	mr_off£t
;

656 
Elf32_W‹d
 
	mr_öfo
;

657 
Elf32_Sw‹d
 
	mr_addíd
;

658 } 
	tElf32_Rña
;

662 
Elf64_Addr
 
	mr_off£t
;

663 
Elf64_Xw‹d
 
	mr_öfo
;

664 
Elf64_Sxw‹d
 
	mr_addíd
;

665 } 
	tElf64_Rña
;

669 
	#ELF32_R_SYM
(
vÆ
Ë((vÆË>> 8)

	)

670 
	#ELF32_R_TYPE
(
vÆ
Ë((vÆË& 0xff)

	)

671 
	#ELF32_R_INFO
(
sym
, 
ty≥
Ë(((symË<< 8Ë+ (—y≥Ë& 0xff))

	)

673 
	#ELF64_R_SYM
(
i
Ë((iË>> 32)

	)

674 
	#ELF64_R_TYPE
(
i
Ë((iË& 0xffffffff)

	)

675 
	#ELF64_R_INFO
(
sym
,
ty≥
Ë((((
Elf64_Xw‹d
Ë(sym)Ë<< 32Ë+ (ty≥))

	)

681 
Elf32_W‹d
 
	mp_ty≥
;

682 
Elf32_Off
 
	mp_off£t
;

683 
Elf32_Addr
 
	mp_vaddr
;

684 
Elf32_Addr
 
	mp_∑ddr
;

685 
Elf32_W‹d
 
	mp_fûesz
;

686 
Elf32_W‹d
 
	mp_memsz
;

687 
Elf32_W‹d
 
	mp_Êags
;

688 
Elf32_W‹d
 
	mp_Æign
;

689 } 
	tElf32_Phdr
;

693 
Elf64_W‹d
 
	mp_ty≥
;

694 
Elf64_W‹d
 
	mp_Êags
;

695 
Elf64_Off
 
	mp_off£t
;

696 
Elf64_Addr
 
	mp_vaddr
;

697 
Elf64_Addr
 
	mp_∑ddr
;

698 
Elf64_Xw‹d
 
	mp_fûesz
;

699 
Elf64_Xw‹d
 
	mp_memsz
;

700 
Elf64_Xw‹d
 
	mp_Æign
;

701 } 
	tElf64_Phdr
;

707 
	#PN_XNUM
 0xffff

	)

711 
	#PT_NULL
 0

	)

712 
	#PT_LOAD
 1

	)

713 
	#PT_DYNAMIC
 2

	)

714 
	#PT_INTERP
 3

	)

715 
	#PT_NOTE
 4

	)

716 
	#PT_SHLIB
 5

	)

717 
	#PT_PHDR
 6

	)

718 
	#PT_TLS
 7

	)

719 
	#PT_NUM
 8

	)

720 
	#PT_LOOS
 0x60000000

	)

721 
	#PT_GNU_EH_FRAME
 0x6474e550

	)

722 
	#PT_GNU_STACK
 0x6474e551

	)

723 
	#PT_GNU_RELRO
 0x6474e552

	)

724 
	#PT_LOSUNW
 0x6fffffÁ

	)

725 
	#PT_SUNWBSS
 0x6fffffÁ

	)

726 
	#PT_SUNWSTACK
 0x6ffffffb

	)

727 
	#PT_HISUNW
 0x6fffffff

	)

728 
	#PT_HIOS
 0x6ffffff‡

	)

729 
	#PT_LOPROC
 0x70000000

	)

730 
	#PT_HIPROC
 0x7ffffff‡

	)

734 
	#PF_X
 (1 << 0Ë

	)

735 
	#PF_W
 (1 << 1Ë

	)

736 
	#PF_R
 (1 << 2Ë

	)

737 
	#PF_MASKOS
 0x0ff00000

	)

738 
	#PF_MASKPROC
 0xf0000000

	)

742 
	#NT_PRSTATUS
 1

	)

743 
	#NT_PRFPREG
 2

	)

745 
	#NT_FPREGSET
 2

	)

746 
	#NT_PRPSINFO
 3

	)

747 
	#NT_PRXREG
 4

	)

748 
	#NT_TASKSTRUCT
 4

	)

749 
	#NT_PLATFORM
 5

	)

750 
	#NT_AUXV
 6

	)

751 
	#NT_GWINDOWS
 7

	)

752 
	#NT_ASRS
 8

	)

753 
	#NT_PSTATUS
 10

	)

754 
	#NT_PSINFO
 13

	)

755 
	#NT_PRCRED
 14

	)

756 
	#NT_UTSNAME
 15

	)

757 
	#NT_LWPSTATUS
 16

	)

758 
	#NT_LWPSINFO
 17

	)

759 
	#NT_PRFPXREG
 20

	)

760 
	#NT_SIGINFO
 0x53494749

	)

762 
	#NT_FILE
 0x46494c45

	)

764 
	#NT_PRXFPREG
 0x46e62b7‡

	)

765 
	#NT_PPC_VMX
 0x100

	)

766 
	#NT_PPC_SPE
 0x101

	)

767 
	#NT_PPC_VSX
 0x102

	)

768 
	#NT_PPC_TAR
 0x103

	)

769 
	#NT_PPC_PPR
 0x104

	)

770 
	#NT_PPC_DSCR
 0x105

	)

771 
	#NT_PPC_EBB
 0x106

	)

772 
	#NT_PPC_PMU
 0x107

	)

773 
	#NT_PPC_TM_CGPR
 0x108

	)

774 
	#NT_PPC_TM_CFPR
 0x109

	)

775 
	#NT_PPC_TM_CVMX
 0x10®

	)

776 
	#NT_PPC_TM_CVSX
 0x10b

	)

777 
	#NT_PPC_TM_SPR
 0x10¯

	)

778 
	#NT_PPC_TM_CTAR
 0x10d

	)

780 
	#NT_PPC_TM_CPPR
 0x10ê

	)

782 
	#NT_PPC_TM_CDSCR
 0x10‡

	)

784 
	#NT_PPC_PKEY
 0x110

	)

786 
	#NT_386_TLS
 0x200

	)

787 
	#NT_386_IOPERM
 0x201

	)

788 
	#NT_X86_XSTATE
 0x202

	)

789 
	#NT_S390_HIGH_GPRS
 0x300

	)

790 
	#NT_S390_TIMER
 0x301

	)

791 
	#NT_S390_TODCMP
 0x302

	)

792 
	#NT_S390_TODPREG
 0x303

	)

793 
	#NT_S390_CTRS
 0x304

	)

794 
	#NT_S390_PREFIX
 0x305

	)

795 
	#NT_S390_LAST_BREAK
 0x306

	)

796 
	#NT_S390_SYSTEM_CALL
 0x307

	)

797 
	#NT_S390_TDB
 0x308

	)

798 
	#NT_S390_VXRS_LOW
 0x309

	)

800 
	#NT_S390_VXRS_HIGH
 0x30®

	)

801 
	#NT_S390_GS_CB
 0x30b

	)

802 
	#NT_S390_GS_BC
 0x30¯

	)

804 
	#NT_S390_RI_CB
 0x30d

	)

805 
	#NT_ARM_VFP
 0x400

	)

806 
	#NT_ARM_TLS
 0x401

	)

807 
	#NT_ARM_HW_BREAK
 0x402

	)

808 
	#NT_ARM_HW_WATCH
 0x403

	)

809 
	#NT_ARM_SYSTEM_CALL
 0x404

	)

810 
	#NT_ARM_SVE
 0x405

	)

812 
	#NT_ARM_PAC_MASK
 0x406

	)

814 
	#NT_ARM_PACA_KEYS
 0x407

	)

816 
	#NT_ARM_PACG_KEYS
 0x408

	)

818 
	#NT_VMCOREDD
 0x700

	)

819 
	#NT_MIPS_DSP
 0x800

	)

820 
	#NT_MIPS_FP_MODE
 0x801

	)

821 
	#NT_MIPS_MSA
 0x802

	)

825 
	#NT_VERSION
 1

	)

832 
Elf32_Sw‹d
 
	md_èg
;

835 
Elf32_W‹d
 
	md_vÆ
;

836 
Elf32_Addr
 
	md_±r
;

837 } 
	md_un
;

838 } 
	tElf32_Dyn
;

842 
Elf64_Sxw‹d
 
	md_èg
;

845 
Elf64_Xw‹d
 
	md_vÆ
;

846 
Elf64_Addr
 
	md_±r
;

847 } 
	md_un
;

848 } 
	tElf64_Dyn
;

852 
	#DT_NULL
 0

	)

853 
	#DT_NEEDED
 1

	)

854 
	#DT_PLTRELSZ
 2

	)

855 
	#DT_PLTGOT
 3

	)

856 
	#DT_HASH
 4

	)

857 
	#DT_STRTAB
 5

	)

858 
	#DT_SYMTAB
 6

	)

859 
	#DT_RELA
 7

	)

860 
	#DT_RELASZ
 8

	)

861 
	#DT_RELAENT
 9

	)

862 
	#DT_STRSZ
 10

	)

863 
	#DT_SYMENT
 11

	)

864 
	#DT_INIT
 12

	)

865 
	#DT_FINI
 13

	)

866 
	#DT_SONAME
 14

	)

867 
	#DT_RPATH
 15

	)

868 
	#DT_SYMBOLIC
 16

	)

869 
	#DT_REL
 17

	)

870 
	#DT_RELSZ
 18

	)

871 
	#DT_RELENT
 19

	)

872 
	#DT_PLTREL
 20

	)

873 
	#DT_DEBUG
 21

	)

874 
	#DT_TEXTREL
 22

	)

875 
	#DT_JMPREL
 23

	)

876 
	#DT_BIND_NOW
 24

	)

877 
	#DT_INIT_ARRAY
 25

	)

878 
	#DT_FINI_ARRAY
 26

	)

879 
	#DT_INIT_ARRAYSZ
 27

	)

880 
	#DT_FINI_ARRAYSZ
 28

	)

881 
	#DT_RUNPATH
 29

	)

882 
	#DT_FLAGS
 30

	)

883 
	#DT_ENCODING
 32

	)

884 
	#DT_PREINIT_ARRAY
 32

	)

885 
	#DT_PREINIT_ARRAYSZ
 33

	)

886 
	#DT_SYMTAB_SHNDX
 34

	)

887 
	#DT_NUM
 35

	)

888 
	#DT_LOOS
 0x6000000d

	)

889 
	#DT_HIOS
 0x6ffff000

	)

890 
	#DT_LOPROC
 0x70000000

	)

891 
	#DT_HIPROC
 0x7ffffff‡

	)

892 
	#DT_PROCNUM
 
DT_MIPS_NUM


	)

897 
	#DT_VALRNGLO
 0x6ffffd00

	)

898 
	#DT_GNU_PRELINKED
 0x6ffffdf5

	)

899 
	#DT_GNU_CONFLICTSZ
 0x6ffffdf6

	)

900 
	#DT_GNU_LIBLISTSZ
 0x6ffffdf7

	)

901 
	#DT_CHECKSUM
 0x6ffffdf8

	)

902 
	#DT_PLTPADSZ
 0x6ffffdf9

	)

903 
	#DT_MOVEENT
 0x6ffffdÁ

	)

904 
	#DT_MOVESZ
 0x6ffffdfb

	)

905 
	#DT_FEATURE_1
 0x6ffffdf¯

	)

906 
	#DT_POSFLAG_1
 0x6ffffdfd

	)

908 
	#DT_SYMINSZ
 0x6ffffd„

	)

909 
	#DT_SYMINENT
 0x6ffffdf‡

	)

910 
	#DT_VALRNGHI
 0x6ffffdff

	)

911 
	#DT_VALTAGIDX
(
èg
Ë(
DT_VALRNGHI
 - (èg)Ë

	)

912 
	#DT_VALNUM
 12

	)

919 
	#DT_ADDRRNGLO
 0x6fff„00

	)

920 
	#DT_GNU_HASH
 0x6fff„f5

	)

921 
	#DT_TLSDESC_PLT
 0x6fff„f6

	)

922 
	#DT_TLSDESC_GOT
 0x6fff„f7

	)

923 
	#DT_GNU_CONFLICT
 0x6fff„f8

	)

924 
	#DT_GNU_LIBLIST
 0x6fff„f9

	)

925 
	#DT_CONFIG
 0x6fff„Á

	)

926 
	#DT_DEPAUDIT
 0x6fff„fb

	)

927 
	#DT_AUDIT
 0x6fff„f¯

	)

928 
	#DT_PLTPAD
 0x6fff„fd

	)

929 
	#DT_MOVETAB
 0x6fff„„

	)

930 
	#DT_SYMINFO
 0x6fff„f‡

	)

931 
	#DT_ADDRRNGHI
 0x6fff„ff

	)

932 
	#DT_ADDRTAGIDX
(
èg
Ë(
DT_ADDRRNGHI
 - (èg)Ë

	)

933 
	#DT_ADDRNUM
 11

	)

937 
	#DT_VERSYM
 0x6ffffff0

	)

939 
	#DT_RELACOUNT
 0x6ffffff9

	)

940 
	#DT_RELCOUNT
 0x6fffffÁ

	)

943 
	#DT_FLAGS_1
 0x6ffffffb

	)

944 
	#DT_VERDEF
 0x6ffffff¯

	)

946 
	#DT_VERDEFNUM
 0x6ffffffd

	)

947 
	#DT_VERNEED
 0x6fffff„

	)

949 
	#DT_VERNEEDNUM
 0x6ffffff‡

	)

950 
	#DT_VERSIONTAGIDX
(
èg
Ë(
DT_VERNEEDNUM
 - (èg)Ë

	)

951 
	#DT_VERSIONTAGNUM
 16

	)

955 
	#DT_AUXILIARY
 0x7ffffffd

	)

956 
	#DT_FILTER
 0x7ffffff‡

	)

957 
	#DT_EXTRATAGIDX
(
èg
Ë((
Elf32_W‹d
)-((
Elf32_Sw‹d
Ë—agË<<1>>1)-1)

	)

958 
	#DT_EXTRANUM
 3

	)

961 
	#DF_ORIGIN
 0x00000001

	)

962 
	#DF_SYMBOLIC
 0x00000002

	)

963 
	#DF_TEXTREL
 0x00000004

	)

964 
	#DF_BIND_NOW
 0x00000008

	)

965 
	#DF_STATIC_TLS
 0x00000010

	)

969 
	#DF_1_NOW
 0x00000001

	)

970 
	#DF_1_GLOBAL
 0x00000002

	)

971 
	#DF_1_GROUP
 0x00000004

	)

972 
	#DF_1_NODELETE
 0x00000008

	)

973 
	#DF_1_LOADFLTR
 0x00000010

	)

974 
	#DF_1_INITFIRST
 0x00000020

	)

975 
	#DF_1_NOOPEN
 0x00000040

	)

976 
	#DF_1_ORIGIN
 0x00000080

	)

977 
	#DF_1_DIRECT
 0x00000100

	)

978 
	#DF_1_TRANS
 0x00000200

	)

979 
	#DF_1_INTERPOSE
 0x00000400

	)

980 
	#DF_1_NODEFLIB
 0x00000800

	)

981 
	#DF_1_NODUMP
 0x00001000

	)

982 
	#DF_1_CONFALT
 0x00002000

	)

983 
	#DF_1_ENDFILTEE
 0x00004000

	)

984 
	#DF_1_DISPRELDNE
 0x00008000

	)

985 
	#DF_1_DISPRELPND
 0x00010000

	)

986 
	#DF_1_NODIRECT
 0x00020000

	)

987 
	#DF_1_IGNMULDEF
 0x00040000

	)

988 
	#DF_1_NOKSYMS
 0x00080000

	)

989 
	#DF_1_NOHDR
 0x00100000

	)

990 
	#DF_1_EDITED
 0x00200000

	)

991 
	#DF_1_NORELOC
 0x00400000

	)

992 
	#DF_1_SYMINTPOSE
 0x00800000

	)

993 
	#DF_1_GLOBAUDIT
 0x01000000

	)

994 
	#DF_1_SINGLETON
 0x02000000

	)

995 
	#DF_1_STUB
 0x04000000

	)

996 
	#DF_1_PIE
 0x08000000

	)

997 
	#DF_1_KMOD
 0x10000000

	)

998 
	#DF_1_WEAKFILTER
 0x20000000

	)

999 
	#DF_1_NOCOMMON
 0x40000000

	)

1002 
	#DTF_1_PARINIT
 0x00000001

	)

1003 
	#DTF_1_CONFEXP
 0x00000002

	)

1006 
	#DF_P1_LAZYLOAD
 0x00000001

	)

1007 
	#DF_P1_GROUPPERM
 0x00000002

	)

1014 
Elf32_HÆf
 
	mvd_vîsi⁄
;

1015 
Elf32_HÆf
 
	mvd_Êags
;

1016 
Elf32_HÆf
 
	mvd_ndx
;

1017 
Elf32_HÆf
 
	mvd_˙t
;

1018 
Elf32_W‹d
 
	mvd_hash
;

1019 
Elf32_W‹d
 
	mvd_aux
;

1020 
Elf32_W‹d
 
	mvd_√xt
;

1022 } 
	tElf32_Vîdef
;

1026 
Elf64_HÆf
 
	mvd_vîsi⁄
;

1027 
Elf64_HÆf
 
	mvd_Êags
;

1028 
Elf64_HÆf
 
	mvd_ndx
;

1029 
Elf64_HÆf
 
	mvd_˙t
;

1030 
Elf64_W‹d
 
	mvd_hash
;

1031 
Elf64_W‹d
 
	mvd_aux
;

1032 
Elf64_W‹d
 
	mvd_√xt
;

1034 } 
	tElf64_Vîdef
;

1038 
	#VER_DEF_NONE
 0

	)

1039 
	#VER_DEF_CURRENT
 1

	)

1040 
	#VER_DEF_NUM
 2

	)

1043 
	#VER_FLG_BASE
 0x1

	)

1044 
	#VER_FLG_WEAK
 0x2

	)

1047 
	#VER_NDX_LOCAL
 0

	)

1048 
	#VER_NDX_GLOBAL
 1

	)

1049 
	#VER_NDX_LORESERVE
 0xff00

	)

1050 
	#VER_NDX_ELIMINATE
 0xff01

	)

1056 
Elf32_W‹d
 
	mvda_«me
;

1057 
Elf32_W‹d
 
	mvda_√xt
;

1059 } 
	tElf32_Vîdaux
;

1063 
Elf64_W‹d
 
	mvda_«me
;

1064 
Elf64_W‹d
 
	mvda_√xt
;

1066 } 
	tElf64_Vîdaux
;

1073 
Elf32_HÆf
 
	mvn_vîsi⁄
;

1074 
Elf32_HÆf
 
	mvn_˙t
;

1075 
Elf32_W‹d
 
	mvn_fûe
;

1077 
Elf32_W‹d
 
	mvn_aux
;

1078 
Elf32_W‹d
 
	mvn_√xt
;

1080 } 
	tElf32_Vî√ed
;

1084 
Elf64_HÆf
 
	mvn_vîsi⁄
;

1085 
Elf64_HÆf
 
	mvn_˙t
;

1086 
Elf64_W‹d
 
	mvn_fûe
;

1088 
Elf64_W‹d
 
	mvn_aux
;

1089 
Elf64_W‹d
 
	mvn_√xt
;

1091 } 
	tElf64_Vî√ed
;

1095 
	#VER_NEED_NONE
 0

	)

1096 
	#VER_NEED_CURRENT
 1

	)

1097 
	#VER_NEED_NUM
 2

	)

1103 
Elf32_W‹d
 
	mv«_hash
;

1104 
Elf32_HÆf
 
	mv«_Êags
;

1105 
Elf32_HÆf
 
	mv«_Ÿhî
;

1106 
Elf32_W‹d
 
	mv«_«me
;

1107 
Elf32_W‹d
 
	mv«_√xt
;

1109 } 
	tElf32_Vî«ux
;

1113 
Elf64_W‹d
 
	mv«_hash
;

1114 
Elf64_HÆf
 
	mv«_Êags
;

1115 
Elf64_HÆf
 
	mv«_Ÿhî
;

1116 
Elf64_W‹d
 
	mv«_«me
;

1117 
Elf64_W‹d
 
	mv«_√xt
;

1119 } 
	tElf64_Vî«ux
;

1123 
	#VER_FLG_WEAK
 0x2

	)

1137 
uöt32_t
 
	ma_ty≥
;

1140 
uöt32_t
 
	ma_vÆ
;

1144 } 
	ma_un
;

1145 } 
	tElf32_auxv_t
;

1149 
uöt64_t
 
	ma_ty≥
;

1152 
uöt64_t
 
	ma_vÆ
;

1156 } 
	ma_un
;

1157 } 
	tElf64_auxv_t
;

1159 
	~<bôs/auxv.h
>

1165 
Elf32_W‹d
 
	mn_«mesz
;

1166 
Elf32_W‹d
 
	mn_descsz
;

1167 
Elf32_W‹d
 
	mn_ty≥
;

1168 } 
	tElf32_Nhdr
;

1172 
Elf64_W‹d
 
	mn_«mesz
;

1173 
Elf64_W‹d
 
	mn_descsz
;

1174 
Elf64_W‹d
 
	mn_ty≥
;

1175 } 
	tElf64_Nhdr
;

1180 
	#ELF_NOTE_SOLARIS
 "SUNW Sﬁ¨is"

	)

1183 
	#ELF_NOTE_GNU
 "GNU"

	)

1189 
	#ELF_NOTE_PAGESIZE_HINT
 1

	)

1200 
	#NT_GNU_ABI_TAG
 1

	)

1201 
	#ELF_NOTE_ABI
 
NT_GNU_ABI_TAG


	)

1205 
	#ELF_NOTE_OS_LINUX
 0

	)

1206 
	#ELF_NOTE_OS_GNU
 1

	)

1207 
	#ELF_NOTE_OS_SOLARIS2
 2

	)

1208 
	#ELF_NOTE_OS_FREEBSD
 3

	)

1216 
	#NT_GNU_HWCAP
 2

	)

1220 
	#NT_GNU_BUILD_ID
 3

	)

1223 
	#NT_GNU_GOLD_VERSION
 4

	)

1226 
	#NT_GNU_PROPERTY_TYPE_0
 5

	)

1229 
	#NOTE_GNU_PROPERTY_SECTION_NAME
 ".nŸe.gnu.¥›îty"

	)

1234 
	#GNU_PROPERTY_STACK_SIZE
 1

	)

1236 
	#GNU_PROPERTY_NO_COPY_ON_PROTECTED
 2

	)

1239 
	#GNU_PROPERTY_LOPROC
 0xc0000000

	)

1241 
	#GNU_PROPERTY_HIPROC
 0xdfffffff

	)

1243 
	#GNU_PROPERTY_LOUSER
 0xe0000000

	)

1245 
	#GNU_PROPERTY_HIUSER
 0xffffffff

	)

1249 
	#GNU_PROPERTY_X86_ISA_1_USED
 0xc0000000

	)

1252 
	#GNU_PROPERTY_X86_ISA_1_NEEDED
 0xc0000001

	)

1254 
	#GNU_PROPERTY_X86_FEATURE_1_AND
 0xc0000002

	)

1256 
	#GNU_PROPERTY_X86_ISA_1_486
 (1U << 0)

	)

1257 
	#GNU_PROPERTY_X86_ISA_1_586
 (1U << 1)

	)

1258 
	#GNU_PROPERTY_X86_ISA_1_686
 (1U << 2)

	)

1259 
	#GNU_PROPERTY_X86_ISA_1_SSE
 (1U << 3)

	)

1260 
	#GNU_PROPERTY_X86_ISA_1_SSE2
 (1U << 4)

	)

1261 
	#GNU_PROPERTY_X86_ISA_1_SSE3
 (1U << 5)

	)

1262 
	#GNU_PROPERTY_X86_ISA_1_SSSE3
 (1U << 6)

	)

1263 
	#GNU_PROPERTY_X86_ISA_1_SSE4_1
 (1U << 7)

	)

1264 
	#GNU_PROPERTY_X86_ISA_1_SSE4_2
 (1U << 8)

	)

1265 
	#GNU_PROPERTY_X86_ISA_1_AVX
 (1U << 9)

	)

1266 
	#GNU_PROPERTY_X86_ISA_1_AVX2
 (1U << 10)

	)

1267 
	#GNU_PROPERTY_X86_ISA_1_AVX512F
 (1U << 11)

	)

1268 
	#GNU_PROPERTY_X86_ISA_1_AVX512CD
 (1U << 12)

	)

1269 
	#GNU_PROPERTY_X86_ISA_1_AVX512ER
 (1U << 13)

	)

1270 
	#GNU_PROPERTY_X86_ISA_1_AVX512PF
 (1U << 14)

	)

1271 
	#GNU_PROPERTY_X86_ISA_1_AVX512VL
 (1U << 15)

	)

1272 
	#GNU_PROPERTY_X86_ISA_1_AVX512DQ
 (1U << 16)

	)

1273 
	#GNU_PROPERTY_X86_ISA_1_AVX512BW
 (1U << 17)

	)

1277 
	#GNU_PROPERTY_X86_FEATURE_1_IBT
 (1U << 0)

	)

1280 
	#GNU_PROPERTY_X86_FEATURE_1_SHSTK
 (1U << 1)

	)

1285 
Elf32_Xw‹d
 
	mm_vÆue
;

1286 
Elf32_W‹d
 
	mm_öfo
;

1287 
Elf32_W‹d
 
	mm_poff£t
;

1288 
Elf32_HÆf
 
	mm_ª≥©
;

1289 
Elf32_HÆf
 
	mm_°ride
;

1290 } 
	tElf32_Move
;

1294 
Elf64_Xw‹d
 
	mm_vÆue
;

1295 
Elf64_Xw‹d
 
	mm_öfo
;

1296 
Elf64_Xw‹d
 
	mm_poff£t
;

1297 
Elf64_HÆf
 
	mm_ª≥©
;

1298 
Elf64_HÆf
 
	mm_°ride
;

1299 } 
	tElf64_Move
;

1302 
	#ELF32_M_SYM
(
öfo
Ë((öfoË>> 8)

	)

1303 
	#ELF32_M_SIZE
(
öfo
Ë((Ë(öfo))

	)

1304 
	#ELF32_M_INFO
(
sym
, 
size
Ë(((symË<< 8Ë+ (Ë(size))

	)

1306 
	#ELF64_M_SYM
(
öfo
Ë
	`ELF32_M_SYM
 (öfo)

	)

1307 
	#ELF64_M_SIZE
(
öfo
Ë
	`ELF32_M_SIZE
 (öfo)

	)

1308 
	#ELF64_M_INFO
(
sym
, 
size
Ë
	`ELF32_M_INFO
 (sym, size)

	)

1314 
	#EF_CPU32
 0x00810000

	)

1318 
	#R_68K_NONE
 0

	)

1319 
	#R_68K_32
 1

	)

1320 
	#R_68K_16
 2

	)

1321 
	#R_68K_8
 3

	)

1322 
	#R_68K_PC32
 4

	)

1323 
	#R_68K_PC16
 5

	)

1324 
	#R_68K_PC8
 6

	)

1325 
	#R_68K_GOT32
 7

	)

1326 
	#R_68K_GOT16
 8

	)

1327 
	#R_68K_GOT8
 9

	)

1328 
	#R_68K_GOT32O
 10

	)

1329 
	#R_68K_GOT16O
 11

	)

1330 
	#R_68K_GOT8O
 12

	)

1331 
	#R_68K_PLT32
 13

	)

1332 
	#R_68K_PLT16
 14

	)

1333 
	#R_68K_PLT8
 15

	)

1334 
	#R_68K_PLT32O
 16

	)

1335 
	#R_68K_PLT16O
 17

	)

1336 
	#R_68K_PLT8O
 18

	)

1337 
	#R_68K_COPY
 19

	)

1338 
	#R_68K_GLOB_DAT
 20

	)

1339 
	#R_68K_JMP_SLOT
 21

	)

1340 
	#R_68K_RELATIVE
 22

	)

1341 
	#R_68K_TLS_GD32
 25

	)

1342 
	#R_68K_TLS_GD16
 26

	)

1343 
	#R_68K_TLS_GD8
 27

	)

1344 
	#R_68K_TLS_LDM32
 28

	)

1345 
	#R_68K_TLS_LDM16
 29

	)

1346 
	#R_68K_TLS_LDM8
 30

	)

1347 
	#R_68K_TLS_LDO32
 31

	)

1348 
	#R_68K_TLS_LDO16
 32

	)

1349 
	#R_68K_TLS_LDO8
 33

	)

1350 
	#R_68K_TLS_IE32
 34

	)

1351 
	#R_68K_TLS_IE16
 35

	)

1352 
	#R_68K_TLS_IE8
 36

	)

1353 
	#R_68K_TLS_LE32
 37

	)

1355 
	#R_68K_TLS_LE16
 38

	)

1357 
	#R_68K_TLS_LE8
 39

	)

1359 
	#R_68K_TLS_DTPMOD32
 40

	)

1360 
	#R_68K_TLS_DTPREL32
 41

	)

1361 
	#R_68K_TLS_TPREL32
 42

	)

1363 
	#R_68K_NUM
 43

	)

1369 
	#R_386_NONE
 0

	)

1370 
	#R_386_32
 1

	)

1371 
	#R_386_PC32
 2

	)

1372 
	#R_386_GOT32
 3

	)

1373 
	#R_386_PLT32
 4

	)

1374 
	#R_386_COPY
 5

	)

1375 
	#R_386_GLOB_DAT
 6

	)

1376 
	#R_386_JMP_SLOT
 7

	)

1377 
	#R_386_RELATIVE
 8

	)

1378 
	#R_386_GOTOFF
 9

	)

1379 
	#R_386_GOTPC
 10

	)

1380 
	#R_386_32PLT
 11

	)

1381 
	#R_386_TLS_TPOFF
 14

	)

1382 
	#R_386_TLS_IE
 15

	)

1384 
	#R_386_TLS_GOTIE
 16

	)

1386 
	#R_386_TLS_LE
 17

	)

1388 
	#R_386_TLS_GD
 18

	)

1390 
	#R_386_TLS_LDM
 19

	)

1393 
	#R_386_16
 20

	)

1394 
	#R_386_PC16
 21

	)

1395 
	#R_386_8
 22

	)

1396 
	#R_386_PC8
 23

	)

1397 
	#R_386_TLS_GD_32
 24

	)

1399 
	#R_386_TLS_GD_PUSH
 25

	)

1400 
	#R_386_TLS_GD_CALL
 26

	)

1402 
	#R_386_TLS_GD_POP
 27

	)

1403 
	#R_386_TLS_LDM_32
 28

	)

1405 
	#R_386_TLS_LDM_PUSH
 29

	)

1406 
	#R_386_TLS_LDM_CALL
 30

	)

1408 
	#R_386_TLS_LDM_POP
 31

	)

1409 
	#R_386_TLS_LDO_32
 32

	)

1410 
	#R_386_TLS_IE_32
 33

	)

1412 
	#R_386_TLS_LE_32
 34

	)

1414 
	#R_386_TLS_DTPMOD32
 35

	)

1415 
	#R_386_TLS_DTPOFF32
 36

	)

1416 
	#R_386_TLS_TPOFF32
 37

	)

1417 
	#R_386_SIZE32
 38

	)

1418 
	#R_386_TLS_GOTDESC
 39

	)

1419 
	#R_386_TLS_DESC_CALL
 40

	)

1422 
	#R_386_TLS_DESC
 41

	)

1426 
	#R_386_IRELATIVE
 42

	)

1427 
	#R_386_GOT32X
 43

	)

1430 
	#R_386_NUM
 44

	)

1436 
	#STT_SPARC_REGISTER
 13

	)

1440 
	#EF_SPARCV9_MM
 3

	)

1441 
	#EF_SPARCV9_TSO
 0

	)

1442 
	#EF_SPARCV9_PSO
 1

	)

1443 
	#EF_SPARCV9_RMO
 2

	)

1444 
	#EF_SPARC_LEDATA
 0x800000

	)

1445 
	#EF_SPARC_EXT_MASK
 0xFFFF00

	)

1446 
	#EF_SPARC_32PLUS
 0x000100

	)

1447 
	#EF_SPARC_SUN_US1
 0x000200

	)

1448 
	#EF_SPARC_HAL_R1
 0x000400

	)

1449 
	#EF_SPARC_SUN_US3
 0x000800

	)

1453 
	#R_SPARC_NONE
 0

	)

1454 
	#R_SPARC_8
 1

	)

1455 
	#R_SPARC_16
 2

	)

1456 
	#R_SPARC_32
 3

	)

1457 
	#R_SPARC_DISP8
 4

	)

1458 
	#R_SPARC_DISP16
 5

	)

1459 
	#R_SPARC_DISP32
 6

	)

1460 
	#R_SPARC_WDISP30
 7

	)

1461 
	#R_SPARC_WDISP22
 8

	)

1462 
	#R_SPARC_HI22
 9

	)

1463 
	#R_SPARC_22
 10

	)

1464 
	#R_SPARC_13
 11

	)

1465 
	#R_SPARC_LO10
 12

	)

1466 
	#R_SPARC_GOT10
 13

	)

1467 
	#R_SPARC_GOT13
 14

	)

1468 
	#R_SPARC_GOT22
 15

	)

1469 
	#R_SPARC_PC10
 16

	)

1470 
	#R_SPARC_PC22
 17

	)

1471 
	#R_SPARC_WPLT30
 18

	)

1472 
	#R_SPARC_COPY
 19

	)

1473 
	#R_SPARC_GLOB_DAT
 20

	)

1474 
	#R_SPARC_JMP_SLOT
 21

	)

1475 
	#R_SPARC_RELATIVE
 22

	)

1476 
	#R_SPARC_UA32
 23

	)

1480 
	#R_SPARC_PLT32
 24

	)

1481 
	#R_SPARC_HIPLT22
 25

	)

1482 
	#R_SPARC_LOPLT10
 26

	)

1483 
	#R_SPARC_PCPLT32
 27

	)

1484 
	#R_SPARC_PCPLT22
 28

	)

1485 
	#R_SPARC_PCPLT10
 29

	)

1486 
	#R_SPARC_10
 30

	)

1487 
	#R_SPARC_11
 31

	)

1488 
	#R_SPARC_64
 32

	)

1489 
	#R_SPARC_OLO10
 33

	)

1490 
	#R_SPARC_HH22
 34

	)

1491 
	#R_SPARC_HM10
 35

	)

1492 
	#R_SPARC_LM22
 36

	)

1493 
	#R_SPARC_PC_HH22
 37

	)

1494 
	#R_SPARC_PC_HM10
 38

	)

1495 
	#R_SPARC_PC_LM22
 39

	)

1496 
	#R_SPARC_WDISP16
 40

	)

1497 
	#R_SPARC_WDISP19
 41

	)

1498 
	#R_SPARC_GLOB_JMP
 42

	)

1499 
	#R_SPARC_7
 43

	)

1500 
	#R_SPARC_5
 44

	)

1501 
	#R_SPARC_6
 45

	)

1502 
	#R_SPARC_DISP64
 46

	)

1503 
	#R_SPARC_PLT64
 47

	)

1504 
	#R_SPARC_HIX22
 48

	)

1505 
	#R_SPARC_LOX10
 49

	)

1506 
	#R_SPARC_H44
 50

	)

1507 
	#R_SPARC_M44
 51

	)

1508 
	#R_SPARC_L44
 52

	)

1509 
	#R_SPARC_REGISTER
 53

	)

1510 
	#R_SPARC_UA64
 54

	)

1511 
	#R_SPARC_UA16
 55

	)

1512 
	#R_SPARC_TLS_GD_HI22
 56

	)

1513 
	#R_SPARC_TLS_GD_LO10
 57

	)

1514 
	#R_SPARC_TLS_GD_ADD
 58

	)

1515 
	#R_SPARC_TLS_GD_CALL
 59

	)

1516 
	#R_SPARC_TLS_LDM_HI22
 60

	)

1517 
	#R_SPARC_TLS_LDM_LO10
 61

	)

1518 
	#R_SPARC_TLS_LDM_ADD
 62

	)

1519 
	#R_SPARC_TLS_LDM_CALL
 63

	)

1520 
	#R_SPARC_TLS_LDO_HIX22
 64

	)

1521 
	#R_SPARC_TLS_LDO_LOX10
 65

	)

1522 
	#R_SPARC_TLS_LDO_ADD
 66

	)

1523 
	#R_SPARC_TLS_IE_HI22
 67

	)

1524 
	#R_SPARC_TLS_IE_LO10
 68

	)

1525 
	#R_SPARC_TLS_IE_LD
 69

	)

1526 
	#R_SPARC_TLS_IE_LDX
 70

	)

1527 
	#R_SPARC_TLS_IE_ADD
 71

	)

1528 
	#R_SPARC_TLS_LE_HIX22
 72

	)

1529 
	#R_SPARC_TLS_LE_LOX10
 73

	)

1530 
	#R_SPARC_TLS_DTPMOD32
 74

	)

1531 
	#R_SPARC_TLS_DTPMOD64
 75

	)

1532 
	#R_SPARC_TLS_DTPOFF32
 76

	)

1533 
	#R_SPARC_TLS_DTPOFF64
 77

	)

1534 
	#R_SPARC_TLS_TPOFF32
 78

	)

1535 
	#R_SPARC_TLS_TPOFF64
 79

	)

1536 
	#R_SPARC_GOTDATA_HIX22
 80

	)

1537 
	#R_SPARC_GOTDATA_LOX10
 81

	)

1538 
	#R_SPARC_GOTDATA_OP_HIX22
 82

	)

1539 
	#R_SPARC_GOTDATA_OP_LOX10
 83

	)

1540 
	#R_SPARC_GOTDATA_OP
 84

	)

1541 
	#R_SPARC_H34
 85

	)

1542 
	#R_SPARC_SIZE32
 86

	)

1543 
	#R_SPARC_SIZE64
 87

	)

1544 
	#R_SPARC_WDISP10
 88

	)

1545 
	#R_SPARC_JMP_IREL
 248

	)

1546 
	#R_SPARC_IRELATIVE
 249

	)

1547 
	#R_SPARC_GNU_VTINHERIT
 250

	)

1548 
	#R_SPARC_GNU_VTENTRY
 251

	)

1549 
	#R_SPARC_REV32
 252

	)

1551 
	#R_SPARC_NUM
 253

	)

1555 
	#DT_SPARC_REGISTER
 0x70000001

	)

1556 
	#DT_SPARC_NUM
 2

	)

1562 
	#EF_MIPS_NOREORDER
 1

	)

1563 
	#EF_MIPS_PIC
 2

	)

1564 
	#EF_MIPS_CPIC
 4

	)

1565 
	#EF_MIPS_XGOT
 8

	)

1566 
	#EF_MIPS_64BIT_WHIRL
 16

	)

1567 
	#EF_MIPS_ABI2
 32

	)

1568 
	#EF_MIPS_ABI_ON32
 64

	)

1569 
	#EF_MIPS_FP64
 512

	)

1570 
	#EF_MIPS_NAN2008
 1024

	)

1571 
	#EF_MIPS_ARCH
 0xf0000000

	)

1575 
	#EF_MIPS_ARCH_1
 0x00000000

	)

1576 
	#EF_MIPS_ARCH_2
 0x10000000

	)

1577 
	#EF_MIPS_ARCH_3
 0x20000000

	)

1578 
	#EF_MIPS_ARCH_4
 0x30000000

	)

1579 
	#EF_MIPS_ARCH_5
 0x40000000

	)

1580 
	#EF_MIPS_ARCH_32
 0x50000000

	)

1581 
	#EF_MIPS_ARCH_64
 0x60000000

	)

1582 
	#EF_MIPS_ARCH_32R2
 0x70000000

	)

1583 
	#EF_MIPS_ARCH_64R2
 0x80000000

	)

1587 
	#E_MIPS_ARCH_1
 
EF_MIPS_ARCH_1


	)

1588 
	#E_MIPS_ARCH_2
 
EF_MIPS_ARCH_2


	)

1589 
	#E_MIPS_ARCH_3
 
EF_MIPS_ARCH_3


	)

1590 
	#E_MIPS_ARCH_4
 
EF_MIPS_ARCH_4


	)

1591 
	#E_MIPS_ARCH_5
 
EF_MIPS_ARCH_5


	)

1592 
	#E_MIPS_ARCH_32
 
EF_MIPS_ARCH_32


	)

1593 
	#E_MIPS_ARCH_64
 
EF_MIPS_ARCH_64


	)

1597 
	#SHN_MIPS_ACOMMON
 0xff00

	)

1598 
	#SHN_MIPS_TEXT
 0xff01

	)

1599 
	#SHN_MIPS_DATA
 0xff02

	)

1600 
	#SHN_MIPS_SCOMMON
 0xff03

	)

1601 
	#SHN_MIPS_SUNDEFINED
 0xff04

	)

1605 
	#SHT_MIPS_LIBLIST
 0x70000000

	)

1606 
	#SHT_MIPS_MSYM
 0x70000001

	)

1607 
	#SHT_MIPS_CONFLICT
 0x70000002

	)

1608 
	#SHT_MIPS_GPTAB
 0x70000003

	)

1609 
	#SHT_MIPS_UCODE
 0x70000004

	)

1610 
	#SHT_MIPS_DEBUG
 0x70000005

	)

1611 
	#SHT_MIPS_REGINFO
 0x70000006

	)

1612 
	#SHT_MIPS_PACKAGE
 0x70000007

	)

1613 
	#SHT_MIPS_PACKSYM
 0x70000008

	)

1614 
	#SHT_MIPS_RELD
 0x70000009

	)

1615 
	#SHT_MIPS_IFACE
 0x7000000b

	)

1616 
	#SHT_MIPS_CONTENT
 0x7000000c

	)

1617 
	#SHT_MIPS_OPTIONS
 0x7000000d

	)

1618 
	#SHT_MIPS_SHDR
 0x70000010

	)

1619 
	#SHT_MIPS_FDESC
 0x70000011

	)

1620 
	#SHT_MIPS_EXTSYM
 0x70000012

	)

1621 
	#SHT_MIPS_DENSE
 0x70000013

	)

1622 
	#SHT_MIPS_PDESC
 0x70000014

	)

1623 
	#SHT_MIPS_LOCSYM
 0x70000015

	)

1624 
	#SHT_MIPS_AUXSYM
 0x70000016

	)

1625 
	#SHT_MIPS_OPTSYM
 0x70000017

	)

1626 
	#SHT_MIPS_LOCSTR
 0x70000018

	)

1627 
	#SHT_MIPS_LINE
 0x70000019

	)

1628 
	#SHT_MIPS_RFDESC
 0x7000001a

	)

1629 
	#SHT_MIPS_DELTASYM
 0x7000001b

	)

1630 
	#SHT_MIPS_DELTAINST
 0x7000001c

	)

1631 
	#SHT_MIPS_DELTACLASS
 0x7000001d

	)

1632 
	#SHT_MIPS_DWARF
 0x7000001ê

	)

1633 
	#SHT_MIPS_DELTADECL
 0x7000001f

	)

1634 
	#SHT_MIPS_SYMBOL_LIB
 0x70000020

	)

1635 
	#SHT_MIPS_EVENTS
 0x70000021

	)

1636 
	#SHT_MIPS_TRANSLATE
 0x70000022

	)

1637 
	#SHT_MIPS_PIXIE
 0x70000023

	)

1638 
	#SHT_MIPS_XLATE
 0x70000024

	)

1639 
	#SHT_MIPS_XLATE_DEBUG
 0x70000025

	)

1640 
	#SHT_MIPS_WHIRL
 0x70000026

	)

1641 
	#SHT_MIPS_EH_REGION
 0x70000027

	)

1642 
	#SHT_MIPS_XLATE_OLD
 0x70000028

	)

1643 
	#SHT_MIPS_PDR_EXCEPTION
 0x70000029

	)

1647 
	#SHF_MIPS_GPREL
 0x10000000

	)

1648 
	#SHF_MIPS_MERGE
 0x20000000

	)

1649 
	#SHF_MIPS_ADDR
 0x40000000

	)

1650 
	#SHF_MIPS_STRINGS
 0x80000000

	)

1651 
	#SHF_MIPS_NOSTRIP
 0x08000000

	)

1652 
	#SHF_MIPS_LOCAL
 0x04000000

	)

1653 
	#SHF_MIPS_NAMES
 0x02000000

	)

1654 
	#SHF_MIPS_NODUPE
 0x01000000

	)

1660 
	#STO_MIPS_DEFAULT
 0x0

	)

1661 
	#STO_MIPS_INTERNAL
 0x1

	)

1662 
	#STO_MIPS_HIDDEN
 0x2

	)

1663 
	#STO_MIPS_PROTECTED
 0x3

	)

1664 
	#STO_MIPS_PLT
 0x8

	)

1665 
	#STO_MIPS_SC_ALIGN_UNUSED
 0xff

	)

1668 
	#STB_MIPS_SPLIT_COMMON
 13

	)

1676 
Elf32_W‹d
 
	mgt_cuºít_g_vÆue
;

1677 
Elf32_W‹d
 
	mgt_unu£d
;

1678 } 
	mgt_hódî
;

1681 
Elf32_W‹d
 
	mgt_g_vÆue
;

1682 
Elf32_W‹d
 
	mgt_byãs
;

1683 } 
	mgt_íåy
;

1684 } 
	tElf32_g±ab
;

1690 
Elf32_W‹d
 
	mri_g¥mask
;

1691 
Elf32_W‹d
 
	mri_˝rmask
[4];

1692 
Elf32_Sw‹d
 
	mri_gp_vÆue
;

1693 } 
	tElf32_RegInfo
;

1699 
	mköd
;

1701 
	msize
;

1702 
Elf32_Se˘i⁄
 
	m£˘i⁄
;

1704 
Elf32_W‹d
 
	möfo
;

1705 } 
	tElf_O±i⁄s
;

1709 
	#ODK_NULL
 0

	)

1710 
	#ODK_REGINFO
 1

	)

1711 
	#ODK_EXCEPTIONS
 2

	)

1712 
	#ODK_PAD
 3

	)

1713 
	#ODK_HWPATCH
 4

	)

1714 
	#ODK_FILL
 5

	)

1715 
	#ODK_TAGS
 6

	)

1716 
	#ODK_HWAND
 7

	)

1717 
	#ODK_HWOR
 8

	)

1721 
	#OEX_FPU_MIN
 0x1‡

	)

1722 
	#OEX_FPU_MAX
 0x1f00

	)

1723 
	#OEX_PAGE0
 0x10000

	)

1724 
	#OEX_SMM
 0x20000

	)

1725 
	#OEX_FPDBUG
 0x40000

	)

1726 
	#OEX_PRECISEFP
 
OEX_FPDBUG


	)

1727 
	#OEX_DISMISS
 0x80000

	)

1729 
	#OEX_FPU_INVAL
 0x10

	)

1730 
	#OEX_FPU_DIV0
 0x08

	)

1731 
	#OEX_FPU_OFLO
 0x04

	)

1732 
	#OEX_FPU_UFLO
 0x02

	)

1733 
	#OEX_FPU_INEX
 0x01

	)

1737 
	#OHW_R4KEOP
 0x1

	)

1738 
	#OHW_R8KPFETCH
 0x2

	)

1739 
	#OHW_R5KEOP
 0x4

	)

1740 
	#OHW_R5KCVTL
 0x8

	)

1742 
	#OPAD_PREFIX
 0x1

	)

1743 
	#OPAD_POSTFIX
 0x2

	)

1744 
	#OPAD_SYMBOL
 0x4

	)

1750 
Elf32_W‹d
 
	mhwp_Êags1
;

1751 
Elf32_W‹d
 
	mhwp_Êags2
;

1752 } 
	tElf_O±i⁄s_Hw
;

1756 
	#OHWA0_R4KEOP_CHECKED
 0x00000001

	)

1757 
	#OHWA1_R4KEOP_CLEAN
 0x00000002

	)

1761 
	#R_MIPS_NONE
 0

	)

1762 
	#R_MIPS_16
 1

	)

1763 
	#R_MIPS_32
 2

	)

1764 
	#R_MIPS_REL32
 3

	)

1765 
	#R_MIPS_26
 4

	)

1766 
	#R_MIPS_HI16
 5

	)

1767 
	#R_MIPS_LO16
 6

	)

1768 
	#R_MIPS_GPREL16
 7

	)

1769 
	#R_MIPS_LITERAL
 8

	)

1770 
	#R_MIPS_GOT16
 9

	)

1771 
	#R_MIPS_PC16
 10

	)

1772 
	#R_MIPS_CALL16
 11

	)

1773 
	#R_MIPS_GPREL32
 12

	)

1775 
	#R_MIPS_SHIFT5
 16

	)

1776 
	#R_MIPS_SHIFT6
 17

	)

1777 
	#R_MIPS_64
 18

	)

1778 
	#R_MIPS_GOT_DISP
 19

	)

1779 
	#R_MIPS_GOT_PAGE
 20

	)

1780 
	#R_MIPS_GOT_OFST
 21

	)

1781 
	#R_MIPS_GOT_HI16
 22

	)

1782 
	#R_MIPS_GOT_LO16
 23

	)

1783 
	#R_MIPS_SUB
 24

	)

1784 
	#R_MIPS_INSERT_A
 25

	)

1785 
	#R_MIPS_INSERT_B
 26

	)

1786 
	#R_MIPS_DELETE
 27

	)

1787 
	#R_MIPS_HIGHER
 28

	)

1788 
	#R_MIPS_HIGHEST
 29

	)

1789 
	#R_MIPS_CALL_HI16
 30

	)

1790 
	#R_MIPS_CALL_LO16
 31

	)

1791 
	#R_MIPS_SCN_DISP
 32

	)

1792 
	#R_MIPS_REL16
 33

	)

1793 
	#R_MIPS_ADD_IMMEDIATE
 34

	)

1794 
	#R_MIPS_PJUMP
 35

	)

1795 
	#R_MIPS_RELGOT
 36

	)

1796 
	#R_MIPS_JALR
 37

	)

1797 
	#R_MIPS_TLS_DTPMOD32
 38

	)

1798 
	#R_MIPS_TLS_DTPREL32
 39

	)

1799 
	#R_MIPS_TLS_DTPMOD64
 40

	)

1800 
	#R_MIPS_TLS_DTPREL64
 41

	)

1801 
	#R_MIPS_TLS_GD
 42

	)

1802 
	#R_MIPS_TLS_LDM
 43

	)

1803 
	#R_MIPS_TLS_DTPREL_HI16
 44

	)

1804 
	#R_MIPS_TLS_DTPREL_LO16
 45

	)

1805 
	#R_MIPS_TLS_GOTTPREL
 46

	)

1806 
	#R_MIPS_TLS_TPREL32
 47

	)

1807 
	#R_MIPS_TLS_TPREL64
 48

	)

1808 
	#R_MIPS_TLS_TPREL_HI16
 49

	)

1809 
	#R_MIPS_TLS_TPREL_LO16
 50

	)

1810 
	#R_MIPS_GLOB_DAT
 51

	)

1811 
	#R_MIPS_COPY
 126

	)

1812 
	#R_MIPS_JUMP_SLOT
 127

	)

1814 
	#R_MIPS_NUM
 128

	)

1818 
	#PT_MIPS_REGINFO
 0x70000000

	)

1819 
	#PT_MIPS_RTPROC
 0x70000001

	)

1820 
	#PT_MIPS_OPTIONS
 0x70000002

	)

1821 
	#PT_MIPS_ABIFLAGS
 0x70000003

	)

1825 
	#PF_MIPS_LOCAL
 0x10000000

	)

1829 
	#DT_MIPS_RLD_VERSION
 0x70000001

	)

1830 
	#DT_MIPS_TIME_STAMP
 0x70000002

	)

1831 
	#DT_MIPS_ICHECKSUM
 0x70000003

	)

1832 
	#DT_MIPS_IVERSION
 0x70000004

	)

1833 
	#DT_MIPS_FLAGS
 0x70000005

	)

1834 
	#DT_MIPS_BASE_ADDRESS
 0x70000006

	)

1835 
	#DT_MIPS_MSYM
 0x70000007

	)

1836 
	#DT_MIPS_CONFLICT
 0x70000008

	)

1837 
	#DT_MIPS_LIBLIST
 0x70000009

	)

1838 
	#DT_MIPS_LOCAL_GOTNO
 0x7000000®

	)

1839 
	#DT_MIPS_CONFLICTNO
 0x7000000b

	)

1840 
	#DT_MIPS_LIBLISTNO
 0x70000010

	)

1841 
	#DT_MIPS_SYMTABNO
 0x70000011

	)

1842 
	#DT_MIPS_UNREFEXTNO
 0x70000012

	)

1843 
	#DT_MIPS_GOTSYM
 0x70000013

	)

1844 
	#DT_MIPS_HIPAGENO
 0x70000014

	)

1845 
	#DT_MIPS_RLD_MAP
 0x70000016

	)

1846 
	#DT_MIPS_DELTA_CLASS
 0x70000017

	)

1847 
	#DT_MIPS_DELTA_CLASS_NO
 0x70000018

	)

1849 
	#DT_MIPS_DELTA_INSTANCE
 0x70000019

	)

1850 
	#DT_MIPS_DELTA_INSTANCE_NO
 0x7000001®

	)

1852 
	#DT_MIPS_DELTA_RELOC
 0x7000001b

	)

1853 
	#DT_MIPS_DELTA_RELOC_NO
 0x7000001¯

	)

1855 
	#DT_MIPS_DELTA_SYM
 0x7000001d

	)

1857 
	#DT_MIPS_DELTA_SYM_NO
 0x7000001ê

	)

1859 
	#DT_MIPS_DELTA_CLASSSYM
 0x70000020

	)

1861 
	#DT_MIPS_DELTA_CLASSSYM_NO
 0x70000021

	)

1863 
	#DT_MIPS_CXX_FLAGS
 0x70000022

	)

1864 
	#DT_MIPS_PIXIE_INIT
 0x70000023

	)

1865 
	#DT_MIPS_SYMBOL_LIB
 0x70000024

	)

1866 
	#DT_MIPS_LOCALPAGE_GOTIDX
 0x70000025

	)

1867 
	#DT_MIPS_LOCAL_GOTIDX
 0x70000026

	)

1868 
	#DT_MIPS_HIDDEN_GOTIDX
 0x70000027

	)

1869 
	#DT_MIPS_PROTECTED_GOTIDX
 0x70000028

	)

1870 
	#DT_MIPS_OPTIONS
 0x70000029

	)

1871 
	#DT_MIPS_INTERFACE
 0x7000002®

	)

1872 
	#DT_MIPS_DYNSTR_ALIGN
 0x7000002b

	)

1873 
	#DT_MIPS_INTERFACE_SIZE
 0x7000002¯

	)

1874 
	#DT_MIPS_RLD_TEXT_RESOLVE_ADDR
 0x7000002d

	)

1876 
	#DT_MIPS_PERF_SUFFIX
 0x7000002ê

	)

1878 
	#DT_MIPS_COMPACT_SIZE
 0x7000002‡

	)

1879 
	#DT_MIPS_GP_VALUE
 0x70000030

	)

1880 
	#DT_MIPS_AUX_DYNAMIC
 0x70000031

	)

1882 
	#DT_MIPS_PLTGOT
 0x70000032

	)

1886 
	#DT_MIPS_RWPLT
 0x70000034

	)

1890 
	#DT_MIPS_RLD_MAP_REL
 0x70000035

	)

1891 
	#DT_MIPS_NUM
 0x36

	)

1895 
	#RHF_NONE
 0

	)

1896 
	#RHF_QUICKSTART
 (1 << 0Ë

	)

1897 
	#RHF_NOTPOT
 (1 << 1Ë

	)

1898 
	#RHF_NO_LIBRARY_REPLACEMENT
 (1 << 2Ë

	)

1899 
	#RHF_NO_MOVE
 (1 << 3)

	)

1900 
	#RHF_SGI_ONLY
 (1 << 4)

	)

1901 
	#RHF_GUARANTEE_INIT
 (1 << 5)

	)

1902 
	#RHF_DELTA_C_PLUS_PLUS
 (1 << 6)

	)

1903 
	#RHF_GUARANTEE_START_INIT
 (1 << 7)

	)

1904 
	#RHF_PIXIE
 (1 << 8)

	)

1905 
	#RHF_DEFAULT_DELAY_LOAD
 (1 << 9)

	)

1906 
	#RHF_REQUICKSTART
 (1 << 10)

	)

1907 
	#RHF_REQUICKSTARTED
 (1 << 11)

	)

1908 
	#RHF_CORD
 (1 << 12)

	)

1909 
	#RHF_NO_UNRES_UNDEF
 (1 << 13)

	)

1910 
	#RHF_RLD_ORDER_SAFE
 (1 << 14)

	)

1916 
Elf32_W‹d
 
	ml_«me
;

1917 
Elf32_W‹d
 
	ml_time_°amp
;

1918 
Elf32_W‹d
 
	ml_checksum
;

1919 
Elf32_W‹d
 
	ml_vîsi⁄
;

1920 
Elf32_W‹d
 
	ml_Êags
;

1921 } 
	tElf32_Lib
;

1925 
Elf64_W‹d
 
	ml_«me
;

1926 
Elf64_W‹d
 
	ml_time_°amp
;

1927 
Elf64_W‹d
 
	ml_checksum
;

1928 
Elf64_W‹d
 
	ml_vîsi⁄
;

1929 
Elf64_W‹d
 
	ml_Êags
;

1930 } 
	tElf64_Lib
;

1935 
	#LL_NONE
 0

	)

1936 
	#LL_EXACT_MATCH
 (1 << 0Ë

	)

1937 
	#LL_IGNORE_INT_VER
 (1 << 1Ë

	)

1938 
	#LL_REQUIRE_MINOR
 (1 << 2)

	)

1939 
	#LL_EXPORTS
 (1 << 3)

	)

1940 
	#LL_DELAY_LOAD
 (1 << 4)

	)

1941 
	#LL_DELTA
 (1 << 5)

	)

1945 
Elf32_Addr
 
	tElf32_C⁄Êi˘
;

1950 
Elf32_HÆf
 
	mvîsi⁄
;

1952 
	miß_Àvñ
;

1954 
	miß_ªv
;

1956 
	mg¥_size
;

1958 
	m˝r1_size
;

1960 
	m˝r2_size
;

1962 
	mÂ_abi
;

1964 
Elf32_W‹d
 
	miß_ext
;

1966 
Elf32_W‹d
 
	ma£s
;

1968 
Elf32_W‹d
 
	mÊags1
;

1969 
Elf32_W‹d
 
	mÊags2
;

1970 } 
	tElf_MIPS_ABIFœgs_v0
;

1974 
	#MIPS_AFL_REG_NONE
 0x00

	)

1975 
	#MIPS_AFL_REG_32
 0x01

	)

1976 
	#MIPS_AFL_REG_64
 0x02

	)

1977 
	#MIPS_AFL_REG_128
 0x03

	)

1981 
	#MIPS_AFL_ASE_DSP
 0x00000001

	)

1982 
	#MIPS_AFL_ASE_DSPR2
 0x00000002

	)

1983 
	#MIPS_AFL_ASE_EVA
 0x00000004

	)

1984 
	#MIPS_AFL_ASE_MCU
 0x00000008

	)

1985 
	#MIPS_AFL_ASE_MDMX
 0x00000010

	)

1986 
	#MIPS_AFL_ASE_MIPS3D
 0x00000020

	)

1987 
	#MIPS_AFL_ASE_MT
 0x00000040

	)

1988 
	#MIPS_AFL_ASE_SMARTMIPS
 0x00000080

	)

1989 
	#MIPS_AFL_ASE_VIRT
 0x00000100

	)

1990 
	#MIPS_AFL_ASE_MSA
 0x00000200

	)

1991 
	#MIPS_AFL_ASE_MIPS16
 0x00000400

	)

1992 
	#MIPS_AFL_ASE_MICROMIPS
 0x00000800

	)

1993 
	#MIPS_AFL_ASE_XPA
 0x00001000

	)

1994 
	#MIPS_AFL_ASE_MASK
 0x00001ff‡

	)

1998 
	#MIPS_AFL_EXT_XLR
 1

	)

1999 
	#MIPS_AFL_EXT_OCTEON2
 2

	)

2000 
	#MIPS_AFL_EXT_OCTEONP
 3

	)

2001 
	#MIPS_AFL_EXT_LOONGSON_3A
 4

	)

2002 
	#MIPS_AFL_EXT_OCTEON
 5

	)

2003 
	#MIPS_AFL_EXT_5900
 6

	)

2004 
	#MIPS_AFL_EXT_4650
 7

	)

2005 
	#MIPS_AFL_EXT_4010
 8

	)

2006 
	#MIPS_AFL_EXT_4100
 9

	)

2007 
	#MIPS_AFL_EXT_3900
 10

	)

2008 
	#MIPS_AFL_EXT_10000
 11

	)

2009 
	#MIPS_AFL_EXT_SB1
 12

	)

2010 
	#MIPS_AFL_EXT_4111
 13

	)

2011 
	#MIPS_AFL_EXT_4120
 14

	)

2012 
	#MIPS_AFL_EXT_5400
 15

	)

2013 
	#MIPS_AFL_EXT_5500
 16

	)

2014 
	#MIPS_AFL_EXT_LOONGSON_2E
 17

	)

2015 
	#MIPS_AFL_EXT_LOONGSON_2F
 18

	)

2018 
	#MIPS_AFL_FLAGS1_ODDSPREG
 1

	)

2024 
	mVÆ_GNU_MIPS_ABI_FP_ANY
 = 0,

2026 
	mVÆ_GNU_MIPS_ABI_FP_DOUBLE
 = 1,

2028 
	mVÆ_GNU_MIPS_ABI_FP_SINGLE
 = 2,

2030 
	mVÆ_GNU_MIPS_ABI_FP_SOFT
 = 3,

2032 
	mVÆ_GNU_MIPS_ABI_FP_OLD_64
 = 4,

2034 
	mVÆ_GNU_MIPS_ABI_FP_XX
 = 5,

2036 
	mVÆ_GNU_MIPS_ABI_FP_64
 = 6,

2038 
	mVÆ_GNU_MIPS_ABI_FP_64A
 = 7,

2040 
	mVÆ_GNU_MIPS_ABI_FP_MAX
 = 7

2047 
	#EF_PARISC_TRAPNIL
 0x00010000

	)

2048 
	#EF_PARISC_EXT
 0x00020000

	)

2049 
	#EF_PARISC_LSB
 0x00040000

	)

2050 
	#EF_PARISC_WIDE
 0x00080000

	)

2051 
	#EF_PARISC_NO_KABP
 0x00100000

	)

2053 
	#EF_PARISC_LAZYSWAP
 0x00400000

	)

2054 
	#EF_PARISC_ARCH
 0x0000fff‡

	)

2058 
	#EFA_PARISC_1_0
 0x020b

	)

2059 
	#EFA_PARISC_1_1
 0x0210

	)

2060 
	#EFA_PARISC_2_0
 0x0214

	)

2064 
	#SHN_PARISC_ANSI_COMMON
 0xff00

	)

2066 
	#SHN_PARISC_HUGE_COMMON
 0xff01

	)

2070 
	#SHT_PARISC_EXT
 0x70000000

	)

2071 
	#SHT_PARISC_UNWIND
 0x70000001

	)

2072 
	#SHT_PARISC_DOC
 0x70000002

	)

2076 
	#SHF_PARISC_SHORT
 0x20000000

	)

2077 
	#SHF_PARISC_HUGE
 0x40000000

	)

2078 
	#SHF_PARISC_SBP
 0x80000000

	)

2082 
	#STT_PARISC_MILLICODE
 13

	)

2084 
	#STT_HP_OPAQUE
 (
STT_LOOS
 + 0x1)

	)

2085 
	#STT_HP_STUB
 (
STT_LOOS
 + 0x2)

	)

2089 
	#R_PARISC_NONE
 0

	)

2090 
	#R_PARISC_DIR32
 1

	)

2091 
	#R_PARISC_DIR21L
 2

	)

2092 
	#R_PARISC_DIR17R
 3

	)

2093 
	#R_PARISC_DIR17F
 4

	)

2094 
	#R_PARISC_DIR14R
 6

	)

2095 
	#R_PARISC_PCREL32
 9

	)

2096 
	#R_PARISC_PCREL21L
 10

	)

2097 
	#R_PARISC_PCREL17R
 11

	)

2098 
	#R_PARISC_PCREL17F
 12

	)

2099 
	#R_PARISC_PCREL14R
 14

	)

2100 
	#R_PARISC_DPREL21L
 18

	)

2101 
	#R_PARISC_DPREL14R
 22

	)

2102 
	#R_PARISC_GPREL21L
 26

	)

2103 
	#R_PARISC_GPREL14R
 30

	)

2104 
	#R_PARISC_LTOFF21L
 34

	)

2105 
	#R_PARISC_LTOFF14R
 38

	)

2106 
	#R_PARISC_SECREL32
 41

	)

2107 
	#R_PARISC_SEGBASE
 48

	)

2108 
	#R_PARISC_SEGREL32
 49

	)

2109 
	#R_PARISC_PLTOFF21L
 50

	)

2110 
	#R_PARISC_PLTOFF14R
 54

	)

2111 
	#R_PARISC_LTOFF_FPTR32
 57

	)

2112 
	#R_PARISC_LTOFF_FPTR21L
 58

	)

2113 
	#R_PARISC_LTOFF_FPTR14R
 62

	)

2114 
	#R_PARISC_FPTR64
 64

	)

2115 
	#R_PARISC_PLABEL32
 65

	)

2116 
	#R_PARISC_PLABEL21L
 66

	)

2117 
	#R_PARISC_PLABEL14R
 70

	)

2118 
	#R_PARISC_PCREL64
 72

	)

2119 
	#R_PARISC_PCREL22F
 74

	)

2120 
	#R_PARISC_PCREL14WR
 75

	)

2121 
	#R_PARISC_PCREL14DR
 76

	)

2122 
	#R_PARISC_PCREL16F
 77

	)

2123 
	#R_PARISC_PCREL16WF
 78

	)

2124 
	#R_PARISC_PCREL16DF
 79

	)

2125 
	#R_PARISC_DIR64
 80

	)

2126 
	#R_PARISC_DIR14WR
 83

	)

2127 
	#R_PARISC_DIR14DR
 84

	)

2128 
	#R_PARISC_DIR16F
 85

	)

2129 
	#R_PARISC_DIR16WF
 86

	)

2130 
	#R_PARISC_DIR16DF
 87

	)

2131 
	#R_PARISC_GPREL64
 88

	)

2132 
	#R_PARISC_GPREL14WR
 91

	)

2133 
	#R_PARISC_GPREL14DR
 92

	)

2134 
	#R_PARISC_GPREL16F
 93

	)

2135 
	#R_PARISC_GPREL16WF
 94

	)

2136 
	#R_PARISC_GPREL16DF
 95

	)

2137 
	#R_PARISC_LTOFF64
 96

	)

2138 
	#R_PARISC_LTOFF14WR
 99

	)

2139 
	#R_PARISC_LTOFF14DR
 100

	)

2140 
	#R_PARISC_LTOFF16F
 101

	)

2141 
	#R_PARISC_LTOFF16WF
 102

	)

2142 
	#R_PARISC_LTOFF16DF
 103

	)

2143 
	#R_PARISC_SECREL64
 104

	)

2144 
	#R_PARISC_SEGREL64
 112

	)

2145 
	#R_PARISC_PLTOFF14WR
 115

	)

2146 
	#R_PARISC_PLTOFF14DR
 116

	)

2147 
	#R_PARISC_PLTOFF16F
 117

	)

2148 
	#R_PARISC_PLTOFF16WF
 118

	)

2149 
	#R_PARISC_PLTOFF16DF
 119

	)

2150 
	#R_PARISC_LTOFF_FPTR64
 120

	)

2151 
	#R_PARISC_LTOFF_FPTR14WR
 123

	)

2152 
	#R_PARISC_LTOFF_FPTR14DR
 124

	)

2153 
	#R_PARISC_LTOFF_FPTR16F
 125

	)

2154 
	#R_PARISC_LTOFF_FPTR16WF
 126

	)

2155 
	#R_PARISC_LTOFF_FPTR16DF
 127

	)

2156 
	#R_PARISC_LORESERVE
 128

	)

2157 
	#R_PARISC_COPY
 128

	)

2158 
	#R_PARISC_IPLT
 129

	)

2159 
	#R_PARISC_EPLT
 130

	)

2160 
	#R_PARISC_TPREL32
 153

	)

2161 
	#R_PARISC_TPREL21L
 154

	)

2162 
	#R_PARISC_TPREL14R
 158

	)

2163 
	#R_PARISC_LTOFF_TP21L
 162

	)

2164 
	#R_PARISC_LTOFF_TP14R
 166

	)

2165 
	#R_PARISC_LTOFF_TP14F
 167

	)

2166 
	#R_PARISC_TPREL64
 216

	)

2167 
	#R_PARISC_TPREL14WR
 219

	)

2168 
	#R_PARISC_TPREL14DR
 220

	)

2169 
	#R_PARISC_TPREL16F
 221

	)

2170 
	#R_PARISC_TPREL16WF
 222

	)

2171 
	#R_PARISC_TPREL16DF
 223

	)

2172 
	#R_PARISC_LTOFF_TP64
 224

	)

2173 
	#R_PARISC_LTOFF_TP14WR
 227

	)

2174 
	#R_PARISC_LTOFF_TP14DR
 228

	)

2175 
	#R_PARISC_LTOFF_TP16F
 229

	)

2176 
	#R_PARISC_LTOFF_TP16WF
 230

	)

2177 
	#R_PARISC_LTOFF_TP16DF
 231

	)

2178 
	#R_PARISC_GNU_VTENTRY
 232

	)

2179 
	#R_PARISC_GNU_VTINHERIT
 233

	)

2180 
	#R_PARISC_TLS_GD21L
 234

	)

2181 
	#R_PARISC_TLS_GD14R
 235

	)

2182 
	#R_PARISC_TLS_GDCALL
 236

	)

2183 
	#R_PARISC_TLS_LDM21L
 237

	)

2184 
	#R_PARISC_TLS_LDM14R
 238

	)

2185 
	#R_PARISC_TLS_LDMCALL
 239

	)

2186 
	#R_PARISC_TLS_LDO21L
 240

	)

2187 
	#R_PARISC_TLS_LDO14R
 241

	)

2188 
	#R_PARISC_TLS_DTPMOD32
 242

	)

2189 
	#R_PARISC_TLS_DTPMOD64
 243

	)

2190 
	#R_PARISC_TLS_DTPOFF32
 244

	)

2191 
	#R_PARISC_TLS_DTPOFF64
 245

	)

2192 
	#R_PARISC_TLS_LE21L
 
R_PARISC_TPREL21L


	)

2193 
	#R_PARISC_TLS_LE14R
 
R_PARISC_TPREL14R


	)

2194 
	#R_PARISC_TLS_IE21L
 
R_PARISC_LTOFF_TP21L


	)

2195 
	#R_PARISC_TLS_IE14R
 
R_PARISC_LTOFF_TP14R


	)

2196 
	#R_PARISC_TLS_TPREL32
 
R_PARISC_TPREL32


	)

2197 
	#R_PARISC_TLS_TPREL64
 
R_PARISC_TPREL64


	)

2198 
	#R_PARISC_HIRESERVE
 255

	)

2202 
	#PT_HP_TLS
 (
PT_LOOS
 + 0x0)

	)

2203 
	#PT_HP_CORE_NONE
 (
PT_LOOS
 + 0x1)

	)

2204 
	#PT_HP_CORE_VERSION
 (
PT_LOOS
 + 0x2)

	)

2205 
	#PT_HP_CORE_KERNEL
 (
PT_LOOS
 + 0x3)

	)

2206 
	#PT_HP_CORE_COMM
 (
PT_LOOS
 + 0x4)

	)

2207 
	#PT_HP_CORE_PROC
 (
PT_LOOS
 + 0x5)

	)

2208 
	#PT_HP_CORE_LOADABLE
 (
PT_LOOS
 + 0x6)

	)

2209 
	#PT_HP_CORE_STACK
 (
PT_LOOS
 + 0x7)

	)

2210 
	#PT_HP_CORE_SHM
 (
PT_LOOS
 + 0x8)

	)

2211 
	#PT_HP_CORE_MMF
 (
PT_LOOS
 + 0x9)

	)

2212 
	#PT_HP_PARALLEL
 (
PT_LOOS
 + 0x10)

	)

2213 
	#PT_HP_FASTBIND
 (
PT_LOOS
 + 0x11)

	)

2214 
	#PT_HP_OPT_ANNOT
 (
PT_LOOS
 + 0x12)

	)

2215 
	#PT_HP_HSL_ANNOT
 (
PT_LOOS
 + 0x13)

	)

2216 
	#PT_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

2218 
	#PT_PARISC_ARCHEXT
 0x70000000

	)

2219 
	#PT_PARISC_UNWIND
 0x70000001

	)

2223 
	#PF_PARISC_SBP
 0x08000000

	)

2225 
	#PF_HP_PAGE_SIZE
 0x00100000

	)

2226 
	#PF_HP_FAR_SHARED
 0x00200000

	)

2227 
	#PF_HP_NEAR_SHARED
 0x00400000

	)

2228 
	#PF_HP_CODE
 0x01000000

	)

2229 
	#PF_HP_MODIFY
 0x02000000

	)

2230 
	#PF_HP_LAZYSWAP
 0x04000000

	)

2231 
	#PF_HP_SBP
 0x08000000

	)

2238 
	#EF_ALPHA_32BIT
 1

	)

2239 
	#EF_ALPHA_CANRELAX
 2

	)

2244 
	#SHT_ALPHA_DEBUG
 0x70000001

	)

2245 
	#SHT_ALPHA_REGINFO
 0x70000002

	)

2249 
	#SHF_ALPHA_GPREL
 0x10000000

	)

2252 
	#STO_ALPHA_NOPV
 0x80

	)

2253 
	#STO_ALPHA_STD_GPLOAD
 0x88

	)

2257 
	#R_ALPHA_NONE
 0

	)

2258 
	#R_ALPHA_REFLONG
 1

	)

2259 
	#R_ALPHA_REFQUAD
 2

	)

2260 
	#R_ALPHA_GPREL32
 3

	)

2261 
	#R_ALPHA_LITERAL
 4

	)

2262 
	#R_ALPHA_LITUSE
 5

	)

2263 
	#R_ALPHA_GPDISP
 6

	)

2264 
	#R_ALPHA_BRADDR
 7

	)

2265 
	#R_ALPHA_HINT
 8

	)

2266 
	#R_ALPHA_SREL16
 9

	)

2267 
	#R_ALPHA_SREL32
 10

	)

2268 
	#R_ALPHA_SREL64
 11

	)

2269 
	#R_ALPHA_GPRELHIGH
 17

	)

2270 
	#R_ALPHA_GPRELLOW
 18

	)

2271 
	#R_ALPHA_GPREL16
 19

	)

2272 
	#R_ALPHA_COPY
 24

	)

2273 
	#R_ALPHA_GLOB_DAT
 25

	)

2274 
	#R_ALPHA_JMP_SLOT
 26

	)

2275 
	#R_ALPHA_RELATIVE
 27

	)

2276 
	#R_ALPHA_TLS_GD_HI
 28

	)

2277 
	#R_ALPHA_TLSGD
 29

	)

2278 
	#R_ALPHA_TLS_LDM
 30

	)

2279 
	#R_ALPHA_DTPMOD64
 31

	)

2280 
	#R_ALPHA_GOTDTPREL
 32

	)

2281 
	#R_ALPHA_DTPREL64
 33

	)

2282 
	#R_ALPHA_DTPRELHI
 34

	)

2283 
	#R_ALPHA_DTPRELLO
 35

	)

2284 
	#R_ALPHA_DTPREL16
 36

	)

2285 
	#R_ALPHA_GOTTPREL
 37

	)

2286 
	#R_ALPHA_TPREL64
 38

	)

2287 
	#R_ALPHA_TPRELHI
 39

	)

2288 
	#R_ALPHA_TPRELLO
 40

	)

2289 
	#R_ALPHA_TPREL16
 41

	)

2291 
	#R_ALPHA_NUM
 46

	)

2294 
	#LITUSE_ALPHA_ADDR
 0

	)

2295 
	#LITUSE_ALPHA_BASE
 1

	)

2296 
	#LITUSE_ALPHA_BYTOFF
 2

	)

2297 
	#LITUSE_ALPHA_JSR
 3

	)

2298 
	#LITUSE_ALPHA_TLS_GD
 4

	)

2299 
	#LITUSE_ALPHA_TLS_LDM
 5

	)

2302 
	#DT_ALPHA_PLTRO
 (
DT_LOPROC
 + 0)

	)

2303 
	#DT_ALPHA_NUM
 1

	)

2308 
	#EF_PPC_EMB
 0x80000000

	)

2311 
	#EF_PPC_RELOCATABLE
 0x00010000

	)

2312 
	#EF_PPC_RELOCATABLE_LIB
 0x00008000

	)

2316 
	#R_PPC_NONE
 0

	)

2317 
	#R_PPC_ADDR32
 1

	)

2318 
	#R_PPC_ADDR24
 2

	)

2319 
	#R_PPC_ADDR16
 3

	)

2320 
	#R_PPC_ADDR16_LO
 4

	)

2321 
	#R_PPC_ADDR16_HI
 5

	)

2322 
	#R_PPC_ADDR16_HA
 6

	)

2323 
	#R_PPC_ADDR14
 7

	)

2324 
	#R_PPC_ADDR14_BRTAKEN
 8

	)

2325 
	#R_PPC_ADDR14_BRNTAKEN
 9

	)

2326 
	#R_PPC_REL24
 10

	)

2327 
	#R_PPC_REL14
 11

	)

2328 
	#R_PPC_REL14_BRTAKEN
 12

	)

2329 
	#R_PPC_REL14_BRNTAKEN
 13

	)

2330 
	#R_PPC_GOT16
 14

	)

2331 
	#R_PPC_GOT16_LO
 15

	)

2332 
	#R_PPC_GOT16_HI
 16

	)

2333 
	#R_PPC_GOT16_HA
 17

	)

2334 
	#R_PPC_PLTREL24
 18

	)

2335 
	#R_PPC_COPY
 19

	)

2336 
	#R_PPC_GLOB_DAT
 20

	)

2337 
	#R_PPC_JMP_SLOT
 21

	)

2338 
	#R_PPC_RELATIVE
 22

	)

2339 
	#R_PPC_LOCAL24PC
 23

	)

2340 
	#R_PPC_UADDR32
 24

	)

2341 
	#R_PPC_UADDR16
 25

	)

2342 
	#R_PPC_REL32
 26

	)

2343 
	#R_PPC_PLT32
 27

	)

2344 
	#R_PPC_PLTREL32
 28

	)

2345 
	#R_PPC_PLT16_LO
 29

	)

2346 
	#R_PPC_PLT16_HI
 30

	)

2347 
	#R_PPC_PLT16_HA
 31

	)

2348 
	#R_PPC_SDAREL16
 32

	)

2349 
	#R_PPC_SECTOFF
 33

	)

2350 
	#R_PPC_SECTOFF_LO
 34

	)

2351 
	#R_PPC_SECTOFF_HI
 35

	)

2352 
	#R_PPC_SECTOFF_HA
 36

	)

2355 
	#R_PPC_TLS
 67

	)

2356 
	#R_PPC_DTPMOD32
 68

	)

2357 
	#R_PPC_TPREL16
 69

	)

2358 
	#R_PPC_TPREL16_LO
 70

	)

2359 
	#R_PPC_TPREL16_HI
 71

	)

2360 
	#R_PPC_TPREL16_HA
 72

	)

2361 
	#R_PPC_TPREL32
 73

	)

2362 
	#R_PPC_DTPREL16
 74

	)

2363 
	#R_PPC_DTPREL16_LO
 75

	)

2364 
	#R_PPC_DTPREL16_HI
 76

	)

2365 
	#R_PPC_DTPREL16_HA
 77

	)

2366 
	#R_PPC_DTPREL32
 78

	)

2367 
	#R_PPC_GOT_TLSGD16
 79

	)

2368 
	#R_PPC_GOT_TLSGD16_LO
 80

	)

2369 
	#R_PPC_GOT_TLSGD16_HI
 81

	)

2370 
	#R_PPC_GOT_TLSGD16_HA
 82

	)

2371 
	#R_PPC_GOT_TLSLD16
 83

	)

2372 
	#R_PPC_GOT_TLSLD16_LO
 84

	)

2373 
	#R_PPC_GOT_TLSLD16_HI
 85

	)

2374 
	#R_PPC_GOT_TLSLD16_HA
 86

	)

2375 
	#R_PPC_GOT_TPREL16
 87

	)

2376 
	#R_PPC_GOT_TPREL16_LO
 88

	)

2377 
	#R_PPC_GOT_TPREL16_HI
 89

	)

2378 
	#R_PPC_GOT_TPREL16_HA
 90

	)

2379 
	#R_PPC_GOT_DTPREL16
 91

	)

2380 
	#R_PPC_GOT_DTPREL16_LO
 92

	)

2381 
	#R_PPC_GOT_DTPREL16_HI
 93

	)

2382 
	#R_PPC_GOT_DTPREL16_HA
 94

	)

2383 
	#R_PPC_TLSGD
 95

	)

2384 
	#R_PPC_TLSLD
 96

	)

2388 
	#R_PPC_EMB_NADDR32
 101

	)

2389 
	#R_PPC_EMB_NADDR16
 102

	)

2390 
	#R_PPC_EMB_NADDR16_LO
 103

	)

2391 
	#R_PPC_EMB_NADDR16_HI
 104

	)

2392 
	#R_PPC_EMB_NADDR16_HA
 105

	)

2393 
	#R_PPC_EMB_SDAI16
 106

	)

2394 
	#R_PPC_EMB_SDA2I16
 107

	)

2395 
	#R_PPC_EMB_SDA2REL
 108

	)

2396 
	#R_PPC_EMB_SDA21
 109

	)

2397 
	#R_PPC_EMB_MRKREF
 110

	)

2398 
	#R_PPC_EMB_RELSEC16
 111

	)

2399 
	#R_PPC_EMB_RELST_LO
 112

	)

2400 
	#R_PPC_EMB_RELST_HI
 113

	)

2401 
	#R_PPC_EMB_RELST_HA
 114

	)

2402 
	#R_PPC_EMB_BIT_FLD
 115

	)

2403 
	#R_PPC_EMB_RELSDA
 116

	)

2406 
	#R_PPC_DIAB_SDA21_LO
 180

	)

2407 
	#R_PPC_DIAB_SDA21_HI
 181

	)

2408 
	#R_PPC_DIAB_SDA21_HA
 182

	)

2409 
	#R_PPC_DIAB_RELSDA_LO
 183

	)

2410 
	#R_PPC_DIAB_RELSDA_HI
 184

	)

2411 
	#R_PPC_DIAB_RELSDA_HA
 185

	)

2414 
	#R_PPC_IRELATIVE
 248

	)

2417 
	#R_PPC_REL16
 249

	)

2418 
	#R_PPC_REL16_LO
 250

	)

2419 
	#R_PPC_REL16_HI
 251

	)

2420 
	#R_PPC_REL16_HA
 252

	)

2424 
	#R_PPC_TOC16
 255

	)

2427 
	#DT_PPC_GOT
 (
DT_LOPROC
 + 0)

	)

2428 
	#DT_PPC_OPT
 (
DT_LOPROC
 + 1)

	)

2429 
	#DT_PPC_NUM
 2

	)

2432 
	#PPC_OPT_TLS
 1

	)

2435 
	#R_PPC64_NONE
 
R_PPC_NONE


	)

2436 
	#R_PPC64_ADDR32
 
R_PPC_ADDR32


	)

2437 
	#R_PPC64_ADDR24
 
R_PPC_ADDR24


	)

2438 
	#R_PPC64_ADDR16
 
R_PPC_ADDR16


	)

2439 
	#R_PPC64_ADDR16_LO
 
R_PPC_ADDR16_LO


	)

2440 
	#R_PPC64_ADDR16_HI
 
R_PPC_ADDR16_HI


	)

2441 
	#R_PPC64_ADDR16_HA
 
R_PPC_ADDR16_HA


	)

2442 
	#R_PPC64_ADDR14
 
R_PPC_ADDR14


	)

2443 
	#R_PPC64_ADDR14_BRTAKEN
 
R_PPC_ADDR14_BRTAKEN


	)

2444 
	#R_PPC64_ADDR14_BRNTAKEN
 
R_PPC_ADDR14_BRNTAKEN


	)

2445 
	#R_PPC64_REL24
 
R_PPC_REL24


	)

2446 
	#R_PPC64_REL14
 
R_PPC_REL14


	)

2447 
	#R_PPC64_REL14_BRTAKEN
 
R_PPC_REL14_BRTAKEN


	)

2448 
	#R_PPC64_REL14_BRNTAKEN
 
R_PPC_REL14_BRNTAKEN


	)

2449 
	#R_PPC64_GOT16
 
R_PPC_GOT16


	)

2450 
	#R_PPC64_GOT16_LO
 
R_PPC_GOT16_LO


	)

2451 
	#R_PPC64_GOT16_HI
 
R_PPC_GOT16_HI


	)

2452 
	#R_PPC64_GOT16_HA
 
R_PPC_GOT16_HA


	)

2454 
	#R_PPC64_COPY
 
R_PPC_COPY


	)

2455 
	#R_PPC64_GLOB_DAT
 
R_PPC_GLOB_DAT


	)

2456 
	#R_PPC64_JMP_SLOT
 
R_PPC_JMP_SLOT


	)

2457 
	#R_PPC64_RELATIVE
 
R_PPC_RELATIVE


	)

2459 
	#R_PPC64_UADDR32
 
R_PPC_UADDR32


	)

2460 
	#R_PPC64_UADDR16
 
R_PPC_UADDR16


	)

2461 
	#R_PPC64_REL32
 
R_PPC_REL32


	)

2462 
	#R_PPC64_PLT32
 
R_PPC_PLT32


	)

2463 
	#R_PPC64_PLTREL32
 
R_PPC_PLTREL32


	)

2464 
	#R_PPC64_PLT16_LO
 
R_PPC_PLT16_LO


	)

2465 
	#R_PPC64_PLT16_HI
 
R_PPC_PLT16_HI


	)

2466 
	#R_PPC64_PLT16_HA
 
R_PPC_PLT16_HA


	)

2468 
	#R_PPC64_SECTOFF
 
R_PPC_SECTOFF


	)

2469 
	#R_PPC64_SECTOFF_LO
 
R_PPC_SECTOFF_LO


	)

2470 
	#R_PPC64_SECTOFF_HI
 
R_PPC_SECTOFF_HI


	)

2471 
	#R_PPC64_SECTOFF_HA
 
R_PPC_SECTOFF_HA


	)

2472 
	#R_PPC64_ADDR30
 37

	)

2473 
	#R_PPC64_ADDR64
 38

	)

2474 
	#R_PPC64_ADDR16_HIGHER
 39

	)

2475 
	#R_PPC64_ADDR16_HIGHERA
 40

	)

2476 
	#R_PPC64_ADDR16_HIGHEST
 41

	)

2477 
	#R_PPC64_ADDR16_HIGHESTA
 42

	)

2478 
	#R_PPC64_UADDR64
 43

	)

2479 
	#R_PPC64_REL64
 44

	)

2480 
	#R_PPC64_PLT64
 45

	)

2481 
	#R_PPC64_PLTREL64
 46

	)

2482 
	#R_PPC64_TOC16
 47

	)

2483 
	#R_PPC64_TOC16_LO
 48

	)

2484 
	#R_PPC64_TOC16_HI
 49

	)

2485 
	#R_PPC64_TOC16_HA
 50

	)

2486 
	#R_PPC64_TOC
 51

	)

2487 
	#R_PPC64_PLTGOT16
 52

	)

2488 
	#R_PPC64_PLTGOT16_LO
 53

	)

2489 
	#R_PPC64_PLTGOT16_HI
 54

	)

2490 
	#R_PPC64_PLTGOT16_HA
 55

	)

2492 
	#R_PPC64_ADDR16_DS
 56

	)

2493 
	#R_PPC64_ADDR16_LO_DS
 57

	)

2494 
	#R_PPC64_GOT16_DS
 58

	)

2495 
	#R_PPC64_GOT16_LO_DS
 59

	)

2496 
	#R_PPC64_PLT16_LO_DS
 60

	)

2497 
	#R_PPC64_SECTOFF_DS
 61

	)

2498 
	#R_PPC64_SECTOFF_LO_DS
 62

	)

2499 
	#R_PPC64_TOC16_DS
 63

	)

2500 
	#R_PPC64_TOC16_LO_DS
 64

	)

2501 
	#R_PPC64_PLTGOT16_DS
 65

	)

2502 
	#R_PPC64_PLTGOT16_LO_DS
 66

	)

2505 
	#R_PPC64_TLS
 67

	)

2506 
	#R_PPC64_DTPMOD64
 68

	)

2507 
	#R_PPC64_TPREL16
 69

	)

2508 
	#R_PPC64_TPREL16_LO
 70

	)

2509 
	#R_PPC64_TPREL16_HI
 71

	)

2510 
	#R_PPC64_TPREL16_HA
 72

	)

2511 
	#R_PPC64_TPREL64
 73

	)

2512 
	#R_PPC64_DTPREL16
 74

	)

2513 
	#R_PPC64_DTPREL16_LO
 75

	)

2514 
	#R_PPC64_DTPREL16_HI
 76

	)

2515 
	#R_PPC64_DTPREL16_HA
 77

	)

2516 
	#R_PPC64_DTPREL64
 78

	)

2517 
	#R_PPC64_GOT_TLSGD16
 79

	)

2518 
	#R_PPC64_GOT_TLSGD16_LO
 80

	)

2519 
	#R_PPC64_GOT_TLSGD16_HI
 81

	)

2520 
	#R_PPC64_GOT_TLSGD16_HA
 82

	)

2521 
	#R_PPC64_GOT_TLSLD16
 83

	)

2522 
	#R_PPC64_GOT_TLSLD16_LO
 84

	)

2523 
	#R_PPC64_GOT_TLSLD16_HI
 85

	)

2524 
	#R_PPC64_GOT_TLSLD16_HA
 86

	)

2525 
	#R_PPC64_GOT_TPREL16_DS
 87

	)

2526 
	#R_PPC64_GOT_TPREL16_LO_DS
 88

	)

2527 
	#R_PPC64_GOT_TPREL16_HI
 89

	)

2528 
	#R_PPC64_GOT_TPREL16_HA
 90

	)

2529 
	#R_PPC64_GOT_DTPREL16_DS
 91

	)

2530 
	#R_PPC64_GOT_DTPREL16_LO_DS
 92

	)

2531 
	#R_PPC64_GOT_DTPREL16_HI
 93

	)

2532 
	#R_PPC64_GOT_DTPREL16_HA
 94

	)

2533 
	#R_PPC64_TPREL16_DS
 95

	)

2534 
	#R_PPC64_TPREL16_LO_DS
 96

	)

2535 
	#R_PPC64_TPREL16_HIGHER
 97

	)

2536 
	#R_PPC64_TPREL16_HIGHERA
 98

	)

2537 
	#R_PPC64_TPREL16_HIGHEST
 99

	)

2538 
	#R_PPC64_TPREL16_HIGHESTA
 100

	)

2539 
	#R_PPC64_DTPREL16_DS
 101

	)

2540 
	#R_PPC64_DTPREL16_LO_DS
 102

	)

2541 
	#R_PPC64_DTPREL16_HIGHER
 103

	)

2542 
	#R_PPC64_DTPREL16_HIGHERA
 104

	)

2543 
	#R_PPC64_DTPREL16_HIGHEST
 105

	)

2544 
	#R_PPC64_DTPREL16_HIGHESTA
 106

	)

2545 
	#R_PPC64_TLSGD
 107

	)

2546 
	#R_PPC64_TLSLD
 108

	)

2547 
	#R_PPC64_TOCSAVE
 109

	)

2550 
	#R_PPC64_ADDR16_HIGH
 110

	)

2551 
	#R_PPC64_ADDR16_HIGHA
 111

	)

2552 
	#R_PPC64_TPREL16_HIGH
 112

	)

2553 
	#R_PPC64_TPREL16_HIGHA
 113

	)

2554 
	#R_PPC64_DTPREL16_HIGH
 114

	)

2555 
	#R_PPC64_DTPREL16_HIGHA
 115

	)

2558 
	#R_PPC64_JMP_IREL
 247

	)

2559 
	#R_PPC64_IRELATIVE
 248

	)

2560 
	#R_PPC64_REL16
 249

	)

2561 
	#R_PPC64_REL16_LO
 250

	)

2562 
	#R_PPC64_REL16_HI
 251

	)

2563 
	#R_PPC64_REL16_HA
 252

	)

2569 
	#EF_PPC64_ABI
 3

	)

2572 
	#DT_PPC64_GLINK
 (
DT_LOPROC
 + 0)

	)

2573 
	#DT_PPC64_OPD
 (
DT_LOPROC
 + 1)

	)

2574 
	#DT_PPC64_OPDSZ
 (
DT_LOPROC
 + 2)

	)

2575 
	#DT_PPC64_OPT
 (
DT_LOPROC
 + 3)

	)

2576 
	#DT_PPC64_NUM
 4

	)

2579 
	#PPC64_OPT_TLS
 1

	)

2580 
	#PPC64_OPT_MULTI_TOC
 2

	)

2581 
	#PPC64_OPT_LOCALENTRY
 4

	)

2584 
	#STO_PPC64_LOCAL_BIT
 5

	)

2585 
	#STO_PPC64_LOCAL_MASK
 (7 << 
STO_PPC64_LOCAL_BIT
)

	)

2586 
	#PPC64_LOCAL_ENTRY_OFFSET
(
Ÿhî
) \

2587 (((1 << (((
Ÿhî
Ë& 
STO_PPC64_LOCAL_MASK
Ë>> 
STO_PPC64_LOCAL_BIT
)Ë>> 2Ë<< 2)

	)

2593 
	#EF_ARM_RELEXEC
 0x01

	)

2594 
	#EF_ARM_HASENTRY
 0x02

	)

2595 
	#EF_ARM_INTERWORK
 0x04

	)

2596 
	#EF_ARM_APCS_26
 0x08

	)

2597 
	#EF_ARM_APCS_FLOAT
 0x10

	)

2598 
	#EF_ARM_PIC
 0x20

	)

2599 
	#EF_ARM_ALIGN8
 0x40

	)

2600 
	#EF_ARM_NEW_ABI
 0x80

	)

2601 
	#EF_ARM_OLD_ABI
 0x100

	)

2602 
	#EF_ARM_SOFT_FLOAT
 0x200

	)

2603 
	#EF_ARM_VFP_FLOAT
 0x400

	)

2604 
	#EF_ARM_MAVERICK_FLOAT
 0x800

	)

2606 
	#EF_ARM_ABI_FLOAT_SOFT
 0x200

	)

2607 
	#EF_ARM_ABI_FLOAT_HARD
 0x400

	)

2612 
	#EF_ARM_SYMSARESORTED
 0x04

	)

2613 
	#EF_ARM_DYNSYMSUSESEGIDX
 0x08

	)

2614 
	#EF_ARM_MAPSYMSFIRST
 0x10

	)

2615 
	#EF_ARM_EABIMASK
 0XFF000000

	)

2618 
	#EF_ARM_BE8
 0x00800000

	)

2619 
	#EF_ARM_LE8
 0x00400000

	)

2621 
	#EF_ARM_EABI_VERSION
(
Êags
Ë((ÊagsË& 
EF_ARM_EABIMASK
)

	)

2622 
	#EF_ARM_EABI_UNKNOWN
 0x00000000

	)

2623 
	#EF_ARM_EABI_VER1
 0x01000000

	)

2624 
	#EF_ARM_EABI_VER2
 0x02000000

	)

2625 
	#EF_ARM_EABI_VER3
 0x03000000

	)

2626 
	#EF_ARM_EABI_VER4
 0x04000000

	)

2627 
	#EF_ARM_EABI_VER5
 0x05000000

	)

2630 
	#STT_ARM_TFUNC
 
STT_LOPROC


	)

2631 
	#STT_ARM_16BIT
 
STT_HIPROC


	)

2634 
	#SHF_ARM_ENTRYSECT
 0x10000000

	)

2635 
	#SHF_ARM_COMDEF
 0x80000000

	)

2639 
	#PF_ARM_SB
 0x10000000

	)

2641 
	#PF_ARM_PI
 0x20000000

	)

2642 
	#PF_ARM_ABS
 0x40000000

	)

2645 
	#PT_ARM_EXIDX
 (
PT_LOPROC
 + 1Ë

	)

2648 
	#SHT_ARM_EXIDX
 (
SHT_LOPROC
 + 1Ë

	)

2649 
	#SHT_ARM_PREEMPTMAP
 (
SHT_LOPROC
 + 2Ë

	)

2650 
	#SHT_ARM_ATTRIBUTES
 (
SHT_LOPROC
 + 3Ë

	)

2655 
	#R_AARCH64_NONE
 0

	)

2658 
	#R_AARCH64_P32_ABS32
 1

	)

2659 
	#R_AARCH64_P32_COPY
 180

	)

2660 
	#R_AARCH64_P32_GLOB_DAT
 181

	)

2661 
	#R_AARCH64_P32_JUMP_SLOT
 182

	)

2662 
	#R_AARCH64_P32_RELATIVE
 183

	)

2663 
	#R_AARCH64_P32_TLS_DTPMOD
 184

	)

2664 
	#R_AARCH64_P32_TLS_DTPREL
 185

	)

2665 
	#R_AARCH64_P32_TLS_TPREL
 186

	)

2666 
	#R_AARCH64_P32_TLSDESC
 187

	)

2667 
	#R_AARCH64_P32_IRELATIVE
 188

	)

2670 
	#R_AARCH64_ABS64
 257

	)

2671 
	#R_AARCH64_ABS32
 258

	)

2672 
	#R_AARCH64_ABS16
 259

	)

2673 
	#R_AARCH64_PREL64
 260

	)

2674 
	#R_AARCH64_PREL32
 261

	)

2675 
	#R_AARCH64_PREL16
 262

	)

2676 
	#R_AARCH64_MOVW_UABS_G0
 263

	)

2677 
	#R_AARCH64_MOVW_UABS_G0_NC
 264

	)

2678 
	#R_AARCH64_MOVW_UABS_G1
 265

	)

2679 
	#R_AARCH64_MOVW_UABS_G1_NC
 266

	)

2680 
	#R_AARCH64_MOVW_UABS_G2
 267

	)

2681 
	#R_AARCH64_MOVW_UABS_G2_NC
 268

	)

2682 
	#R_AARCH64_MOVW_UABS_G3
 269

	)

2683 
	#R_AARCH64_MOVW_SABS_G0
 270

	)

2684 
	#R_AARCH64_MOVW_SABS_G1
 271

	)

2685 
	#R_AARCH64_MOVW_SABS_G2
 272

	)

2686 
	#R_AARCH64_LD_PREL_LO19
 273

	)

2687 
	#R_AARCH64_ADR_PREL_LO21
 274

	)

2688 
	#R_AARCH64_ADR_PREL_PG_HI21
 275

	)

2689 
	#R_AARCH64_ADR_PREL_PG_HI21_NC
 276

	)

2690 
	#R_AARCH64_ADD_ABS_LO12_NC
 277

	)

2691 
	#R_AARCH64_LDST8_ABS_LO12_NC
 278

	)

2692 
	#R_AARCH64_TSTBR14
 279

	)

2693 
	#R_AARCH64_CONDBR19
 280

	)

2694 
	#R_AARCH64_JUMP26
 282

	)

2695 
	#R_AARCH64_CALL26
 283

	)

2696 
	#R_AARCH64_LDST16_ABS_LO12_NC
 284

	)

2697 
	#R_AARCH64_LDST32_ABS_LO12_NC
 285

	)

2698 
	#R_AARCH64_LDST64_ABS_LO12_NC
 286

	)

2699 
	#R_AARCH64_MOVW_PREL_G0
 287

	)

2700 
	#R_AARCH64_MOVW_PREL_G0_NC
 288

	)

2701 
	#R_AARCH64_MOVW_PREL_G1
 289

	)

2702 
	#R_AARCH64_MOVW_PREL_G1_NC
 290

	)

2703 
	#R_AARCH64_MOVW_PREL_G2
 291

	)

2704 
	#R_AARCH64_MOVW_PREL_G2_NC
 292

	)

2705 
	#R_AARCH64_MOVW_PREL_G3
 293

	)

2706 
	#R_AARCH64_LDST128_ABS_LO12_NC
 299

	)

2707 
	#R_AARCH64_MOVW_GOTOFF_G0
 300

	)

2708 
	#R_AARCH64_MOVW_GOTOFF_G0_NC
 301

	)

2709 
	#R_AARCH64_MOVW_GOTOFF_G1
 302

	)

2710 
	#R_AARCH64_MOVW_GOTOFF_G1_NC
 303

	)

2711 
	#R_AARCH64_MOVW_GOTOFF_G2
 304

	)

2712 
	#R_AARCH64_MOVW_GOTOFF_G2_NC
 305

	)

2713 
	#R_AARCH64_MOVW_GOTOFF_G3
 306

	)

2714 
	#R_AARCH64_GOTREL64
 307

	)

2715 
	#R_AARCH64_GOTREL32
 308

	)

2716 
	#R_AARCH64_GOT_LD_PREL19
 309

	)

2717 
	#R_AARCH64_LD64_GOTOFF_LO15
 310

	)

2718 
	#R_AARCH64_ADR_GOT_PAGE
 311

	)

2719 
	#R_AARCH64_LD64_GOT_LO12_NC
 312

	)

2720 
	#R_AARCH64_LD64_GOTPAGE_LO15
 313

	)

2721 
	#R_AARCH64_TLSGD_ADR_PREL21
 512

	)

2722 
	#R_AARCH64_TLSGD_ADR_PAGE21
 513

	)

2723 
	#R_AARCH64_TLSGD_ADD_LO12_NC
 514

	)

2724 
	#R_AARCH64_TLSGD_MOVW_G1
 515

	)

2725 
	#R_AARCH64_TLSGD_MOVW_G0_NC
 516

	)

2726 
	#R_AARCH64_TLSLD_ADR_PREL21
 517

	)

2727 
	#R_AARCH64_TLSLD_ADR_PAGE21
 518

	)

2728 
	#R_AARCH64_TLSLD_ADD_LO12_NC
 519

	)

2729 
	#R_AARCH64_TLSLD_MOVW_G1
 520

	)

2730 
	#R_AARCH64_TLSLD_MOVW_G0_NC
 521

	)

2731 
	#R_AARCH64_TLSLD_LD_PREL19
 522

	)

2732 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G2
 523

	)

2733 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G1
 524

	)

2734 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G1_NC
 525

	)

2735 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G0
 526

	)

2736 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G0_NC
 527

	)

2737 
	#R_AARCH64_TLSLD_ADD_DTPREL_HI12
 528

	)

2738 
	#R_AARCH64_TLSLD_ADD_DTPREL_LO12
 529

	)

2739 
	#R_AARCH64_TLSLD_ADD_DTPREL_LO12_NC
 530

	)

2740 
	#R_AARCH64_TLSLD_LDST8_DTPREL_LO12
 531

	)

2741 
	#R_AARCH64_TLSLD_LDST8_DTPREL_LO12_NC
 532

	)

2742 
	#R_AARCH64_TLSLD_LDST16_DTPREL_LO12
 533

	)

2743 
	#R_AARCH64_TLSLD_LDST16_DTPREL_LO12_NC
 534

	)

2744 
	#R_AARCH64_TLSLD_LDST32_DTPREL_LO12
 535

	)

2745 
	#R_AARCH64_TLSLD_LDST32_DTPREL_LO12_NC
 536

	)

2746 
	#R_AARCH64_TLSLD_LDST64_DTPREL_LO12
 537

	)

2747 
	#R_AARCH64_TLSLD_LDST64_DTPREL_LO12_NC
 538

	)

2748 
	#R_AARCH64_TLSIE_MOVW_GOTTPREL_G1
 539

	)

2749 
	#R_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC
 540

	)

2750 
	#R_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21
 541

	)

2751 
	#R_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC
 542

	)

2752 
	#R_AARCH64_TLSIE_LD_GOTTPREL_PREL19
 543

	)

2753 
	#R_AARCH64_TLSLE_MOVW_TPREL_G2
 544

	)

2754 
	#R_AARCH64_TLSLE_MOVW_TPREL_G1
 545

	)

2755 
	#R_AARCH64_TLSLE_MOVW_TPREL_G1_NC
 546

	)

2756 
	#R_AARCH64_TLSLE_MOVW_TPREL_G0
 547

	)

2757 
	#R_AARCH64_TLSLE_MOVW_TPREL_G0_NC
 548

	)

2758 
	#R_AARCH64_TLSLE_ADD_TPREL_HI12
 549

	)

2759 
	#R_AARCH64_TLSLE_ADD_TPREL_LO12
 550

	)

2760 
	#R_AARCH64_TLSLE_ADD_TPREL_LO12_NC
 551

	)

2761 
	#R_AARCH64_TLSLE_LDST8_TPREL_LO12
 552

	)

2762 
	#R_AARCH64_TLSLE_LDST8_TPREL_LO12_NC
 553

	)

2763 
	#R_AARCH64_TLSLE_LDST16_TPREL_LO12
 554

	)

2764 
	#R_AARCH64_TLSLE_LDST16_TPREL_LO12_NC
 555

	)

2765 
	#R_AARCH64_TLSLE_LDST32_TPREL_LO12
 556

	)

2766 
	#R_AARCH64_TLSLE_LDST32_TPREL_LO12_NC
 557

	)

2767 
	#R_AARCH64_TLSLE_LDST64_TPREL_LO12
 558

	)

2768 
	#R_AARCH64_TLSLE_LDST64_TPREL_LO12_NC
 559

	)

2769 
	#R_AARCH64_TLSDESC_LD_PREL19
 560

	)

2770 
	#R_AARCH64_TLSDESC_ADR_PREL21
 561

	)

2771 
	#R_AARCH64_TLSDESC_ADR_PAGE21
 562

	)

2772 
	#R_AARCH64_TLSDESC_LD64_LO12
 563

	)

2773 
	#R_AARCH64_TLSDESC_ADD_LO12
 564

	)

2774 
	#R_AARCH64_TLSDESC_OFF_G1
 565

	)

2775 
	#R_AARCH64_TLSDESC_OFF_G0_NC
 566

	)

2776 
	#R_AARCH64_TLSDESC_LDR
 567

	)

2777 
	#R_AARCH64_TLSDESC_ADD
 568

	)

2778 
	#R_AARCH64_TLSDESC_CALL
 569

	)

2779 
	#R_AARCH64_TLSLE_LDST128_TPREL_LO12
 570

	)

2780 
	#R_AARCH64_TLSLE_LDST128_TPREL_LO12_NC
 571

	)

2781 
	#R_AARCH64_TLSLD_LDST128_DTPREL_LO12
 572

	)

2782 
	#R_AARCH64_TLSLD_LDST128_DTPREL_LO12_NC
 573

	)

2783 
	#R_AARCH64_COPY
 1024

	)

2784 
	#R_AARCH64_GLOB_DAT
 1025

	)

2785 
	#R_AARCH64_JUMP_SLOT
 1026

	)

2786 
	#R_AARCH64_RELATIVE
 1027

	)

2787 
	#R_AARCH64_TLS_DTPMOD
 1028

	)

2788 
	#R_AARCH64_TLS_DTPREL
 1029

	)

2789 
	#R_AARCH64_TLS_TPREL
 1030

	)

2790 
	#R_AARCH64_TLSDESC
 1031

	)

2791 
	#R_AARCH64_IRELATIVE
 1032

	)

2794 
	#DT_AARCH64_VARIANT_PCS
 (
DT_LOPROC
 + 5)

	)

2795 
	#DT_AARCH64_NUM
 6

	)

2798 
	#STO_AARCH64_VARIANT_PCS
 0x80

	)

2802 
	#R_ARM_NONE
 0

	)

2803 
	#R_ARM_PC24
 1

	)

2805 
	#R_ARM_ABS32
 2

	)

2806 
	#R_ARM_REL32
 3

	)

2807 
	#R_ARM_PC13
 4

	)

2808 
	#R_ARM_ABS16
 5

	)

2809 
	#R_ARM_ABS12
 6

	)

2810 
	#R_ARM_THM_ABS5
 7

	)

2811 
	#R_ARM_ABS8
 8

	)

2812 
	#R_ARM_SBREL32
 9

	)

2813 
	#R_ARM_THM_PC22
 10

	)

2814 
	#R_ARM_THM_PC8
 11

	)

2816 
	#R_ARM_AMP_VCALL9
 12

	)

2817 
	#R_ARM_SWI24
 13

	)

2818 
	#R_ARM_TLS_DESC
 13

	)

2819 
	#R_ARM_THM_SWI8
 14

	)

2820 
	#R_ARM_XPC25
 15

	)

2821 
	#R_ARM_THM_XPC22
 16

	)

2822 
	#R_ARM_TLS_DTPMOD32
 17

	)

2823 
	#R_ARM_TLS_DTPOFF32
 18

	)

2824 
	#R_ARM_TLS_TPOFF32
 19

	)

2825 
	#R_ARM_COPY
 20

	)

2826 
	#R_ARM_GLOB_DAT
 21

	)

2827 
	#R_ARM_JUMP_SLOT
 22

	)

2828 
	#R_ARM_RELATIVE
 23

	)

2829 
	#R_ARM_GOTOFF
 24

	)

2830 
	#R_ARM_GOTPC
 25

	)

2831 
	#R_ARM_GOT32
 26

	)

2832 
	#R_ARM_PLT32
 27

	)

2833 
	#R_ARM_CALL
 28

	)

2834 
	#R_ARM_JUMP24
 29

	)

2836 
	#R_ARM_THM_JUMP24
 30

	)

2837 
	#R_ARM_BASE_ABS
 31

	)

2838 
	#R_ARM_ALU_PCREL_7_0
 32

	)

2839 
	#R_ARM_ALU_PCREL_15_8
 33

	)

2840 
	#R_ARM_ALU_PCREL_23_15
 34

	)

2841 
	#R_ARM_LDR_SBREL_11_0
 35

	)

2842 
	#R_ARM_ALU_SBREL_19_12
 36

	)

2843 
	#R_ARM_ALU_SBREL_27_20
 37

	)

2844 
	#R_ARM_TARGET1
 38

	)

2845 
	#R_ARM_SBREL31
 39

	)

2846 
	#R_ARM_V4BX
 40

	)

2847 
	#R_ARM_TARGET2
 41

	)

2848 
	#R_ARM_PREL31
 42

	)

2849 
	#R_ARM_MOVW_ABS_NC
 43

	)

2850 
	#R_ARM_MOVT_ABS
 44

	)

2851 
	#R_ARM_MOVW_PREL_NC
 45

	)

2852 
	#R_ARM_MOVT_PREL
 46

	)

2853 
	#R_ARM_THM_MOVW_ABS_NC
 47

	)

2854 
	#R_ARM_THM_MOVT_ABS
 48

	)

2856 
	#R_ARM_THM_MOVW_PREL_NC
 49

	)

2858 
	#R_ARM_THM_MOVT_PREL
 50

	)

2860 
	#R_ARM_THM_JUMP19
 51

	)

2862 
	#R_ARM_THM_JUMP6
 52

	)

2864 
	#R_ARM_THM_ALU_PREL_11_0
 53

	)

2866 
	#R_ARM_THM_PC12
 54

	)

2868 
	#R_ARM_ABS32_NOI
 55

	)

2869 
	#R_ARM_REL32_NOI
 56

	)

2870 
	#R_ARM_ALU_PC_G0_NC
 57

	)

2871 
	#R_ARM_ALU_PC_G0
 58

	)

2872 
	#R_ARM_ALU_PC_G1_NC
 59

	)

2873 
	#R_ARM_ALU_PC_G1
 60

	)

2874 
	#R_ARM_ALU_PC_G2
 61

	)

2875 
	#R_ARM_LDR_PC_G1
 62

	)

2876 
	#R_ARM_LDR_PC_G2
 63

	)

2877 
	#R_ARM_LDRS_PC_G0
 64

	)

2879 
	#R_ARM_LDRS_PC_G1
 65

	)

2881 
	#R_ARM_LDRS_PC_G2
 66

	)

2883 
	#R_ARM_LDC_PC_G0
 67

	)

2884 
	#R_ARM_LDC_PC_G1
 68

	)

2885 
	#R_ARM_LDC_PC_G2
 69

	)

2886 
	#R_ARM_ALU_SB_G0_NC
 70

	)

2887 
	#R_ARM_ALU_SB_G0
 71

	)

2888 
	#R_ARM_ALU_SB_G1_NC
 72

	)

2889 
	#R_ARM_ALU_SB_G1
 73

	)

2890 
	#R_ARM_ALU_SB_G2
 74

	)

2891 
	#R_ARM_LDR_SB_G0
 75

	)

2893 
	#R_ARM_LDR_SB_G1
 76

	)

2895 
	#R_ARM_LDR_SB_G2
 77

	)

2897 
	#R_ARM_LDRS_SB_G0
 78

	)

2899 
	#R_ARM_LDRS_SB_G1
 79

	)

2901 
	#R_ARM_LDRS_SB_G2
 80

	)

2903 
	#R_ARM_LDC_SB_G0
 81

	)

2904 
	#R_ARM_LDC_SB_G1
 82

	)

2905 
	#R_ARM_LDC_SB_G2
 83

	)

2906 
	#R_ARM_MOVW_BREL_NC
 84

	)

2908 
	#R_ARM_MOVT_BREL
 85

	)

2910 
	#R_ARM_MOVW_BREL
 86

	)

2912 
	#R_ARM_THM_MOVW_BREL_NC
 87

	)

2914 
	#R_ARM_THM_MOVT_BREL
 88

	)

2916 
	#R_ARM_THM_MOVW_BREL
 89

	)

2918 
	#R_ARM_TLS_GOTDESC
 90

	)

2919 
	#R_ARM_TLS_CALL
 91

	)

2920 
	#R_ARM_TLS_DESCSEQ
 92

	)

2921 
	#R_ARM_THM_TLS_CALL
 93

	)

2922 
	#R_ARM_PLT32_ABS
 94

	)

2923 
	#R_ARM_GOT_ABS
 95

	)

2924 
	#R_ARM_GOT_PREL
 96

	)

2925 
	#R_ARM_GOT_BREL12
 97

	)

2927 
	#R_ARM_GOTOFF12
 98

	)

2929 
	#R_ARM_GOTRELAX
 99

	)

2930 
	#R_ARM_GNU_VTENTRY
 100

	)

2931 
	#R_ARM_GNU_VTINHERIT
 101

	)

2932 
	#R_ARM_THM_PC11
 102

	)

2933 
	#R_ARM_THM_PC9
 103

	)

2935 
	#R_ARM_TLS_GD32
 104

	)

2937 
	#R_ARM_TLS_LDM32
 105

	)

2939 
	#R_ARM_TLS_LDO32
 106

	)

2941 
	#R_ARM_TLS_IE32
 107

	)

2943 
	#R_ARM_TLS_LE32
 108

	)

2945 
	#R_ARM_TLS_LDO12
 109

	)

2947 
	#R_ARM_TLS_LE12
 110

	)

2949 
	#R_ARM_TLS_IE12GP
 111

	)

2951 
	#R_ARM_ME_TOO
 128

	)

2952 
	#R_ARM_THM_TLS_DESCSEQ
 129

	)

2953 
	#R_ARM_THM_TLS_DESCSEQ16
 129

	)

2954 
	#R_ARM_THM_TLS_DESCSEQ32
 130

	)

2955 
	#R_ARM_THM_GOT_BREL12
 131

	)

2957 
	#R_ARM_IRELATIVE
 160

	)

2958 
	#R_ARM_RXPC25
 249

	)

2959 
	#R_ARM_RSBREL32
 250

	)

2960 
	#R_ARM_THM_RPC22
 251

	)

2961 
	#R_ARM_RREL32
 252

	)

2962 
	#R_ARM_RABS22
 253

	)

2963 
	#R_ARM_RPC24
 254

	)

2964 
	#R_ARM_RBASE
 255

	)

2966 
	#R_ARM_NUM
 256

	)

2969 
	#R_CKCORE_NONE
 0

	)

2970 
	#R_CKCORE_ADDR32
 1

	)

2971 
	#R_CKCORE_PCRELIMM8BY4
 2

	)

2972 
	#R_CKCORE_PCRELIMM11BY2
 3

	)

2973 
	#R_CKCORE_PCREL32
 5

	)

2974 
	#R_CKCORE_PCRELJSR_IMM11BY2
 6

	)

2975 
	#R_CKCORE_RELATIVE
 9

	)

2976 
	#R_CKCORE_COPY
 10

	)

2977 
	#R_CKCORE_GLOB_DAT
 11

	)

2978 
	#R_CKCORE_JUMP_SLOT
 12

	)

2979 
	#R_CKCORE_GOTOFF
 13

	)

2980 
	#R_CKCORE_GOTPC
 14

	)

2981 
	#R_CKCORE_GOT32
 15

	)

2982 
	#R_CKCORE_PLT32
 16

	)

2983 
	#R_CKCORE_ADDRGOT
 17

	)

2984 
	#R_CKCORE_ADDRPLT
 18

	)

2985 
	#R_CKCORE_PCREL_IMM26BY2
 19

	)

2986 
	#R_CKCORE_PCREL_IMM16BY2
 20

	)

2987 
	#R_CKCORE_PCREL_IMM16BY4
 21

	)

2988 
	#R_CKCORE_PCREL_IMM10BY2
 22

	)

2989 
	#R_CKCORE_PCREL_IMM10BY4
 23

	)

2990 
	#R_CKCORE_ADDR_HI16
 24

	)

2992 
	#R_CKCORE_ADDR_LO16
 25

	)

2993 
	#R_CKCORE_GOTPC_HI16
 26

	)

2995 
	#R_CKCORE_GOTPC_LO16
 27

	)

2996 
	#R_CKCORE_GOTOFF_HI16
 28

	)

2998 
	#R_CKCORE_GOTOFF_LO16
 29

	)

2999 
	#R_CKCORE_GOT12
 30

	)

3000 
	#R_CKCORE_GOT_HI16
 31

	)

3002 
	#R_CKCORE_GOT_LO16
 32

	)

3003 
	#R_CKCORE_PLT12
 33

	)

3004 
	#R_CKCORE_PLT_HI16
 34

	)

3006 
	#R_CKCORE_PLT_LO16
 35

	)

3007 
	#R_CKCORE_ADDRGOT_HI16
 36

	)

3009 
	#R_CKCORE_ADDRGOT_LO16
 37

	)

3010 
	#R_CKCORE_ADDRPLT_HI16
 38

	)

3012 
	#R_CKCORE_ADDRPLT_LO16
 39

	)

3013 
	#R_CKCORE_PCREL_JSR_IMM26BY2
 40

	)

3014 
	#R_CKCORE_TOFFSET_LO16
 41

	)

3015 
	#R_CKCORE_DOFFSET_LO16
 42

	)

3016 
	#R_CKCORE_PCREL_IMM18BY2
 43

	)

3017 
	#R_CKCORE_DOFFSET_IMM18
 44

	)

3018 
	#R_CKCORE_DOFFSET_IMM18BY2
 45

	)

3019 
	#R_CKCORE_DOFFSET_IMM18BY4
 46

	)

3020 
	#R_CKCORE_GOT_IMM18BY4
 48

	)

3021 
	#R_CKCORE_PLT_IMM18BY4
 49

	)

3022 
	#R_CKCORE_PCREL_IMM7BY4
 50

	)

3023 
	#R_CKCORE_TLS_LE32
 51

	)

3024 
	#R_CKCORE_TLS_IE32
 52

	)

3025 
	#R_CKCORE_TLS_GD32
 53

	)

3026 
	#R_CKCORE_TLS_LDM32
 54

	)

3027 
	#R_CKCORE_TLS_LDO32
 55

	)

3028 
	#R_CKCORE_TLS_DTPMOD32
 56

	)

3029 
	#R_CKCORE_TLS_DTPOFF32
 57

	)

3030 
	#R_CKCORE_TLS_TPOFF32
 58

	)

3033 
	#EF_CSKY_ABIMASK
 0XF0000000

	)

3034 
	#EF_CSKY_OTHER
 0X0FFF0000

	)

3035 
	#EF_CSKY_PROCESSOR
 0X0000FFFF

	)

3037 
	#EF_CSKY_ABIV1
 0X10000000

	)

3038 
	#EF_CSKY_ABIV2
 0X20000000

	)

3041 
	#SHT_CSKY_ATTRIBUTES
 (
SHT_LOPROC
 + 1)

	)

3046 
	#EF_IA_64_MASKOS
 0x0000000‡

	)

3047 
	#EF_IA_64_ABI64
 0x00000010

	)

3048 
	#EF_IA_64_ARCH
 0xff000000

	)

3051 
	#PT_IA_64_ARCHEXT
 (
PT_LOPROC
 + 0Ë

	)

3052 
	#PT_IA_64_UNWIND
 (
PT_LOPROC
 + 1Ë

	)

3053 
	#PT_IA_64_HP_OPT_ANOT
 (
PT_LOOS
 + 0x12)

	)

3054 
	#PT_IA_64_HP_HSL_ANOT
 (
PT_LOOS
 + 0x13)

	)

3055 
	#PT_IA_64_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

3058 
	#PF_IA_64_NORECOV
 0x80000000

	)

3061 
	#SHT_IA_64_EXT
 (
SHT_LOPROC
 + 0Ë

	)

3062 
	#SHT_IA_64_UNWIND
 (
SHT_LOPROC
 + 1Ë

	)

3065 
	#SHF_IA_64_SHORT
 0x10000000

	)

3066 
	#SHF_IA_64_NORECOV
 0x20000000

	)

3069 
	#DT_IA_64_PLT_RESERVE
 (
DT_LOPROC
 + 0)

	)

3070 
	#DT_IA_64_NUM
 1

	)

3073 
	#R_IA64_NONE
 0x00

	)

3074 
	#R_IA64_IMM14
 0x21

	)

3075 
	#R_IA64_IMM22
 0x22

	)

3076 
	#R_IA64_IMM64
 0x23

	)

3077 
	#R_IA64_DIR32MSB
 0x24

	)

3078 
	#R_IA64_DIR32LSB
 0x25

	)

3079 
	#R_IA64_DIR64MSB
 0x26

	)

3080 
	#R_IA64_DIR64LSB
 0x27

	)

3081 
	#R_IA64_GPREL22
 0x2®

	)

3082 
	#R_IA64_GPREL64I
 0x2b

	)

3083 
	#R_IA64_GPREL32MSB
 0x2¯

	)

3084 
	#R_IA64_GPREL32LSB
 0x2d

	)

3085 
	#R_IA64_GPREL64MSB
 0x2ê

	)

3086 
	#R_IA64_GPREL64LSB
 0x2‡

	)

3087 
	#R_IA64_LTOFF22
 0x32

	)

3088 
	#R_IA64_LTOFF64I
 0x33

	)

3089 
	#R_IA64_PLTOFF22
 0x3®

	)

3090 
	#R_IA64_PLTOFF64I
 0x3b

	)

3091 
	#R_IA64_PLTOFF64MSB
 0x3ê

	)

3092 
	#R_IA64_PLTOFF64LSB
 0x3‡

	)

3093 
	#R_IA64_FPTR64I
 0x43

	)

3094 
	#R_IA64_FPTR32MSB
 0x44

	)

3095 
	#R_IA64_FPTR32LSB
 0x45

	)

3096 
	#R_IA64_FPTR64MSB
 0x46

	)

3097 
	#R_IA64_FPTR64LSB
 0x47

	)

3098 
	#R_IA64_PCREL60B
 0x48

	)

3099 
	#R_IA64_PCREL21B
 0x49

	)

3100 
	#R_IA64_PCREL21M
 0x4®

	)

3101 
	#R_IA64_PCREL21F
 0x4b

	)

3102 
	#R_IA64_PCREL32MSB
 0x4¯

	)

3103 
	#R_IA64_PCREL32LSB
 0x4d

	)

3104 
	#R_IA64_PCREL64MSB
 0x4ê

	)

3105 
	#R_IA64_PCREL64LSB
 0x4‡

	)

3106 
	#R_IA64_LTOFF_FPTR22
 0x52

	)

3107 
	#R_IA64_LTOFF_FPTR64I
 0x53

	)

3108 
	#R_IA64_LTOFF_FPTR32MSB
 0x54

	)

3109 
	#R_IA64_LTOFF_FPTR32LSB
 0x55

	)

3110 
	#R_IA64_LTOFF_FPTR64MSB
 0x56

	)

3111 
	#R_IA64_LTOFF_FPTR64LSB
 0x57

	)

3112 
	#R_IA64_SEGREL32MSB
 0x5¯

	)

3113 
	#R_IA64_SEGREL32LSB
 0x5d

	)

3114 
	#R_IA64_SEGREL64MSB
 0x5ê

	)

3115 
	#R_IA64_SEGREL64LSB
 0x5‡

	)

3116 
	#R_IA64_SECREL32MSB
 0x64

	)

3117 
	#R_IA64_SECREL32LSB
 0x65

	)

3118 
	#R_IA64_SECREL64MSB
 0x66

	)

3119 
	#R_IA64_SECREL64LSB
 0x67

	)

3120 
	#R_IA64_REL32MSB
 0x6¯

	)

3121 
	#R_IA64_REL32LSB
 0x6d

	)

3122 
	#R_IA64_REL64MSB
 0x6ê

	)

3123 
	#R_IA64_REL64LSB
 0x6‡

	)

3124 
	#R_IA64_LTV32MSB
 0x74

	)

3125 
	#R_IA64_LTV32LSB
 0x75

	)

3126 
	#R_IA64_LTV64MSB
 0x76

	)

3127 
	#R_IA64_LTV64LSB
 0x77

	)

3128 
	#R_IA64_PCREL21BI
 0x79

	)

3129 
	#R_IA64_PCREL22
 0x7®

	)

3130 
	#R_IA64_PCREL64I
 0x7b

	)

3131 
	#R_IA64_IPLTMSB
 0x80

	)

3132 
	#R_IA64_IPLTLSB
 0x81

	)

3133 
	#R_IA64_COPY
 0x84

	)

3134 
	#R_IA64_SUB
 0x85

	)

3135 
	#R_IA64_LTOFF22X
 0x86

	)

3136 
	#R_IA64_LDXMOV
 0x87

	)

3137 
	#R_IA64_TPREL14
 0x91

	)

3138 
	#R_IA64_TPREL22
 0x92

	)

3139 
	#R_IA64_TPREL64I
 0x93

	)

3140 
	#R_IA64_TPREL64MSB
 0x96

	)

3141 
	#R_IA64_TPREL64LSB
 0x97

	)

3142 
	#R_IA64_LTOFF_TPREL22
 0x9®

	)

3143 
	#R_IA64_DTPMOD64MSB
 0xa6

	)

3144 
	#R_IA64_DTPMOD64LSB
 0xa7

	)

3145 
	#R_IA64_LTOFF_DTPMOD22
 0xØ

	)

3146 
	#R_IA64_DTPREL14
 0xb1

	)

3147 
	#R_IA64_DTPREL22
 0xb2

	)

3148 
	#R_IA64_DTPREL64I
 0xb3

	)

3149 
	#R_IA64_DTPREL32MSB
 0xb4

	)

3150 
	#R_IA64_DTPREL32LSB
 0xb5

	)

3151 
	#R_IA64_DTPREL64MSB
 0xb6

	)

3152 
	#R_IA64_DTPREL64LSB
 0xb7

	)

3153 
	#R_IA64_LTOFF_DTPREL22
 0xb®

	)

3158 
	#EF_SH_MACH_MASK
 0x1f

	)

3159 
	#EF_SH_UNKNOWN
 0x0

	)

3160 
	#EF_SH1
 0x1

	)

3161 
	#EF_SH2
 0x2

	)

3162 
	#EF_SH3
 0x3

	)

3163 
	#EF_SH_DSP
 0x4

	)

3164 
	#EF_SH3_DSP
 0x5

	)

3165 
	#EF_SH4AL_DSP
 0x6

	)

3166 
	#EF_SH3E
 0x8

	)

3167 
	#EF_SH4
 0x9

	)

3168 
	#EF_SH2E
 0xb

	)

3169 
	#EF_SH4A
 0xc

	)

3170 
	#EF_SH2A
 0xd

	)

3171 
	#EF_SH4_NOFPU
 0x10

	)

3172 
	#EF_SH4A_NOFPU
 0x11

	)

3173 
	#EF_SH4_NOMMU_NOFPU
 0x12

	)

3174 
	#EF_SH2A_NOFPU
 0x13

	)

3175 
	#EF_SH3_NOMMU
 0x14

	)

3176 
	#EF_SH2A_SH4_NOFPU
 0x15

	)

3177 
	#EF_SH2A_SH3_NOFPU
 0x16

	)

3178 
	#EF_SH2A_SH4
 0x17

	)

3179 
	#EF_SH2A_SH3E
 0x18

	)

3182 
	#R_SH_NONE
 0

	)

3183 
	#R_SH_DIR32
 1

	)

3184 
	#R_SH_REL32
 2

	)

3185 
	#R_SH_DIR8WPN
 3

	)

3186 
	#R_SH_IND12W
 4

	)

3187 
	#R_SH_DIR8WPL
 5

	)

3188 
	#R_SH_DIR8WPZ
 6

	)

3189 
	#R_SH_DIR8BP
 7

	)

3190 
	#R_SH_DIR8W
 8

	)

3191 
	#R_SH_DIR8L
 9

	)

3192 
	#R_SH_SWITCH16
 25

	)

3193 
	#R_SH_SWITCH32
 26

	)

3194 
	#R_SH_USES
 27

	)

3195 
	#R_SH_COUNT
 28

	)

3196 
	#R_SH_ALIGN
 29

	)

3197 
	#R_SH_CODE
 30

	)

3198 
	#R_SH_DATA
 31

	)

3199 
	#R_SH_LABEL
 32

	)

3200 
	#R_SH_SWITCH8
 33

	)

3201 
	#R_SH_GNU_VTINHERIT
 34

	)

3202 
	#R_SH_GNU_VTENTRY
 35

	)

3203 
	#R_SH_TLS_GD_32
 144

	)

3204 
	#R_SH_TLS_LD_32
 145

	)

3205 
	#R_SH_TLS_LDO_32
 146

	)

3206 
	#R_SH_TLS_IE_32
 147

	)

3207 
	#R_SH_TLS_LE_32
 148

	)

3208 
	#R_SH_TLS_DTPMOD32
 149

	)

3209 
	#R_SH_TLS_DTPOFF32
 150

	)

3210 
	#R_SH_TLS_TPOFF32
 151

	)

3211 
	#R_SH_GOT32
 160

	)

3212 
	#R_SH_PLT32
 161

	)

3213 
	#R_SH_COPY
 162

	)

3214 
	#R_SH_GLOB_DAT
 163

	)

3215 
	#R_SH_JMP_SLOT
 164

	)

3216 
	#R_SH_RELATIVE
 165

	)

3217 
	#R_SH_GOTOFF
 166

	)

3218 
	#R_SH_GOTPC
 167

	)

3220 
	#R_SH_NUM
 256

	)

3226 
	#EF_S390_HIGH_GPRS
 0x00000001

	)

3230 
	#R_390_NONE
 0

	)

3231 
	#R_390_8
 1

	)

3232 
	#R_390_12
 2

	)

3233 
	#R_390_16
 3

	)

3234 
	#R_390_32
 4

	)

3235 
	#R_390_PC32
 5

	)

3236 
	#R_390_GOT12
 6

	)

3237 
	#R_390_GOT32
 7

	)

3238 
	#R_390_PLT32
 8

	)

3239 
	#R_390_COPY
 9

	)

3240 
	#R_390_GLOB_DAT
 10

	)

3241 
	#R_390_JMP_SLOT
 11

	)

3242 
	#R_390_RELATIVE
 12

	)

3243 
	#R_390_GOTOFF32
 13

	)

3244 
	#R_390_GOTPC
 14

	)

3245 
	#R_390_GOT16
 15

	)

3246 
	#R_390_PC16
 16

	)

3247 
	#R_390_PC16DBL
 17

	)

3248 
	#R_390_PLT16DBL
 18

	)

3249 
	#R_390_PC32DBL
 19

	)

3250 
	#R_390_PLT32DBL
 20

	)

3251 
	#R_390_GOTPCDBL
 21

	)

3252 
	#R_390_64
 22

	)

3253 
	#R_390_PC64
 23

	)

3254 
	#R_390_GOT64
 24

	)

3255 
	#R_390_PLT64
 25

	)

3256 
	#R_390_GOTENT
 26

	)

3257 
	#R_390_GOTOFF16
 27

	)

3258 
	#R_390_GOTOFF64
 28

	)

3259 
	#R_390_GOTPLT12
 29

	)

3260 
	#R_390_GOTPLT16
 30

	)

3261 
	#R_390_GOTPLT32
 31

	)

3262 
	#R_390_GOTPLT64
 32

	)

3263 
	#R_390_GOTPLTENT
 33

	)

3264 
	#R_390_PLTOFF16
 34

	)

3265 
	#R_390_PLTOFF32
 35

	)

3266 
	#R_390_PLTOFF64
 36

	)

3267 
	#R_390_TLS_LOAD
 37

	)

3268 
	#R_390_TLS_GDCALL
 38

	)

3270 
	#R_390_TLS_LDCALL
 39

	)

3272 
	#R_390_TLS_GD32
 40

	)

3274 
	#R_390_TLS_GD64
 41

	)

3276 
	#R_390_TLS_GOTIE12
 42

	)

3278 
	#R_390_TLS_GOTIE32
 43

	)

3280 
	#R_390_TLS_GOTIE64
 44

	)

3282 
	#R_390_TLS_LDM32
 45

	)

3284 
	#R_390_TLS_LDM64
 46

	)

3286 
	#R_390_TLS_IE32
 47

	)

3288 
	#R_390_TLS_IE64
 48

	)

3290 
	#R_390_TLS_IEENT
 49

	)

3292 
	#R_390_TLS_LE32
 50

	)

3294 
	#R_390_TLS_LE64
 51

	)

3296 
	#R_390_TLS_LDO32
 52

	)

3298 
	#R_390_TLS_LDO64
 53

	)

3300 
	#R_390_TLS_DTPMOD
 54

	)

3301 
	#R_390_TLS_DTPOFF
 55

	)

3302 
	#R_390_TLS_TPOFF
 56

	)

3304 
	#R_390_20
 57

	)

3305 
	#R_390_GOT20
 58

	)

3306 
	#R_390_GOTPLT20
 59

	)

3307 
	#R_390_TLS_GOTIE20
 60

	)

3309 
	#R_390_IRELATIVE
 61

	)

3311 
	#R_390_NUM
 62

	)

3315 
	#R_CRIS_NONE
 0

	)

3316 
	#R_CRIS_8
 1

	)

3317 
	#R_CRIS_16
 2

	)

3318 
	#R_CRIS_32
 3

	)

3319 
	#R_CRIS_8_PCREL
 4

	)

3320 
	#R_CRIS_16_PCREL
 5

	)

3321 
	#R_CRIS_32_PCREL
 6

	)

3322 
	#R_CRIS_GNU_VTINHERIT
 7

	)

3323 
	#R_CRIS_GNU_VTENTRY
 8

	)

3324 
	#R_CRIS_COPY
 9

	)

3325 
	#R_CRIS_GLOB_DAT
 10

	)

3326 
	#R_CRIS_JUMP_SLOT
 11

	)

3327 
	#R_CRIS_RELATIVE
 12

	)

3328 
	#R_CRIS_16_GOT
 13

	)

3329 
	#R_CRIS_32_GOT
 14

	)

3330 
	#R_CRIS_16_GOTPLT
 15

	)

3331 
	#R_CRIS_32_GOTPLT
 16

	)

3332 
	#R_CRIS_32_GOTREL
 17

	)

3333 
	#R_CRIS_32_PLT_GOTREL
 18

	)

3334 
	#R_CRIS_32_PLT_PCREL
 19

	)

3336 
	#R_CRIS_NUM
 20

	)

3340 
	#R_X86_64_NONE
 0

	)

3341 
	#R_X86_64_64
 1

	)

3342 
	#R_X86_64_PC32
 2

	)

3343 
	#R_X86_64_GOT32
 3

	)

3344 
	#R_X86_64_PLT32
 4

	)

3345 
	#R_X86_64_COPY
 5

	)

3346 
	#R_X86_64_GLOB_DAT
 6

	)

3347 
	#R_X86_64_JUMP_SLOT
 7

	)

3348 
	#R_X86_64_RELATIVE
 8

	)

3349 
	#R_X86_64_GOTPCREL
 9

	)

3351 
	#R_X86_64_32
 10

	)

3352 
	#R_X86_64_32S
 11

	)

3353 
	#R_X86_64_16
 12

	)

3354 
	#R_X86_64_PC16
 13

	)

3355 
	#R_X86_64_8
 14

	)

3356 
	#R_X86_64_PC8
 15

	)

3357 
	#R_X86_64_DTPMOD64
 16

	)

3358 
	#R_X86_64_DTPOFF64
 17

	)

3359 
	#R_X86_64_TPOFF64
 18

	)

3360 
	#R_X86_64_TLSGD
 19

	)

3362 
	#R_X86_64_TLSLD
 20

	)

3364 
	#R_X86_64_DTPOFF32
 21

	)

3365 
	#R_X86_64_GOTTPOFF
 22

	)

3367 
	#R_X86_64_TPOFF32
 23

	)

3368 
	#R_X86_64_PC64
 24

	)

3369 
	#R_X86_64_GOTOFF64
 25

	)

3370 
	#R_X86_64_GOTPC32
 26

	)

3372 
	#R_X86_64_GOT64
 27

	)

3373 
	#R_X86_64_GOTPCREL64
 28

	)

3375 
	#R_X86_64_GOTPC64
 29

	)

3376 
	#R_X86_64_GOTPLT64
 30

	)

3377 
	#R_X86_64_PLTOFF64
 31

	)

3379 
	#R_X86_64_SIZE32
 32

	)

3380 
	#R_X86_64_SIZE64
 33

	)

3381 
	#R_X86_64_GOTPC32_TLSDESC
 34

	)

3382 
	#R_X86_64_TLSDESC_CALL
 35

	)

3384 
	#R_X86_64_TLSDESC
 36

	)

3385 
	#R_X86_64_IRELATIVE
 37

	)

3386 
	#R_X86_64_RELATIVE64
 38

	)

3389 
	#R_X86_64_GOTPCRELX
 41

	)

3392 
	#R_X86_64_REX_GOTPCRELX
 42

	)

3395 
	#R_X86_64_NUM
 43

	)

3398 
	#SHT_X86_64_UNWIND
 0x70000001

	)

3402 
	#R_MN10300_NONE
 0

	)

3403 
	#R_MN10300_32
 1

	)

3404 
	#R_MN10300_16
 2

	)

3405 
	#R_MN10300_8
 3

	)

3406 
	#R_MN10300_PCREL32
 4

	)

3407 
	#R_MN10300_PCREL16
 5

	)

3408 
	#R_MN10300_PCREL8
 6

	)

3409 
	#R_MN10300_GNU_VTINHERIT
 7

	)

3410 
	#R_MN10300_GNU_VTENTRY
 8

	)

3411 
	#R_MN10300_24
 9

	)

3412 
	#R_MN10300_GOTPC32
 10

	)

3413 
	#R_MN10300_GOTPC16
 11

	)

3414 
	#R_MN10300_GOTOFF32
 12

	)

3415 
	#R_MN10300_GOTOFF24
 13

	)

3416 
	#R_MN10300_GOTOFF16
 14

	)

3417 
	#R_MN10300_PLT32
 15

	)

3418 
	#R_MN10300_PLT16
 16

	)

3419 
	#R_MN10300_GOT32
 17

	)

3420 
	#R_MN10300_GOT24
 18

	)

3421 
	#R_MN10300_GOT16
 19

	)

3422 
	#R_MN10300_COPY
 20

	)

3423 
	#R_MN10300_GLOB_DAT
 21

	)

3424 
	#R_MN10300_JMP_SLOT
 22

	)

3425 
	#R_MN10300_RELATIVE
 23

	)

3426 
	#R_MN10300_TLS_GD
 24

	)

3427 
	#R_MN10300_TLS_LD
 25

	)

3428 
	#R_MN10300_TLS_LDO
 26

	)

3429 
	#R_MN10300_TLS_GOTIE
 27

	)

3431 
	#R_MN10300_TLS_IE
 28

	)

3433 
	#R_MN10300_TLS_LE
 29

	)

3435 
	#R_MN10300_TLS_DTPMOD
 30

	)

3436 
	#R_MN10300_TLS_DTPOFF
 31

	)

3437 
	#R_MN10300_TLS_TPOFF
 32

	)

3438 
	#R_MN10300_SYM_DIFF
 33

	)

3440 
	#R_MN10300_ALIGN
 34

	)

3442 
	#R_MN10300_NUM
 35

	)

3446 
	#R_M32R_NONE
 0

	)

3447 
	#R_M32R_16
 1

	)

3448 
	#R_M32R_32
 2

	)

3449 
	#R_M32R_24
 3

	)

3450 
	#R_M32R_10_PCREL
 4

	)

3451 
	#R_M32R_18_PCREL
 5

	)

3452 
	#R_M32R_26_PCREL
 6

	)

3453 
	#R_M32R_HI16_ULO
 7

	)

3454 
	#R_M32R_HI16_SLO
 8

	)

3455 
	#R_M32R_LO16
 9

	)

3456 
	#R_M32R_SDA16
 10

	)

3457 
	#R_M32R_GNU_VTINHERIT
 11

	)

3458 
	#R_M32R_GNU_VTENTRY
 12

	)

3460 
	#R_M32R_16_RELA
 33

	)

3461 
	#R_M32R_32_RELA
 34

	)

3462 
	#R_M32R_24_RELA
 35

	)

3463 
	#R_M32R_10_PCREL_RELA
 36

	)

3464 
	#R_M32R_18_PCREL_RELA
 37

	)

3465 
	#R_M32R_26_PCREL_RELA
 38

	)

3466 
	#R_M32R_HI16_ULO_RELA
 39

	)

3467 
	#R_M32R_HI16_SLO_RELA
 40

	)

3468 
	#R_M32R_LO16_RELA
 41

	)

3469 
	#R_M32R_SDA16_RELA
 42

	)

3470 
	#R_M32R_RELA_GNU_VTINHERIT
 43

	)

3471 
	#R_M32R_RELA_GNU_VTENTRY
 44

	)

3472 
	#R_M32R_REL32
 45

	)

3474 
	#R_M32R_GOT24
 48

	)

3475 
	#R_M32R_26_PLTREL
 49

	)

3476 
	#R_M32R_COPY
 50

	)

3477 
	#R_M32R_GLOB_DAT
 51

	)

3478 
	#R_M32R_JMP_SLOT
 52

	)

3479 
	#R_M32R_RELATIVE
 53

	)

3480 
	#R_M32R_GOTOFF
 54

	)

3481 
	#R_M32R_GOTPC24
 55

	)

3482 
	#R_M32R_GOT16_HI_ULO
 56

	)

3484 
	#R_M32R_GOT16_HI_SLO
 57

	)

3486 
	#R_M32R_GOT16_LO
 58

	)

3487 
	#R_M32R_GOTPC_HI_ULO
 59

	)

3489 
	#R_M32R_GOTPC_HI_SLO
 60

	)

3491 
	#R_M32R_GOTPC_LO
 61

	)

3493 
	#R_M32R_GOTOFF_HI_ULO
 62

	)

3495 
	#R_M32R_GOTOFF_HI_SLO
 63

	)

3497 
	#R_M32R_GOTOFF_LO
 64

	)

3498 
	#R_M32R_NUM
 256

	)

3501 
	#R_MICROBLAZE_NONE
 0

	)

3502 
	#R_MICROBLAZE_32
 1

	)

3503 
	#R_MICROBLAZE_32_PCREL
 2

	)

3504 
	#R_MICROBLAZE_64_PCREL
 3

	)

3505 
	#R_MICROBLAZE_32_PCREL_LO
 4

	)

3506 
	#R_MICROBLAZE_64
 5

	)

3507 
	#R_MICROBLAZE_32_LO
 6

	)

3508 
	#R_MICROBLAZE_SRO32
 7

	)

3509 
	#R_MICROBLAZE_SRW32
 8

	)

3510 
	#R_MICROBLAZE_64_NONE
 9

	)

3511 
	#R_MICROBLAZE_32_SYM_OP_SYM
 10

	)

3512 
	#R_MICROBLAZE_GNU_VTINHERIT
 11

	)

3513 
	#R_MICROBLAZE_GNU_VTENTRY
 12

	)

3514 
	#R_MICROBLAZE_GOTPC_64
 13

	)

3515 
	#R_MICROBLAZE_GOT_64
 14

	)

3516 
	#R_MICROBLAZE_PLT_64
 15

	)

3517 
	#R_MICROBLAZE_REL
 16

	)

3518 
	#R_MICROBLAZE_JUMP_SLOT
 17

	)

3519 
	#R_MICROBLAZE_GLOB_DAT
 18

	)

3520 
	#R_MICROBLAZE_GOTOFF_64
 19

	)

3521 
	#R_MICROBLAZE_GOTOFF_32
 20

	)

3522 
	#R_MICROBLAZE_COPY
 21

	)

3523 
	#R_MICROBLAZE_TLS
 22

	)

3524 
	#R_MICROBLAZE_TLSGD
 23

	)

3525 
	#R_MICROBLAZE_TLSLD
 24

	)

3526 
	#R_MICROBLAZE_TLSDTPMOD32
 25

	)

3527 
	#R_MICROBLAZE_TLSDTPREL32
 26

	)

3528 
	#R_MICROBLAZE_TLSDTPREL64
 27

	)

3529 
	#R_MICROBLAZE_TLSGOTTPREL32
 28

	)

3530 
	#R_MICROBLAZE_TLSTPREL32
 29

	)

3533 
	#DT_NIOS2_GP
 0x70000002

	)

3536 
	#R_NIOS2_NONE
 0

	)

3537 
	#R_NIOS2_S16
 1

	)

3538 
	#R_NIOS2_U16
 2

	)

3539 
	#R_NIOS2_PCREL16
 3

	)

3540 
	#R_NIOS2_CALL26
 4

	)

3541 
	#R_NIOS2_IMM5
 5

	)

3542 
	#R_NIOS2_CACHE_OPX
 6

	)

3543 
	#R_NIOS2_IMM6
 7

	)

3544 
	#R_NIOS2_IMM8
 8

	)

3545 
	#R_NIOS2_HI16
 9

	)

3546 
	#R_NIOS2_LO16
 10

	)

3547 
	#R_NIOS2_HIADJ16
 11

	)

3548 
	#R_NIOS2_BFD_RELOC_32
 12

	)

3549 
	#R_NIOS2_BFD_RELOC_16
 13

	)

3550 
	#R_NIOS2_BFD_RELOC_8
 14

	)

3551 
	#R_NIOS2_GPREL
 15

	)

3552 
	#R_NIOS2_GNU_VTINHERIT
 16

	)

3553 
	#R_NIOS2_GNU_VTENTRY
 17

	)

3554 
	#R_NIOS2_UJMP
 18

	)

3555 
	#R_NIOS2_CJMP
 19

	)

3556 
	#R_NIOS2_CALLR
 20

	)

3557 
	#R_NIOS2_ALIGN
 21

	)

3559 
	#R_NIOS2_GOT16
 22

	)

3560 
	#R_NIOS2_CALL16
 23

	)

3561 
	#R_NIOS2_GOTOFF_LO
 24

	)

3562 
	#R_NIOS2_GOTOFF_HA
 25

	)

3563 
	#R_NIOS2_PCREL_LO
 26

	)

3564 
	#R_NIOS2_PCREL_HA
 27

	)

3565 
	#R_NIOS2_TLS_GD16
 28

	)

3566 
	#R_NIOS2_TLS_LDM16
 29

	)

3567 
	#R_NIOS2_TLS_LDO16
 30

	)

3568 
	#R_NIOS2_TLS_IE16
 31

	)

3569 
	#R_NIOS2_TLS_LE16
 32

	)

3570 
	#R_NIOS2_TLS_DTPMOD
 33

	)

3571 
	#R_NIOS2_TLS_DTPREL
 34

	)

3572 
	#R_NIOS2_TLS_TPREL
 35

	)

3573 
	#R_NIOS2_COPY
 36

	)

3574 
	#R_NIOS2_GLOB_DAT
 37

	)

3575 
	#R_NIOS2_JUMP_SLOT
 38

	)

3576 
	#R_NIOS2_RELATIVE
 39

	)

3577 
	#R_NIOS2_GOTOFF
 40

	)

3578 
	#R_NIOS2_CALL26_NOAT
 41

	)

3579 
	#R_NIOS2_GOT_LO
 42

	)

3580 
	#R_NIOS2_GOT_HA
 43

	)

3581 
	#R_NIOS2_CALL_LO
 44

	)

3582 
	#R_NIOS2_CALL_HA
 45

	)

3585 
	#R_TILEPRO_NONE
 0

	)

3586 
	#R_TILEPRO_32
 1

	)

3587 
	#R_TILEPRO_16
 2

	)

3588 
	#R_TILEPRO_8
 3

	)

3589 
	#R_TILEPRO_32_PCREL
 4

	)

3590 
	#R_TILEPRO_16_PCREL
 5

	)

3591 
	#R_TILEPRO_8_PCREL
 6

	)

3592 
	#R_TILEPRO_LO16
 7

	)

3593 
	#R_TILEPRO_HI16
 8

	)

3594 
	#R_TILEPRO_HA16
 9

	)

3595 
	#R_TILEPRO_COPY
 10

	)

3596 
	#R_TILEPRO_GLOB_DAT
 11

	)

3597 
	#R_TILEPRO_JMP_SLOT
 12

	)

3598 
	#R_TILEPRO_RELATIVE
 13

	)

3599 
	#R_TILEPRO_BROFF_X1
 14

	)

3600 
	#R_TILEPRO_JOFFLONG_X1
 15

	)

3601 
	#R_TILEPRO_JOFFLONG_X1_PLT
 16

	)

3602 
	#R_TILEPRO_IMM8_X0
 17

	)

3603 
	#R_TILEPRO_IMM8_Y0
 18

	)

3604 
	#R_TILEPRO_IMM8_X1
 19

	)

3605 
	#R_TILEPRO_IMM8_Y1
 20

	)

3606 
	#R_TILEPRO_MT_IMM15_X1
 21

	)

3607 
	#R_TILEPRO_MF_IMM15_X1
 22

	)

3608 
	#R_TILEPRO_IMM16_X0
 23

	)

3609 
	#R_TILEPRO_IMM16_X1
 24

	)

3610 
	#R_TILEPRO_IMM16_X0_LO
 25

	)

3611 
	#R_TILEPRO_IMM16_X1_LO
 26

	)

3612 
	#R_TILEPRO_IMM16_X0_HI
 27

	)

3613 
	#R_TILEPRO_IMM16_X1_HI
 28

	)

3614 
	#R_TILEPRO_IMM16_X0_HA
 29

	)

3615 
	#R_TILEPRO_IMM16_X1_HA
 30

	)

3616 
	#R_TILEPRO_IMM16_X0_PCREL
 31

	)

3617 
	#R_TILEPRO_IMM16_X1_PCREL
 32

	)

3618 
	#R_TILEPRO_IMM16_X0_LO_PCREL
 33

	)

3619 
	#R_TILEPRO_IMM16_X1_LO_PCREL
 34

	)

3620 
	#R_TILEPRO_IMM16_X0_HI_PCREL
 35

	)

3621 
	#R_TILEPRO_IMM16_X1_HI_PCREL
 36

	)

3622 
	#R_TILEPRO_IMM16_X0_HA_PCREL
 37

	)

3623 
	#R_TILEPRO_IMM16_X1_HA_PCREL
 38

	)

3624 
	#R_TILEPRO_IMM16_X0_GOT
 39

	)

3625 
	#R_TILEPRO_IMM16_X1_GOT
 40

	)

3626 
	#R_TILEPRO_IMM16_X0_GOT_LO
 41

	)

3627 
	#R_TILEPRO_IMM16_X1_GOT_LO
 42

	)

3628 
	#R_TILEPRO_IMM16_X0_GOT_HI
 43

	)

3629 
	#R_TILEPRO_IMM16_X1_GOT_HI
 44

	)

3630 
	#R_TILEPRO_IMM16_X0_GOT_HA
 45

	)

3631 
	#R_TILEPRO_IMM16_X1_GOT_HA
 46

	)

3632 
	#R_TILEPRO_MMSTART_X0
 47

	)

3633 
	#R_TILEPRO_MMEND_X0
 48

	)

3634 
	#R_TILEPRO_MMSTART_X1
 49

	)

3635 
	#R_TILEPRO_MMEND_X1
 50

	)

3636 
	#R_TILEPRO_SHAMT_X0
 51

	)

3637 
	#R_TILEPRO_SHAMT_X1
 52

	)

3638 
	#R_TILEPRO_SHAMT_Y0
 53

	)

3639 
	#R_TILEPRO_SHAMT_Y1
 54

	)

3640 
	#R_TILEPRO_DEST_IMM8_X1
 55

	)

3642 
	#R_TILEPRO_TLS_GD_CALL
 60

	)

3643 
	#R_TILEPRO_IMM8_X0_TLS_GD_ADD
 61

	)

3644 
	#R_TILEPRO_IMM8_X1_TLS_GD_ADD
 62

	)

3645 
	#R_TILEPRO_IMM8_Y0_TLS_GD_ADD
 63

	)

3646 
	#R_TILEPRO_IMM8_Y1_TLS_GD_ADD
 64

	)

3647 
	#R_TILEPRO_TLS_IE_LOAD
 65

	)

3648 
	#R_TILEPRO_IMM16_X0_TLS_GD
 66

	)

3649 
	#R_TILEPRO_IMM16_X1_TLS_GD
 67

	)

3650 
	#R_TILEPRO_IMM16_X0_TLS_GD_LO
 68

	)

3651 
	#R_TILEPRO_IMM16_X1_TLS_GD_LO
 69

	)

3652 
	#R_TILEPRO_IMM16_X0_TLS_GD_HI
 70

	)

3653 
	#R_TILEPRO_IMM16_X1_TLS_GD_HI
 71

	)

3654 
	#R_TILEPRO_IMM16_X0_TLS_GD_HA
 72

	)

3655 
	#R_TILEPRO_IMM16_X1_TLS_GD_HA
 73

	)

3656 
	#R_TILEPRO_IMM16_X0_TLS_IE
 74

	)

3657 
	#R_TILEPRO_IMM16_X1_TLS_IE
 75

	)

3658 
	#R_TILEPRO_IMM16_X0_TLS_IE_LO
 76

	)

3659 
	#R_TILEPRO_IMM16_X1_TLS_IE_LO
 77

	)

3660 
	#R_TILEPRO_IMM16_X0_TLS_IE_HI
 78

	)

3661 
	#R_TILEPRO_IMM16_X1_TLS_IE_HI
 79

	)

3662 
	#R_TILEPRO_IMM16_X0_TLS_IE_HA
 80

	)

3663 
	#R_TILEPRO_IMM16_X1_TLS_IE_HA
 81

	)

3664 
	#R_TILEPRO_TLS_DTPMOD32
 82

	)

3665 
	#R_TILEPRO_TLS_DTPOFF32
 83

	)

3666 
	#R_TILEPRO_TLS_TPOFF32
 84

	)

3667 
	#R_TILEPRO_IMM16_X0_TLS_LE
 85

	)

3668 
	#R_TILEPRO_IMM16_X1_TLS_LE
 86

	)

3669 
	#R_TILEPRO_IMM16_X0_TLS_LE_LO
 87

	)

3670 
	#R_TILEPRO_IMM16_X1_TLS_LE_LO
 88

	)

3671 
	#R_TILEPRO_IMM16_X0_TLS_LE_HI
 89

	)

3672 
	#R_TILEPRO_IMM16_X1_TLS_LE_HI
 90

	)

3673 
	#R_TILEPRO_IMM16_X0_TLS_LE_HA
 91

	)

3674 
	#R_TILEPRO_IMM16_X1_TLS_LE_HA
 92

	)

3676 
	#R_TILEPRO_GNU_VTINHERIT
 128

	)

3677 
	#R_TILEPRO_GNU_VTENTRY
 129

	)

3679 
	#R_TILEPRO_NUM
 130

	)

3683 
	#R_TILEGX_NONE
 0

	)

3684 
	#R_TILEGX_64
 1

	)

3685 
	#R_TILEGX_32
 2

	)

3686 
	#R_TILEGX_16
 3

	)

3687 
	#R_TILEGX_8
 4

	)

3688 
	#R_TILEGX_64_PCREL
 5

	)

3689 
	#R_TILEGX_32_PCREL
 6

	)

3690 
	#R_TILEGX_16_PCREL
 7

	)

3691 
	#R_TILEGX_8_PCREL
 8

	)

3692 
	#R_TILEGX_HW0
 9

	)

3693 
	#R_TILEGX_HW1
 10

	)

3694 
	#R_TILEGX_HW2
 11

	)

3695 
	#R_TILEGX_HW3
 12

	)

3696 
	#R_TILEGX_HW0_LAST
 13

	)

3697 
	#R_TILEGX_HW1_LAST
 14

	)

3698 
	#R_TILEGX_HW2_LAST
 15

	)

3699 
	#R_TILEGX_COPY
 16

	)

3700 
	#R_TILEGX_GLOB_DAT
 17

	)

3701 
	#R_TILEGX_JMP_SLOT
 18

	)

3702 
	#R_TILEGX_RELATIVE
 19

	)

3703 
	#R_TILEGX_BROFF_X1
 20

	)

3704 
	#R_TILEGX_JUMPOFF_X1
 21

	)

3705 
	#R_TILEGX_JUMPOFF_X1_PLT
 22

	)

3706 
	#R_TILEGX_IMM8_X0
 23

	)

3707 
	#R_TILEGX_IMM8_Y0
 24

	)

3708 
	#R_TILEGX_IMM8_X1
 25

	)

3709 
	#R_TILEGX_IMM8_Y1
 26

	)

3710 
	#R_TILEGX_DEST_IMM8_X1
 27

	)

3711 
	#R_TILEGX_MT_IMM14_X1
 28

	)

3712 
	#R_TILEGX_MF_IMM14_X1
 29

	)

3713 
	#R_TILEGX_MMSTART_X0
 30

	)

3714 
	#R_TILEGX_MMEND_X0
 31

	)

3715 
	#R_TILEGX_SHAMT_X0
 32

	)

3716 
	#R_TILEGX_SHAMT_X1
 33

	)

3717 
	#R_TILEGX_SHAMT_Y0
 34

	)

3718 
	#R_TILEGX_SHAMT_Y1
 35

	)

3719 
	#R_TILEGX_IMM16_X0_HW0
 36

	)

3720 
	#R_TILEGX_IMM16_X1_HW0
 37

	)

3721 
	#R_TILEGX_IMM16_X0_HW1
 38

	)

3722 
	#R_TILEGX_IMM16_X1_HW1
 39

	)

3723 
	#R_TILEGX_IMM16_X0_HW2
 40

	)

3724 
	#R_TILEGX_IMM16_X1_HW2
 41

	)

3725 
	#R_TILEGX_IMM16_X0_HW3
 42

	)

3726 
	#R_TILEGX_IMM16_X1_HW3
 43

	)

3727 
	#R_TILEGX_IMM16_X0_HW0_LAST
 44

	)

3728 
	#R_TILEGX_IMM16_X1_HW0_LAST
 45

	)

3729 
	#R_TILEGX_IMM16_X0_HW1_LAST
 46

	)

3730 
	#R_TILEGX_IMM16_X1_HW1_LAST
 47

	)

3731 
	#R_TILEGX_IMM16_X0_HW2_LAST
 48

	)

3732 
	#R_TILEGX_IMM16_X1_HW2_LAST
 49

	)

3733 
	#R_TILEGX_IMM16_X0_HW0_PCREL
 50

	)

3734 
	#R_TILEGX_IMM16_X1_HW0_PCREL
 51

	)

3735 
	#R_TILEGX_IMM16_X0_HW1_PCREL
 52

	)

3736 
	#R_TILEGX_IMM16_X1_HW1_PCREL
 53

	)

3737 
	#R_TILEGX_IMM16_X0_HW2_PCREL
 54

	)

3738 
	#R_TILEGX_IMM16_X1_HW2_PCREL
 55

	)

3739 
	#R_TILEGX_IMM16_X0_HW3_PCREL
 56

	)

3740 
	#R_TILEGX_IMM16_X1_HW3_PCREL
 57

	)

3741 
	#R_TILEGX_IMM16_X0_HW0_LAST_PCREL
 58

	)

3742 
	#R_TILEGX_IMM16_X1_HW0_LAST_PCREL
 59

	)

3743 
	#R_TILEGX_IMM16_X0_HW1_LAST_PCREL
 60

	)

3744 
	#R_TILEGX_IMM16_X1_HW1_LAST_PCREL
 61

	)

3745 
	#R_TILEGX_IMM16_X0_HW2_LAST_PCREL
 62

	)

3746 
	#R_TILEGX_IMM16_X1_HW2_LAST_PCREL
 63

	)

3747 
	#R_TILEGX_IMM16_X0_HW0_GOT
 64

	)

3748 
	#R_TILEGX_IMM16_X1_HW0_GOT
 65

	)

3749 
	#R_TILEGX_IMM16_X0_HW0_PLT_PCREL
 66

	)

3750 
	#R_TILEGX_IMM16_X1_HW0_PLT_PCREL
 67

	)

3751 
	#R_TILEGX_IMM16_X0_HW1_PLT_PCREL
 68

	)

3752 
	#R_TILEGX_IMM16_X1_HW1_PLT_PCREL
 69

	)

3753 
	#R_TILEGX_IMM16_X0_HW2_PLT_PCREL
 70

	)

3754 
	#R_TILEGX_IMM16_X1_HW2_PLT_PCREL
 71

	)

3755 
	#R_TILEGX_IMM16_X0_HW0_LAST_GOT
 72

	)

3756 
	#R_TILEGX_IMM16_X1_HW0_LAST_GOT
 73

	)

3757 
	#R_TILEGX_IMM16_X0_HW1_LAST_GOT
 74

	)

3758 
	#R_TILEGX_IMM16_X1_HW1_LAST_GOT
 75

	)

3759 
	#R_TILEGX_IMM16_X0_HW3_PLT_PCREL
 76

	)

3760 
	#R_TILEGX_IMM16_X1_HW3_PLT_PCREL
 77

	)

3761 
	#R_TILEGX_IMM16_X0_HW0_TLS_GD
 78

	)

3762 
	#R_TILEGX_IMM16_X1_HW0_TLS_GD
 79

	)

3763 
	#R_TILEGX_IMM16_X0_HW0_TLS_LE
 80

	)

3764 
	#R_TILEGX_IMM16_X1_HW0_TLS_LE
 81

	)

3765 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_LE
 82

	)

3766 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_LE
 83

	)

3767 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_LE
 84

	)

3768 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_LE
 85

	)

3769 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_GD
 86

	)

3770 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_GD
 87

	)

3771 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_GD
 88

	)

3772 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_GD
 89

	)

3774 
	#R_TILEGX_IMM16_X0_HW0_TLS_IE
 92

	)

3775 
	#R_TILEGX_IMM16_X1_HW0_TLS_IE
 93

	)

3776 
	#R_TILEGX_IMM16_X0_HW0_LAST_PLT_PCREL
 94

	)

3777 
	#R_TILEGX_IMM16_X1_HW0_LAST_PLT_PCREL
 95

	)

3778 
	#R_TILEGX_IMM16_X0_HW1_LAST_PLT_PCREL
 96

	)

3779 
	#R_TILEGX_IMM16_X1_HW1_LAST_PLT_PCREL
 97

	)

3780 
	#R_TILEGX_IMM16_X0_HW2_LAST_PLT_PCREL
 98

	)

3781 
	#R_TILEGX_IMM16_X1_HW2_LAST_PLT_PCREL
 99

	)

3782 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_IE
 100

	)

3783 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_IE
 101

	)

3784 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_IE
 102

	)

3785 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_IE
 103

	)

3787 
	#R_TILEGX_TLS_DTPMOD64
 106

	)

3788 
	#R_TILEGX_TLS_DTPOFF64
 107

	)

3789 
	#R_TILEGX_TLS_TPOFF64
 108

	)

3790 
	#R_TILEGX_TLS_DTPMOD32
 109

	)

3791 
	#R_TILEGX_TLS_DTPOFF32
 110

	)

3792 
	#R_TILEGX_TLS_TPOFF32
 111

	)

3793 
	#R_TILEGX_TLS_GD_CALL
 112

	)

3794 
	#R_TILEGX_IMM8_X0_TLS_GD_ADD
 113

	)

3795 
	#R_TILEGX_IMM8_X1_TLS_GD_ADD
 114

	)

3796 
	#R_TILEGX_IMM8_Y0_TLS_GD_ADD
 115

	)

3797 
	#R_TILEGX_IMM8_Y1_TLS_GD_ADD
 116

	)

3798 
	#R_TILEGX_TLS_IE_LOAD
 117

	)

3799 
	#R_TILEGX_IMM8_X0_TLS_ADD
 118

	)

3800 
	#R_TILEGX_IMM8_X1_TLS_ADD
 119

	)

3801 
	#R_TILEGX_IMM8_Y0_TLS_ADD
 120

	)

3802 
	#R_TILEGX_IMM8_Y1_TLS_ADD
 121

	)

3804 
	#R_TILEGX_GNU_VTINHERIT
 128

	)

3805 
	#R_TILEGX_GNU_VTENTRY
 129

	)

3807 
	#R_TILEGX_NUM
 130

	)

3810 
	#EF_RISCV_RVC
 0x0001

	)

3811 
	#EF_RISCV_FLOAT_ABI
 0x0006

	)

3812 
	#EF_RISCV_FLOAT_ABI_SOFT
 0x0000

	)

3813 
	#EF_RISCV_FLOAT_ABI_SINGLE
 0x0002

	)

3814 
	#EF_RISCV_FLOAT_ABI_DOUBLE
 0x0004

	)

3815 
	#EF_RISCV_FLOAT_ABI_QUAD
 0x0006

	)

3818 
	#R_RISCV_NONE
 0

	)

3819 
	#R_RISCV_32
 1

	)

3820 
	#R_RISCV_64
 2

	)

3821 
	#R_RISCV_RELATIVE
 3

	)

3822 
	#R_RISCV_COPY
 4

	)

3823 
	#R_RISCV_JUMP_SLOT
 5

	)

3824 
	#R_RISCV_TLS_DTPMOD32
 6

	)

3825 
	#R_RISCV_TLS_DTPMOD64
 7

	)

3826 
	#R_RISCV_TLS_DTPREL32
 8

	)

3827 
	#R_RISCV_TLS_DTPREL64
 9

	)

3828 
	#R_RISCV_TLS_TPREL32
 10

	)

3829 
	#R_RISCV_TLS_TPREL64
 11

	)

3830 
	#R_RISCV_BRANCH
 16

	)

3831 
	#R_RISCV_JAL
 17

	)

3832 
	#R_RISCV_CALL
 18

	)

3833 
	#R_RISCV_CALL_PLT
 19

	)

3834 
	#R_RISCV_GOT_HI20
 20

	)

3835 
	#R_RISCV_TLS_GOT_HI20
 21

	)

3836 
	#R_RISCV_TLS_GD_HI20
 22

	)

3837 
	#R_RISCV_PCREL_HI20
 23

	)

3838 
	#R_RISCV_PCREL_LO12_I
 24

	)

3839 
	#R_RISCV_PCREL_LO12_S
 25

	)

3840 
	#R_RISCV_HI20
 26

	)

3841 
	#R_RISCV_LO12_I
 27

	)

3842 
	#R_RISCV_LO12_S
 28

	)

3843 
	#R_RISCV_TPREL_HI20
 29

	)

3844 
	#R_RISCV_TPREL_LO12_I
 30

	)

3845 
	#R_RISCV_TPREL_LO12_S
 31

	)

3846 
	#R_RISCV_TPREL_ADD
 32

	)

3847 
	#R_RISCV_ADD8
 33

	)

3848 
	#R_RISCV_ADD16
 34

	)

3849 
	#R_RISCV_ADD32
 35

	)

3850 
	#R_RISCV_ADD64
 36

	)

3851 
	#R_RISCV_SUB8
 37

	)

3852 
	#R_RISCV_SUB16
 38

	)

3853 
	#R_RISCV_SUB32
 39

	)

3854 
	#R_RISCV_SUB64
 40

	)

3855 
	#R_RISCV_GNU_VTINHERIT
 41

	)

3856 
	#R_RISCV_GNU_VTENTRY
 42

	)

3857 
	#R_RISCV_ALIGN
 43

	)

3858 
	#R_RISCV_RVC_BRANCH
 44

	)

3859 
	#R_RISCV_RVC_JUMP
 45

	)

3860 
	#R_RISCV_RVC_LUI
 46

	)

3861 
	#R_RISCV_GPREL_I
 47

	)

3862 
	#R_RISCV_GPREL_S
 48

	)

3863 
	#R_RISCV_TPREL_I
 49

	)

3864 
	#R_RISCV_TPREL_S
 50

	)

3865 
	#R_RISCV_RELAX
 51

	)

3866 
	#R_RISCV_SUB6
 52

	)

3867 
	#R_RISCV_SET6
 53

	)

3868 
	#R_RISCV_SET8
 54

	)

3869 
	#R_RISCV_SET16
 55

	)

3870 
	#R_RISCV_SET32
 56

	)

3871 
	#R_RISCV_32_PCREL
 57

	)

3873 
	#R_RISCV_NUM
 58

	)

3877 
	#R_BPF_NONE
 0

	)

3878 
	#R_BPF_64_64
 1

	)

3879 
	#R_BPF_64_32
 10

	)

3883 
	#R_METAG_HIADDR16
 0

	)

3884 
	#R_METAG_LOADDR16
 1

	)

3885 
	#R_METAG_ADDR32
 2

	)

3886 
	#R_METAG_NONE
 3

	)

3887 
	#R_METAG_RELBRANCH
 4

	)

3888 
	#R_METAG_GETSETOFF
 5

	)

3891 
	#R_METAG_REG32OP1
 6

	)

3892 
	#R_METAG_REG32OP2
 7

	)

3893 
	#R_METAG_REG32OP3
 8

	)

3894 
	#R_METAG_REG16OP1
 9

	)

3895 
	#R_METAG_REG16OP2
 10

	)

3896 
	#R_METAG_REG16OP3
 11

	)

3897 
	#R_METAG_REG32OP4
 12

	)

3899 
	#R_METAG_HIOG
 13

	)

3900 
	#R_METAG_LOOG
 14

	)

3902 
	#R_METAG_REL8
 15

	)

3903 
	#R_METAG_REL16
 16

	)

3906 
	#R_METAG_GNU_VTINHERIT
 30

	)

3907 
	#R_METAG_GNU_VTENTRY
 31

	)

3910 
	#R_METAG_HI16_GOTOFF
 32

	)

3911 
	#R_METAG_LO16_GOTOFF
 33

	)

3912 
	#R_METAG_GETSET_GOTOFF
 34

	)

3913 
	#R_METAG_GETSET_GOT
 35

	)

3914 
	#R_METAG_HI16_GOTPC
 36

	)

3915 
	#R_METAG_LO16_GOTPC
 37

	)

3916 
	#R_METAG_HI16_PLT
 38

	)

3917 
	#R_METAG_LO16_PLT
 39

	)

3918 
	#R_METAG_RELBRANCH_PLT
 40

	)

3919 
	#R_METAG_GOTOFF
 41

	)

3920 
	#R_METAG_PLT
 42

	)

3921 
	#R_METAG_COPY
 43

	)

3922 
	#R_METAG_JMP_SLOT
 44

	)

3923 
	#R_METAG_RELATIVE
 45

	)

3924 
	#R_METAG_GLOB_DAT
 46

	)

3927 
	#R_METAG_TLS_GD
 47

	)

3928 
	#R_METAG_TLS_LDM
 48

	)

3929 
	#R_METAG_TLS_LDO_HI16
 49

	)

3930 
	#R_METAG_TLS_LDO_LO16
 50

	)

3931 
	#R_METAG_TLS_LDO
 51

	)

3932 
	#R_METAG_TLS_IE
 52

	)

3933 
	#R_METAG_TLS_IENONPIC
 53

	)

3934 
	#R_METAG_TLS_IENONPIC_HI16
 54

	)

3935 
	#R_METAG_TLS_IENONPIC_LO16
 55

	)

3936 
	#R_METAG_TLS_TPOFF
 56

	)

3937 
	#R_METAG_TLS_DTPMOD
 57

	)

3938 
	#R_METAG_TLS_DTPOFF
 58

	)

3939 
	#R_METAG_TLS_LE
 59

	)

3940 
	#R_METAG_TLS_LE_HI16
 60

	)

3941 
	#R_METAG_TLS_LE_LO16
 61

	)

3944 
	#R_NDS32_NONE
 0

	)

3945 
	#R_NDS32_32_RELA
 20

	)

3946 
	#R_NDS32_COPY
 39

	)

3947 
	#R_NDS32_GLOB_DAT
 40

	)

3948 
	#R_NDS32_JMP_SLOT
 41

	)

3949 
	#R_NDS32_RELATIVE
 42

	)

3950 
	#R_NDS32_TLS_TPOFF
 102

	)

3951 
	#R_NDS32_TLS_DESC
 119

	)

3953 
	g__END_DECLS


	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

119 #unde‡
__USE_ISOC11


120 #unde‡
__USE_ISOC99


121 #unde‡
__USE_ISOC95


122 #unde‡
__USE_ISOCXX11


123 #unde‡
__USE_POSIX


124 #unde‡
__USE_POSIX2


125 #unde‡
__USE_POSIX199309


126 #unde‡
__USE_POSIX199506


127 #unde‡
__USE_XOPEN


128 #unde‡
__USE_XOPEN_EXTENDED


129 #unde‡
__USE_UNIX98


130 #unde‡
__USE_XOPEN2K


131 #unde‡
__USE_XOPEN2KXSI


132 #unde‡
__USE_XOPEN2K8


133 #unde‡
__USE_XOPEN2K8XSI


134 #unde‡
__USE_LARGEFILE


135 #unde‡
__USE_LARGEFILE64


136 #unde‡
__USE_FILE_OFFSET64


137 #unde‡
__USE_MISC


138 #unde‡
__USE_ATFILE


139 #unde‡
__USE_GNU


140 #unde‡
__USE_FORTIFY_LEVEL


141 #unde‡
__KERNEL_STRICT_NAMES


142 #unde‡
__GLIBC_USE_DEPRECATED_GETS


143 #unde‡
__GLIBC_USE_DEPRECATED_SCANF


147 #i‚de‡
_LOOSE_KERNEL_NAMES


148 
	#__KERNEL_STRICT_NAMES


	)

158 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


159 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

160 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

162 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

169 #i‡
deföed
 
__˛™g_maj‹__
 && deföed 
__˛™g_mö‹__


170 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
) \

171 ((
__˛™g_maj‹__
 << 16Ë+ 
__˛™g_mö‹__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

173 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
Ë0

	)

177 
	#__GLIBC_USE
(
F
Ë
__GLIBC_USE_
 ## 
	)
F

183 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

184 && !
deföed
 
	g_DEFAULT_SOURCE


186 #unde‡
_DEFAULT_SOURCE


187 
	#_DEFAULT_SOURCE
 1

	)

191 #ifde‡
_GNU_SOURCE


192 #unde‡
_ISOC95_SOURCE


193 
	#_ISOC95_SOURCE
 1

	)

194 #unde‡
_ISOC99_SOURCE


195 
	#_ISOC99_SOURCE
 1

	)

196 #unde‡
_ISOC11_SOURCE


197 
	#_ISOC11_SOURCE
 1

	)

198 #unde‡
_POSIX_SOURCE


199 
	#_POSIX_SOURCE
 1

	)

200 #unde‡
_POSIX_C_SOURCE


201 
	#_POSIX_C_SOURCE
 200809L

	)

202 #unde‡
_XOPEN_SOURCE


203 
	#_XOPEN_SOURCE
 700

	)

204 #unde‡
_XOPEN_SOURCE_EXTENDED


205 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

206 #unde‡
_LARGEFILE64_SOURCE


207 
	#_LARGEFILE64_SOURCE
 1

	)

208 #unde‡
_DEFAULT_SOURCE


209 
	#_DEFAULT_SOURCE
 1

	)

210 #unde‡
_ATFILE_SOURCE


211 
	#_ATFILE_SOURCE
 1

	)

216 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

217 || (!
deföed
 
	g__STRICT_ANSI__
 \

218 && !
deföed
 
	g_ISOC99_SOURCE
 && !deföed 
	g_ISOC11_SOURCE
 \

219 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

220 && !
deföed
 
	g_XOPEN_SOURCE
))

221 #unde‡
_DEFAULT_SOURCE


222 
	#_DEFAULT_SOURCE
 1

	)

226 #i‡(
deföed
 
_ISOC11_SOURCE
 \

227 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

228 
	#__USE_ISOC11
 1

	)

232 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

233 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

234 
	#__USE_ISOC99
 1

	)

238 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

239 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

240 
	#__USE_ISOC95
 1

	)

243 #ifde‡
__˝lu•lus


245 #i‡
__˝lu•lus
 >= 201703L

246 
	#__USE_ISOC11
 1

	)

250 #i‡
__˝lu•lus
 >201103L || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__


251 
	#__USE_ISOCXX11
 1

	)

252 
	#__USE_ISOC99
 1

	)

259 #ifde‡
_DEFAULT_SOURCE


260 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


261 
	#__USE_POSIX_IMPLICITLY
 1

	)

263 #unde‡
_POSIX_SOURCE


264 
	#_POSIX_SOURCE
 1

	)

265 #unde‡
_POSIX_C_SOURCE


266 
	#_POSIX_C_SOURCE
 200809L

	)

269 #i‡((!
deföed
 
__STRICT_ANSI__
 \

270 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

271 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

272 
	#_POSIX_SOURCE
 1

	)

273 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

274 
	#_POSIX_C_SOURCE
 2

	)

275 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

276 
	#_POSIX_C_SOURCE
 199506L

	)

277 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

278 
	#_POSIX_C_SOURCE
 200112L

	)

280 
	#_POSIX_C_SOURCE
 200809L

	)

282 
	#__USE_POSIX_IMPLICITLY
 1

	)

291 #i‡((!
deföed
 
_POSIX_C_SOURCE
 || (_POSIX_C_SOURCE - 0) < 199506L) \

292 && (
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE
))

293 
	#_POSIX_SOURCE
 1

	)

294 #unde‡
_POSIX_C_SOURCE


295 
	#_POSIX_C_SOURCE
 199506L

	)

298 #i‡(
deföed
 
_POSIX_SOURCE
 \

299 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

300 || 
deföed
 
_XOPEN_SOURCE
)

301 
	#__USE_POSIX
 1

	)

304 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


305 
	#__USE_POSIX2
 1

	)

308 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

309 
	#__USE_POSIX199309
 1

	)

312 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

313 
	#__USE_POSIX199506
 1

	)

316 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

317 
	#__USE_XOPEN2K
 1

	)

318 #unde‡
__USE_ISOC95


319 
	#__USE_ISOC95
 1

	)

320 #unde‡
__USE_ISOC99


321 
	#__USE_ISOC99
 1

	)

324 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

325 
	#__USE_XOPEN2K8
 1

	)

326 #unde‡
_ATFILE_SOURCE


327 
	#_ATFILE_SOURCE
 1

	)

330 #ifdef 
_XOPEN_SOURCE


331 
	#__USE_XOPEN
 1

	)

332 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

333 
	#__USE_XOPEN_EXTENDED
 1

	)

334 
	#__USE_UNIX98
 1

	)

335 #unde‡
_LARGEFILE_SOURCE


336 
	#_LARGEFILE_SOURCE
 1

	)

337 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

338 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

339 
	#__USE_XOPEN2K8
 1

	)

340 
	#__USE_XOPEN2K8XSI
 1

	)

342 
	#__USE_XOPEN2K
 1

	)

343 
	#__USE_XOPEN2KXSI
 1

	)

344 #unde‡
__USE_ISOC95


345 
	#__USE_ISOC95
 1

	)

346 #unde‡
__USE_ISOC99


347 
	#__USE_ISOC99
 1

	)

350 #ifde‡
_XOPEN_SOURCE_EXTENDED


351 
	#__USE_XOPEN_EXTENDED
 1

	)

356 #ifde‡
_LARGEFILE_SOURCE


357 
	#__USE_LARGEFILE
 1

	)

360 #ifde‡
_LARGEFILE64_SOURCE


361 
	#__USE_LARGEFILE64
 1

	)

364 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

365 
	#__USE_FILE_OFFSET64
 1

	)

368 #i‡
deföed
 
_DEFAULT_SOURCE


369 
	#__USE_MISC
 1

	)

372 #ifdef 
_ATFILE_SOURCE


373 
	#__USE_ATFILE
 1

	)

376 #ifdef 
_GNU_SOURCE


377 
	#__USE_GNU
 1

	)

380 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

381 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

382 #i‡
_FORTIFY_SOURCE
 > 1

383 
	#__USE_FORTIFY_LEVEL
 2

	)

385 
	#__USE_FORTIFY_LEVEL
 1

	)

388 
	#__USE_FORTIFY_LEVEL
 0

	)

395 #i‡
deföed
 
__˝lu•lus
 ? __˝lu•lu†>201402L : deföed 
__USE_ISOC11


396 
	#__GLIBC_USE_DEPRECATED_GETS
 0

	)

398 
	#__GLIBC_USE_DEPRECATED_GETS
 1

	)

413 #i‡(
deföed
 
__USE_GNU
 \

414 && (
deföed
 
	g__˝lu•lus
 \

415 ? (
	g__˝lu•lus
 < 201103L && !
deföed
 
	g__GXX_EXPERIMENTAL_CXX0X__
) \

416 : (!
deföed
 
__STDC_VERSION__
 || __STDC_VERSION__ < 199901L)))

417 
	#__GLIBC_USE_DEPRECATED_SCANF
 1

	)

419 
	#__GLIBC_USE_DEPRECATED_SCANF
 0

	)

424 
	~<°dc-¥edef.h
>

432 #unde‡
__GNU_LIBRARY__


433 
	#__GNU_LIBRARY__
 6

	)

437 
	#__GLIBC__
 2

	)

438 
	#__GLIBC_MINOR__
 30

	)

440 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

441 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

444 #i‚de‡
__ASSEMBLER__


445 #i‚de‡
_SYS_CDEFS_H


446 
	~<sys/cdefs.h
>

451 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


452 
	#__USE_LARGEFILE
 1

	)

453 
	#__USE_LARGEFILE64
 1

	)

459 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

460 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

461 && 
deföed
 
	g__exã∫_ölöe


462 
	#__USE_EXTERN_INLINES
 1

	)

470 
	~<gnu/°ubs.h
>

	@/usr/include/linux/posix_types.h

2 #i‚de‡
_LINUX_POSIX_TYPES_H


3 
	#_LINUX_POSIX_TYPES_H


	)

5 
	~<löux/°ddef.h
>

22 #unde‡
__FD_SETSIZE


23 
	#__FD_SETSIZE
 1024

	)

26 
	mfds_bôs
[
__FD_SETSIZE
 / (8 * ())];

27 } 
	t__kî√l_fd_£t
;

30 (*
	t__kî√l_sigh™dÀr_t
)();

33 
	t__kî√l_key_t
;

34 
	t__kî√l_mqd_t
;

36 
	~<asm/posix_ty≥s.h
>

	@/usr/include/strings.h

18 #i‚def 
_STRINGS_H


19 
	#_STRINGS_H
 1

	)

21 
	~<„©uªs.h
>

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

26 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

27 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

30 
	g__BEGIN_DECLS


32 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


34 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

35 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

38 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

39 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

42 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

45 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


48 *
	`ödex
 (*
__s
, 
__c
)

49 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

50 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

51 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

53 #i‡
deföed
 
__OPTIMIZE__


54 
__exã∫_Æways_ölöe
 *

55 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


57  
	`__buûtö_ödex
 (
__s
, 
__c
);

60 
__exã∫_Æways_ölöe
 const *

61 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


63  
	`__buûtö_ödex
 (
__s
, 
__c
);

66 
	}
}

68 *
	$ödex
 (c⁄° *
__s
, 
__c
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

73 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


76 *
	`rödex
 (*
__s
, 
__c
)

77 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

79 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #i‡
deföed
 
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


85  
	`__buûtö_rödex
 (
__s
, 
__c
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


91  
	`__buûtö_rödex
 (
__s
, 
__c
);

94 
	}
}

96 *
	$rödex
 (c⁄° *
__s
, 
__c
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

101 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


104 
	$ffs
 (
__i
Ë
__THROW
 
__©åibuã_c⁄°__
;

109 #ifdef 
__USE_MISC


110 
	$ff¶
 (
__l
Ë
__THROW
 
__©åibuã_c⁄°__
;

111 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

112 
__THROW
 
__©åibuã_c⁄°__
;

116 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

117 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

120 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

123 #ifdef 
__USE_XOPEN2K8


125 
	~<bôs/ty≥s/loˇÀ_t.h
>

128 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__loc
)

129 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

133 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

134 
size_t
 
__n
, 
loˇÀ_t
 
__loc
)

135 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

138 
__END_DECLS


140 #i‡
	`__GNUC_PREREQ
 (3,4Ë&& 
__USE_FORTIFY_LEVEL
 > 0 \

141 && 
deföed
 
__f‹tify_fun˘i⁄


143 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


144 
	~<bôs/°rögs_f‹tifõd.h
>

	@/usr/include/sys/types.h

22 #i‚def 
_SYS_TYPES_H


23 
	#_SYS_TYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifdef 
__USE_MISC


32 #i‚de‡
__u_ch¨_deföed


33 
__u_ch¨
 
	tu_ch¨
;

34 
__u_sh‹t
 
	tu_sh‹t
;

35 
__u_öt
 
	tu_öt
;

36 
__u_l⁄g
 
	tu_l⁄g
;

37 
__quad_t
 
	tquad_t
;

38 
__u_quad_t
 
	tu_quad_t
;

39 
__fsid_t
 
	tfsid_t
;

40 
	#__u_ch¨_deföed


	)

42 
__loff_t
 
	tloff_t
;

45 #i‚de‡
__öo_t_deföed


46 #i‚de‡
__USE_FILE_OFFSET64


47 
__öo_t
 
	töo_t
;

49 
__öo64_t
 
	töo_t
;

51 
	#__öo_t_deföed


	)

53 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


54 
__öo64_t
 
	töo64_t
;

55 
	#__öo64_t_deföed


	)

58 #i‚de‡
__dev_t_deföed


59 
__dev_t
 
	tdev_t
;

60 
	#__dev_t_deföed


	)

63 #i‚de‡
__gid_t_deföed


64 
__gid_t
 
	tgid_t
;

65 
	#__gid_t_deföed


	)

68 #i‚de‡
__mode_t_deföed


69 
__mode_t
 
	tmode_t
;

70 
	#__mode_t_deföed


	)

73 #i‚de‡
__∆ök_t_deföed


74 
__∆ök_t
 
	t∆ök_t
;

75 
	#__∆ök_t_deföed


	)

78 #i‚de‡
__uid_t_deföed


79 
__uid_t
 
	tuid_t
;

80 
	#__uid_t_deföed


	)

83 #i‚de‡
__off_t_deföed


84 #i‚de‡
__USE_FILE_OFFSET64


85 
__off_t
 
	toff_t
;

87 
__off64_t
 
	toff_t
;

89 
	#__off_t_deföed


	)

91 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


92 
__off64_t
 
	toff64_t
;

93 
	#__off64_t_deföed


	)

96 #i‚de‡
__pid_t_deföed


97 
__pid_t
 
	tpid_t
;

98 
	#__pid_t_deföed


	)

101 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

102 && !
deföed
 
__id_t_deföed


103 
__id_t
 
	tid_t
;

104 
	#__id_t_deföed


	)

107 #i‚de‡
__ssize_t_deföed


108 
__ssize_t
 
	tssize_t
;

109 
	#__ssize_t_deföed


	)

112 #ifdef 
__USE_MISC


113 #i‚de‡
__daddr_t_deföed


114 
__daddr_t
 
	tdaddr_t
;

115 
__ˇddr_t
 
	tˇddr_t
;

116 
	#__daddr_t_deföed


	)

120 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


121 
__key_t
 
	tkey_t
;

122 
	#__key_t_deföed


	)

125 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


126 
	~<bôs/ty≥s/˛ock_t.h
>

128 
	~<bôs/ty≥s/˛ockid_t.h
>

129 
	~<bôs/ty≥s/time_t.h
>

130 
	~<bôs/ty≥s/timî_t.h
>

132 #ifde‡
__USE_XOPEN


133 #i‚de‡
__u£c⁄ds_t_deföed


134 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

135 
	#__u£c⁄ds_t_deföed


	)

137 #i‚de‡
__su£c⁄ds_t_deföed


138 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

139 
	#__su£c⁄ds_t_deföed


	)

143 
	#__√ed_size_t


	)

144 
	~<°ddef.h
>

146 #ifde‡
__USE_MISC


148 
	tul⁄g
;

149 
	tush‹t
;

150 
	tuöt
;

155 
	~<bôs/°döt-öä.h
>

158 
__uöt8_t
 
	tu_öt8_t
;

159 
__uöt16_t
 
	tu_öt16_t
;

160 
__uöt32_t
 
	tu_öt32_t
;

161 
__uöt64_t
 
	tu_öt64_t
;

163 #i‡
__GNUC_PREREQ
 (2, 7)

164 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

166 
	tªgi°î_t
;

171 
	#__BIT_TYPES_DEFINED__
 1

	)

174 #ifdef 
__USE_MISC


176 
	~<ídün.h
>

179 
	~<sys/£À˘.h
>

183 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

184 && !
deföed
 
__blksize_t_deföed


185 
__blksize_t
 
	tblksize_t
;

186 
	#__blksize_t_deföed


	)

190 #i‚de‡
__USE_FILE_OFFSET64


191 #i‚de‡
__blk˙t_t_deföed


192 
__blk˙t_t
 
	tblk˙t_t
;

193 
	#__blk˙t_t_deföed


	)

195 #i‚de‡
__fsblk˙t_t_deföed


196 
__fsblk˙t_t
 
	tfsblk˙t_t
;

197 
	#__fsblk˙t_t_deföed


	)

199 #i‚de‡
__fsfû˙t_t_deföed


200 
__fsfû˙t_t
 
	tfsfû˙t_t
;

201 
	#__fsfû˙t_t_deföed


	)

204 #i‚de‡
__blk˙t_t_deföed


205 
__blk˙t64_t
 
	tblk˙t_t
;

206 
	#__blk˙t_t_deföed


	)

208 #i‚de‡
__fsblk˙t_t_deföed


209 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

210 
	#__fsblk˙t_t_deföed


	)

212 #i‚de‡
__fsfû˙t_t_deföed


213 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

214 
	#__fsfû˙t_t_deföed


	)

218 #ifde‡
__USE_LARGEFILE64


219 
__blk˙t64_t
 
	tblk˙t64_t
;

220 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

221 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

226 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


227 
	~<bôs/±hªadty≥s.h
>

230 
	g__END_DECLS


	@/usr/include/sys/ucontext.h

18 #i‚de‡
_SYS_UCONTEXT_H


19 
	#_SYS_UCONTEXT_H
 1

	)

21 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	~<bôs/ty≥s/sig£t_t.h
>

25 
	~<bôs/ty≥s/°ack_t.h
>

28 #ifde‡
__USE_MISC


29 
	#__˘x
(
Êd
Ë
	)
fld

31 
	#__˘x
(
Êd
Ë
__
 ## 
	)
fld

34 #ifde‡
__x86_64__


37 
__exãnsi⁄__
 
	tgªg_t
;

40 
	#__NGREG
 23

	)

41 #ifde‡
__USE_MISC


42 
	#NGREG
 
__NGREG


	)

46 
gªg_t
 
	tgªg£t_t
[
__NGREG
];

48 #ifde‡
__USE_GNU


52 
	mREG_R8
 = 0,

53 
	#REG_R8
 
REG_R8


	)

54 
	mREG_R9
,

55 
	#REG_R9
 
REG_R9


	)

56 
	mREG_R10
,

57 
	#REG_R10
 
REG_R10


	)

58 
	mREG_R11
,

59 
	#REG_R11
 
REG_R11


	)

60 
	mREG_R12
,

61 
	#REG_R12
 
REG_R12


	)

62 
	mREG_R13
,

63 
	#REG_R13
 
REG_R13


	)

64 
	mREG_R14
,

65 
	#REG_R14
 
REG_R14


	)

66 
	mREG_R15
,

67 
	#REG_R15
 
REG_R15


	)

68 
	mREG_RDI
,

69 
	#REG_RDI
 
REG_RDI


	)

70 
	mREG_RSI
,

71 
	#REG_RSI
 
REG_RSI


	)

72 
	mREG_RBP
,

73 
	#REG_RBP
 
REG_RBP


	)

74 
	mREG_RBX
,

75 
	#REG_RBX
 
REG_RBX


	)

76 
	mREG_RDX
,

77 
	#REG_RDX
 
REG_RDX


	)

78 
	mREG_RAX
,

79 
	#REG_RAX
 
REG_RAX


	)

80 
	mREG_RCX
,

81 
	#REG_RCX
 
REG_RCX


	)

82 
	mREG_RSP
,

83 
	#REG_RSP
 
REG_RSP


	)

84 
	mREG_RIP
,

85 
	#REG_RIP
 
REG_RIP


	)

86 
	mREG_EFL
,

87 
	#REG_EFL
 
REG_EFL


	)

88 
	mREG_CSGSFS
,

89 
	#REG_CSGSFS
 
REG_CSGSFS


	)

90 
	mREG_ERR
,

91 
	#REG_ERR
 
REG_ERR


	)

92 
	mREG_TRAPNO
,

93 
	#REG_TRAPNO
 
REG_TRAPNO


	)

94 
	mREG_OLDMASK
,

95 
	#REG_OLDMASK
 
REG_OLDMASK


	)

96 
	mREG_CR2


97 
	#REG_CR2
 
REG_CR2


	)

101 
	s_libc_Âxªg


103 
__˘x
(
signifiˇnd
)[4];

104 
__˘x
(
exp⁄ít
);

105 
	m__glibc_ª£rved1
[3];

108 
	s_libc_xmmªg


110 
__uöt32_t
 
__˘x
(
ñemít
)[4];

113 
	s_libc_Â°©e


116 
__uöt16_t
 
__˘x
(
cwd
);

117 
__uöt16_t
 
__˘x
(
swd
);

118 
__uöt16_t
 
__˘x
(
·w
);

119 
__uöt16_t
 
__˘x
(
f›
);

120 
__uöt64_t
 
__˘x
(
rù
);

121 
__uöt64_t
 
__˘x
(
rdp
);

122 
__uöt32_t
 
__˘x
(
mxc§
);

123 
__uöt32_t
 
__˘x
(
mx¸_mask
);

124 
_libc_Âxªg
 
	m_°
[8];

125 
_libc_xmmªg
 
	m_xmm
[16];

126 
__uöt32_t
 
	m__glibc_ª£rved1
[24];

130 
_libc_Â°©e
 *
	tÂªg£t_t
;

135 
gªg£t_t
 
__˘x
(
gªgs
);

137 
Âªg£t_t
 
__˘x
(
Âªgs
);

138 
__exãnsi⁄__
 
	m__ª£rved1
 [8];

139 } 
	tmc⁄ãxt_t
;

142 
	suc⁄ãxt_t


144 
__˘x
(
uc_Êags
);

145 
uc⁄ãxt_t
 *
	muc_lök
;

146 
°ack_t
 
	muc_°ack
;

147 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

148 
sig£t_t
 
	muc_sigmask
;

149 
_libc_Â°©e
 
	m__Âªgs_mem
;

150 
__exãnsi⁄__
 
	m__s•
[4];

151 } 
	tuc⁄ãxt_t
;

156 
	tgªg_t
;

159 
	#__NGREG
 19

	)

160 #ifde‡
__USE_MISC


161 
	#NGREG
 
__NGREG


	)

165 
gªg_t
 
	tgªg£t_t
[
__NGREG
];

167 #ifde‡
__USE_GNU


171 
	mREG_GS
 = 0,

172 
	#REG_GS
 
REG_GS


	)

173 
	mREG_FS
,

174 
	#REG_FS
 
REG_FS


	)

175 
	mREG_ES
,

176 
	#REG_ES
 
REG_ES


	)

177 
	mREG_DS
,

178 
	#REG_DS
 
REG_DS


	)

179 
	mREG_EDI
,

180 
	#REG_EDI
 
REG_EDI


	)

181 
	mREG_ESI
,

182 
	#REG_ESI
 
REG_ESI


	)

183 
	mREG_EBP
,

184 
	#REG_EBP
 
REG_EBP


	)

185 
	mREG_ESP
,

186 
	#REG_ESP
 
REG_ESP


	)

187 
	mREG_EBX
,

188 
	#REG_EBX
 
REG_EBX


	)

189 
	mREG_EDX
,

190 
	#REG_EDX
 
REG_EDX


	)

191 
	mREG_ECX
,

192 
	#REG_ECX
 
REG_ECX


	)

193 
	mREG_EAX
,

194 
	#REG_EAX
 
REG_EAX


	)

195 
	mREG_TRAPNO
,

196 
	#REG_TRAPNO
 
REG_TRAPNO


	)

197 
	mREG_ERR
,

198 
	#REG_ERR
 
REG_ERR


	)

199 
	mREG_EIP
,

200 
	#REG_EIP
 
REG_EIP


	)

201 
	mREG_CS
,

202 
	#REG_CS
 
REG_CS


	)

203 
	mREG_EFL
,

204 
	#REG_EFL
 
REG_EFL


	)

205 
	mREG_UESP
,

206 
	#REG_UESP
 
REG_UESP


	)

207 
	mREG_SS


208 
	#REG_SS
 
REG_SS


	)

213 
	s_libc_Âªg


215 
__˘x
(
signifiˇnd
)[4];

216 
__˘x
(
exp⁄ít
);

219 
	s_libc_Â°©e


221 
__˘x
(
cw
);

222 
__˘x
(
sw
);

223 
__˘x
(
èg
);

224 
__˘x
(
ùoff
);

225 
__˘x
(
cs£l
);

226 
__˘x
(
d©aoff
);

227 
__˘x
(
d©a£l
);

228 
_libc_Âªg
 
	m_°
[8];

229 
__˘x
(
°©us
);

233 
_libc_Â°©e
 *
	tÂªg£t_t
;

238 
gªg£t_t
 
__˘x
(
gªgs
);

241 
Âªg£t_t
 
__˘x
(
Âªgs
);

242 
__˘x
(
ﬁdmask
);

243 
__˘x
(
¸2
);

244 } 
	tmc⁄ãxt_t
;

247 
	suc⁄ãxt_t


249 
__˘x
(
uc_Êags
);

250 
uc⁄ãxt_t
 *
	muc_lök
;

251 
°ack_t
 
	muc_°ack
;

252 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

253 
sig£t_t
 
	muc_sigmask
;

254 
_libc_Â°©e
 
	m__Âªgs_mem
;

255 
	m__s•
[4];

256 } 
	tuc⁄ãxt_t
;

260 #unde‡
__˘x


	@/usr/include/z3++.h

21 #i‚de‡
Z3PP_H_


22 
	#Z3PP_H_


	)

24 
	~<ˇs£π
>

25 
	~<io°ªam
>

26 
	~<°rög
>

27 
	~<s°ªam
>

28 
	~<z3.h
>

29 
	~<limôs.h
>

31 #unde‡
mö


32 #unde‡
max


48 
«me•a˚
 
	gz3
 {

50 
˛ass
 
	gex˚±i⁄
;

51 
˛ass
 
	gc⁄fig
;

52 
˛ass
 
	gc⁄ãxt
;

53 
˛ass
 
	gsymbﬁ
;

54 
˛ass
 
	g∑øms
;

55 
˛ass
 
	g∑øm_des¸s
;

56 
˛ass
 
	ga°
;

57 
˛ass
 
	gs‹t
;

58 
˛ass
 
	gfunc_de˛
;

59 
˛ass
 
	gex¥
;

60 
˛ass
 
	gsﬁvî
;

61 
˛ass
 
	ggﬂl
;

62 
˛ass
 
	gè˘ic
;

63 
˛ass
 
	g¥obe
;

64 
˛ass
 
	gmodñ
;

65 
˛ass
 
	gfunc_öãΩ
;

66 
˛ass
 
	gfunc_íåy
;

67 
˛ass
 
	g°©i°ics
;

68 
˛ass
 
	g≠∂y_ªsu…
;

69 
	gãm∂©e
<
ty≥«me
 
	gT
> 
˛ass
 
	ga°_ve˘‹_çl
;

70 
	ga°_ve˘‹_çl
<
	ta°
> 
	ta°_ve˘‹
;

71 
	ga°_ve˘‹_çl
<
	tex¥
> 
	tex¥_ve˘‹
;

72 
	ga°_ve˘‹_çl
<
	ts‹t
> 
	ts‹t_ve˘‹
;

73 
	ga°_ve˘‹_çl
<
	tfunc_de˛
> 
	tfunc_de˛_ve˘‹
;

75 
ölöe
 
£t_∑øm
(c⁄° * 
∑øm
, c⁄° * 
vÆue
Ë{ 
Z3_globÆ_∑øm_£t
(param, value); }

76 
ölöe
 
£t_∑øm
(c⁄° * 
∑øm
, 
boﬁ
 
vÆue
Ë{ 
Z3_globÆ_∑øm_£t
(param, value ? "true" : "false"); }

77 
ölöe
 
£t_∑øm
(c⁄° * 
∑øm
, 
vÆue
Ë{ 
	g°d
::
o°rög°ªam
 
oss
; 
	goss
 << 
	gvÆue
; 
Z3_globÆ_∑øm_£t
’¨am, oss.
°r
().
c_°r
()); }

78 
ölöe
 
ª£t_∑øms
(Ë{ 
Z3_globÆ_∑øm_ª£t_Æl
(); }

83 ˛as†
	cex˚±i⁄
 {

84 
	g°d
::
°rög
 
m_msg
;

85 
	gpublic
:

86 
ex˚±i⁄
(c⁄° * 
msg
):
m_msg
(msg) {}

87 c⁄° * 
msg
(Ëc⁄° {  
m_msg
.
c_°r
(); }

88 
‰õnd
 
	g°d
::
o°ªam
 & 
›î©‹
<<(
°d
::o°ªam & 
out
, 
ex˚±i⁄
 c⁄° & 
	ge
);

90 
ölöe
 
	g°d
::
o°ªam
 & 
›î©‹
<<(
°d
::o°ªam & 
out
, 
ex˚±i⁄
 c⁄° & 
	ge
Ë{ 
	gout
 <<É.
msg
();  out; }

92 #i‡!
	$deföed
(
Z3_THROW
)

93 #i‡
__˝p_ex˚±i⁄s
 || 
_CPPUNWIND
 || 
__EXCEPTIONS


94 
	#Z3_THROW
(
x
Ë
throw
 
	)
x

96 
	#Z3_THROW
(
x
Ë{
	}

	)
}

103 ˛as†
	cc⁄fig
 {

104 
Z3_c⁄fig
 
	gm_cfg
;

105 
c⁄fig
(c⁄fig c⁄° & 
s
);

106 
	gc⁄fig
 & 
	g›î©‹
=(
c⁄fig
 c⁄° & 
s
);

107 
	gpublic
:

108 
c⁄fig
(Ë{ 
m_cfg
 = 
Z3_mk_c⁄fig
(); }

109 ~
c⁄fig
(Ë{ 
Z3_dñ_c⁄fig
(
m_cfg
); }

110 
›î©‹
 
Z3_c⁄fig
(Ëc⁄° {  
	gm_cfg
; }

114 
£t
(c⁄° * 
∑øm
, c⁄° * 
vÆue
Ë{ 
Z3_£t_∑øm_vÆue
(
m_cfg
,Öaram, value); }

118 
£t
(c⁄° * 
∑øm
, 
boﬁ
 
vÆue
Ë{ 
Z3_£t_∑øm_vÆue
(
m_cfg
,Öaram, value ? "true" : "false"); }

122 
£t
(c⁄° * 
∑øm
, 
vÆue
) {

123 
	g°d
::
o°rög°ªam
 
oss
;

124 
	goss
 << 
	gvÆue
;

125 
Z3_£t_∑øm_vÆue
(
m_cfg
, 
∑øm
, 
oss
.
°r
().
c_°r
());

129 
	echeck_ªsu…
 {

130 
	gunßt
, 
	gßt
, 
	gunknown


133 
	eroundög_mode
 {

134 
	gRNA
,

135 
	gRNE
,

136 
	gRTP
,

137 
	gRTN
,

138 
	gRTZ


141 
ölöe
 
check_ªsu…
 
	$to_check_ªsu…
(
Z3_lboﬁ
 
l
) {

142 i‡(
l
 =
Z3_L_TRUE
Ë 
ßt
;

143 i‡(
l
 =
Z3_L_FALSE
Ë 
unßt
;

144  
unknown
;

145 
	}
}

153 ˛as†
	cc⁄ãxt
 {

154 
	g¥iv©e
:

155 
boﬁ
 
m_íabÀ_ex˚±i⁄s
;

156 
roundög_mode
 
	gm_roundög_mode
;

157 
Z3_c⁄ãxt
 
	gm_˘x
;

158 
öô
(
c⁄fig
 & 
c
) {

159 
	gm_˘x
 = 
Z3_mk_c⁄ãxt_rc
(
c
);

160 
	gm_íabÀ_ex˚±i⁄s
 = 
åue
;

161 
	gm_roundög_mode
 = 
RNA
;

162 
Z3_£t_îr‹_h™dÀr
(
m_˘x
, 0);

163 
Z3_£t_a°_¥öt_mode
(
m_˘x
, 
Z3_PRINT_SMTLIB2_COMPLIANT
);

167 
c⁄ãxt
(c⁄ãxàc⁄° & 
s
);

168 
	gc⁄ãxt
 & 
	g›î©‹
=(
c⁄ãxt
 c⁄° & 
s
);

169 
	gpublic
:

170 
c⁄ãxt
(Ë{ 
c⁄fig
 
c
; 
öô
(c); }

171 
c⁄ãxt
(
c⁄fig
 & 
c
Ë{ 
öô
(c); }

172 ~
c⁄ãxt
(Ë{ 
Z3_dñ_c⁄ãxt
(
m_˘x
); }

173 
›î©‹
 
Z3_c⁄ãxt
(Ëc⁄° {  
	gm_˘x
; }

178 
Z3_îr‹_code
 
check_îr‹
() const {

179 
Z3_îr‹_code
 
	ge
 = 
Z3_gë_îr‹_code
(
m_˘x
);

180 i‡(
	ge
 !
Z3_OK
 && 
íabÀ_ex˚±i⁄s
())

181 
Z3_THROW
(
ex˚±i⁄
(
Z3_gë_îr‹_msg
(
m_˘x
, 
e
)));

182  
	ge
;

185 
check_∑r£r_îr‹
() const {

186 
check_îr‹
();

196 
£t_íabÀ_ex˚±i⁄s
(
boﬁ
 
f
Ë{ 
	gm_íabÀ_ex˚±i⁄s
 = f; }

198 
boﬁ
 
íabÀ_ex˚±i⁄s
(Ëc⁄° {  
	gm_íabÀ_ex˚±i⁄s
; }

203 
£t
(c⁄° * 
∑øm
, c⁄° * 
vÆue
Ë{ 
Z3_upd©e_∑øm_vÆue
(
m_˘x
,Öaram, value); }

207 
£t
(c⁄° * 
∑øm
, 
boﬁ
 
vÆue
Ë{ 
Z3_upd©e_∑øm_vÆue
(
m_˘x
,Öaram, value ? "true" : "false"); }

211 
£t
(c⁄° * 
∑øm
, 
vÆue
) {

212 
	g°d
::
o°rög°ªam
 
oss
;

213 
	goss
 << 
	gvÆue
;

214 
Z3_upd©e_∑øm_vÆue
(
m_˘x
, 
∑øm
, 
oss
.
°r
().
c_°r
());

221 
öãºu±
(Ë{ 
Z3_öãºu±
(
m_˘x
); }

226 
symbﬁ
 
°r_symbﬁ
(c⁄° * 
s
);

230 
symbﬁ
 
öt_symbﬁ
(
n
);

234 
s‹t
 
boﬁ_s‹t
();

238 
s‹t
 
öt_s‹t
();

242 
s‹t
 
ªÆ_s‹t
();

246 
s‹t
 
bv_s‹t
(
sz
);

250 
s‹t
 
°rög_s‹t
();

254 
s‹t
 
£q_s‹t
(s‹t& 
s
);

258 
s‹t
 
ª_s‹t
(s‹t& 
£q_s‹t
);

264 
s‹t
 
¨øy_s‹t
(s‹à
d
, s‹à
r
);

265 
s‹t
 
¨øy_s‹t
(
s‹t_ve˘‹
 c⁄°& 
d
, s‹à
r
);

272 
s‹t
 
Âa_s‹t
(
ebôs
, 
sbôs
);

276 
	gãm∂©e
<
size_t
 
	g¥ecisi⁄
>

277 
s‹t
 
Âa_s‹t
();

281 
s‹t
 
Âa_roundög_mode
();

285 
£t_roundög_mode
(
roundög_mode
 
rm
);

291 
s‹t
 
íumî©i⁄_s‹t
(c⁄° * 
«me
, 
n
, c⁄° * c⁄° * 
íum_«mes
, 
func_de˛_ve˘‹
 & 
cs
, func_de˛_ve˘‹ & 
ts
);

299 
func_de˛
 
tu∂e_s‹t
(c⁄° * 
«me
, 
n
, c⁄° * c⁄° * 
«mes
, 
s‹t
 c⁄°* 
s‹ts
, 
func_de˛_ve˘‹
 & 
¥ojs
);

304 
s‹t
 
unöãΩªãd_s‹t
(c⁄°* 
«me
);

305 
s‹t
 
unöãΩªãd_s‹t
(
symbﬁ
 c⁄°& 
«me
);

307 
func_de˛
 
fun˘i⁄
(
symbﬁ
 c⁄° & 
«me
, 
¨ôy
, 
s‹t
 c⁄° * 
domaö
, s‹àc⁄° & 
ønge
);

308 
func_de˛
 
fun˘i⁄
(c⁄° * 
«me
, 
¨ôy
, 
s‹t
 c⁄° * 
domaö
, s‹àc⁄° & 
ønge
);

309 
func_de˛
 
fun˘i⁄
(
symbﬁ
 c⁄°& 
«me
, 
s‹t_ve˘‹
 c⁄°& 
domaö
, 
s‹t
 c⁄°& 
ønge
);

310 
func_de˛
 
fun˘i⁄
(c⁄° * 
«me
, 
s‹t_ve˘‹
 c⁄°& 
domaö
, 
s‹t
 c⁄°& 
ønge
);

311 
func_de˛
 
fun˘i⁄
(c⁄° * 
«me
, 
s‹t
 c⁄° & 
domaö
, s‹àc⁄° & 
ønge
);

312 
func_de˛
 
fun˘i⁄
(c⁄° * 
«me
, 
s‹t
 c⁄° & 
d1
, s‹àc⁄° & 
d2
, s‹àc⁄° & 
ønge
);

313 
func_de˛
 
fun˘i⁄
(c⁄° * 
«me
, 
s‹t
 c⁄° & 
d1
, s‹àc⁄° & 
d2
, s‹àc⁄° & 
d3
, s‹àc⁄° & 
ønge
);

314 
func_de˛
 
fun˘i⁄
(c⁄° * 
«me
, 
s‹t
 c⁄° & 
d1
, s‹àc⁄° & 
d2
, s‹àc⁄° & 
d3
, s‹àc⁄° & 
d4
, s‹àc⁄° & 
ønge
);

315 
func_de˛
 
fun˘i⁄
(c⁄° * 
«me
, 
s‹t
 c⁄° & 
d1
, s‹àc⁄° & 
d2
, s‹àc⁄° & 
d3
, s‹àc⁄° & 
d4
, s‹àc⁄° & 
d5
, s‹àc⁄° & 
ønge
);

317 
func_de˛
 
ªcfun
(
symbﬁ
 c⁄° & 
«me
, 
¨ôy
, 
s‹t
 c⁄° * 
domaö
, s‹àc⁄° & 
ønge
);

318 
func_de˛
 
ªcfun
(c⁄° * 
«me
, 
¨ôy
, 
s‹t
 c⁄° * 
domaö
, s‹àc⁄° & 
ønge
);

319 
func_de˛
 
ªcfun
(c⁄° * 
«me
, 
s‹t
 c⁄° & 
domaö
, s‹àc⁄° & 
ønge
);

320 
func_de˛
 
ªcfun
(c⁄° * 
«me
, 
s‹t
 c⁄° & 
d1
, s‹àc⁄° & 
d2
, s‹àc⁄° & 
ønge
);

322 
ªcdef
(
func_de˛
, 
ex¥_ve˘‹
 c⁄°& 
¨gs
, 
ex¥
 c⁄°& 
body
);

324 
ex¥
 
c⁄°™t
(
symbﬁ
 c⁄° & 
«me
, 
s‹t
 c⁄° & 
s
);

325 
ex¥
 
c⁄°™t
(c⁄° * 
«me
, 
s‹t
 c⁄° & 
s
);

326 
ex¥
 
boﬁ_c⁄°
(c⁄° * 
«me
);

327 
ex¥
 
öt_c⁄°
(c⁄° * 
«me
);

328 
ex¥
 
ªÆ_c⁄°
(c⁄° * 
«me
);

329 
ex¥
 
bv_c⁄°
(c⁄° * 
«me
, 
sz
);

330 
ex¥
 
Âa_c⁄°
(c⁄° * 
«me
, 
ebôs
, 
sbôs
);

332 
	gãm∂©e
<
size_t
 
	g¥ecisi⁄
>

333 
ex¥
 
Âa_c⁄°
(c⁄° * 
«me
);

335 
ex¥
 
boﬁ_vÆ
(
boﬁ
 
b
);

337 
ex¥
 
öt_vÆ
(
n
);

338 
ex¥
 
öt_vÆ
(
n
);

339 
ex¥
 
öt_vÆ
(
öt64_t
 
n
);

340 
ex¥
 
öt_vÆ
(
uöt64_t
 
n
);

341 
ex¥
 
öt_vÆ
(c⁄° * 
n
);

343 
ex¥
 
ªÆ_vÆ
(
n
, 
d
);

344 
ex¥
 
ªÆ_vÆ
(
n
);

345 
ex¥
 
ªÆ_vÆ
(
n
);

346 
ex¥
 
ªÆ_vÆ
(
öt64_t
 
n
);

347 
ex¥
 
ªÆ_vÆ
(
uöt64_t
 
n
);

348 
ex¥
 
ªÆ_vÆ
(c⁄° * 
n
);

350 
ex¥
 
bv_vÆ
(
n
, 
sz
);

351 
ex¥
 
bv_vÆ
(
n
, 
sz
);

352 
ex¥
 
bv_vÆ
(
öt64_t
 
n
, 
sz
);

353 
ex¥
 
bv_vÆ
(
uöt64_t
 
n
, 
sz
);

354 
ex¥
 
bv_vÆ
(c⁄° * 
n
, 
sz
);

355 
ex¥
 
bv_vÆ
(
n
, 
boﬁ
 c⁄°* 
bôs
);

357 
ex¥
 
Âa_vÆ
(
n
);

358 
ex¥
 
Âa_vÆ
(
n
);

360 
ex¥
 
°rög_vÆ
(c⁄°* 
s
);

361 
ex¥
 
°rög_vÆ
(
°d
::
°rög
 c⁄°& 
s
);

363 
ex¥
 
num_vÆ
(
n
, 
s‹t
 c⁄° & 
s
);

368 
ex¥_ve˘‹
 
∑r£_°rög
(c⁄°* 
s
);

369 
ex¥_ve˘‹
 
∑r£_fûe
(c⁄°* 
fûe
);

371 
ex¥_ve˘‹
 
∑r£_°rög
(c⁄°* 
s
, 
s‹t_ve˘‹
 c⁄°& 
s‹ts
, 
func_de˛_ve˘‹
 c⁄°& 
de˛s
);

372 
ex¥_ve˘‹
 
∑r£_fûe
(c⁄°* 
s
, 
s‹t_ve˘‹
 c⁄°& 
s‹ts
, 
func_de˛_ve˘‹
 c⁄°& 
de˛s
);

380 
	gãm∂©e
<
ty≥«me
 
	gT
>

381 ˛as†
	c¨øy
 {

382 
T
 * 
	gm_¨øy
;

383 
	gm_size
;

384 
¨øy
◊ºay c⁄° & 
s
);

385 
	g¨øy
 & 
	g›î©‹
=(
¨øy
 c⁄° & 
s
);

386 
	gpublic
:

387 
¨øy
(
sz
):
m_size
(szË{ 
m_¨øy
 = 
√w
 
T
[sz]; }

388 
	gãm∂©e
<
ty≥«me
 
	gT2
>

389 
¨øy
(
a°_ve˘‹_çl
<
T2
> c⁄° & 
v
);

390 ~
¨øy
(Ë{ 
	gdñëe
[] 
	gm_¨øy
; }

391 
size
(Ëc⁄° {  
	gm_size
; }

392 
	gT
 & 
	g›î©‹
[](
	gi
Ë{ 
as£π
(0 <
i
);ás£π(
°©ic_ˇ°
<>(iË< 
m_size
);  
	gm_¨øy
[i]; }

393 
T
 c⁄° & 
	g›î©‹
[](
	gi
Ëc⁄° { 
as£π
(0 <
i
);ás£π(
°©ic_ˇ°
<>(iË< 
m_size
);  
	gm_¨øy
[i]; }

394 
T
 c⁄° * 
±r
(Ëc⁄° {  
	gm_¨øy
; }

395 
T
 * 
±r
(Ë{  
	gm_¨øy
; }

398 ˛as†
	cobje˘
 {

399 
	g¥Ÿe˘ed
:

400 
c⁄ãxt
 * 
m_˘x
;

401 
	gpublic
:

402 
obje˘
(
c⁄ãxt
 & 
c
):
m_˘x
(&c) {}

403 
obje˘
(obje˘ c⁄° & 
s
):
m_˘x
(s.m_ctx) {}

404 
c⁄ãxt
 & 
˘x
(Ëc⁄° {  *
m_˘x
; }

405 
Z3_îr‹_code
 
check_îr‹
(Ëc⁄° {  
	gm_˘x
->check_error(); }

406 
‰õnd
 
check_c⁄ãxt
(
obje˘
 c⁄° & 
a
, obje˘ c⁄° & 
b
);

408 
ölöe
 
	$check_c⁄ãxt
(
obje˘
 c⁄° & 
a
, obje˘ c⁄° & 
b
Ë{ (Ô; ()b; 
	`as£π
◊.
m_˘x
 =b.m_˘x); 
	}
}

410 ˛as†
	csymbﬁ
 : 
public
 
obje˘
 {

411 
Z3_symbﬁ
 
m_sym
;

412 
	gpublic
:

413 
symbﬁ
(
c⁄ãxt
 & 
c
, 
Z3_symbﬁ
 
s
):
obje˘
(c), 
m_sym
(s) {}

414 
symbﬁ
(symbﬁ c⁄° & 
s
):
obje˘
(s), 
m_sym
(s.m_sym) {}

415 
	gsymbﬁ
 & 
	g›î©‹
=(
symbﬁ
 c⁄° & 
s
Ë{ 
m_˘x
 = s.m_˘x; 
	gm_sym
 = s.
m_sym
;  *
	gthis
; }

416 
›î©‹
 
Z3_symbﬁ
(Ëc⁄° {  
	gm_sym
; }

417 
Z3_symbﬁ_köd
 
köd
(Ëc⁄° {  
Z3_gë_symbﬁ_köd
(
˘x
(), 
m_sym
); }

418 
	g°d
::
°rög
 
°r
(Ëc⁄° { 
as£π
(
köd
(Ë=
Z3_STRING_SYMBOL
);  
Z3_gë_symbﬁ_°rög
(
˘x
(), 
m_sym
); }

419 
to_öt
(Ëc⁄° { 
as£π
(
köd
(Ë=
Z3_INT_SYMBOL
);  
Z3_gë_symbﬁ_öt
(
˘x
(), 
m_sym
); }

420 
‰õnd
 
	g°d
::
o°ªam
 & 
›î©‹
<<(
°d
::o°ªam & 
out
, 
symbﬁ
 c⁄° & 
	gs
);

423 
ölöe
 
	g°d
::
o°ªam
 & 
›î©‹
<<(
°d
::o°ªam & 
out
, 
symbﬁ
 c⁄° & 
	gs
) {

424 i‡(
	gs
.
köd
(Ë=
Z3_INT_SYMBOL
)

425 
out
 << "k!" << 
s
.
to_öt
();

427 
	gout
 << 
	gs
.
°r
().
c_°r
();

428  
	gout
;

432 ˛as†
	c∑øm_des¸s
 : 
public
 
obje˘
 {

433 
Z3_∑øm_des¸s
 
m_des¸s
;

434 
	gpublic
:

435 
∑øm_des¸s
(
c⁄ãxt
& 
c
, 
Z3_∑øm_des¸s
 
d
): 
obje˘
(c), 
m_des¸s
(dË{ 
Z3_∑øm_des¸s_öc_ªf
(c, d); }

436 
∑øm_des¸s
’¨am_des¸†c⁄°& 
o
): 
obje˘
(o.
˘x
()), 
m_des¸s
(o.m_des¸sË{ 
Z3_∑øm_des¸s_öc_ªf
(ctx(), m_descrs); }

437 
	g∑øm_des¸s
& 
	g›î©‹
=(
∑øm_des¸s
 c⁄°& 
o
) {

438 
Z3_∑øm_des¸s_öc_ªf
(
o
.
˘x
(), o.
m_des¸s
);

439 
Z3_∑øm_des¸s_dec_ªf
(
˘x
(), 
m_des¸s
);

440 
	gm_des¸s
 = 
o
.
m_des¸s
;

441 
	gm_˘x
 = 
o
.
m_˘x
;

442  *
	gthis
;

444 ~
∑øm_des¸s
(Ë{ 
Z3_∑øm_des¸s_dec_ªf
(
˘x
(), 
m_des¸s
); }

445 
∑øm_des¸s
 
sim∂ify_∑øm_des¸s
(
c⁄ãxt
& 
c
Ë{ Ö¨am_des¸s(c, 
Z3_sim∂ify_gë_∑øm_des¸s
(c)); }

447 
size
(Ë{  
Z3_∑øm_des¸s_size
(
˘x
(), 
m_des¸s
); }

448 
symbﬁ
 
«me
(
i
Ë{  symbﬁ(
˘x
(), 
Z3_∑øm_des¸s_gë_«me
(˘x(), 
m_des¸s
, i)); }

449 
Z3_∑øm_köd
 
köd
(
symbﬁ
 c⁄°& 
s
Ë{  
Z3_∑øm_des¸s_gë_köd
(
˘x
(), 
m_des¸s
, s); }

450 
	g°d
::
°rög
 
documíèti⁄
(
symbﬁ
 c⁄°& 
s
Ë{ c⁄°* 
r
 = 
Z3_∑øm_des¸s_gë_documíèti⁄
(
˘x
(), 
m_des¸s
, s); 
check_îr‹
();  
	gr
; }

451 
	g°d
::
°rög
 
to_°rög
(Ëc⁄° {  
Z3_∑øm_des¸s_to_°rög
(
˘x
(), 
m_des¸s
); }

454 
ölöe
 
	g°d
::
o°ªam
& 
›î©‹
<<(
°d
::o°ªam & 
out
, 
∑øm_des¸s
 c⁄° & 
	gd
Ë{  
	gout
 << d.
to_°rög
(); }

456 ˛as†
	c∑øms
 : 
public
 
obje˘
 {

457 
Z3_∑øms
 
m_∑øms
;

458 
	gpublic
:

459 
∑øms
(
c⁄ãxt
 & 
c
):
obje˘
(cË{ 
m_∑øms
 = 
Z3_mk_∑øms
(c); 
Z3_∑øms_öc_ªf
(
˘x
(), m_params); }

460 
∑øms
’¨am†c⁄° & 
s
):
obje˘
(s), 
m_∑øms
(s.m_∑ømsË{ 
Z3_∑øms_öc_ªf
(
˘x
(), m_params); }

461 ~
∑øms
(Ë{ 
Z3_∑øms_dec_ªf
(
˘x
(), 
m_∑øms
); }

462 
›î©‹
 
Z3_∑øms
(Ëc⁄° {  
	gm_∑øms
; }

463 
	g∑øms
 & 
	g›î©‹
=(
∑øms
 c⁄° & 
s
) {

464 
Z3_∑øms_öc_ªf
(
s
.
˘x
(), s.
m_∑øms
);

465 
Z3_∑øms_dec_ªf
(
˘x
(), 
m_∑øms
);

466 
	gm_˘x
 = 
s
.
m_˘x
;

467 
	gm_∑øms
 = 
s
.
m_∑øms
;

468  *
	gthis
;

470 
£t
(c⁄° * 
k
, 
boﬁ
 
b
Ë{ 
Z3_∑øms_£t_boﬁ
(
˘x
(), 
m_∑øms
, ctx().
°r_symbﬁ
(k), b); }

471 
£t
(c⁄° * 
k
, 
n
Ë{ 
Z3_∑øms_£t_uöt
(
˘x
(), 
m_∑øms
, ctx().
°r_symbﬁ
(k),Ç); }

472 
£t
(c⁄° * 
k
, 
n
Ë{ 
Z3_∑øms_£t_doubÀ
(
˘x
(), 
m_∑øms
, ctx().
°r_symbﬁ
(k),Ç); }

473 
£t
(c⁄° * 
k
, 
symbﬁ
 c⁄° & 
s
Ë{ 
Z3_∑øms_£t_symbﬁ
(
˘x
(), 
m_∑øms
, ctx().
°r_symbﬁ
(k), s); }

474 
£t
(c⁄° * 
k
, c⁄°* 
s
Ë{ 
Z3_∑øms_£t_symbﬁ
(
˘x
(), 
m_∑øms
, ctx().
°r_symbﬁ
(k), ctx().str_symbol(s)); }

475 
‰õnd
 
	g°d
::
o°ªam
 & 
›î©‹
<<(
°d
::o°ªam & 
out
, 
∑øms
 c⁄° & 
	gp
);

478 
ölöe
 
	g°d
::
o°ªam
 & 
›î©‹
<<(
°d
::o°ªam & 
out
, 
∑øms
 c⁄° & 
	gp
) {

479 
	gout
 << 
Z3_∑øms_to_°rög
(
p
.
˘x
(),Ö);  out;

482 ˛as†
	ca°
 : 
public
 
obje˘
 {

483 
¥Ÿe˘ed
:

484 
Z3_a°
 
m_a°
;

485 
	gpublic
:

486 
a°
(
c⁄ãxt
 & 
c
):
obje˘
(c), 
m_a°
(0) {}

487 
a°
(
c⁄ãxt
 & 
c
, 
Z3_a°
 
n
):
obje˘
(c), 
m_a°
“Ë{ 
Z3_öc_ªf
(
˘x
(), m_ast); }

488 
a°
◊° c⁄° & 
s
):
obje˘
(s), 
m_a°
(s.m_a°Ë{ 
Z3_öc_ªf
(
˘x
(), m_ast); }

489 ~
a°
(Ë{ i‡(
	gm_a°
Ë
Z3_dec_ªf
(*
m_˘x
, 
m_a°
); }

490 
›î©‹
 
Z3_a°
(Ëc⁄° {  
	gm_a°
; }

491 
›î©‹
 
boﬁ
(Ëc⁄° {  
	gm_a°
 != 0; }

492 
	ga°
 & 
	g›î©‹
=(
a°
 c⁄° & 
s
Ë{ 
Z3_öc_ªf
(s.
˘x
(), s.
m_a°
); i‡(
	gm_a°
Ë
Z3_dec_ªf
(˘x(), m_a°); 
	gm_˘x
 = s.
m_˘x
; m_a° = s.m_a°;  *
	gthis
; }

493 
Z3_a°_köd
 
köd
(Ëc⁄° { Z3_a°_köd 
	gr
 = 
Z3_gë_a°_köd
(
˘x
(), 
m_a°
); 
check_îr‹
(); Ñ; }

494 
hash
(Ëc⁄° { 
	gr
 = 
Z3_gë_a°_hash
(
˘x
(), 
m_a°
); 
check_îr‹
(); Ñ; }

495 
‰õnd
 
	g°d
::
o°ªam
 & 
›î©‹
<<(
°d
::o°ªam & 
out
, 
a°
 c⁄° & 
	gn
);

496 
	g°d
::
°rög
 
to_°rög
(Ëc⁄° {  
°d
::°rög(
Z3_a°_to_°rög
(
˘x
(), 
m_a°
)); }

502 
‰õnd
 
boﬁ
 
eq
(
a°
 c⁄° & 
a
,á° c⁄° & 
b
);

504 
ölöe
 
	g°d
::
o°ªam
 & 
›î©‹
<<(
°d
::o°ªam & 
out
, 
a°
 c⁄° & 
	gn
) {

505 
	gout
 << 
Z3_a°_to_°rög
(
n
.
˘x
(),Ç.
m_a°
);  out;

508 
ölöe
 
boﬁ
 
	$eq
(
a°
 c⁄° & 
a
,á° c⁄° & 
b
Ë{  
	`Z3_is_eq_a°
◊.
	`˘x
(),á, b); 
	}
}

514 ˛as†
	cs‹t
 : 
public
 
a°
 {

515 
public
:

516 
s‹t
(
c⁄ãxt
 & 
c
):
a°
(c) {}

517 
s‹t
(
c⁄ãxt
 & 
c
, 
Z3_s‹t
 
s
):
a°
(c, 
ªöãΩªt_ˇ°
<
Z3_a°
>(s)) {}

518 
s‹t
(
c⁄ãxt
 & 
c
, 
Z3_a°
 
a
):
a°
(c,á) {}

519 
s‹t
(s‹àc⁄° & 
s
):
a°
(s) {}

520 
›î©‹
 
Z3_s‹t
(Ëc⁄° {  
ªöãΩªt_ˇ°
<Z3_s‹t>(
m_a°
); }

524 
	gs‹t
 & 
	g›î©‹
=(
s‹t
 c⁄° & 
s
Ë{  
°©ic_ˇ°
<s‹t&>(
a°
::
›î©‹
=(s)); }

528 
Z3_s‹t_köd
 
s‹t_köd
(Ëc⁄° {  
Z3_gë_s‹t_köd
(*
m_˘x
, *
this
); }

532 
symbﬁ
 
«me
(Ëc⁄° { 
Z3_symbﬁ
 
	gs
 = 
Z3_gë_s‹t_«me
(
˘x
(), *
this
); 
check_îr‹
();  symbﬁ(˘x(), 
s
); }

536 
boﬁ
 
is_boﬁ
(Ëc⁄° {  
s‹t_köd
(Ë=
Z3_BOOL_SORT
; }

540 
boﬁ
 
is_öt
(Ëc⁄° {  
s‹t_köd
(Ë=
Z3_INT_SORT
; }

544 
boﬁ
 
is_ªÆ
(Ëc⁄° {  
s‹t_köd
(Ë=
Z3_REAL_SORT
; }

548 
boﬁ
 
is_¨ôh
(Ëc⁄° {  
is_öt
(Ë|| 
is_ªÆ
(); }

552 
boﬁ
 
is_bv
(Ëc⁄° {  
s‹t_köd
(Ë=
Z3_BV_SORT
; }

556 
boﬁ
 
is_¨øy
(Ëc⁄° {  
s‹t_köd
(Ë=
Z3_ARRAY_SORT
; }

560 
boﬁ
 
is_d©©y≥
(Ëc⁄° {  
s‹t_köd
(Ë=
Z3_DATATYPE_SORT
; }

564 
boﬁ
 
is_ªœti⁄
(Ëc⁄° {  
s‹t_köd
(Ë=
Z3_RELATION_SORT
; }

568 
boﬁ
 
is_£q
(Ëc⁄° {  
s‹t_köd
(Ë=
Z3_SEQ_SORT
; }

572 
boﬁ
 
is_ª
(Ëc⁄° {  
s‹t_köd
(Ë=
Z3_RE_SORT
; }

576 
boﬁ
 
is_föôe_domaö
(Ëc⁄° {  
s‹t_köd
(Ë=
Z3_FINITE_DOMAIN_SORT
; }

580 
boﬁ
 
is_Âa
(Ëc⁄° {  
s‹t_köd
(Ë=
Z3_FLOATING_POINT_SORT
; }

587 
bv_size
(Ëc⁄° { 
as£π
(
is_bv
()); 
	gr
 = 
Z3_gë_bv_s‹t_size
(
˘x
(), *
this
); 
check_îr‹
(); Ñ; }

589 
Âa_ebôs
(Ëc⁄° { 
as£π
(
is_Âa
()); 
	gr
 = 
Z3_Âa_gë_ebôs
(
˘x
(), *
this
); 
check_îr‹
(); Ñ; }

591 
Âa_sbôs
(Ëc⁄° { 
as£π
(
is_Âa
()); 
	gr
 = 
Z3_Âa_gë_sbôs
(
˘x
(), *
this
); 
check_îr‹
(); Ñ; }

597 
s‹t
 
¨øy_domaö
(Ëc⁄° { 
as£π
(
is_¨øy
()); 
Z3_s‹t
 
	gs
 = 
Z3_gë_¨øy_s‹t_domaö
(
˘x
(), *
this
); 
check_îr‹
();  s‹t(˘x(), 
s
); }

603 
s‹t
 
¨øy_ønge
(Ëc⁄° { 
as£π
(
is_¨øy
()); 
Z3_s‹t
 
	gs
 = 
Z3_gë_¨øy_s‹t_ønge
(
˘x
(), *
this
); 
check_îr‹
();  s‹t(˘x(), 
s
); }

610 ˛as†
	cfunc_de˛
 : 
public
 
a°
 {

611 
public
:

612 
func_de˛
(
c⁄ãxt
 & 
c
):
a°
(c) {}

613 
func_de˛
(
c⁄ãxt
 & 
c
, 
Z3_func_de˛
 
n
):
a°
(c, 
ªöãΩªt_ˇ°
<
Z3_a°
>(n)) {}

614 
func_de˛
(func_de˛ c⁄° & 
s
):
a°
(s) {}

615 
›î©‹
 
Z3_func_de˛
(Ëc⁄° {  
ªöãΩªt_ˇ°
<Z3_func_de˛>(
m_a°
); }

616 
	gfunc_de˛
 & 
	g›î©‹
=(
func_de˛
 c⁄° & 
s
Ë{  
°©ic_ˇ°
<func_de˛&>(
a°
::
›î©‹
=(s)); }

618 
¨ôy
(Ëc⁄° {  
Z3_gë_¨ôy
(
˘x
(), *
this
); }

619 
s‹t
 
domaö
(
i
Ëc⁄° { 
as£π
(ò< 
¨ôy
()); 
Z3_s‹t
 
	gr
 = 
Z3_gë_domaö
(
˘x
(), *
this
, i); 
check_îr‹
();  s‹t(˘x(), 
r
); }

620 
s‹t
 
ønge
(Ëc⁄° { 
Z3_s‹t
 
	gr
 = 
Z3_gë_ønge
(
˘x
(), *
this
); 
check_îr‹
();  s‹t(˘x(), 
r
); }

621 
symbﬁ
 
«me
(Ëc⁄° { 
Z3_symbﬁ
 
	gs
 = 
Z3_gë_de˛_«me
(
˘x
(), *
this
); 
check_îr‹
();  symbﬁ(˘x(), 
s
); }

622 
Z3_de˛_köd
 
de˛_köd
(Ëc⁄° {  
Z3_gë_de˛_köd
(
˘x
(), *
this
); }

624 
boﬁ
 
is_c⁄°
(Ëc⁄° {  
¨ôy
() == 0; }

626 
ex¥
 
›î©‹
()() const;

627 
ex¥
 
›î©‹
()(
	gn
,Éx¥ c⁄° * 
	g¨gs
) const;

628 
ex¥
 
›î©‹
()(
ex¥_ve˘‹
 c⁄°& 
	gv
) const;

629 
ex¥
 
›î©‹
()”x¥ c⁄° & 
	ga
) const;

630 
ex¥
 
›î©‹
()(
	ga
) const;

631 
ex¥
 
›î©‹
()”x¥ c⁄° & 
	ga1
,Éx¥ c⁄° & 
	ga2
) const;

632 
ex¥
 
›î©‹
()”x¥ c⁄° & 
	ga1
, 
	ga2
) const;

633 
ex¥
 
›î©‹
()(
	ga1
,Éx¥ c⁄° & 
	ga2
) const;

634 
ex¥
 
›î©‹
()”x¥ c⁄° & 
	ga1
,Éx¥ c⁄° & 
	ga2
,Éx¥ c⁄° & 
	ga3
) const;

635 
ex¥
 
›î©‹
()”x¥ c⁄° & 
	ga1
,Éx¥ c⁄° & 
	ga2
,Éx¥ c⁄° & 
	ga3
,Éx¥ c⁄° & 
	ga4
) const;

636 
ex¥
 
›î©‹
()”x¥ c⁄° & 
	ga1
,Éx¥ c⁄° & 
	ga2
,Éx¥ c⁄° & 
	ga3
,Éx¥ c⁄° & 
	ga4
,Éx¥ c⁄° & 
	ga5
) const;

643 ˛as†
	cex¥
 : 
public
 
a°
 {

644 
public
:

645 
ex¥
(
c⁄ãxt
 & 
c
):
a°
(c) {}

646 
ex¥
(
c⁄ãxt
 & 
c
, 
Z3_a°
 
n
):
a°
(c, 
ªöãΩªt_ˇ°
<Z3_ast>(n)) {}

647 
ex¥
”x¥ c⁄° & 
n
):
a°
(n) {}

648 
ex¥
 & 
›î©‹
=”x¥ c⁄° & 
n
Ë{  
°©ic_ˇ°
<ex¥&>(
a°
::operator=(n)); }

653 
s‹t
 
gë_s‹t
(Ëc⁄° { 
Z3_s‹t
 
	gs
 = 
Z3_gë_s‹t
(*
m_˘x
, 
m_a°
); 
check_îr‹
();  s‹t(*m_˘x, 
s
); }

658 
boﬁ
 
is_boﬁ
(Ëc⁄° {  
gë_s‹t
().is_bool(); }

662 
boﬁ
 
is_öt
(Ëc⁄° {  
gë_s‹t
().is_int(); }

666 
boﬁ
 
is_ªÆ
(Ëc⁄° {  
gë_s‹t
().is_real(); }

670 
boﬁ
 
is_¨ôh
(Ëc⁄° {  
gë_s‹t
().is_arith(); }

674 
boﬁ
 
is_bv
(Ëc⁄° {  
gë_s‹t
().is_bv(); }

678 
boﬁ
 
is_¨øy
(Ëc⁄° {  
gë_s‹t
().is_array(); }

682 
boﬁ
 
is_d©©y≥
(Ëc⁄° {  
gë_s‹t
().is_datatype(); }

686 
boﬁ
 
is_ªœti⁄
(Ëc⁄° {  
gë_s‹t
().is_relation(); }

690 
boﬁ
 
is_£q
(Ëc⁄° {  
gë_s‹t
().is_seq(); }

694 
boﬁ
 
is_ª
(Ëc⁄° {  
gë_s‹t
().is_re(); }

704 
boﬁ
 
is_föôe_domaö
(Ëc⁄° {  
gë_s‹t
().is_finite_domain(); }

708 
boﬁ
 
is_Âa
(Ëc⁄° {  
gë_s‹t
().is_fpa(); }

715 
boﬁ
 
is_numîÆ
(Ëc⁄° {  
köd
(Ë=
Z3_NUMERAL_AST
; }

716 
boﬁ
 
is_numîÆ_i64
(
öt64_t
& 
i
Ëc⁄° { boﬁ 
	gr
 = 
Z3_gë_numîÆ_öt64
(
˘x
(), 
m_a°
, &i); 
check_îr‹
(); Ñ;}

717 
boﬁ
 
is_numîÆ_u64
(
uöt64_t
& 
i
Ëc⁄° { boﬁ 
	gr
 = 
Z3_gë_numîÆ_uöt64
(
˘x
(), 
m_a°
, &i); 
check_îr‹
(); Ñ;}

718 
boﬁ
 
is_numîÆ_i
(& 
i
Ëc⁄° { boﬁ 
	gr
 = 
Z3_gë_numîÆ_öt
(
˘x
(), 
m_a°
, &i); 
check_îr‹
(); Ñ;}

719 
boﬁ
 
is_numîÆ_u
(& 
i
Ëc⁄° { boﬁ 
	gr
 = 
Z3_gë_numîÆ_uöt
(
˘x
(), 
m_a°
, &i); 
check_îr‹
(); Ñ;}

720 
boﬁ
 
is_numîÆ
(
°d
::
°rög
& 
s
Ëc⁄° { i‡(!is_numîÆ()Ë 
Ál£
; 
	gs
 = 
Z3_gë_numîÆ_°rög
(
˘x
(), 
m_a°
); 
check_îr‹
();  
	gåue
; }

721 
boﬁ
 
is_numîÆ
(
°d
::
°rög
& 
s
, 
¥ecisi⁄
Ëc⁄° { i‡(!is_numîÆ()Ë 
	gÁl£
; 
	gs
 = 
Z3_gë_numîÆ_decimÆ_°rög
(
˘x
(), 
m_a°
,Öªcisi⁄); 
check_îr‹
();  
	gåue
; }

722 
boﬁ
 
is_numîÆ
(& 
d
Ëc⁄° { i‡(!is_numîÆ()Ë 
	gÁl£
; 
	gd
 = 
Z3_gë_numîÆ_doubÀ
(
˘x
(), 
m_a°
); 
check_îr‹
();  
	gåue
; }

726 
boﬁ
 
is_≠p
(Ëc⁄° {  
köd
(Ë=
Z3_APP_AST
 || köd(Ë=
Z3_NUMERAL_AST
; }

730 
boﬁ
 
is_c⁄°
(Ëc⁄° {  
is_≠p
(Ë&& 
num_¨gs
() == 0; }

734 
boﬁ
 
is_qu™tifõr
(Ëc⁄° {  
köd
(Ë=
Z3_QUANTIFIER_AST
; }

739 
boﬁ
 
is_f‹Æl
(Ëc⁄° {  
Z3_is_qu™tifõr_f‹Æl
(
˘x
(), 
m_a°
); }

743 
boﬁ
 
is_exi°s
(Ëc⁄° {  
Z3_is_qu™tifõr_exi°s
(
˘x
(), 
m_a°
); }

747 
boﬁ
 
is_œmbda
(Ëc⁄° {  
Z3_is_œmbda
(
˘x
(), 
m_a°
); }

752 
boﬁ
 
is_v¨
(Ëc⁄° {  
köd
(Ë=
Z3_VAR_AST
; }

756 
boﬁ
 
is_Ægebøic
(Ëc⁄° {  
Z3_is_Ægebøic_numbî
(
˘x
(), 
m_a°
); }

761 
boﬁ
 
is_wñl_s‹ãd
(Ëc⁄° { boﬁ 
	gr
 = 
Z3_is_wñl_s‹ãd
(
˘x
(), 
m_a°
); 
check_îr‹
(); Ñ; }

769 
	g°d
::
°rög
 
gë_decimÆ_°rög
(
¥ecisi⁄
) const {

770 
as£π
(
is_numîÆ
(Ë|| 
is_Ægebøic
());

771  
	g°d
::
°rög
(
Z3_gë_numîÆ_decimÆ_°rög
(
˘x
(), 
m_a°
, 
¥ecisi⁄
));

784 
gë_numîÆ_öt
() const {

785 
	gªsu…
 = 0;

786 i‡(!
is_numîÆ_i
(
ªsu…
)) {

787 
as£π
(
˘x
().
íabÀ_ex˚±i⁄s
());

788 i‡(!
˘x
().
íabÀ_ex˚±i⁄s
())  0;

789 
Z3_THROW
(
ex˚±i⁄
("numeral doesÇot fit in machine int"));

791  
	gªsu…
;

803 
gë_numîÆ_uöt
() const {

804 
as£π
(
is_numîÆ
());

805 
	gªsu…
 = 0;

806 i‡(!
is_numîÆ_u
(
ªsu…
)) {

807 
as£π
(
˘x
().
íabÀ_ex˚±i⁄s
());

808 i‡(!
˘x
().
íabÀ_ex˚±i⁄s
())  0;

809 
Z3_THROW
(
ex˚±i⁄
("numeral doesÇot fit in machine uint"));

811  
	gªsu…
;

820 
öt64_t
 
gë_numîÆ_öt64
() const {

821 
as£π
(
is_numîÆ
());

822 
öt64_t
 
	gªsu…
 = 0;

823 i‡(!
is_numîÆ_i64
(
ªsu…
)) {

824 
as£π
(
˘x
().
íabÀ_ex˚±i⁄s
());

825 i‡(!
˘x
().
íabÀ_ex˚±i⁄s
())  0;

826 
Z3_THROW
(
ex˚±i⁄
("numeral doesÇot fit in machine int64_t"));

828  
	gªsu…
;

837 
uöt64_t
 
gë_numîÆ_uöt64
() const {

838 
as£π
(
is_numîÆ
());

839 
uöt64_t
 
	gªsu…
 = 0;

840 i‡(!
is_numîÆ_u64
(
ªsu…
)) {

841 
as£π
(
˘x
().
íabÀ_ex˚±i⁄s
());

842 i‡(!
˘x
().
íabÀ_ex˚±i⁄s
())  0;

843 
Z3_THROW
(
ex˚±i⁄
("numeral doesÇot fit in machine uint64_t"));

845  
	gªsu…
;

848 
Z3_lboﬁ
 
boﬁ_vÆue
() const {

849  
Z3_gë_boﬁ_vÆue
(
˘x
(), 
m_a°
);

852 
ex¥
 
numî©‹
() const {

853 
as£π
(
is_numîÆ
());

854 
Z3_a°
 
	gr
 = 
Z3_gë_numî©‹
(
˘x
(), 
m_a°
);

855 
check_îr‹
();

856  
ex¥
(
˘x
(),
r
);

860 
ex¥
 
díomö©‹
() const {

861 
as£π
(
is_numîÆ
());

862 
Z3_a°
 
	gr
 = 
Z3_gë_díomö©‹
(
˘x
(), 
m_a°
);

863 
check_îr‹
();

864  
ex¥
(
˘x
(),
r
);

867 
›î©‹
 
Z3_≠p
(Ëc⁄° { 
as£π
(
is_≠p
());  
	gªöãΩªt_ˇ°
<
	gZ3_≠p
>(
	gm_a°
); }

872 
s‹t
 
Âa_roundög_mode
() {

873 
as£π
(
is_Âa
());

874 
Z3_s‹t
 
	gs
 = 
˘x
().
Âa_roundög_mode
();

875 
check_îr‹
();

876  
s‹t
(
˘x
(), 
s
);

886 
func_de˛
 
de˛
(Ëc⁄° { 
Z3_func_de˛
 
	gf
 = 
Z3_gë_≠p_de˛
(
˘x
(), *
this
); 
check_îr‹
();  func_de˛(˘x(), 
f
); }

893 
num_¨gs
(Ëc⁄° { 
	gr
 = 
Z3_gë_≠p_num_¨gs
(
˘x
(), *
this
); 
check_îr‹
(); Ñ; }

901 
ex¥
 
¨g
(
i
Ëc⁄° { 
Z3_a°
 
	gr
 = 
Z3_gë_≠p_¨g
(
˘x
(), *
this
, i); 
check_îr‹
(); Éx¥(˘x(), 
r
); }

908 
ex¥
 
body
(Ëc⁄° { 
as£π
(
is_qu™tifõr
()); 
Z3_a°
 
	gr
 = 
Z3_gë_qu™tifõr_body
(
˘x
(), *
this
); 
check_îr‹
(); Éx¥(˘x(), 
r
); }

915 
‰õnd
 
ex¥
 
	g›î©‹
!”x¥ c⁄° & 
	ga
);

923 
‰õnd
 
ex¥
 
	g›î©‹
&&”x¥ c⁄° & 
	ga
,Éx¥ c⁄° & 
	gb
);

932 
‰õnd
 
ex¥
 
	g›î©‹
&&”x¥ c⁄° & 
	ga
, 
boﬁ
 
	gb
);

939 
‰õnd
 
ex¥
 
	g›î©‹
&&(
boﬁ
 
	ga
,Éx¥ c⁄° & 
	gb
);

947 
‰õnd
 
ex¥
 
	g›î©‹
||”x¥ c⁄° & 
	ga
,Éx¥ c⁄° & 
	gb
);

954 
‰õnd
 
ex¥
 
	g›î©‹
||”x¥ c⁄° & 
	ga
, 
boﬁ
 
	gb
);

962 
‰õnd
 
ex¥
 
	g›î©‹
||(
boﬁ
 
	ga
,Éx¥ c⁄° & 
	gb
);

964 
‰õnd
 
ex¥
 
im∂õs
”x¥ c⁄° & 
a
,Éx¥ c⁄° & 
b
);

965 
‰õnd
 
ex¥
 
im∂õs
”x¥ c⁄° & 
a
, 
boﬁ
 
b
);

966 
‰õnd
 
ex¥
 
im∂õs
(
boﬁ
 
a
,Éx¥ c⁄° & 
b
);

968 
‰õnd
 
ex¥
 
mk_‹
(
ex¥_ve˘‹
 c⁄°& 
¨gs
);

969 
‰õnd
 
ex¥
 
mk_™d
(
ex¥_ve˘‹
 c⁄°& 
¨gs
);

971 
‰õnd
 
ex¥
 
ôe
”x¥ c⁄° & 
c
,Éx¥ c⁄° & 
t
,Éx¥ c⁄° & 
e
);

973 
boﬁ
 
is_åue
(Ëc⁄° {  
is_≠p
(Ë&& 
	gZ3_OP_TRUE
 =
de˛
().
de˛_köd
(); }

974 
boﬁ
 
is_Ál£
(Ëc⁄° {  
is_≠p
(Ë&& 
	gZ3_OP_FALSE
 =
de˛
().
de˛_köd
(); }

975 
boﬁ
 
is_nŸ
(Ëc⁄° {  
is_≠p
(Ë&& 
	gZ3_OP_NOT
 =
de˛
().
de˛_köd
(); }

976 
boﬁ
 
is_™d
(Ëc⁄° {  
is_≠p
(Ë&& 
	gZ3_OP_AND
 =
de˛
().
de˛_köd
(); }

977 
boﬁ
 
is_‹
(Ëc⁄° {  
is_≠p
(Ë&& 
	gZ3_OP_OR
 =
de˛
().
de˛_köd
(); }

978 
boﬁ
 
is_x‹
(Ëc⁄° {  
is_≠p
(Ë&& 
	gZ3_OP_XOR
 =
de˛
().
de˛_köd
(); }

979 
boﬁ
 
is_im∂õs
(Ëc⁄° {  
is_≠p
(Ë&& 
	gZ3_OP_IMPLIES
 =
de˛
().
de˛_köd
(); }

980 
boﬁ
 
is_eq
(Ëc⁄° {  
is_≠p
(Ë&& 
	gZ3_OP_EQ
 =
de˛
().
de˛_köd
(); }

981 
boﬁ
 
is_ôe
(Ëc⁄° {  
is_≠p
(Ë&& 
	gZ3_OP_ITE
 =
de˛
().
de˛_köd
(); }

983 
‰õnd
 
ex¥
 
di°ö˘
(
ex¥_ve˘‹
 c⁄°& 
¨gs
);

984 
‰õnd
 
ex¥
 
c⁄ˇt
”x¥ c⁄°& 
a
,Éx¥ c⁄°& 
b
);

985 
‰õnd
 
ex¥
 
c⁄ˇt
(
ex¥_ve˘‹
 c⁄°& 
¨gs
);

987 
‰õnd
 
ex¥
 
	g›î©‹
==”x¥ c⁄° & 
a
,Éx¥ c⁄° & 
	gb
);

988 
‰õnd
 
ex¥
 
	g›î©‹
==”x¥ c⁄° & 
a
, 
	gb
);

989 
‰õnd
 
ex¥
 
	g›î©‹
==(
a
,Éx¥ c⁄° & 
	gb
);

991 
‰õnd
 
ex¥
 
	g›î©‹
!=”x¥ c⁄° & 
a
,Éx¥ c⁄° & 
	gb
);

992 
‰õnd
 
ex¥
 
	g›î©‹
!=”x¥ c⁄° & 
a
, 
	gb
);

993 
‰õnd
 
ex¥
 
	g›î©‹
!=(
a
,Éx¥ c⁄° & 
	gb
);

995 
‰õnd
 
ex¥
 
	g›î©‹
+”x¥ c⁄° & 
	ga
,Éx¥ c⁄° & 
	gb
);

996 
‰õnd
 
ex¥
 
	g›î©‹
+”x¥ c⁄° & 
	ga
, 
	gb
);

997 
‰õnd
 
ex¥
 
	g›î©‹
+(
	ga
,Éx¥ c⁄° & 
	gb
);

998 
‰õnd
 
ex¥
 
sum
(
ex¥_ve˘‹
 c⁄°& 
¨gs
);

1000 
‰õnd
 
ex¥
 
	g›î©‹
*”x¥ c⁄° & 
	ga
,Éx¥ c⁄° & 
	gb
);

1001 
‰õnd
 
ex¥
 
	g›î©‹
*”x¥ c⁄° & 
	ga
, 
	gb
);

1002 
‰õnd
 
ex¥
 
	g›î©‹
*(
	ga
,Éx¥ c⁄° & 
	gb
);

1005 
‰õnd
 
ex¥
 
pw
”x¥ c⁄° & 
a
,Éx¥ c⁄° & 
b
);

1006 
‰õnd
 
ex¥
 
pw
”x¥ c⁄° & 
a
, 
b
);

1007 
‰õnd
 
ex¥
 
pw
(
a
,Éx¥ c⁄° & 
b
);

1010 
‰õnd
 
ex¥
 
mod
”x¥ c⁄°& 
a
,Éx¥ c⁄°& 
b
);

1011 
‰õnd
 
ex¥
 
mod
”x¥ c⁄°& 
a
, 
b
);

1012 
‰õnd
 
ex¥
 
mod
(
a
,Éx¥ c⁄°& 
b
);

1015 
‰õnd
 
ex¥
 
ªm
”x¥ c⁄°& 
a
,Éx¥ c⁄°& 
b
);

1016 
‰õnd
 
ex¥
 
ªm
”x¥ c⁄°& 
a
, 
b
);

1017 
‰õnd
 
ex¥
 
ªm
(
a
,Éx¥ c⁄°& 
b
);

1019 
‰õnd
 
ex¥
 
is_öt
”x¥ c⁄°& 
e
);

1021 
‰õnd
 
ex¥
 
	g›î©‹
/”x¥ c⁄° & 
	ga
,Éx¥ c⁄° & 
	gb
);

1022 
‰õnd
 
ex¥
 
	g›î©‹
/”x¥ c⁄° & 
	ga
, 
	gb
);

1023 
‰õnd
 
ex¥
 
	g›î©‹
/(
	ga
,Éx¥ c⁄° & 
	gb
);

1025 
‰õnd
 
ex¥
 
	g›î©‹
-”x¥ c⁄° & 
	ga
);

1027 
‰õnd
 
ex¥
 
	g›î©‹
-”x¥ c⁄° & 
	ga
,Éx¥ c⁄° & 
	gb
);

1028 
‰õnd
 
ex¥
 
	g›î©‹
-”x¥ c⁄° & 
	ga
, 
	gb
);

1029 
‰õnd
 
ex¥
 
	g›î©‹
-(
	ga
,Éx¥ c⁄° & 
	gb
);

1031 
‰õnd
 
ex¥
 
	g›î©‹
<=”x¥ c⁄° & 
a
,Éx¥ c⁄° & 
	gb
);

1032 
‰õnd
 
ex¥
 
	g›î©‹
<=”x¥ c⁄° & 
a
, 
	gb
);

1033 
‰õnd
 
ex¥
 
	g›î©‹
<=(
a
,Éx¥ c⁄° & 
	gb
);

1036 
‰õnd
 
ex¥
 
	g›î©‹
>=”x¥ c⁄° & 
a
,Éx¥ c⁄° & 
	gb
);

1037 
‰õnd
 
ex¥
 
	g›î©‹
>=”x¥ c⁄° & 
a
, 
	gb
);

1038 
‰õnd
 
ex¥
 
	g›î©‹
>=(
a
,Éx¥ c⁄° & 
	gb
);

1040 
‰õnd
 
ex¥
 
	g›î©‹
<”x¥ c⁄° & 
	ga
,Éx¥ c⁄° & 
	gb
);

1041 
‰õnd
 
ex¥
 
	g›î©‹
<”x¥ c⁄° & 
	ga
, 
	gb
);

1042 
‰õnd
 
ex¥
 
	g›î©‹
<(
	ga
,Éx¥ c⁄° & 
	gb
);

1044 
‰õnd
 
ex¥
 
	g›î©‹
>”x¥ c⁄° & 
	ga
,Éx¥ c⁄° & 
	gb
);

1045 
‰õnd
 
ex¥
 
	g›î©‹
>”x¥ c⁄° & 
	ga
, 
	gb
);

1046 
‰õnd
 
ex¥
 
	g›î©‹
>(
	ga
,Éx¥ c⁄° & 
	gb
);

1048 
‰õnd
 
ex¥
 
pbÀ
(
ex¥_ve˘‹
 c⁄°& 
es
, c⁄° * 
c€ffs
, 
bound
);

1049 
‰õnd
 
ex¥
 
pbge
(
ex¥_ve˘‹
 c⁄°& 
es
, c⁄° * 
c€ffs
, 
bound
);

1050 
‰õnd
 
ex¥
 
pbeq
(
ex¥_ve˘‹
 c⁄°& 
es
, c⁄° * 
c€ffs
, 
bound
);

1051 
‰õnd
 
ex¥
 
©mo°
(
ex¥_ve˘‹
 c⁄°& 
es
, 
bound
);

1052 
‰õnd
 
ex¥
 
©Àa°
(
ex¥_ve˘‹
 c⁄°& 
es
, 
bound
);

1054 
‰õnd
 
ex¥
 
	g›î©‹
&”x¥ c⁄° & 
	ga
,Éx¥ c⁄° & 
	gb
);

1055 
‰õnd
 
ex¥
 
	g›î©‹
&”x¥ c⁄° & 
	ga
, 
	gb
);

1056 
‰õnd
 
ex¥
 
	g›î©‹
&(
	ga
,Éx¥ c⁄° & 
	gb
);

1058 
‰õnd
 
ex¥
 
	g›î©‹
^”x¥ c⁄° & 
	ga
,Éx¥ c⁄° & 
	gb
);

1059 
‰õnd
 
ex¥
 
	g›î©‹
^”x¥ c⁄° & 
	ga
, 
	gb
);

1060 
‰õnd
 
ex¥
 
	g›î©‹
^(
	ga
,Éx¥ c⁄° & 
	gb
);

1062 
‰õnd
 
ex¥
 
	g›î©‹
|”x¥ c⁄° & 
	ga
,Éx¥ c⁄° & 
	gb
);

1063 
‰õnd
 
ex¥
 
	g›î©‹
|”x¥ c⁄° & 
	ga
, 
	gb
);

1064 
‰õnd
 
ex¥
 
	g›î©‹
|(
	ga
,Éx¥ c⁄° & 
	gb
);

1065 
‰õnd
 
ex¥
 
«nd
”x¥ c⁄°& 
a
,Éx¥ c⁄°& 
b
);

1066 
‰õnd
 
ex¥
 
n‹
”x¥ c⁄°& 
a
,Éx¥ c⁄°& 
b
);

1067 
‰õnd
 
ex¥
 
xn‹
”x¥ c⁄°& 
a
,Éx¥ c⁄°& 
b
);

1069 
‰õnd
 
ex¥
 
mö
”x¥ c⁄°& 
a
,Éx¥ c⁄°& 
b
);

1070 
‰õnd
 
ex¥
 
max
”x¥ c⁄°& 
a
,Éx¥ c⁄°& 
b
);

1072 
ex¥
 
rŸ©e_À·
(
i
Ë{ 
Z3_a°
 
	gr
 = 
Z3_mk_rŸ©e_À·
(
˘x
(), i, *
this
); ctx().
check_îr‹
(); Éx¥(˘x(), 
r
); }

1073 
ex¥
 
rŸ©e_right
(
i
Ë{ 
Z3_a°
 
	gr
 = 
Z3_mk_rŸ©e_right
(
˘x
(), i, *
this
); ctx().
check_îr‹
(); Éx¥(˘x(), 
r
); }

1074 
ex¥
 
ª≥©
(
i
Ë{ 
Z3_a°
 
	gr
 = 
Z3_mk_ª≥©
(
˘x
(), i, *
this
); ctx().
check_îr‹
(); Éx¥(˘x(), 
r
); }

1076 
‰õnd
 
ex¥
 
abs
”x¥ c⁄° & 
a
);

1077 
‰õnd
 
ex¥
 
sqπ
”x¥ c⁄° & 
a
,Éx¥ c⁄° & 
rm
);

1079 
‰õnd
 
ex¥
 
	g›î©‹
~”x¥ c⁄° & 
	ga
);

1080 
ex¥
 
exåa˘
(
hi
, 
lo
Ëc⁄° { 
Z3_a°
 
	gr
 = 
Z3_mk_exåa˘
(
˘x
(), hi,Üo, *
this
); ctx().
check_îr‹
(); Éx¥(˘x(), 
r
); }

1081 
lo
(Ëc⁄° { 
as£π
 (
is_≠p
(Ë&& 
Z3_gë_de˛_num_∑ømëîs
(
˘x
(), 
de˛
()Ë=2);  
	g°©ic_ˇ°
<>(
Z3_gë_de˛_öt_∑ømëî
(ctx(), decl(), 1)); }

1082 
hi
(Ëc⁄° { 
as£π
 (
is_≠p
(Ë&& 
Z3_gë_de˛_num_∑ømëîs
(
˘x
(), 
de˛
()Ë=2);  
	g°©ic_ˇ°
<>(
Z3_gë_de˛_öt_∑ømëî
(ctx(), decl(), 0)); }

1087 
‰õnd
 
ex¥
 
fma
”x¥ c⁄°& 
a
,Éx¥ c⁄°& 
b
,Éx¥ c⁄°& 
c
);

1094 
ex¥
 
exåa˘
”x¥ c⁄°& 
off£t
,Éx¥ c⁄°& 
Àngth
) const {

1095 
check_c⁄ãxt
(*
this
, 
off£t
); check_c⁄ãxt(off£t, 
Àngth
);

1096 
Z3_a°
 
	gr
 = 
Z3_mk_£q_exåa˘
(
˘x
(), *
this
, 
off£t
, 
Àngth
); 
check_îr‹
();  
ex¥
(˘x(), 
r
);

1098 
ex¥
 
ª∂a˚
”x¥ c⁄°& 
§c
,Éx¥ c⁄°& 
d°
) const {

1099 
check_c⁄ãxt
(*
this
, 
§c
); check_c⁄ãxt(§c, 
d°
);

1100 
Z3_a°
 
	gr
 = 
Z3_mk_£q_ª∂a˚
(
˘x
(), *
this
, 
§c
, 
d°
);

1101 
check_îr‹
();

1102  
ex¥
(
˘x
(), 
r
);

1104 
ex¥
 
unô
() const {

1105 
Z3_a°
 
	gr
 = 
Z3_mk_£q_unô
(
˘x
(), *
this
);

1106 
check_îr‹
();

1107  
ex¥
(
˘x
(), 
r
);

1109 
ex¥
 
c⁄èös
”x¥ c⁄°& 
s
) {

1110 
check_c⁄ãxt
(*
this
, 
s
);

1111 
Z3_a°
 
	gr
 = 
Z3_mk_£q_c⁄èös
(
˘x
(), *
this
, 
s
);

1112 
check_îr‹
();

1113  
ex¥
(
˘x
(), 
r
);

1115 
ex¥
 
©
”x¥ c⁄°& 
ödex
) const {

1116 
check_c⁄ãxt
(*
this
, 
ödex
);

1117 
Z3_a°
 
	gr
 = 
Z3_mk_£q_©
(
˘x
(), *
this
, 
ödex
);

1118 
check_îr‹
();

1119  
ex¥
(
˘x
(), 
r
);

1121 
ex¥
 
Àngth
() const {

1122 
Z3_a°
 
	gr
 = 
Z3_mk_£q_Àngth
(
˘x
(), *
this
);

1123 
check_îr‹
();

1124  
ex¥
(
˘x
(), 
r
);

1126 
ex¥
 
°oi
() const {

1127 
Z3_a°
 
	gr
 = 
Z3_mk_°r_to_öt
(
˘x
(), *
this
);

1128 
check_îr‹
();

1129  
ex¥
(
˘x
(), 
r
);

1131 
ex¥
 
ôos
() const {

1132 
Z3_a°
 
	gr
 = 
Z3_mk_öt_to_°r
(
˘x
(), *
this
);

1133 
check_îr‹
();

1134  
ex¥
(
˘x
(), 
r
);

1137 
‰õnd
 
ex¥
 
ønge
”x¥ c⁄°& 
lo
,Éx¥ c⁄°& 
hi
);

1141 
ex¥
 
lo›
(
lo
) {

1142 
Z3_a°
 
	gr
 = 
Z3_mk_ª_lo›
(
˘x
(), 
m_a°
, 
lo
, 0);

1143 
check_îr‹
();

1144  
ex¥
(
˘x
(), 
r
);

1146 
ex¥
 
lo›
(
lo
, 
hi
) {

1147 
Z3_a°
 
	gr
 = 
Z3_mk_ª_lo›
(
˘x
(), 
m_a°
, 
lo
, 
hi
);

1148 
check_îr‹
();

1149  
ex¥
(
˘x
(), 
r
);

1156 
ex¥
 
sim∂ify
(Ëc⁄° { 
Z3_a°
 
	gr
 = 
Z3_sim∂ify
(
˘x
(), 
m_a°
); 
check_îr‹
(); Éx¥(˘x(), 
r
); }

1160 
ex¥
 
sim∂ify
(
∑øms
 c⁄° & 
p
Ëc⁄° { 
Z3_a°
 
	gr
 = 
Z3_sim∂ify_ex
(
˘x
(), 
m_a°
,Ö); 
check_îr‹
(); Éx¥(˘x(), 
r
); }

1165 
ex¥
 
sub°ôuã
(
ex¥_ve˘‹
 c⁄°& 
§c
,Éx¥_ve˘‹ c⁄°& 
d°
);

1170 
ex¥
 
sub°ôuã
(
ex¥_ve˘‹
 c⁄°& 
d°
);

1174 
	#_Z3_MK_BIN_
(
a
, 
b
, 
bö›
) \

1175 
	`check_c⁄ãxt
(
a
, 
b
); \

1176 
Z3_a°
 
r
 = 
	`bö›
(
a
.
	`˘x
(),á, 
b
); \

1177 
a
.
	`check_îr‹
(); \

1178  
	`ex¥
(
a
.
	`˘x
(), 
r
); \

1179 

	)

1181 
ölöe
 
ex¥
 
	$im∂õs
(
ex¥
 c⁄° & 
a
,Éx¥ c⁄° & 
b
) {

1182 
	`as£π
(
a
.
	`is_boﬁ
(Ë&& 
b
.is_bool());

1183 
	`_Z3_MK_BIN_
(
a
, 
b
, 
Z3_mk_im∂õs
);

1184 
	}
}

1185 
ölöe
 
ex¥
 
	$im∂õs
(
ex¥
 c⁄° & 
a
, 
boﬁ
 
b
Ë{  
	`im∂õs
◊,á.
	`˘x
().
	`boﬁ_vÆ
(b)); 
	}
}

1186 
ölöe
 
ex¥
 
	$im∂õs
(
boﬁ
 
a
, 
ex¥
 c⁄° & 
b
Ë{  
	`im∂õs
(b.
	`˘x
().
	`boﬁ_vÆ
◊), b); 
	}
}

1189 
ölöe
 
ex¥
 
	$pw
(
ex¥
 c⁄° & 
a
,Éx¥ c⁄° & 
b
Ë{ 
	`_Z3_MK_BIN_
◊, b, 
Z3_mk_powî
); 
	}
}

1190 
ölöe
 
ex¥
 
	$pw
(
ex¥
 c⁄° & 
a
, 
b
Ë{  
	`pw
◊,á.
	`˘x
().
	`num_vÆ
(b,á.
	`gë_s‹t
())); 
	}
}

1191 
ölöe
 
ex¥
 
	$pw
(
a
, 
ex¥
 c⁄° & 
b
Ë{  
	`pw
(b.
	`˘x
().
	`num_vÆ
◊, b.
	`gë_s‹t
()), b); 
	}
}

1193 
ölöe
 
ex¥
 
	$mod
(
ex¥
 c⁄°& 
a
,Éx¥ c⁄°& 
b
Ë{ 
	`_Z3_MK_BIN_
◊, b, 
Z3_mk_mod
); 
	}
}

1194 
ölöe
 
ex¥
 
	$mod
(
ex¥
 c⁄° & 
a
, 
b
Ë{  
	`mod
◊,á.
	`˘x
().
	`num_vÆ
(b,á.
	`gë_s‹t
())); 
	}
}

1195 
ölöe
 
ex¥
 
	$mod
(
a
, 
ex¥
 c⁄° & 
b
Ë{  
	`mod
(b.
	`˘x
().
	`num_vÆ
◊, b.
	`gë_s‹t
()), b); 
	}
}

1197 
ölöe
 
ex¥
 
	$ªm
(
ex¥
 c⁄°& 
a
,Éx¥ c⁄°& 
b
) {

1198 i‡(
a
.
	`is_Âa
(Ë&& 
b
.is_fpa()) {

1199 
	`_Z3_MK_BIN_
(
a
, 
b
, 
Z3_mk_Âa_ªm
);

1201 
	`_Z3_MK_BIN_
(
a
, 
b
, 
Z3_mk_ªm
);

1203 
	}
}

1204 
ölöe
 
ex¥
 
	$ªm
(
ex¥
 c⁄° & 
a
, 
b
Ë{  
	`ªm
◊,á.
	`˘x
().
	`num_vÆ
(b,á.
	`gë_s‹t
())); 
	}
}

1205 
ölöe
 
ex¥
 
	$ªm
(
a
, 
ex¥
 c⁄° & 
b
Ë{  
	`ªm
(b.
	`˘x
().
	`num_vÆ
◊, b.
	`gë_s‹t
()), b); 
	}
}

1207 #unde‡
_Z3_MK_BIN_


1209 
	#_Z3_MK_UN_
(
a
, 
mkun
) \

1210 
Z3_a°
 
r
 = 
	`mkun
(
a
.
	`˘x
(),á); \

1211 
a
.
	`check_îr‹
(); \

1212  
	`ex¥
(
a
.
	`˘x
(), 
r
); \

1213 

	)

1215 
ölöe
 
ex¥
 
	g›î©‹
!”x¥ c⁄° & 
	ga
Ë{ 
as£π
(
a
.
is_boﬁ
()); 
_Z3_MK_UN_
◊, 
Z3_mk_nŸ
); }

1217 
ölöe
 
ex¥
 
	$is_öt
(
ex¥
 c⁄°& 
e
Ë{ 
	`_Z3_MK_UN_
”, 
Z3_mk_is_öt
); 
	}
}

1219 #unde‡
_Z3_MK_UN_


1221 
ölöe
 
ex¥
 
	g›î©‹
&&”x¥ c⁄° & 
	ga
,Éx¥ c⁄° & 
	gb
) {

1222 
check_c⁄ãxt
(
a
, 
b
);

1223 
as£π
(
a
.
is_boﬁ
(Ë&& 
b
.is_bool());

1224 
Z3_a°
 
	g¨gs
[2] = { 
a
, 
b
 };

1225 
Z3_a°
 
	gr
 = 
Z3_mk_™d
(
a
.
˘x
(), 2, 
¨gs
);

1226 
	ga
.
check_îr‹
();

1227  
ex¥
(
a
.
˘x
(), 
r
);

1230 
ölöe
 
ex¥
 
	g›î©‹
&&”x¥ c⁄° & 
	ga
, 
boﬁ
 
	gb
Ë{ á &&á.
˘x
().
boﬁ_vÆ
(
b
); }

1231 
ölöe
 
ex¥
 
	g›î©‹
&&(
boﬁ
 
	ga
,Éx¥ c⁄° & 
	gb
Ë{  b.
˘x
().
boﬁ_vÆ
(
a
) && b; }

1233 
ölöe
 
ex¥
 
	g›î©‹
||”x¥ c⁄° & 
	ga
,Éx¥ c⁄° & 
	gb
) {

1234 
check_c⁄ãxt
(
a
, 
b
);

1235 
as£π
(
a
.
is_boﬁ
(Ë&& 
b
.is_bool());

1236 
Z3_a°
 
	g¨gs
[2] = { 
a
, 
b
 };

1237 
Z3_a°
 
	gr
 = 
Z3_mk_‹
(
a
.
˘x
(), 2, 
¨gs
);

1238 
	ga
.
check_îr‹
();

1239  
ex¥
(
a
.
˘x
(), 
r
);

1242 
ölöe
 
ex¥
 
	g›î©‹
||”x¥ c⁄° & 
	ga
, 
boﬁ
 
	gb
Ë{ á ||á.
˘x
().
boﬁ_vÆ
(
b
); }

1244 
ölöe
 
ex¥
 
	g›î©‹
||(
boﬁ
 
	ga
,Éx¥ c⁄° & 
	gb
Ë{  b.
˘x
().
boﬁ_vÆ
(
a
) || b; }

1246 
ölöe
 
ex¥
 
	g›î©‹
==”x¥ c⁄° & 
a
,Éx¥ c⁄° & 
	gb
) {

1247 
check_c⁄ãxt
(
a
, 
b
);

1248 
Z3_a°
 
	gr
 = 
Z3_mk_eq
(
a
.
˘x
(),á, 
b
);

1249 
	ga
.
check_îr‹
();

1250  
ex¥
(
a
.
˘x
(), 
r
);

1252 
ölöe
 
ex¥
 
	g›î©‹
==”x¥ c⁄° & 
a
, 
	gb
Ë{ 
as£π
◊.
is_¨ôh
(Ë||á.
is_bv
(Ë||á.
is_Âa
());  
	ga
 =a.
˘x
().
num_vÆ
(
b
,á.
gë_s‹t
()); }

1253 
ölöe
 
ex¥
 
	g›î©‹
==(
a
,Éx¥ c⁄° & 
	gb
Ë{ 
as£π
(
b
.
is_¨ôh
(Ë|| b.
is_bv
(Ë|| b.
is_Âa
());  b.
˘x
().
num_vÆ
◊, b.
gë_s‹t
()) == b; }

1255 
ölöe
 
ex¥
 
	g›î©‹
!=”x¥ c⁄° & 
a
,Éx¥ c⁄° & 
	gb
) {

1256 
check_c⁄ãxt
(
a
, 
b
);

1257 
Z3_a°
 
	g¨gs
[2] = { 
a
, 
b
 };

1258 
Z3_a°
 
	gr
 = 
Z3_mk_di°ö˘
(
a
.
˘x
(), 2, 
¨gs
);

1259 
	ga
.
check_îr‹
();

1260  
ex¥
(
a
.
˘x
(), 
r
);

1262 
ölöe
 
ex¥
 
	g›î©‹
!=”x¥ c⁄° & 
a
, 
	gb
Ë{ 
as£π
◊.
is_¨ôh
(Ë||á.
is_bv
(Ë||á.
is_Âa
());  
	ga
 !a.
˘x
().
num_vÆ
(
b
,á.
gë_s‹t
()); }

1263 
ölöe
 
ex¥
 
	g›î©‹
!=(
a
,Éx¥ c⁄° & 
	gb
Ë{ 
as£π
(
b
.
is_¨ôh
(Ë|| b.
is_bv
(Ë|| b.
is_Âa
());  b.
˘x
().
num_vÆ
◊, b.
gë_s‹t
()) != b; }

1265 
ölöe
 
ex¥
 
	g›î©‹
+”x¥ c⁄° & 
	ga
,Éx¥ c⁄° & 
	gb
) {

1266 
check_c⁄ãxt
(
a
, 
b
);

1267 
Z3_a°
 
	gr
 = 0;

1268 i‡(
	ga
.
is_¨ôh
(Ë&& 
	gb
.is_arith()) {

1269 
Z3_a°
 
	g¨gs
[2] = { 
a
, 
b
 };

1270 
	gr
 = 
Z3_mk_add
(
a
.
˘x
(), 2, 
¨gs
);

1272 i‡(
	ga
.
is_bv
(Ë&& 
	gb
.is_bv()) {

1273 
	gr
 = 
Z3_mk_bvadd
(
a
.
˘x
(),á, 
b
);

1275 i‡(
	ga
.
is_£q
(Ë&& 
	gb
.is_seq()) {

1276  
c⁄ˇt
(
a
, 
b
);

1278 i‡(
	ga
.
is_ª
(Ë&& 
	gb
.is_re()) {

1279 
Z3_a°
 
	g_¨gs
[2] = { 
a
, 
b
 };

1280 
	gr
 = 
Z3_mk_ª_uni⁄
(
a
.
˘x
(), 2, 
_¨gs
);

1282 i‡(
	ga
.
is_Âa
(Ë&& 
	gb
.is_fpa()) {

1283 
	gr
 = 
Z3_mk_Âa_add
(
a
.
˘x
(),á.˘x().
Âa_roundög_mode
(),á, 
b
);

1287 
as£π
(
Ál£
);

1289 
	ga
.
check_îr‹
();

1290  
ex¥
(
a
.
˘x
(), 
r
);

1292 
ölöe
 
ex¥
 
	g›î©‹
+”x¥ c⁄° & 
	ga
, 
	gb
Ë{ á +á.
˘x
().
num_vÆ
(
b
, 
a
.
gë_s‹t
()); }

1293 
ölöe
 
ex¥
 
	g›î©‹
+(
	ga
,Éx¥ c⁄° & 
	gb
Ë{  b.
˘x
().
num_vÆ
(
a
, 
b
.
gë_s‹t
()) + b; }

1295 
ölöe
 
ex¥
 
	g›î©‹
*”x¥ c⁄° & 
	ga
,Éx¥ c⁄° & 
	gb
) {

1296 
check_c⁄ãxt
(
a
, 
b
);

1297 
Z3_a°
 
	gr
 = 0;

1298 i‡(
	ga
.
is_¨ôh
(Ë&& 
	gb
.is_arith()) {

1299 
Z3_a°
 
	g¨gs
[2] = { 
a
, 
b
 };

1300 
	gr
 = 
Z3_mk_mul
(
a
.
˘x
(), 2, 
¨gs
);

1302 i‡(
	ga
.
is_bv
(Ë&& 
	gb
.is_bv()) {

1303 
	gr
 = 
Z3_mk_bvmul
(
a
.
˘x
(),á, 
b
);

1305 i‡(
	ga
.
is_Âa
(Ë&& 
	gb
.is_fpa()) {

1306 
	gr
 = 
Z3_mk_Âa_mul
(
a
.
˘x
(),á.˘x().
Âa_roundög_mode
(),á, 
b
);

1310 
as£π
(
Ál£
);

1312 
	ga
.
check_îr‹
();

1313  
ex¥
(
a
.
˘x
(), 
r
);

1315 
ölöe
 
ex¥
 
	g›î©‹
*”x¥ c⁄° & 
	ga
, 
	gb
Ë{  
a
 *á.
˘x
().
num_vÆ
(
b
,á.
gë_s‹t
()); }

1316 
ölöe
 
ex¥
 
	g›î©‹
*(
	ga
,Éx¥ c⁄° & 
	gb
Ë{  b.
˘x
().
num_vÆ
(
a
, 
b
.
gë_s‹t
()) * b; }

1319 
ölöe
 
ex¥
 
	g›î©‹
>=”x¥ c⁄° & 
a
,Éx¥ c⁄° & 
	gb
) {

1320 
check_c⁄ãxt
(
a
, 
b
);

1321 
Z3_a°
 
	gr
 = 0;

1322 i‡(
	ga
.
is_¨ôh
(Ë&& 
	gb
.is_arith()) {

1323 
	gr
 = 
Z3_mk_ge
(
a
.
˘x
(),á, 
b
);

1325 i‡(
	ga
.
is_bv
(Ë&& 
	gb
.is_bv()) {

1326 
	gr
 = 
Z3_mk_bvsge
(
a
.
˘x
(),á, 
b
);

1330 
as£π
(
Ál£
);

1332 
	ga
.
check_îr‹
();

1333  
ex¥
(
a
.
˘x
(), 
r
);

1336 
ölöe
 
ex¥
 
	g›î©‹
/”x¥ c⁄° & 
	ga
,Éx¥ c⁄° & 
	gb
) {

1337 
check_c⁄ãxt
(
a
, 
b
);

1338 
Z3_a°
 
	gr
 = 0;

1339 i‡(
	ga
.
is_¨ôh
(Ë&& 
	gb
.is_arith()) {

1340 
	gr
 = 
Z3_mk_div
(
a
.
˘x
(),á, 
b
);

1342 i‡(
	ga
.
is_bv
(Ë&& 
	gb
.is_bv()) {

1343 
	gr
 = 
Z3_mk_bvsdiv
(
a
.
˘x
(),á, 
b
);

1345 i‡(
	ga
.
is_Âa
(Ë&& 
	gb
.is_fpa()) {

1346 
	gr
 = 
Z3_mk_Âa_div
(
a
.
˘x
(),á.˘x().
Âa_roundög_mode
(),á, 
b
);

1350 
as£π
(
Ál£
);

1352 
	ga
.
check_îr‹
();

1353  
ex¥
(
a
.
˘x
(), 
r
);

1355 
ölöe
 
ex¥
 
	g›î©‹
/”x¥ c⁄° & 
	ga
, 
	gb
Ë{ á /á.
˘x
().
num_vÆ
(
b
, 
a
.
gë_s‹t
()); }

1356 
ölöe
 
ex¥
 
	g›î©‹
/(
	ga
,Éx¥ c⁄° & 
	gb
Ë{  b.
˘x
().
num_vÆ
(
a
, 
b
.
gë_s‹t
()) / b; }

1358 
ölöe
 
ex¥
 
	g›î©‹
-”x¥ c⁄° & 
	ga
) {

1359 
Z3_a°
 
	gr
 = 0;

1360 i‡(
	ga
.
is_¨ôh
()) {

1361 
	gr
 = 
Z3_mk_u«ry_möus
(
a
.
˘x
(),á);

1363 i‡(
	ga
.
is_bv
()) {

1364 
	gr
 = 
Z3_mk_bv√g
(
a
.
˘x
(),á);

1366 i‡(
	ga
.
is_Âa
()) {

1367 
	gr
 = 
Z3_mk_Âa_√g
(
a
.
˘x
(),á);

1371 
as£π
(
Ál£
);

1373 
	ga
.
check_îr‹
();

1374  
ex¥
(
a
.
˘x
(), 
r
);

1377 
ölöe
 
ex¥
 
	g›î©‹
-”x¥ c⁄° & 
	ga
,Éx¥ c⁄° & 
	gb
) {

1378 
check_c⁄ãxt
(
a
, 
b
);

1379 
Z3_a°
 
	gr
 = 0;

1380 i‡(
	ga
.
is_¨ôh
(Ë&& 
	gb
.is_arith()) {

1381 
Z3_a°
 
	g¨gs
[2] = { 
a
, 
b
 };

1382 
	gr
 = 
Z3_mk_sub
(
a
.
˘x
(), 2, 
¨gs
);

1384 i‡(
	ga
.
is_bv
(Ë&& 
	gb
.is_bv()) {

1385 
	gr
 = 
Z3_mk_bvsub
(
a
.
˘x
(),á, 
b
);

1387 i‡(
	ga
.
is_Âa
(Ë&& 
	gb
.is_fpa()) {

1388 
	gr
 = 
Z3_mk_Âa_sub
(
a
.
˘x
(),á.˘x().
Âa_roundög_mode
(),á, 
b
);

1392 
as£π
(
Ál£
);

1394 
	ga
.
check_îr‹
();

1395  
ex¥
(
a
.
˘x
(), 
r
);

1397 
ölöe
 
ex¥
 
	g›î©‹
-”x¥ c⁄° & 
	ga
, 
	gb
Ë{ á -á.
˘x
().
num_vÆ
(
b
, 
a
.
gë_s‹t
()); }

1398 
ölöe
 
ex¥
 
	g›î©‹
-(
	ga
,Éx¥ c⁄° & 
	gb
Ë{  b.
˘x
().
num_vÆ
(
a
, 
b
.
gë_s‹t
()) - b; }

1400 
ölöe
 
ex¥
 
	g›î©‹
<=”x¥ c⁄° & 
a
,Éx¥ c⁄° & 
	gb
) {

1401 
check_c⁄ãxt
(
a
, 
b
);

1402 
Z3_a°
 
	gr
 = 0;

1403 i‡(
	ga
.
is_¨ôh
(Ë&& 
	gb
.is_arith()) {

1404 
	gr
 = 
Z3_mk_À
(
a
.
˘x
(),á, 
b
);

1406 i‡(
	ga
.
is_bv
(Ë&& 
	gb
.is_bv()) {

1407 
	gr
 = 
Z3_mk_bv¶e
(
a
.
˘x
(),á, 
b
);

1409 i‡(
	ga
.
is_Âa
(Ë&& 
	gb
.is_fpa()) {

1410 
	gr
 = 
Z3_mk_Âa_Àq
(
a
.
˘x
(),á, 
b
);

1414 
as£π
(
Ál£
);

1416 
	ga
.
check_îr‹
();

1417  
ex¥
(
a
.
˘x
(), 
r
);

1419 
ölöe
 
ex¥
 
	g›î©‹
<=”x¥ c⁄° & 
a
, 
	gb
Ë{  
	ga
 <a.
˘x
().
num_vÆ
(
b
,á.
gë_s‹t
()); }

1420 
ölöe
 
ex¥
 
	g›î©‹
<=(
a
,Éx¥ c⁄° & 
	gb
Ë{  b.
˘x
().
num_vÆ
◊, 
b
.
gë_s‹t
()) <= b; }

1422 
ölöe
 
ex¥
 
	g›î©‹
>=”x¥ c⁄° & 
a
, 
	gb
Ë{  
	ga
 >a.
˘x
().
num_vÆ
(
b
,á.
gë_s‹t
()); }

1423 
ölöe
 
ex¥
 
	g›î©‹
>=(
a
,Éx¥ c⁄° & 
	gb
Ë{  b.
˘x
().
num_vÆ
◊, 
b
.
gë_s‹t
()) >= b; }

1425 
ölöe
 
ex¥
 
	g›î©‹
<”x¥ c⁄° & 
	ga
,Éx¥ c⁄° & 
	gb
) {

1426 
check_c⁄ãxt
(
a
, 
b
);

1427 
Z3_a°
 
	gr
 = 0;

1428 i‡(
	ga
.
is_¨ôh
(Ë&& 
	gb
.is_arith()) {

1429 
	gr
 = 
Z3_mk_…
(
a
.
˘x
(),á, 
b
);

1431 i‡(
	ga
.
is_bv
(Ë&& 
	gb
.is_bv()) {

1432 
	gr
 = 
Z3_mk_bv¶t
(
a
.
˘x
(),á, 
b
);

1434 i‡(
	ga
.
is_Âa
(Ë&& 
	gb
.is_fpa()) {

1435 
	gr
 = 
Z3_mk_Âa_…
(
a
.
˘x
(),á, 
b
);

1439 
as£π
(
Ál£
);

1441 
	ga
.
check_îr‹
();

1442  
ex¥
(
a
.
˘x
(), 
r
);

1444 
ölöe
 
ex¥
 
	g›î©‹
<”x¥ c⁄° & 
	ga
, 
	gb
Ë{ á <á.
˘x
().
num_vÆ
(
b
, 
a
.
gë_s‹t
()); }

1445 
ölöe
 
ex¥
 
	g›î©‹
<(
	ga
,Éx¥ c⁄° & 
	gb
Ë{  b.
˘x
().
num_vÆ
(
a
, 
b
.
gë_s‹t
()) < b; }

1447 
ölöe
 
ex¥
 
	g›î©‹
>”x¥ c⁄° & 
	ga
,Éx¥ c⁄° & 
	gb
) {

1448 
check_c⁄ãxt
(
a
, 
b
);

1449 
Z3_a°
 
	gr
 = 0;

1450 i‡(
	ga
.
is_¨ôh
(Ë&& 
	gb
.is_arith()) {

1451 
	gr
 = 
Z3_mk_gt
(
a
.
˘x
(),á, 
b
);

1453 i‡(
	ga
.
is_bv
(Ë&& 
	gb
.is_bv()) {

1454 
	gr
 = 
Z3_mk_bvsgt
(
a
.
˘x
(),á, 
b
);

1456 i‡(
	ga
.
is_Âa
(Ë&& 
	gb
.is_fpa()) {

1457 
	gr
 = 
Z3_mk_Âa_gt
(
a
.
˘x
(),á, 
b
);

1461 
as£π
(
Ál£
);

1463 
	ga
.
check_îr‹
();

1464  
ex¥
(
a
.
˘x
(), 
r
);

1466 
ölöe
 
ex¥
 
	g›î©‹
>”x¥ c⁄° & 
	ga
, 
	gb
Ë{ á >á.
˘x
().
num_vÆ
(
b
, 
a
.
gë_s‹t
()); }

1467 
ölöe
 
ex¥
 
	g›î©‹
>(
	ga
,Éx¥ c⁄° & 
	gb
Ë{  b.
˘x
().
num_vÆ
(
a
, 
b
.
gë_s‹t
()) > b; }

1469 
ölöe
 
ex¥
 
	g›î©‹
&”x¥ c⁄° & 
	ga
,Éx¥ c⁄° & 
	gb
Ë{ 
check_c⁄ãxt
(
a
, 
b
); 
Z3_a°
 
	gr
 = 
Z3_mk_bv™d
◊.
˘x
(),á, b); Éx¥◊.˘x(), 
r
); }

1470 
ölöe
 
ex¥
 
	g›î©‹
&”x¥ c⁄° & 
	ga
, 
	gb
Ë{ á &á.
˘x
().
num_vÆ
(
b
, 
a
.
gë_s‹t
()); }

1471 
ölöe
 
ex¥
 
	g›î©‹
&(
	ga
,Éx¥ c⁄° & 
	gb
Ë{  b.
˘x
().
num_vÆ
(
a
, 
b
.
gë_s‹t
()) & b; }

1473 
ölöe
 
ex¥
 
	g›î©‹
^”x¥ c⁄° & 
	ga
,Éx¥ c⁄° & 
	gb
Ë{ 
check_c⁄ãxt
(
a
, 
b
); 
Z3_a°
 
	gr
 = 
Z3_mk_bvx‹
◊.
˘x
(),á, b); Éx¥◊.˘x(), 
r
); }

1474 
ölöe
 
ex¥
 
	g›î©‹
^”x¥ c⁄° & 
	ga
, 
	gb
Ë{ á ^á.
˘x
().
num_vÆ
(
b
, 
a
.
gë_s‹t
()); }

1475 
ölöe
 
ex¥
 
	g›î©‹
^(
	ga
,Éx¥ c⁄° & 
	gb
Ë{  b.
˘x
().
num_vÆ
(
a
, 
b
.
gë_s‹t
()) ^ b; }

1477 
ölöe
 
ex¥
 
	g›î©‹
|”x¥ c⁄° & 
	ga
,Éx¥ c⁄° & 
	gb
Ë{ 
check_c⁄ãxt
(
a
, 
b
); 
Z3_a°
 
	gr
 = 
Z3_mk_bv‹
◊.
˘x
(),á, b); Éx¥◊.˘x(), 
r
); }

1478 
ölöe
 
ex¥
 
	g›î©‹
|”x¥ c⁄° & 
	ga
, 
	gb
Ë{ á |á.
˘x
().
num_vÆ
(
b
, 
a
.
gë_s‹t
()); }

1479 
ölöe
 
ex¥
 
	g›î©‹
|(
	ga
,Éx¥ c⁄° & 
	gb
Ë{  b.
˘x
().
num_vÆ
(
a
, 
b
.
gë_s‹t
()) | b; }

1481 
ölöe
 
ex¥
 
	$«nd
(
ex¥
 c⁄°& 
a
,Éx¥ c⁄°& 
b
Ë{ 
	`check_c⁄ãxt
◊, b); 
Z3_a°
 
r
 = 
	`Z3_mk_bv«nd
◊.
	`˘x
(),á, b);  
	`ex¥
◊.˘x(),Ñ); 
	}
}

1482 
ölöe
 
ex¥
 
	$n‹
(
ex¥
 c⁄°& 
a
,Éx¥ c⁄°& 
b
Ë{ 
	`check_c⁄ãxt
◊, b); 
Z3_a°
 
r
 = 
	`Z3_mk_bvn‹
◊.
	`˘x
(),á, b);  
	`ex¥
◊.˘x(),Ñ); 
	}
}

1483 
ölöe
 
ex¥
 
	$xn‹
(
ex¥
 c⁄°& 
a
,Éx¥ c⁄°& 
b
Ë{ 
	`check_c⁄ãxt
◊, b); 
Z3_a°
 
r
 = 
	`Z3_mk_bvxn‹
◊.
	`˘x
(),á, b);  
	`ex¥
◊.˘x(),Ñ); 
	}
}

1484 
ölöe
 
ex¥
 
	$mö
(
ex¥
 c⁄°& 
a
,Éx¥ c⁄°& 
b
) {

1485 
	`check_c⁄ãxt
(
a
, 
b
);

1486 
Z3_a°
 
r
;

1487 i‡(
a
.
	`is_¨ôh
()) {

1488 
r
 = 
	`Z3_mk_ôe
(
a
.
	`˘x
(), 
	`Z3_mk_ge
◊.˘x(),á, 
b
), b,á);

1490 i‡(
a
.
	`is_bv
()) {

1491 
r
 = 
	`Z3_mk_ôe
(
a
.
	`˘x
(), 
	`Z3_mk_bvuge
◊.˘x(),á, 
b
), b,á);

1494 
	`as£π
(
a
.
	`is_Âa
());

1495 
r
 = 
	`Z3_mk_Âa_mö
(
a
.
	`˘x
(),á, 
b
);

1497  
	`ex¥
(
a
.
	`˘x
(), 
r
);

1498 
	}
}

1499 
ölöe
 
ex¥
 
	$max
(
ex¥
 c⁄°& 
a
,Éx¥ c⁄°& 
b
) {

1500 
	`check_c⁄ãxt
(
a
, 
b
);

1501 
Z3_a°
 
r
;

1502 i‡(
a
.
	`is_¨ôh
()) {

1503 
r
 = 
	`Z3_mk_ôe
(
a
.
	`˘x
(), 
	`Z3_mk_ge
◊.˘x(),á, 
b
),á, b);

1505 i‡(
a
.
	`is_bv
()) {

1506 
r
 = 
	`Z3_mk_ôe
(
a
.
	`˘x
(), 
	`Z3_mk_bvuge
◊.˘x(),á, 
b
),á, b);

1509 
	`as£π
(
a
.
	`is_Âa
());

1510 
r
 = 
	`Z3_mk_Âa_max
(
a
.
	`˘x
(),á, 
b
);

1512  
	`ex¥
(
a
.
	`˘x
(), 
r
);

1513 
	}
}

1514 
ölöe
 
ex¥
 
	$abs
(
ex¥
 c⁄° & 
a
) {

1515 
Z3_a°
 
r
;

1516 i‡(
a
.
	`is_öt
()) {

1517 
ex¥
 
zîo
 = 
a
.
	`˘x
().
	`öt_vÆ
(0);

1518 
r
 = 
	`Z3_mk_ôe
(
a
.
	`˘x
(), 
	`Z3_mk_ge
◊.˘x(),á, 
zîo
),á, -a);

1520 i‡(
a
.
	`is_ªÆ
()) {

1521 
ex¥
 
zîo
 = 
a
.
	`˘x
().
	`ªÆ_vÆ
(0);

1522 
r
 = 
	`Z3_mk_ôe
(
a
.
	`˘x
(), 
	`Z3_mk_ge
◊.˘x(),á, 
zîo
),á, -a);

1525 
r
 = 
	`Z3_mk_Âa_abs
(
a
.
	`˘x
(),á);

1527  
	`ex¥
(
a
.
	`˘x
(), 
r
);

1528 
	}
}

1529 
ölöe
 
ex¥
 
	$sqπ
(
ex¥
 c⁄° & 
a
,Éx¥ c⁄°& 
rm
) {

1530 
	`check_c⁄ãxt
(
a
, 
rm
);

1531 
	`as£π
(
a
.
	`is_Âa
());

1532 
Z3_a°
 
r
 = 
	`Z3_mk_Âa_sqπ
(
a
.
	`˘x
(), 
rm
,á);

1533  
	`ex¥
(
a
.
	`˘x
(), 
r
);

1534 
	}
}

1535 
ölöe
 
ex¥
 
	g›î©‹
~”x¥ c⁄° & 
	ga
Ë{ 
Z3_a°
 
	gr
 = 
Z3_mk_bvnŸ
(
a
.
˘x
(),á); Éx¥◊.˘x(), 
r
); }

1537 
ölöe
 
ex¥
 
	$fma
(
ex¥
 c⁄°& 
a
,Éx¥ c⁄°& 
b
,Éx¥ c⁄°& 
c
,Éx¥ c⁄°& 
rm
) {

1538 
	`check_c⁄ãxt
(
a
, 
b
); check_c⁄ãxt◊, 
c
); check_c⁄ãxt◊, 
rm
);

1539 
	`as£π
(
a
.
	`is_Âa
(Ë&& 
b
.is_Âa(Ë&& 
c
.is_fpa());

1540 
Z3_a°
 
r
 = 
	`Z3_mk_Âa_fma
(
a
.
	`˘x
(), 
rm
,á, 
b
, 
c
);

1541 
a
.
	`check_îr‹
();

1542  
	`ex¥
(
a
.
	`˘x
(), 
r
);

1543 
	}
}

1550 
ölöe
 
ex¥
 
	$ôe
(
ex¥
 c⁄° & 
c
,Éx¥ c⁄° & 
t
,Éx¥ c⁄° & 
e
) {

1551 
	`check_c⁄ãxt
(
c
, 
t
); check_c⁄ãxt(c, 
e
);

1552 
	`as£π
(
c
.
	`is_boﬁ
());

1553 
Z3_a°
 
r
 = 
	`Z3_mk_ôe
(
c
.
	`˘x
(), c, 
t
, 
e
);

1554 
c
.
	`check_îr‹
();

1555  
	`ex¥
(
c
.
	`˘x
(), 
r
);

1556 
	}
}

1563 
ölöe
 
ex¥
 
	$to_ex¥
(
c⁄ãxt
 & 
c
, 
Z3_a°
 
a
) {

1564 
c
.
	`check_îr‹
();

1565 
	`as£π
(
	`Z3_gë_a°_köd
(
c
, 
a
Ë=
Z3_APP_AST
 ||

1566 
	`Z3_gë_a°_köd
(
c
, 
a
Ë=
Z3_NUMERAL_AST
 ||

1567 
	`Z3_gë_a°_köd
(
c
, 
a
Ë=
Z3_VAR_AST
 ||

1568 
	`Z3_gë_a°_köd
(
c
, 
a
Ë=
Z3_QUANTIFIER_AST
);

1569  
	`ex¥
(
c
, 
a
);

1570 
	}
}

1572 
ölöe
 
s‹t
 
	$to_s‹t
(
c⁄ãxt
 & 
c
, 
Z3_s‹t
 
s
) {

1573 
c
.
	`check_îr‹
();

1574  
	`s‹t
(
c
, 
s
);

1575 
	}
}

1577 
ölöe
 
func_de˛
 
	$to_func_de˛
(
c⁄ãxt
 & 
c
, 
Z3_func_de˛
 
f
) {

1578 
c
.
	`check_îr‹
();

1579  
	`func_de˛
(
c
, 
f
);

1580 
	}
}

1585 
ölöe
 
ex¥
 
	$uÀ
(
ex¥
 c⁄° & 
a
,Éx¥ c⁄° & 
b
Ë{  
	`to_ex¥
◊.
	`˘x
(), 
	`Z3_mk_bvuÀ
◊.˘x(),á, b)); 
	}
}

1586 
ölöe
 
ex¥
 
	$uÀ
(
ex¥
 c⁄° & 
a
, 
b
Ë{  
	`uÀ
◊,á.
	`˘x
().
	`num_vÆ
(b,á.
	`gë_s‹t
())); 
	}
}

1587 
ölöe
 
ex¥
 
	$uÀ
(
a
, 
ex¥
 c⁄° & 
b
Ë{  
	`uÀ
(b.
	`˘x
().
	`num_vÆ
◊, b.
	`gë_s‹t
()), b); 
	}
}

1591 
ölöe
 
ex¥
 
	$u…
(
ex¥
 c⁄° & 
a
,Éx¥ c⁄° & 
b
Ë{  
	`to_ex¥
◊.
	`˘x
(), 
	`Z3_mk_bvu…
◊.˘x(),á, b)); 
	}
}

1592 
ölöe
 
ex¥
 
	$u…
(
ex¥
 c⁄° & 
a
, 
b
Ë{  
	`u…
◊,á.
	`˘x
().
	`num_vÆ
(b,á.
	`gë_s‹t
())); 
	}
}

1593 
ölöe
 
ex¥
 
	$u…
(
a
, 
ex¥
 c⁄° & 
b
Ë{  
	`u…
(b.
	`˘x
().
	`num_vÆ
◊, b.
	`gë_s‹t
()), b); 
	}
}

1597 
ölöe
 
ex¥
 
	$uge
(
ex¥
 c⁄° & 
a
,Éx¥ c⁄° & 
b
Ë{  
	`to_ex¥
◊.
	`˘x
(), 
	`Z3_mk_bvuge
◊.˘x(),á, b)); 
	}
}

1598 
ölöe
 
ex¥
 
	$uge
(
ex¥
 c⁄° & 
a
, 
b
Ë{  
	`uge
◊,á.
	`˘x
().
	`num_vÆ
(b,á.
	`gë_s‹t
())); 
	}
}

1599 
ölöe
 
ex¥
 
	$uge
(
a
, 
ex¥
 c⁄° & 
b
Ë{  
	`uge
(b.
	`˘x
().
	`num_vÆ
◊, b.
	`gë_s‹t
()), b); 
	}
}

1603 
ölöe
 
ex¥
 
	$ugt
(
ex¥
 c⁄° & 
a
,Éx¥ c⁄° & 
b
Ë{  
	`to_ex¥
◊.
	`˘x
(), 
	`Z3_mk_bvugt
◊.˘x(),á, b)); 
	}
}

1604 
ölöe
 
ex¥
 
	$ugt
(
ex¥
 c⁄° & 
a
, 
b
Ë{  
	`ugt
◊,á.
	`˘x
().
	`num_vÆ
(b,á.
	`gë_s‹t
())); 
	}
}

1605 
ölöe
 
ex¥
 
	$ugt
(
a
, 
ex¥
 c⁄° & 
b
Ë{  
	`ugt
(b.
	`˘x
().
	`num_vÆ
◊, b.
	`gë_s‹t
()), b); 
	}
}

1609 
ölöe
 
ex¥
 
	$udiv
(
ex¥
 c⁄° & 
a
,Éx¥ c⁄° & 
b
Ë{  
	`to_ex¥
◊.
	`˘x
(), 
	`Z3_mk_bvudiv
◊.˘x(),á, b)); 
	}
}

1610 
ölöe
 
ex¥
 
	$udiv
(
ex¥
 c⁄° & 
a
, 
b
Ë{  
	`udiv
◊,á.
	`˘x
().
	`num_vÆ
(b,á.
	`gë_s‹t
())); 
	}
}

1611 
ölöe
 
ex¥
 
	$udiv
(
a
, 
ex¥
 c⁄° & 
b
Ë{  
	`udiv
(b.
	`˘x
().
	`num_vÆ
◊, b.
	`gë_s‹t
()), b); 
	}
}

1616 
ölöe
 
ex¥
 
	$§em
(
ex¥
 c⁄° & 
a
,Éx¥ c⁄° & 
b
Ë{  
	`to_ex¥
◊.
	`˘x
(), 
	`Z3_mk_bv§em
◊.˘x(),á, b)); 
	}
}

1617 
ölöe
 
ex¥
 
	$§em
(
ex¥
 c⁄° & 
a
, 
b
Ë{  
	`§em
◊,á.
	`˘x
().
	`num_vÆ
(b,á.
	`gë_s‹t
())); 
	}
}

1618 
ölöe
 
ex¥
 
	$§em
(
a
, 
ex¥
 c⁄° & 
b
Ë{  
	`§em
(b.
	`˘x
().
	`num_vÆ
◊, b.
	`gë_s‹t
()), b); 
	}
}

1623 
ölöe
 
ex¥
 
	$smod
(
ex¥
 c⁄° & 
a
,Éx¥ c⁄° & 
b
Ë{  
	`to_ex¥
◊.
	`˘x
(), 
	`Z3_mk_bvsmod
◊.˘x(),á, b)); 
	}
}

1624 
ölöe
 
ex¥
 
	$smod
(
ex¥
 c⁄° & 
a
, 
b
Ë{  
	`smod
◊,á.
	`˘x
().
	`num_vÆ
(b,á.
	`gë_s‹t
())); 
	}
}

1625 
ölöe
 
ex¥
 
	$smod
(
a
, 
ex¥
 c⁄° & 
b
Ë{  
	`smod
(b.
	`˘x
().
	`num_vÆ
◊, b.
	`gë_s‹t
()), b); 
	}
}

1630 
ölöe
 
ex¥
 
	$uªm
(
ex¥
 c⁄° & 
a
,Éx¥ c⁄° & 
b
Ë{  
	`to_ex¥
◊.
	`˘x
(), 
	`Z3_mk_bvuªm
◊.˘x(),á, b)); 
	}
}

1631 
ölöe
 
ex¥
 
	$uªm
(
ex¥
 c⁄° & 
a
, 
b
Ë{  
	`uªm
◊,á.
	`˘x
().
	`num_vÆ
(b,á.
	`gë_s‹t
())); 
	}
}

1632 
ölöe
 
ex¥
 
	$uªm
(
a
, 
ex¥
 c⁄° & 
b
Ë{  
	`uªm
(b.
	`˘x
().
	`num_vÆ
◊, b.
	`gë_s‹t
()), b); 
	}
}

1637 
ölöe
 
ex¥
 
	$shl
(
ex¥
 c⁄° & 
a
,Éx¥ c⁄° & 
b
Ë{  
	`to_ex¥
◊.
	`˘x
(), 
	`Z3_mk_bvshl
◊.˘x(),á, b)); 
	}
}

1638 
ölöe
 
ex¥
 
	$shl
(
ex¥
 c⁄° & 
a
, 
b
Ë{  
	`shl
◊,á.
	`˘x
().
	`num_vÆ
(b,á.
	`gë_s‹t
())); 
	}
}

1639 
ölöe
 
ex¥
 
	$shl
(
a
, 
ex¥
 c⁄° & 
b
Ë{  
	`shl
(b.
	`˘x
().
	`num_vÆ
◊, b.
	`gë_s‹t
()), b); 
	}
}

1644 
ölöe
 
ex¥
 
	$lshr
(
ex¥
 c⁄° & 
a
,Éx¥ c⁄° & 
b
Ë{  
	`to_ex¥
◊.
	`˘x
(), 
	`Z3_mk_bvlshr
◊.˘x(),á, b)); 
	}
}

1645 
ölöe
 
ex¥
 
	$lshr
(
ex¥
 c⁄° & 
a
, 
b
Ë{  
	`lshr
◊,á.
	`˘x
().
	`num_vÆ
(b,á.
	`gë_s‹t
())); 
	}
}

1646 
ölöe
 
ex¥
 
	$lshr
(
a
, 
ex¥
 c⁄° & 
b
Ë{  
	`lshr
(b.
	`˘x
().
	`num_vÆ
◊, b.
	`gë_s‹t
()), b); 
	}
}

1651 
ölöe
 
ex¥
 
	$ashr
(
ex¥
 c⁄° & 
a
,Éx¥ c⁄° & 
b
Ë{  
	`to_ex¥
◊.
	`˘x
(), 
	`Z3_mk_bvashr
◊.˘x(),á, b)); 
	}
}

1652 
ölöe
 
ex¥
 
	$ashr
(
ex¥
 c⁄° & 
a
, 
b
Ë{  
	`ashr
◊,á.
	`˘x
().
	`num_vÆ
(b,á.
	`gë_s‹t
())); 
	}
}

1653 
ölöe
 
ex¥
 
	$ashr
(
a
, 
ex¥
 c⁄° & 
b
Ë{  
	`ashr
(b.
	`˘x
().
	`num_vÆ
◊, b.
	`gë_s‹t
()), b); 
	}
}

1658 
ölöe
 
ex¥
 
	$zext
(
ex¥
 c⁄° & 
a
, 
i
Ë{  
	`to_ex¥
◊.
	`˘x
(), 
	`Z3_mk_zîo_ext
◊.˘x(), i,á)); 
	}
}

1663 
ölöe
 
ex¥
 
	$£xt
(
ex¥
 c⁄° & 
a
, 
i
Ë{  
	`to_ex¥
◊.
	`˘x
(), 
	`Z3_mk_sign_ext
◊.˘x(), i,á)); 
	}
}

1665 
	gãm∂©e
<
ty≥«me
 
	gT
> 
˛ass
 
	gˇ°_a°
;

1667 
	gãm∂©e
<> 
˛ass
 
	gˇ°_a°
<
	ga°
> {

1668 
	gpublic
:

1669 
a°
 
›î©‹
()(
c⁄ãxt
 & 
c
, 
Z3_a°
 
	ga
Ë{ á°(c, 
a
); }

1672 
	gãm∂©e
<> 
˛ass
 
	gˇ°_a°
<
	gex¥
> {

1673 
	gpublic
:

1674 
ex¥
 
›î©‹
()(
c⁄ãxt
 & 
c
, 
Z3_a°
 
	ga
) {

1675 
as£π
(
Z3_gë_a°_köd
(
c
, 
a
Ë=
Z3_NUMERAL_AST
 ||

1676 
Z3_gë_a°_köd
(
c
, 
a
Ë=
Z3_APP_AST
 ||

1677 
Z3_gë_a°_köd
(
c
, 
a
Ë=
Z3_QUANTIFIER_AST
 ||

1678 
Z3_gë_a°_köd
(
c
, 
a
Ë=
Z3_VAR_AST
);

1679  
ex¥
(
c
, 
a
);

1683 
	gãm∂©e
<> 
˛ass
 
	gˇ°_a°
<
	gs‹t
> {

1684 
	gpublic
:

1685 
s‹t
 
›î©‹
()(
c⁄ãxt
 & 
c
, 
Z3_a°
 
	ga
) {

1686 
as£π
(
Z3_gë_a°_köd
(
c
, 
a
Ë=
Z3_SORT_AST
);

1687  
s‹t
(
c
, 
ªöãΩªt_ˇ°
<
Z3_s‹t
>(
a
));

1691 
	gãm∂©e
<> 
˛ass
 
	gˇ°_a°
<
	gfunc_de˛
> {

1692 
	gpublic
:

1693 
func_de˛
 
›î©‹
()(
c⁄ãxt
 & 
c
, 
Z3_a°
 
	ga
) {

1694 
as£π
(
Z3_gë_a°_köd
(
c
, 
a
Ë=
Z3_FUNC_DECL_AST
);

1695  
func_de˛
(
c
, 
ªöãΩªt_ˇ°
<
Z3_func_de˛
>(
a
));

1699 
	gãm∂©e
<
ty≥«me
 
	gT
>

1700 ˛as†
	ca°_ve˘‹_çl
 : 
public
 
obje˘
 {

1701 
Z3_a°_ve˘‹
 
m_ve˘‹
;

1702 
öô
(
Z3_a°_ve˘‹
 
v
Ë{ 
Z3_a°_ve˘‹_öc_ªf
(
˘x
(), v); 
	gm_ve˘‹
 = v; }

1703 
	gpublic
:

1704 
a°_ve˘‹_çl
(
c⁄ãxt
 & 
c
):
obje˘
(cË{ 
öô
(
Z3_mk_a°_ve˘‹
(c)); }

1705 
a°_ve˘‹_çl
(
c⁄ãxt
 & 
c
, 
Z3_a°_ve˘‹
 
v
):
obje˘
(cË{ 
öô
(v); }

1706 
a°_ve˘‹_çl
◊°_ve˘‹_ç»c⁄° & 
s
):
obje˘
(s), 
m_ve˘‹
(s.m_ve˘‹Ë{ 
Z3_a°_ve˘‹_öc_ªf
(
˘x
(), m_vector); }

1707 ~
a°_ve˘‹_çl
(Ë{ 
Z3_a°_ve˘‹_dec_ªf
(
˘x
(), 
m_ve˘‹
); }

1708 
›î©‹
 
Z3_a°_ve˘‹
(Ëc⁄° {  
	gm_ve˘‹
; }

1709 
size
(Ëc⁄° {  
Z3_a°_ve˘‹_size
(
˘x
(), 
m_ve˘‹
); }

1710 
T
 
	g›î©‹
[](
	gi
Ëc⁄° { 
as£π
(0 <
i
); 
Z3_a°
 
	gr
 = 
Z3_a°_ve˘‹_gë
(
˘x
(), 
m_ve˘‹
, i); 
check_îr‹
();  
	gˇ°_a°
<
	gT
>()(ctx(),Ñ); }

1711 
push_back
(
T
 c⁄° & 
e
Ë{ 
Z3_a°_ve˘‹_push
(
˘x
(), 
m_ve˘‹
,É); 
check_îr‹
(); }

1712 
ªsize
(
sz
Ë{ 
Z3_a°_ve˘‹_ªsize
(
˘x
(), 
m_ve˘‹
, sz); 
check_îr‹
(); }

1713 
T
 
back
(Ëc⁄° {  
	g›î©‹
[](
size
() - 1); }

1714 
p›_back
(Ë{ 
as£π
(
size
(Ë> 0); 
ªsize
(size() - 1); }

1715 
boﬁ
 
em±y
(Ëc⁄° {  
size
() == 0; }

1716 
	ga°_ve˘‹_çl
 & 
	g›î©‹
=(
a°_ve˘‹_çl
 c⁄° & 
s
) {

1717 
Z3_a°_ve˘‹_öc_ªf
(
s
.
˘x
(), s.
m_ve˘‹
);

1718 
Z3_a°_ve˘‹_dec_ªf
(
˘x
(), 
m_ve˘‹
);

1719 
	gm_˘x
 = 
s
.
m_˘x
;

1720 
	gm_ve˘‹
 = 
s
.
m_ve˘‹
;

1721  *
	gthis
;

1731 ˛as†
	côî©‹
 {

1732 
a°_ve˘‹_çl
 c⁄°* 
	gm_ve˘‹
;

1733 
	gm_ödex
;

1734 
	gpublic
:

1735 
ôî©‹
(
a°_ve˘‹_çl
 c⁄°* 
v
, 
i
): 
m_ve˘‹
(v), 
m_ödex
(i) {}

1736 
ôî©‹
(ôî©‹& 
Ÿhî
): 
m_ve˘‹
(Ÿhî.m_ve˘‹), 
m_ödex
(other.m_index) {}

1737 
ôî©‹
 
	g›î©‹
=(ôî©‹ c⁄°& 
Ÿhî
Ë{ 
m_ve˘‹
 = othî.m_ve˘‹; 
	gm_ödex
 = othî.
m_ödex
;  *
	gthis
; }

1739 
boﬁ
 
	g›î©‹
==(
ôî©‹
 c⁄°& 
Ÿhî
) {

1740  
Ÿhî
.
m_ödex
 == m_index;

1742 
boﬁ
 
	g›î©‹
!=(
ôî©‹
 c⁄°& 
Ÿhî
) {

1743  
Ÿhî
.
m_ödex
 != m_index;

1745 
	gôî©‹
& 
	g›î©‹
++() {

1746 ++
	gm_ödex
;

1747  *
	gthis
;

1749 
ôî©‹
 
	g›î©‹
++(Ë{ iãøt‹ 
	gtmp
 = *
this
; ++
	gm_ödex
; Åmp; }

1750 
T
 * 
	g›î©‹
->() const {  &(operator*()); }

1751 
T
 
	g›î©‹
*(Ëc⁄° {  (*
	gm_ve˘‹
)[
m_ödex
]; }

1753 
ôî©‹
 
begö
(Ëc⁄° {  iãøt‹(
this
, 0); }

1754 
ôî©‹
 
íd
(Ëc⁄° {  iãøt‹(
this
, 
size
()); }

1755 
‰õnd
 
	g°d
::
o°ªam
 & 
›î©‹
<<(
°d
::o°ªam & 
out
, 
a°_ve˘‹_çl
 c⁄° & 
	gv
Ë{ 
	gout
 << 
Z3_a°_ve˘‹_to_°rög
(
v
.
˘x
(), v);  out; }

1759 
	gãm∂©e
<
ty≥«me
 
	gT
>

1760 
	gãm∂©e
<
ty≥«me
 
	gT2
>

1761 
	g¨øy
<
	gT
>::
¨øy
(
a°_ve˘‹_çl
<
T2
> c⁄° & 
v
) {

1762 
m_¨øy
 = 
√w
 
T
[
v
.
size
()];

1763 
	gm_size
 = 
v
.
size
();

1764 
	gi
 = 0; i < 
	gm_size
; i++) {

1765 
	gm_¨øy
[
i
] = 
v
[i];

1771 
ölöe
 
ex¥
 
	$f‹Æl
(
ex¥
 c⁄° & 
x
,Éx¥ c⁄° & 
b
) {

1772 
	`check_c⁄ãxt
(
x
, 
b
);

1773 
Z3_≠p
 
v¨s
[] = {(Z3_≠pË
x
};

1774 
Z3_a°
 
r
 = 
	`Z3_mk_f‹Æl_c⁄°
(
b
.
	`˘x
(), 0, 1, 
v¨s
, 0, 0, b); b.
	`check_îr‹
();  
	`ex¥
(b.ctx(),Ñ);

1775 
	}
}

1776 
ölöe
 
ex¥
 
	$f‹Æl
(
ex¥
 c⁄° & 
x1
,Éx¥ c⁄° & 
x2
,Éx¥ c⁄° & 
b
) {

1777 
	`check_c⁄ãxt
(
x1
, 
b
); check_c⁄ãxt(
x2
, b);

1778 
Z3_≠p
 
v¨s
[] = {(Z3_≠pË
x1
, (Z3_≠pË
x2
};

1779 
Z3_a°
 
r
 = 
	`Z3_mk_f‹Æl_c⁄°
(
b
.
	`˘x
(), 0, 2, 
v¨s
, 0, 0, b); b.
	`check_îr‹
();  
	`ex¥
(b.ctx(),Ñ);

1780 
	}
}

1781 
ölöe
 
ex¥
 
	$f‹Æl
(
ex¥
 c⁄° & 
x1
,Éx¥ c⁄° & 
x2
,Éx¥ c⁄° & 
x3
,Éx¥ c⁄° & 
b
) {

1782 
	`check_c⁄ãxt
(
x1
, 
b
); check_c⁄ãxt(
x2
, b); check_c⁄ãxt(
x3
, b);

1783 
Z3_≠p
 
v¨s
[] = {(Z3_≠pË
x1
, (Z3_≠pË
x2
, (Z3_≠pË
x3
 };

1784 
Z3_a°
 
r
 = 
	`Z3_mk_f‹Æl_c⁄°
(
b
.
	`˘x
(), 0, 3, 
v¨s
, 0, 0, b); b.
	`check_îr‹
();  
	`ex¥
(b.ctx(),Ñ);

1785 
	}
}

1786 
ölöe
 
ex¥
 
	$f‹Æl
(
ex¥
 c⁄° & 
x1
,Éx¥ c⁄° & 
x2
,Éx¥ c⁄° & 
x3
,Éx¥ c⁄° & 
x4
,Éx¥ c⁄° & 
b
) {

1787 
	`check_c⁄ãxt
(
x1
, 
b
); check_c⁄ãxt(
x2
, b); check_c⁄ãxt(
x3
, b); check_c⁄ãxt(
x4
, b);

1788 
Z3_≠p
 
v¨s
[] = {(Z3_≠pË
x1
, (Z3_≠pË
x2
, (Z3_≠pË
x3
, (Z3_≠pË
x4
 };

1789 
Z3_a°
 
r
 = 
	`Z3_mk_f‹Æl_c⁄°
(
b
.
	`˘x
(), 0, 4, 
v¨s
, 0, 0, b); b.
	`check_îr‹
();  
	`ex¥
(b.ctx(),Ñ);

1790 
	}
}

1791 
ölöe
 
ex¥
 
	$f‹Æl
(
ex¥_ve˘‹
 c⁄° & 
xs
, 
ex¥
 c⁄° & 
b
) {

1792 
¨øy
<
Z3_≠p
> 
	`v¨s
(
xs
);

1793 
Z3_a°
 
r
 = 
	`Z3_mk_f‹Æl_c⁄°
(
b
.
	`˘x
(), 0, 
v¨s
.
	`size
(), v¨s.
	`±r
(), 0, 0, b); b.
	`check_îr‹
();  
	`ex¥
(b.ctx(),Ñ);

1794 
	}
}

1795 
ölöe
 
ex¥
 
	$exi°s
(
ex¥
 c⁄° & 
x
,Éx¥ c⁄° & 
b
) {

1796 
	`check_c⁄ãxt
(
x
, 
b
);

1797 
Z3_≠p
 
v¨s
[] = {(Z3_≠pË
x
};

1798 
Z3_a°
 
r
 = 
	`Z3_mk_exi°s_c⁄°
(
b
.
	`˘x
(), 0, 1, 
v¨s
, 0, 0, b); b.
	`check_îr‹
();  
	`ex¥
(b.ctx(),Ñ);

1799 
	}
}

1800 
ölöe
 
ex¥
 
	$exi°s
(
ex¥
 c⁄° & 
x1
,Éx¥ c⁄° & 
x2
,Éx¥ c⁄° & 
b
) {

1801 
	`check_c⁄ãxt
(
x1
, 
b
); check_c⁄ãxt(
x2
, b);

1802 
Z3_≠p
 
v¨s
[] = {(Z3_≠pË
x1
, (Z3_≠pË
x2
};

1803 
Z3_a°
 
r
 = 
	`Z3_mk_exi°s_c⁄°
(
b
.
	`˘x
(), 0, 2, 
v¨s
, 0, 0, b); b.
	`check_îr‹
();  
	`ex¥
(b.ctx(),Ñ);

1804 
	}
}

1805 
ölöe
 
ex¥
 
	$exi°s
(
ex¥
 c⁄° & 
x1
,Éx¥ c⁄° & 
x2
,Éx¥ c⁄° & 
x3
,Éx¥ c⁄° & 
b
) {

1806 
	`check_c⁄ãxt
(
x1
, 
b
); check_c⁄ãxt(
x2
, b); check_c⁄ãxt(
x3
, b);

1807 
Z3_≠p
 
v¨s
[] = {(Z3_≠pË
x1
, (Z3_≠pË
x2
, (Z3_≠pË
x3
 };

1808 
Z3_a°
 
r
 = 
	`Z3_mk_exi°s_c⁄°
(
b
.
	`˘x
(), 0, 3, 
v¨s
, 0, 0, b); b.
	`check_îr‹
();  
	`ex¥
(b.ctx(),Ñ);

1809 
	}
}

1810 
ölöe
 
ex¥
 
	$exi°s
(
ex¥
 c⁄° & 
x1
,Éx¥ c⁄° & 
x2
,Éx¥ c⁄° & 
x3
,Éx¥ c⁄° & 
x4
,Éx¥ c⁄° & 
b
) {

1811 
	`check_c⁄ãxt
(
x1
, 
b
); check_c⁄ãxt(
x2
, b); check_c⁄ãxt(
x3
, b); check_c⁄ãxt(
x4
, b);

1812 
Z3_≠p
 
v¨s
[] = {(Z3_≠pË
x1
, (Z3_≠pË
x2
, (Z3_≠pË
x3
, (Z3_≠pË
x4
 };

1813 
Z3_a°
 
r
 = 
	`Z3_mk_exi°s_c⁄°
(
b
.
	`˘x
(), 0, 4, 
v¨s
, 0, 0, b); b.
	`check_îr‹
();  
	`ex¥
(b.ctx(),Ñ);

1814 
	}
}

1815 
ölöe
 
ex¥
 
	$exi°s
(
ex¥_ve˘‹
 c⁄° & 
xs
, 
ex¥
 c⁄° & 
b
) {

1816 
¨øy
<
Z3_≠p
> 
	`v¨s
(
xs
);

1817 
Z3_a°
 
r
 = 
	`Z3_mk_exi°s_c⁄°
(
b
.
	`˘x
(), 0, 
v¨s
.
	`size
(), v¨s.
	`±r
(), 0, 0, b); b.
	`check_îr‹
();  
	`ex¥
(b.ctx(),Ñ);

1818 
	}
}

1819 
ölöe
 
ex¥
 
	$œmbda
(
ex¥
 c⁄° & 
x
,Éx¥ c⁄° & 
b
) {

1820 
	`check_c⁄ãxt
(
x
, 
b
);

1821 
Z3_≠p
 
v¨s
[] = {(Z3_≠pË
x
};

1822 
Z3_a°
 
r
 = 
	`Z3_mk_œmbda_c⁄°
(
b
.
	`˘x
(), 1, 
v¨s
, b); b.
	`check_îr‹
();  
	`ex¥
(b.ctx(),Ñ);

1823 
	}
}

1824 
ölöe
 
ex¥
 
	$œmbda
(
ex¥
 c⁄° & 
x1
,Éx¥ c⁄° & 
x2
,Éx¥ c⁄° & 
b
) {

1825 
	`check_c⁄ãxt
(
x1
, 
b
); check_c⁄ãxt(
x2
, b);

1826 
Z3_≠p
 
v¨s
[] = {(Z3_≠pË
x1
, (Z3_≠pË
x2
};

1827 
Z3_a°
 
r
 = 
	`Z3_mk_œmbda_c⁄°
(
b
.
	`˘x
(), 2, 
v¨s
, b); b.
	`check_îr‹
();  
	`ex¥
(b.ctx(),Ñ);

1828 
	}
}

1829 
ölöe
 
ex¥
 
	$œmbda
(
ex¥
 c⁄° & 
x1
,Éx¥ c⁄° & 
x2
,Éx¥ c⁄° & 
x3
,Éx¥ c⁄° & 
b
) {

1830 
	`check_c⁄ãxt
(
x1
, 
b
); check_c⁄ãxt(
x2
, b); check_c⁄ãxt(
x3
, b);

1831 
Z3_≠p
 
v¨s
[] = {(Z3_≠pË
x1
, (Z3_≠pË
x2
, (Z3_≠pË
x3
 };

1832 
Z3_a°
 
r
 = 
	`Z3_mk_œmbda_c⁄°
(
b
.
	`˘x
(), 3, 
v¨s
, b); b.
	`check_îr‹
();  
	`ex¥
(b.ctx(),Ñ);

1833 
	}
}

1834 
ölöe
 
ex¥
 
	$œmbda
(
ex¥
 c⁄° & 
x1
,Éx¥ c⁄° & 
x2
,Éx¥ c⁄° & 
x3
,Éx¥ c⁄° & 
x4
,Éx¥ c⁄° & 
b
) {

1835 
	`check_c⁄ãxt
(
x1
, 
b
); check_c⁄ãxt(
x2
, b); check_c⁄ãxt(
x3
, b); check_c⁄ãxt(
x4
, b);

1836 
Z3_≠p
 
v¨s
[] = {(Z3_≠pË
x1
, (Z3_≠pË
x2
, (Z3_≠pË
x3
, (Z3_≠pË
x4
 };

1837 
Z3_a°
 
r
 = 
	`Z3_mk_œmbda_c⁄°
(
b
.
	`˘x
(), 4, 
v¨s
, b); b.
	`check_îr‹
();  
	`ex¥
(b.ctx(),Ñ);

1838 
	}
}

1839 
ölöe
 
ex¥
 
	$œmbda
(
ex¥_ve˘‹
 c⁄° & 
xs
, 
ex¥
 c⁄° & 
b
) {

1840 
¨øy
<
Z3_≠p
> 
	`v¨s
(
xs
);

1841 
Z3_a°
 
r
 = 
	`Z3_mk_œmbda_c⁄°
(
b
.
	`˘x
(), 
v¨s
.
	`size
(), v¨s.
	`±r
(), b); b.
	`check_îr‹
();  
	`ex¥
(b.ctx(),Ñ);

1842 
	}
}

1844 
ölöe
 
ex¥
 
	$pbÀ
(
ex¥_ve˘‹
 c⁄°& 
es
, c⁄°* 
c€ffs
, 
bound
) {

1845 
	`as£π
(
es
.
	`size
() > 0);

1846 
c⁄ãxt
& 
˘x
 = 
es
[0].
	`˘x
();

1847 
¨øy
<
Z3_a°
> 
	`_es
(
es
);

1848 
Z3_a°
 
r
 = 
	`Z3_mk_pbÀ
(
˘x
, 
_es
.
	`size
(), _es.
	`±r
(), 
c€ffs
, 
bound
);

1849 
˘x
.
	`check_îr‹
();

1850  
	`ex¥
(
˘x
, 
r
);

1851 
	}
}

1852 
ölöe
 
ex¥
 
	$pbge
(
ex¥_ve˘‹
 c⁄°& 
es
, c⁄°* 
c€ffs
, 
bound
) {

1853 
	`as£π
(
es
.
	`size
() > 0);

1854 
c⁄ãxt
& 
˘x
 = 
es
[0].
	`˘x
();

1855 
¨øy
<
Z3_a°
> 
	`_es
(
es
);

1856 
Z3_a°
 
r
 = 
	`Z3_mk_pbge
(
˘x
, 
_es
.
	`size
(), _es.
	`±r
(), 
c€ffs
, 
bound
);

1857 
˘x
.
	`check_îr‹
();

1858  
	`ex¥
(
˘x
, 
r
);

1859 
	}
}

1860 
ölöe
 
ex¥
 
	$pbeq
(
ex¥_ve˘‹
 c⁄°& 
es
, c⁄°* 
c€ffs
, 
bound
) {

1861 
	`as£π
(
es
.
	`size
() > 0);

1862 
c⁄ãxt
& 
˘x
 = 
es
[0].
	`˘x
();

1863 
¨øy
<
Z3_a°
> 
	`_es
(
es
);

1864 
Z3_a°
 
r
 = 
	`Z3_mk_pbeq
(
˘x
, 
_es
.
	`size
(), _es.
	`±r
(), 
c€ffs
, 
bound
);

1865 
˘x
.
	`check_îr‹
();

1866  
	`ex¥
(
˘x
, 
r
);

1867 
	}
}

1868 
ölöe
 
ex¥
 
	$©mo°
(
ex¥_ve˘‹
 c⁄°& 
es
, 
bound
) {

1869 
	`as£π
(
es
.
	`size
() > 0);

1870 
c⁄ãxt
& 
˘x
 = 
es
[0].
	`˘x
();

1871 
¨øy
<
Z3_a°
> 
	`_es
(
es
);

1872 
Z3_a°
 
r
 = 
	`Z3_mk_©mo°
(
˘x
, 
_es
.
	`size
(), _es.
	`±r
(), 
bound
);

1873 
˘x
.
	`check_îr‹
();

1874  
	`ex¥
(
˘x
, 
r
);

1875 
	}
}

1876 
ölöe
 
ex¥
 
	$©Àa°
(
ex¥_ve˘‹
 c⁄°& 
es
, 
bound
) {

1877 
	`as£π
(
es
.
	`size
() > 0);

1878 
c⁄ãxt
& 
˘x
 = 
es
[0].
	`˘x
();

1879 
¨øy
<
Z3_a°
> 
	`_es
(
es
);

1880 
Z3_a°
 
r
 = 
	`Z3_mk_©Àa°
(
˘x
, 
_es
.
	`size
(), _es.
	`±r
(), 
bound
);

1881 
˘x
.
	`check_îr‹
();

1882  
	`ex¥
(
˘x
, 
r
);

1883 
	}
}

1884 
ölöe
 
ex¥
 
	$sum
(
ex¥_ve˘‹
 c⁄°& 
¨gs
) {

1885 
	`as£π
(
¨gs
.
	`size
() > 0);

1886 
c⁄ãxt
& 
˘x
 = 
¨gs
[0].
	`˘x
();

1887 
¨øy
<
Z3_a°
> 
	`_¨gs
(
¨gs
);

1888 
Z3_a°
 
r
 = 
	`Z3_mk_add
(
˘x
, 
_¨gs
.
	`size
(), _¨gs.
	`±r
());

1889 
˘x
.
	`check_îr‹
();

1890  
	`ex¥
(
˘x
, 
r
);

1891 
	}
}

1893 
ölöe
 
ex¥
 
	$di°ö˘
(
ex¥_ve˘‹
 c⁄°& 
¨gs
) {

1894 
	`as£π
(
¨gs
.
	`size
() > 0);

1895 
c⁄ãxt
& 
˘x
 = 
¨gs
[0].
	`˘x
();

1896 
¨øy
<
Z3_a°
> 
	`_¨gs
(
¨gs
);

1897 
Z3_a°
 
r
 = 
	`Z3_mk_di°ö˘
(
˘x
, 
_¨gs
.
	`size
(), _¨gs.
	`±r
());

1898 
˘x
.
	`check_îr‹
();

1899  
	`ex¥
(
˘x
, 
r
);

1900 
	}
}

1902 
ölöe
 
ex¥
 
	$c⁄ˇt
(
ex¥
 c⁄°& 
a
,Éx¥ c⁄°& 
b
) {

1903 
	`check_c⁄ãxt
(
a
, 
b
);

1904 
Z3_a°
 
r
;

1905 i‡(
	`Z3_is_£q_s‹t
(
a
.
	`˘x
(),á.
	`gë_s‹t
())) {

1906 
Z3_a°
 
_¨gs
[2] = { 
a
, 
b
 };

1907 
r
 = 
	`Z3_mk_£q_c⁄ˇt
(
a
.
	`˘x
(), 2, 
_¨gs
);

1909 i‡(
	`Z3_is_ª_s‹t
(
a
.
	`˘x
(),á.
	`gë_s‹t
())) {

1910 
Z3_a°
 
_¨gs
[2] = { 
a
, 
b
 };

1911 
r
 = 
	`Z3_mk_ª_c⁄ˇt
(
a
.
	`˘x
(), 2, 
_¨gs
);

1914 
r
 = 
	`Z3_mk_c⁄ˇt
(
a
.
	`˘x
(),á, 
b
);

1916 
a
.
	`˘x
().
	`check_îr‹
();

1917  
	`ex¥
(
a
.
	`˘x
(), 
r
);

1918 
	}
}

1920 
ölöe
 
ex¥
 
	$c⁄ˇt
(
ex¥_ve˘‹
 c⁄°& 
¨gs
) {

1921 
Z3_a°
 
r
;

1922 
	`as£π
(
¨gs
.
	`size
() > 0);

1923 i‡(
¨gs
.
	`size
() == 1) {

1924  
¨gs
[0];

1926 
c⁄ãxt
& 
˘x
 = 
¨gs
[0].
	`˘x
();

1927 
¨øy
<
Z3_a°
> 
	`_¨gs
(
¨gs
);

1928 i‡(
	`Z3_is_£q_s‹t
(
˘x
, 
¨gs
[0].
	`gë_s‹t
())) {

1929 
r
 = 
	`Z3_mk_£q_c⁄ˇt
(
˘x
, 
_¨gs
.
	`size
(), _¨gs.
	`±r
());

1931 i‡(
	`Z3_is_ª_s‹t
(
˘x
, 
¨gs
[0].
	`gë_s‹t
())) {

1932 
r
 = 
	`Z3_mk_ª_c⁄ˇt
(
˘x
, 
_¨gs
.
	`size
(), _¨gs.
	`±r
());

1935 
r
 = 
_¨gs
[
¨gs
.
	`size
()-1];

1936 
i
 = 
¨gs
.
	`size
()-1; i > 0; ) {

1937 --
i
;

1938 
r
 = 
	`Z3_mk_c⁄ˇt
(
˘x
, 
_¨gs
[
i
],Ñ);

1939 
˘x
.
	`check_îr‹
();

1942 
˘x
.
	`check_îr‹
();

1943  
	`ex¥
(
˘x
, 
r
);

1944 
	}
}

1946 
ölöe
 
ex¥
 
	$mk_‹
(
ex¥_ve˘‹
 c⁄°& 
¨gs
) {

1947 
¨øy
<
Z3_a°
> 
	`_¨gs
(
¨gs
);

1948 
Z3_a°
 
r
 = 
	`Z3_mk_‹
(
¨gs
.
	`˘x
(), 
_¨gs
.
	`size
(), _¨gs.
	`±r
());

1949 
¨gs
.
	`check_îr‹
();

1950  
	`ex¥
(
¨gs
.
	`˘x
(), 
r
);

1951 
	}
}

1952 
ölöe
 
ex¥
 
	$mk_™d
(
ex¥_ve˘‹
 c⁄°& 
¨gs
) {

1953 
¨øy
<
Z3_a°
> 
	`_¨gs
(
¨gs
);

1954 
Z3_a°
 
r
 = 
	`Z3_mk_™d
(
¨gs
.
	`˘x
(), 
_¨gs
.
	`size
(), _¨gs.
	`±r
());

1955 
¨gs
.
	`check_îr‹
();

1956  
	`ex¥
(
¨gs
.
	`˘x
(), 
r
);

1957 
	}
}

1960 ˛as†
	cfunc_íåy
 : 
public
 
obje˘
 {

1961 
Z3_func_íåy
 
m_íåy
;

1962 
öô
(
Z3_func_íåy
 
e
) {

1963 
	gm_íåy
 = 
e
;

1964 
Z3_func_íåy_öc_ªf
(
˘x
(), 
m_íåy
);

1966 
	gpublic
:

1967 
func_íåy
(
c⁄ãxt
 & 
c
, 
Z3_func_íåy
 
e
):
obje˘
(cË{ 
öô
(e); }

1968 
func_íåy
(func_íåy c⁄° & 
s
):
obje˘
(sË{ 
öô
(s.
m_íåy
); }

1969 ~
func_íåy
(Ë{ 
Z3_func_íåy_dec_ªf
(
˘x
(), 
m_íåy
); }

1970 
›î©‹
 
Z3_func_íåy
(Ëc⁄° {  
	gm_íåy
; }

1971 
	gfunc_íåy
 & 
	g›î©‹
=(
func_íåy
 c⁄° & 
s
) {

1972 
Z3_func_íåy_öc_ªf
(
s
.
˘x
(), s.
m_íåy
);

1973 
Z3_func_íåy_dec_ªf
(
˘x
(), 
m_íåy
);

1974 
	gm_˘x
 = 
s
.
m_˘x
;

1975 
	gm_íåy
 = 
s
.
m_íåy
;

1976  *
	gthis
;

1978 
ex¥
 
vÆue
(Ëc⁄° { 
Z3_a°
 
	gr
 = 
Z3_func_íåy_gë_vÆue
(
˘x
(), 
m_íåy
); 
check_îr‹
(); Éx¥(˘x(), 
r
); }

1979 
num_¨gs
(Ëc⁄° { 
	gr
 = 
Z3_func_íåy_gë_num_¨gs
(
˘x
(), 
m_íåy
); 
check_îr‹
(); Ñ; }

1980 
ex¥
 
¨g
(
i
Ëc⁄° { 
Z3_a°
 
	gr
 = 
Z3_func_íåy_gë_¨g
(
˘x
(), 
m_íåy
, i); 
check_îr‹
(); Éx¥(˘x(), 
r
); }

1983 ˛as†
	cfunc_öãΩ
 : 
public
 
obje˘
 {

1984 
Z3_func_öãΩ
 
m_öãΩ
;

1985 
öô
(
Z3_func_öãΩ
 
e
) {

1986 
	gm_öãΩ
 = 
e
;

1987 
Z3_func_öãΩ_öc_ªf
(
˘x
(), 
m_öãΩ
);

1989 
	gpublic
:

1990 
func_öãΩ
(
c⁄ãxt
 & 
c
, 
Z3_func_öãΩ
 
e
):
obje˘
(cË{ 
öô
(e); }

1991 
func_öãΩ
(func_öãΩ c⁄° & 
s
):
obje˘
(sË{ 
öô
(s.
m_öãΩ
); }

1992 ~
func_öãΩ
(Ë{ 
Z3_func_öãΩ_dec_ªf
(
˘x
(), 
m_öãΩ
); }

1993 
›î©‹
 
Z3_func_öãΩ
(Ëc⁄° {  
	gm_öãΩ
; }

1994 
	gfunc_öãΩ
 & 
	g›î©‹
=(
func_öãΩ
 c⁄° & 
s
) {

1995 
Z3_func_öãΩ_öc_ªf
(
s
.
˘x
(), s.
m_öãΩ
);

1996 
Z3_func_öãΩ_dec_ªf
(
˘x
(), 
m_öãΩ
);

1997 
	gm_˘x
 = 
s
.
m_˘x
;

1998 
	gm_öãΩ
 = 
s
.
m_öãΩ
;

1999  *
	gthis
;

2001 
ex¥
 
ñ£_vÆue
(Ëc⁄° { 
Z3_a°
 
	gr
 = 
Z3_func_öãΩ_gë_ñ£
(
˘x
(), 
m_öãΩ
); 
check_îr‹
(); Éx¥(˘x(), 
r
); }

2002 
num_íåõs
(Ëc⁄° { 
	gr
 = 
Z3_func_öãΩ_gë_num_íåõs
(
˘x
(), 
m_öãΩ
); 
check_îr‹
(); Ñ; }

2003 
func_íåy
 
íåy
(
i
Ëc⁄° { 
Z3_func_íåy
 
	ge
 = 
Z3_func_öãΩ_gë_íåy
(
˘x
(), 
m_öãΩ
, i); 
check_îr‹
();  func_íåy(˘x(), 
e
); }

2004 
add_íåy
(
ex¥_ve˘‹
 c⁄°& 
¨gs
, 
ex¥
& 
vÆue
) {

2005 
Z3_func_öãΩ_add_íåy
(
˘x
(), 
m_öãΩ
, 
¨gs
, 
vÆue
);

2006 
check_îr‹
();

2008 
£t_ñ£
(
ex¥
& 
vÆue
) {

2009 
Z3_func_öãΩ_£t_ñ£
(
˘x
(), 
m_öãΩ
, 
vÆue
);

2010 
check_îr‹
();

2014 ˛as†
	cmodñ
 : 
public
 
obje˘
 {

2015 
Z3_modñ
 
m_modñ
;

2016 
öô
(
Z3_modñ
 
m
) {

2017 
	gm_modñ
 = 
m
;

2018 
Z3_modñ_öc_ªf
(
˘x
(), 
m
);

2020 
	gpublic
:

2021 
	så™¶©e
 {};

2022 
modñ
(
c⁄ãxt
 & 
c
):
obje˘
(cË{ 
öô
(
Z3_mk_modñ
(c)); }

2023 
modñ
(
c⁄ãxt
 & 
c
, 
Z3_modñ
 
m
):
obje˘
(cË{ 
öô
(m); }

2024 
modñ
(modñ c⁄° & 
s
):
obje˘
(sË{ 
öô
(s.
m_modñ
); }

2025 
modñ
(modñ& 
§c
, 
c⁄ãxt
& 
d°
, 
å™¶©e
Ë: 
obje˘
(d°Ë{ 
öô
(
Z3_modñ_å™¶©e
(§c.
˘x
(), src, dst)); }

2026 ~
modñ
(Ë{ 
Z3_modñ_dec_ªf
(
˘x
(), 
m_modñ
); }

2027 
›î©‹
 
Z3_modñ
(Ëc⁄° {  
	gm_modñ
; }

2028 
	gmodñ
 & 
	g›î©‹
=(
modñ
 c⁄° & 
s
) {

2029 
Z3_modñ_öc_ªf
(
s
.
˘x
(), s.
m_modñ
);

2030 
Z3_modñ_dec_ªf
(
˘x
(), 
m_modñ
);

2031 
	gm_˘x
 = 
s
.
m_˘x
;

2032 
	gm_modñ
 = 
s
.
m_modñ
;

2033  *
	gthis
;

2036 
ex¥
 
evÆ
”x¥ c⁄° & 
n
, 
boﬁ
 
modñ_com∂ëi⁄
=
Ál£
) const {

2037 
check_c⁄ãxt
(*
this
, 
n
);

2038 
Z3_a°
 
	gr
 = 0;

2039 
boﬁ
 
	g°©us
 = 
Z3_modñ_evÆ
(
˘x
(), 
m_modñ
, 
n
, 
modñ_com∂ëi⁄
, &
r
);

2040 
check_îr‹
();

2041 i‡(
	g°©us
 =
Ál£
 && 
˘x
().
íabÀ_ex˚±i⁄s
())

2042 
Z3_THROW
(
ex˚±i⁄
("failedÅoÉvaluateÉxpression"));

2043  
ex¥
(
˘x
(), 
r
);

2046 
num_c⁄°s
(Ëc⁄° {  
Z3_modñ_gë_num_c⁄°s
(
˘x
(), 
m_modñ
); }

2047 
num_funcs
(Ëc⁄° {  
Z3_modñ_gë_num_funcs
(
˘x
(), 
m_modñ
); }

2048 
func_de˛
 
gë_c⁄°_de˛
(
i
Ëc⁄° { 
Z3_func_de˛
 
	gr
 = 
Z3_modñ_gë_c⁄°_de˛
(
˘x
(), 
m_modñ
, i); 
check_îr‹
();  func_de˛(˘x(), 
r
); }

2049 
func_de˛
 
gë_func_de˛
(
i
Ëc⁄° { 
Z3_func_de˛
 
	gr
 = 
Z3_modñ_gë_func_de˛
(
˘x
(), 
m_modñ
, i); 
check_îr‹
();  func_de˛(˘x(), 
r
); }

2050 
size
(Ëc⁄° {  
num_c⁄°s
(Ë+ 
num_funcs
(); }

2051 
func_de˛
 
	g›î©‹
[](
	gi
) const {

2052 
as£π
(0 <
i
);

2053  
	g°©ic_ˇ°
<>(
	gi
Ë< 
num_c⁄°s
(Ë? 
gë_c⁄°_de˛
(
i
Ë: 
gë_func_de˛
(i -Çum_consts());

2059 
ex¥
 
gë_c⁄°_öãΩ
(
func_de˛
 
c
) const {

2060 
check_c⁄ãxt
(*
this
, 
c
);

2061 
Z3_a°
 
	gr
 = 
Z3_modñ_gë_c⁄°_öãΩ
(
˘x
(), 
m_modñ
, 
c
);

2062 
check_îr‹
();

2063  
ex¥
(
˘x
(), 
r
);

2065 
func_öãΩ
 
gë_func_öãΩ
(
func_de˛
 
f
) const {

2066 
check_c⁄ãxt
(*
this
, 
f
);

2067 
Z3_func_öãΩ
 
	gr
 = 
Z3_modñ_gë_func_öãΩ
(
˘x
(), 
m_modñ
, 
f
);

2068 
check_îr‹
();

2069  
func_öãΩ
(
˘x
(), 
r
);

2074 
boﬁ
 
has_öãΩ
(
func_de˛
 
f
) const {

2075 
check_c⁄ãxt
(*
this
, 
f
);

2076  
Z3_modñ_has_öãΩ
(
˘x
(), 
m_modñ
, 
f
);

2079 
func_öãΩ
 
add_func_öãΩ
(
func_de˛
& 
f
, 
ex¥
& 
ñ£_vÆ
) {

2080 
Z3_func_öãΩ
 
	gr
 = 
Z3_add_func_öãΩ
(
˘x
(), 
m_modñ
, 
f
, 
ñ£_vÆ
);

2081 
check_îr‹
();

2082  
func_öãΩ
(
˘x
(), 
r
);

2085 
add_c⁄°_öãΩ
(
func_de˛
& 
f
, 
ex¥
& 
vÆue
) {

2086 
Z3_add_c⁄°_öãΩ
(
˘x
(), 
m_modñ
, 
f
, 
vÆue
);

2087 
check_îr‹
();

2090 
‰õnd
 
	g°d
::
o°ªam
 & 
›î©‹
<<(
°d
::o°ªam & 
out
, 
modñ
 c⁄° & 
	gm
);

2092 
ölöe
 
	g°d
::
o°ªam
 & 
›î©‹
<<(
°d
::o°ªam & 
out
, 
modñ
 c⁄° & 
	gm
Ë{ 
	gout
 << 
Z3_modñ_to_°rög
(
m
.
˘x
(), m);  out; }

2094 ˛as†
	c°©s
 : 
public
 
obje˘
 {

2095 
Z3_°©s
 
m_°©s
;

2096 
öô
(
Z3_°©s
 
e
) {

2097 
	gm_°©s
 = 
e
;

2098 
Z3_°©s_öc_ªf
(
˘x
(), 
m_°©s
);

2100 
	gpublic
:

2101 
°©s
(
c⁄ãxt
 & 
c
):
obje˘
(c), 
m_°©s
(0) {}

2102 
°©s
(
c⁄ãxt
 & 
c
, 
Z3_°©s
 
e
):
obje˘
(cË{ 
öô
(e); }

2103 
°©s
(°©†c⁄° & 
s
):
obje˘
(sË{ 
öô
(s.
m_°©s
); }

2104 ~
°©s
(Ë{ i‡(
	gm_°©s
Ë
Z3_°©s_dec_ªf
(
˘x
(), 
m_°©s
); }

2105 
›î©‹
 
Z3_°©s
(Ëc⁄° {  
	gm_°©s
; }

2106 
	g°©s
 & 
	g›î©‹
=(
°©s
 c⁄° & 
s
) {

2107 
Z3_°©s_öc_ªf
(
s
.
˘x
(), s.
m_°©s
);

2108 i‡(
	gm_°©s
Ë
Z3_°©s_dec_ªf
(
˘x
(), 
m_°©s
);

2109 
	gm_˘x
 = 
s
.
m_˘x
;

2110 
	gm_°©s
 = 
s
.
m_°©s
;

2111  *
	gthis
;

2113 
size
(Ëc⁄° {  
Z3_°©s_size
(
˘x
(), 
m_°©s
); }

2114 
	g°d
::
°rög
 
key
(
i
Ëc⁄° { 
Z3_°rög
 
s
 = 
Z3_°©s_gë_key
(
˘x
(), 
m_°©s
, i); 
check_îr‹
();  
	gs
; }

2115 
boﬁ
 
is_uöt
(
i
Ëc⁄° { boﬁ 
	gr
 = 
Z3_°©s_is_uöt
(
˘x
(), 
m_°©s
, i); 
check_îr‹
(); Ñ; }

2116 
boﬁ
 
is_doubÀ
(
i
Ëc⁄° { boﬁ 
	gr
 = 
Z3_°©s_is_doubÀ
(
˘x
(), 
m_°©s
, i); 
check_îr‹
(); Ñ; }

2117 
uöt_vÆue
(
i
Ëc⁄° { 
	gr
 = 
Z3_°©s_gë_uöt_vÆue
(
˘x
(), 
m_°©s
, i); 
check_îr‹
(); Ñ; }

2118 
doubÀ_vÆue
(
i
Ëc⁄° { 
	gr
 = 
Z3_°©s_gë_doubÀ_vÆue
(
˘x
(), 
m_°©s
, i); 
check_îr‹
(); Ñ; }

2119 
‰õnd
 
	g°d
::
o°ªam
 & 
›î©‹
<<(
°d
::o°ªam & 
out
, 
°©s
 c⁄° & 
	gs
);

2121 
ölöe
 
	g°d
::
o°ªam
 & 
›î©‹
<<(
°d
::o°ªam & 
out
, 
°©s
 c⁄° & 
	gs
Ë{ 
	gout
 << 
Z3_°©s_to_°rög
(
s
.
˘x
(), s);  out; }

2124 
ölöe
 
	g°d
::
o°ªam
 & 
›î©‹
<<(
°d
::o°ªam & 
out
, 
check_ªsu…
 
	gr
) {

2125 i‡(
	gr
 =
unßt
Ë
out
 << "unsat";

2126 i‡(
	gr
 =
ßt
Ë
out
 << "sat";

2127 
	gout
 << "unknown";

2128  
	gout
;

2132 ˛as†
	csﬁvî
 : 
public
 
obje˘
 {

2133 
Z3_sﬁvî
 
m_sﬁvî
;

2134 
öô
(
Z3_sﬁvî
 
s
) {

2135 
	gm_sﬁvî
 = 
s
;

2136 
Z3_sﬁvî_öc_ªf
(
˘x
(), 
s
);

2138 
	gpublic
:

2139 
	ssim∂e
 {};

2140 
	så™¶©e
 {};

2141 
sﬁvî
(
c⁄ãxt
 & 
c
):
obje˘
(cË{ 
öô
(
Z3_mk_sﬁvî
(c)); }

2142 
sﬁvî
(
c⁄ãxt
 & 
c
, 
sim∂e
):
obje˘
(cË{ 
öô
(
Z3_mk_sim∂e_sﬁvî
(c)); }

2143 
sﬁvî
(
c⁄ãxt
 & 
c
, 
Z3_sﬁvî
 
s
):
obje˘
(cË{ 
öô
(s); }

2144 
sﬁvî
(
c⁄ãxt
 & 
c
, c⁄° * 
logic
):
obje˘
(cË{ 
öô
(
Z3_mk_sﬁvî_f‹_logic
(c, c.
°r_symbﬁ
(logic))); }

2145 
sﬁvî
(
c⁄ãxt
 & 
c
, sﬁvî c⁄°& 
§c
, 
å™¶©e
): 
obje˘
(cË{ 
öô
(
Z3_sﬁvî_å™¶©e
(§c.
˘x
(), src, c)); }

2146 
sﬁvî
(sﬁvî c⁄° & 
s
):
obje˘
(sË{ 
öô
(s.
m_sﬁvî
); }

2147 ~
sﬁvî
(Ë{ 
Z3_sﬁvî_dec_ªf
(
˘x
(), 
m_sﬁvî
); }

2148 
›î©‹
 
Z3_sﬁvî
(Ëc⁄° {  
	gm_sﬁvî
; }

2149 
	gsﬁvî
 & 
	g›î©‹
=(
sﬁvî
 c⁄° & 
s
) {

2150 
Z3_sﬁvî_öc_ªf
(
s
.
˘x
(), s.
m_sﬁvî
);

2151 
Z3_sﬁvî_dec_ªf
(
˘x
(), 
m_sﬁvî
);

2152 
	gm_˘x
 = 
s
.
m_˘x
;

2153 
	gm_sﬁvî
 = 
s
.
m_sﬁvî
;

2154  *
	gthis
;

2156 
£t
(
∑øms
 c⁄° & 
p
Ë{ 
Z3_sﬁvî_£t_∑øms
(
˘x
(), 
m_sﬁvî
,Ö); 
check_îr‹
(); }

2157 
£t
(c⁄° * 
k
, 
boﬁ
 
v
Ë{ 
∑øms
 
p
(
˘x
()); 
	gp
.set(k, v); set(p); }

2158 
£t
(c⁄° * 
k
, 
v
Ë{ 
∑øms
 
p
(
˘x
()); 
	gp
.set(k, v); set(p); }

2159 
£t
(c⁄° * 
k
, 
v
Ë{ 
∑øms
 
p
(
˘x
()); 
	gp
.set(k, v); set(p); }

2160 
£t
(c⁄° * 
k
, 
symbﬁ
 c⁄° & 
v
Ë{ 
∑øms
 
p
(
˘x
()); 
	gp
.set(k, v); set(p); }

2161 
£t
(c⁄° * 
k
, c⁄°* 
v
Ë{ 
∑øms
 
p
(
˘x
()); 
	gp
.set(k, v); set(p); }

2162 
push
(Ë{ 
Z3_sﬁvî_push
(
˘x
(), 
m_sﬁvî
); 
check_îr‹
(); }

2163 
p›
(
n
 = 1Ë{ 
Z3_sﬁvî_p›
(
˘x
(), 
m_sﬁvî
,Ç); 
check_îr‹
(); }

2164 
ª£t
(Ë{ 
Z3_sﬁvî_ª£t
(
˘x
(), 
m_sﬁvî
); 
check_îr‹
(); }

2165 
add
(
ex¥
 c⁄° & 
e
Ë{ 
as£π
”.
is_boﬁ
()); 
Z3_sﬁvî_as£π
(
˘x
(), 
m_sﬁvî
,É); 
check_îr‹
(); }

2166 
add
(
ex¥
 c⁄° & 
e
,Éx¥ c⁄° & 
p
) {

2167 
as£π
(
e
.
is_boﬁ
());ás£π(
p
.is_boﬁ());ás£π’.
is_c⁄°
());

2168 
Z3_sﬁvî_as£π_™d_åack
(
˘x
(), 
m_sﬁvî
, 
e
, 
p
);

2169 
check_îr‹
();

2171 
add
(
ex¥
 c⁄° & 
e
, c⁄° * 
p
) {

2172 
add
(
e
, 
˘x
().
boﬁ_c⁄°
(
p
));

2176 
‰om_fûe
(c⁄°* 
fûe
Ë{ 
Z3_sﬁvî_‰om_fûe
(
˘x
(), 
m_sﬁvî
, fûe); ctx().
check_∑r£r_îr‹
(); }

2177 
‰om_°rög
(c⁄°* 
s
Ë{ 
Z3_sﬁvî_‰om_°rög
(
˘x
(), 
m_sﬁvî
, s); ctx().
check_∑r£r_îr‹
(); }

2179 
check_ªsu…
 
check
(Ë{ 
Z3_lboﬁ
 
	gr
 = 
Z3_sﬁvî_check
(
˘x
(), 
m_sﬁvî
); 
check_îr‹
();  
to_check_ªsu…
(
r
); }

2180 
check_ªsu…
 
check
(
n
, 
ex¥
 * c⁄° 
assum±i⁄s
) {

2181 
	g¨øy
<
	gZ3_a°
> 
_assum±i⁄s
(
n
);

2182 
	gi
 = 0; i < 
	gn
; i++) {

2183 
check_c⁄ãxt
(*
this
, 
assum±i⁄s
[
i
]);

2184 
	g_assum±i⁄s
[
i
] = 
assum±i⁄s
[i];

2186 
Z3_lboﬁ
 
	gr
 = 
Z3_sﬁvî_check_assum±i⁄s
(
˘x
(), 
m_sﬁvî
, 
n
, 
_assum±i⁄s
.
±r
());

2187 
check_îr‹
();

2188  
to_check_ªsu…
(
r
);

2190 
check_ªsu…
 
check
(
ex¥_ve˘‹
 
assum±i⁄s
) {

2191 
	gn
 = 
assum±i⁄s
.
size
();

2192 
	g¨øy
<
	gZ3_a°
> 
_assum±i⁄s
(
n
);

2193 
	gi
 = 0; i < 
	gn
; i++) {

2194 
check_c⁄ãxt
(*
this
, 
assum±i⁄s
[
i
]);

2195 
	g_assum±i⁄s
[
i
] = 
assum±i⁄s
[i];

2197 
Z3_lboﬁ
 
	gr
 = 
Z3_sﬁvî_check_assum±i⁄s
(
˘x
(), 
m_sﬁvî
, 
n
, 
_assum±i⁄s
.
±r
());

2198 
check_îr‹
();

2199  
to_check_ªsu…
(
r
);

2201 
modñ
 
gë_modñ
(Ëc⁄° { 
Z3_modñ
 
	gm
 = 
Z3_sﬁvî_gë_modñ
(
˘x
(), 
m_sﬁvî
); 
check_îr‹
();  modñ(˘x(), 
m
); }

2202 
check_ªsu…
 
c⁄£quí˚s
(
ex¥_ve˘‹
& 
assum±i⁄s
,Éx¥_ve˘‹& 
v¨s
,Éx¥_ve˘‹& 
c⁄£q
) {

2203 
Z3_lboﬁ
 
	gr
 = 
Z3_sﬁvî_gë_c⁄£quí˚s
(
˘x
(), 
m_sﬁvî
, 
assum±i⁄s
, 
v¨s
, 
c⁄£q
);

2204 
check_îr‹
();

2205  
to_check_ªsu…
(
r
);

2207 
	g°d
::
°rög
 
ªas⁄_unknown
(Ëc⁄° { 
Z3_°rög
 
r
 = 
Z3_sﬁvî_gë_ªas⁄_unknown
(
˘x
(), 
m_sﬁvî
); 
check_îr‹
();  
	gr
; }

2208 
°©s
 
°©i°ics
(Ëc⁄° { 
Z3_°©s
 
	gr
 = 
Z3_sﬁvî_gë_°©i°ics
(
˘x
(), 
m_sﬁvî
); 
check_îr‹
();  sèts(˘x(), 
r
); }

2209 
ex¥_ve˘‹
 
unßt_c‹e
(Ëc⁄° { 
Z3_a°_ve˘‹
 
	gr
 = 
Z3_sﬁvî_gë_unßt_c‹e
(
˘x
(), 
m_sﬁvî
); 
check_îr‹
(); Éx¥_ve˘‹(˘x(), 
r
); }

2210 
ex¥_ve˘‹
 
as£πi⁄s
(Ëc⁄° { 
Z3_a°_ve˘‹
 
	gr
 = 
Z3_sﬁvî_gë_as£πi⁄s
(
˘x
(), 
m_sﬁvî
); 
check_îr‹
(); Éx¥_ve˘‹(˘x(), 
r
); }

2211 
ex¥_ve˘‹
 
n⁄_unôs
(Ëc⁄° { 
Z3_a°_ve˘‹
 
	gr
 = 
Z3_sﬁvî_gë_n⁄_unôs
(
˘x
(), 
m_sﬁvî
); 
check_îr‹
(); Éx¥_ve˘‹(˘x(), 
r
); }

2212 
ex¥_ve˘‹
 
unôs
(Ëc⁄° { 
Z3_a°_ve˘‹
 
	gr
 = 
Z3_sﬁvî_gë_unôs
(
˘x
(), 
m_sﬁvî
); 
check_îr‹
(); Éx¥_ve˘‹(˘x(), 
r
); }

2213 
ex¥
 
¥oof
(Ëc⁄° { 
Z3_a°
 
	gr
 = 
Z3_sﬁvî_gë_¥oof
(
˘x
(), 
m_sﬁvî
); 
check_îr‹
(); Éx¥(˘x(), 
r
); }

2214 
‰õnd
 
	g°d
::
o°ªam
 & 
›î©‹
<<(
°d
::o°ªam & 
out
, 
sﬁvî
 c⁄° & 
	gs
);

2216 
	g°d
::
°rög
 
to_smt2
(c⁄°* 
°©us
 = "unknown") {

2217 
¨øy
<
Z3_a°
> 
es
(
as£πi⁄s
());

2218 
Z3_a°
 c⁄°* 
	gfmls
 = 
es
.
±r
();

2219 
Z3_a°
 
	gfml
 = 0;

2220 
	gsz
 = 
es
.
size
();

2221 i‡(
	gsz
 > 0) {

2222 --
	gsz
;

2223 
	gfml
 = 
fmls
[
sz
];

2226 
	gfml
 = 
˘x
().
boﬁ_vÆ
(
åue
);

2228  
	g°d
::
°rög
(
Z3_bíchm¨k_to_sméib_°rög
(

2229 
˘x
(),

2230 "", "", 
°©us
, "",

2231 
sz
,

2232 
fmls
,

2233 
fml
));

2236 
∑øm_des¸s
 
gë_∑øm_des¸s
(Ë{ Ö¨am_des¸s(
˘x
(), 
Z3_sﬁvî_gë_∑øm_des¸s
(˘x(), 
m_sﬁvî
)); }

2239 
ex¥_ve˘‹
 
cube
”x¥_ve˘‹& 
v¨s
, 
cutoff
) {

2240 
Z3_a°_ve˘‹
 
	gr
 = 
Z3_sﬁvî_cube
(
˘x
(), 
m_sﬁvî
, 
v¨s
, 
cutoff
);

2241 
check_îr‹
();

2242  
ex¥_ve˘‹
(
˘x
(), 
r
);

2245 ˛as†
	ccube_ôî©‹
 {

2246 
	gsﬁvî
& 
	gm_sﬁvî
;

2247 & 
	gm_cutoff
;

2248 
	gex¥_ve˘‹
& 
	gm_v¨s
;

2249 
ex¥_ve˘‹
 
	gm_cube
;

2250 
boﬁ
 
	gm_íd
;

2251 
boﬁ
 
	gm_em±y
;

2253 
öc
() {

2254 
as£π
(!
m_íd
 && !
m_em±y
);

2255 
	gm_cube
 = 
m_sﬁvî
.
cube
(
m_v¨s
, 
m_cutoff
);

2256 
	gm_cutoff
 = 0xFFFFFFFF;

2257 i‡(
	gm_cube
.
size
(Ë=1 && 
m_cube
[0].
is_Ál£
()) {

2258 
m_cube
 = 
z3
::
ex¥_ve˘‹
(
m_sﬁvî
.
˘x
());

2259 
	gm_íd
 = 
åue
;

2261 i‡(
	gm_cube
.
em±y
()) {

2262 
	gm_em±y
 = 
åue
;

2265 
	gpublic
:

2266 
cube_ôî©‹
(
sﬁvî
& 
s
, 
ex¥_ve˘‹
& 
v¨s
, & 
cutoff
, 
boﬁ
 
íd
):

2267 
m_sﬁvî
(
s
),

2268 
m_cutoff
(
cutoff
),

2269 
m_v¨s
(
v¨s
),

2270 
m_cube
(
s
.
˘x
()),

2271 
m_íd
(
íd
),

2272 
m_em±y
(
Ál£
) {

2273 i‡(!
	gm_íd
) {

2274 
öc
();

2278 
	gcube_ôî©‹
& 
	g›î©‹
++() {

2279 
as£π
(!
m_íd
);

2280 i‡(
	gm_em±y
) {

2281 
	gm_íd
 = 
åue
;

2284 
öc
();

2286  *
	gthis
;

2288 
cube_ôî©‹
 
	g›î©‹
++(Ë{ 
as£π
(
Ál£
);  *
	gthis
; }

2289 
ex¥_ve˘‹
 c⁄° * 
	g›î©‹
->() const {  &(operator*()); }

2290 
ex¥_ve˘‹
 c⁄°& 
	g›î©‹
*(Ëc⁄° {  
	gm_cube
; }

2292 
boﬁ
 
	g›î©‹
==(
cube_ôî©‹
 c⁄°& 
Ÿhî
) {

2293  
Ÿhî
.
m_íd
 == m_end;

2295 
boﬁ
 
	g›î©‹
!=(
cube_ôî©‹
 c⁄°& 
Ÿhî
) {

2296  
Ÿhî
.
m_íd
 != m_end;

2301 ˛as†
	ccube_gíî©‹
 {

2302 
	gsﬁvî
& 
	gm_sﬁvî
;

2303 
	gm_cutoff
;

2304 
ex¥_ve˘‹
 
	gm_deÁu…_v¨s
;

2305 
	gex¥_ve˘‹
& 
	gm_v¨s
;

2306 
	gpublic
:

2307 
cube_gíî©‹
(
sﬁvî
& 
s
):

2308 
m_sﬁvî
(
s
),

2309 
m_cutoff
(0xFFFFFFFF),

2310 
m_deÁu…_v¨s
(
s
.
˘x
()),

2311 
m_v¨s
(
m_deÁu…_v¨s
)

2314 
cube_gíî©‹
(
sﬁvî
& 
s
, 
ex¥_ve˘‹
& 
v¨s
):

2315 
m_sﬁvî
(
s
),

2316 
m_cutoff
(0xFFFFFFFF),

2317 
m_deÁu…_v¨s
(
s
.
˘x
()),

2318 
m_v¨s
(
v¨s
)

2321 
cube_ôî©‹
 
begö
(Ë{  cube_ôî©‹(
m_sﬁvî
, 
m_v¨s
, 
m_cutoff
, 
Ál£
); }

2322 
cube_ôî©‹
 
íd
(Ë{  cube_ôî©‹(
m_sﬁvî
, 
m_v¨s
, 
m_cutoff
, 
åue
); }

2323 
£t_cutoff
(
c
Ë{ 
	gm_cutoff
 = c; }

2326 
cube_gíî©‹
 
cubes
(Ë{  cube_gíî©‹(*
this
); }

2327 
cube_gíî©‹
 
cubes
(
ex¥_ve˘‹
& 
v¨s
Ë{  cube_gíî©‹(*
this
, vars); }

2330 
ölöe
 
	g°d
::
o°ªam
 & 
›î©‹
<<(
°d
::o°ªam & 
out
, 
sﬁvî
 c⁄° & 
	gs
Ë{ 
	gout
 << 
Z3_sﬁvî_to_°rög
(
s
.
˘x
(), s);  out; }

2332 ˛as†
	cgﬂl
 : 
public
 
obje˘
 {

2333 
Z3_gﬂl
 
m_gﬂl
;

2334 
öô
(
Z3_gﬂl
 
s
) {

2335 
	gm_gﬂl
 = 
s
;

2336 
Z3_gﬂl_öc_ªf
(
˘x
(), 
s
);

2338 
	gpublic
:

2339 
gﬂl
(
c⁄ãxt
 & 
c
, 
boﬁ
 
modñs
=
åue
, boﬁ 
unßt_c‹es
=
Ál£
, boﬁ 
¥oofs
=Ál£):
obje˘
(cË{ 
öô
(
Z3_mk_gﬂl
(c, models, unsat_cores,Öroofs)); }

2340 
gﬂl
(
c⁄ãxt
 & 
c
, 
Z3_gﬂl
 
s
):
obje˘
(cË{ 
öô
(s); }

2341 
gﬂl
(gﬂ»c⁄° & 
s
):
obje˘
(sË{ 
öô
(s.
m_gﬂl
); }

2342 ~
gﬂl
(Ë{ 
Z3_gﬂl_dec_ªf
(
˘x
(), 
m_gﬂl
); }

2343 
›î©‹
 
Z3_gﬂl
(Ëc⁄° {  
	gm_gﬂl
; }

2344 
	ggﬂl
 & 
	g›î©‹
=(
gﬂl
 c⁄° & 
s
) {

2345 
Z3_gﬂl_öc_ªf
(
s
.
˘x
(), s.
m_gﬂl
);

2346 
Z3_gﬂl_dec_ªf
(
˘x
(), 
m_gﬂl
);

2347 
	gm_˘x
 = 
s
.
m_˘x
;

2348 
	gm_gﬂl
 = 
s
.
m_gﬂl
;

2349  *
	gthis
;

2351 
add
(
ex¥
 c⁄° & 
f
Ë{ 
check_c⁄ãxt
(*
this
, f); 
Z3_gﬂl_as£π
(
˘x
(), 
m_gﬂl
, f); 
check_îr‹
(); }

2353 
size
(Ëc⁄° {  
Z3_gﬂl_size
(
˘x
(), 
m_gﬂl
); }

2354 
ex¥
 
	g›î©‹
[](
	gi
Ëc⁄° { 
as£π
(0 <
i
); 
Z3_a°
 
	gr
 = 
Z3_gﬂl_f‹muœ
(
˘x
(), 
m_gﬂl
, i); 
check_îr‹
(); Éx¥(˘x(), 
r
); }

2355 
Z3_gﬂl_¥ec
 
¥ecisi⁄
(Ëc⁄° {  
Z3_gﬂl_¥ecisi⁄
(
˘x
(), 
m_gﬂl
); }

2356 
boﬁ
 
öc⁄si°ít
(Ëc⁄° {  
Z3_gﬂl_öc⁄si°ít
(
˘x
(), 
m_gﬂl
); }

2357 
dïth
(Ëc⁄° {  
Z3_gﬂl_dïth
(
˘x
(), 
m_gﬂl
); }

2358 
ª£t
(Ë{ 
Z3_gﬂl_ª£t
(
˘x
(), 
m_gﬂl
); }

2359 
num_ex¥s
(Ëc⁄° {  
Z3_gﬂl_num_ex¥s
(
˘x
(), 
m_gﬂl
); }

2360 
boﬁ
 
is_decided_ßt
(Ëc⁄° {  
Z3_gﬂl_is_decided_ßt
(
˘x
(), 
m_gﬂl
); }

2361 
boﬁ
 
is_decided_unßt
(Ëc⁄° {  
Z3_gﬂl_is_decided_unßt
(
˘x
(), 
m_gﬂl
); }

2362 
modñ
 
c⁄vît_modñ
(modñ c⁄° & 
m
) const {

2363 
check_c⁄ãxt
(*
this
, 
m
);

2364 
Z3_modñ
 
	g√w_m
 = 
Z3_gﬂl_c⁄vît_modñ
(
˘x
(), 
m_gﬂl
, 
m
);

2365 
check_îr‹
();

2366  
modñ
(
˘x
(), 
√w_m
);

2368 
modñ
 
gë_modñ
() const {

2369 
Z3_modñ
 
	g√w_m
 = 
Z3_gﬂl_c⁄vît_modñ
(
˘x
(), 
m_gﬂl
, 0);

2370 
check_îr‹
();

2371  
modñ
(
˘x
(), 
√w_m
);

2373 
ex¥
 
as_ex¥
() const {

2374 
	gn
 = 
size
();

2375 i‡(
	gn
 == 0)

2376  
˘x
().
boﬁ_vÆ
(
åue
);

2377 i‡(
	gn
 == 1)

2378  
›î©‹
[](0);

2380 
	g¨øy
<
	gZ3_a°
> 
¨gs
(
n
);

2381 
	gi
 = 0; i < 
	gn
; i++)

2382 
	g¨gs
[
i
] = 
›î©‹
[](i);

2383  
ex¥
(
˘x
(), 
Z3_mk_™d
(˘x(), 
n
, 
¨gs
.
±r
()));

2386 
	g°d
::
°rög
 
dimacs
(Ëc⁄° {  
°d
::°rög(
Z3_gﬂl_to_dimacs_°rög
(
˘x
(), 
m_gﬂl
)); }

2387 
‰õnd
 
	g°d
::
o°ªam
 & 
›î©‹
<<(
°d
::o°ªam & 
out
, 
gﬂl
 c⁄° & 
	gg
);

2389 
ölöe
 
	g°d
::
o°ªam
 & 
›î©‹
<<(
°d
::o°ªam & 
out
, 
gﬂl
 c⁄° & 
	gg
Ë{ 
	gout
 << 
Z3_gﬂl_to_°rög
(
g
.
˘x
(), g);  out; }

2391 ˛as†
	c≠∂y_ªsu…
 : 
public
 
obje˘
 {

2392 
Z3_≠∂y_ªsu…
 
m_≠∂y_ªsu…
;

2393 
öô
(
Z3_≠∂y_ªsu…
 
s
) {

2394 
	gm_≠∂y_ªsu…
 = 
s
;

2395 
Z3_≠∂y_ªsu…_öc_ªf
(
˘x
(), 
s
);

2397 
	gpublic
:

2398 
≠∂y_ªsu…
(
c⁄ãxt
 & 
c
, 
Z3_≠∂y_ªsu…
 
s
):
obje˘
(cË{ 
öô
(s); }

2399 
≠∂y_ªsu…
◊µly_ªsu… c⁄° & 
s
):
obje˘
(sË{ 
öô
(s.
m_≠∂y_ªsu…
); }

2400 ~
≠∂y_ªsu…
(Ë{ 
Z3_≠∂y_ªsu…_dec_ªf
(
˘x
(), 
m_≠∂y_ªsu…
); }

2401 
›î©‹
 
Z3_≠∂y_ªsu…
(Ëc⁄° {  
	gm_≠∂y_ªsu…
; }

2402 
	g≠∂y_ªsu…
 & 
	g›î©‹
=(
≠∂y_ªsu…
 c⁄° & 
s
) {

2403 
Z3_≠∂y_ªsu…_öc_ªf
(
s
.
˘x
(), s.
m_≠∂y_ªsu…
);

2404 
Z3_≠∂y_ªsu…_dec_ªf
(
˘x
(), 
m_≠∂y_ªsu…
);

2405 
	gm_˘x
 = 
s
.
m_˘x
;

2406 
	gm_≠∂y_ªsu…
 = 
s
.
m_≠∂y_ªsu…
;

2407  *
	gthis
;

2409 
size
(Ëc⁄° {  
Z3_≠∂y_ªsu…_gë_num_subgﬂls
(
˘x
(), 
m_≠∂y_ªsu…
); }

2410 
gﬂl
 
	g›î©‹
[](
	gi
Ëc⁄° { 
as£π
(0 <
i
); 
Z3_gﬂl
 
	gr
 = 
Z3_≠∂y_ªsu…_gë_subgﬂl
(
˘x
(), 
m_≠∂y_ªsu…
, i); 
check_îr‹
();  gﬂl(˘x(), 
r
); }

2411 
‰õnd
 
	g°d
::
o°ªam
 & 
›î©‹
<<(
°d
::o°ªam & 
out
, 
≠∂y_ªsu…
 c⁄° & 
	gr
);

2413 
ölöe
 
	g°d
::
o°ªam
 & 
›î©‹
<<(
°d
::o°ªam & 
out
, 
≠∂y_ªsu…
 c⁄° & 
	gr
Ë{ 
	gout
 << 
Z3_≠∂y_ªsu…_to_°rög
(
r
.
˘x
(),Ñ);  out; }

2415 ˛as†
	cè˘ic
 : 
public
 
obje˘
 {

2416 
Z3_è˘ic
 
m_è˘ic
;

2417 
öô
(
Z3_è˘ic
 
s
) {

2418 
	gm_è˘ic
 = 
s
;

2419 
Z3_è˘ic_öc_ªf
(
˘x
(), 
s
);

2421 
	gpublic
:

2422 
è˘ic
(
c⁄ãxt
 & 
c
, c⁄° * 
«me
):
obje˘
(cË{ 
Z3_è˘ic
 
r
 = 
Z3_mk_è˘ic
(c,Çame); 
check_îr‹
(); 
öô
(r); }

2423 
è˘ic
(
c⁄ãxt
 & 
c
, 
Z3_è˘ic
 
s
):
obje˘
(cË{ 
öô
(s); }

2424 
è˘ic
—a˘i¯c⁄° & 
s
):
obje˘
(sË{ 
öô
(s.
m_è˘ic
); }

2425 ~
è˘ic
(Ë{ 
Z3_è˘ic_dec_ªf
(
˘x
(), 
m_è˘ic
); }

2426 
›î©‹
 
Z3_è˘ic
(Ëc⁄° {  
	gm_è˘ic
; }

2427 
	gè˘ic
 & 
	g›î©‹
=(
è˘ic
 c⁄° & 
s
) {

2428 
Z3_è˘ic_öc_ªf
(
s
.
˘x
(), s.
m_è˘ic
);

2429 
Z3_è˘ic_dec_ªf
(
˘x
(), 
m_è˘ic
);

2430 
	gm_˘x
 = 
s
.
m_˘x
;

2431 
	gm_è˘ic
 = 
s
.
m_è˘ic
;

2432  *
	gthis
;

2434 
sﬁvî
 
mk_sﬁvî
(Ëc⁄° { 
Z3_sﬁvî
 
	gr
 = 
Z3_mk_sﬁvî_‰om_è˘ic
(
˘x
(), 
m_è˘ic
); 
check_îr‹
();  sﬁvî(˘x(), 
r
); }

2435 
≠∂y_ªsu…
 
≠∂y
(
gﬂl
 c⁄° & 
g
) const {

2436 
check_c⁄ãxt
(*
this
, 
g
);

2437 
Z3_≠∂y_ªsu…
 
	gr
 = 
Z3_è˘ic_≠∂y
(
˘x
(), 
m_è˘ic
, 
g
);

2438 
check_îr‹
();

2439  
≠∂y_ªsu…
(
˘x
(), 
r
);

2441 
≠∂y_ªsu…
 
›î©‹
()(
gﬂl
 c⁄° & 
	gg
) const {

2442  
≠∂y
(
g
);

2444 
	g°d
::
°rög
 
hñp
(Ëc⁄° { c⁄° * 
r
 = 
Z3_è˘ic_gë_hñp
(
˘x
(), 
m_è˘ic
); 
check_îr‹
();  
	gr
; }

2445 
‰õnd
 
è˘ic
 
	g›î©‹
&—a˘i¯c⁄° & 
	gt1
,Åa˘i¯c⁄° & 
	gt2
);

2446 
‰õnd
 
è˘ic
 
	g›î©‹
|—a˘i¯c⁄° & 
	gt1
,Åa˘i¯c⁄° & 
	gt2
);

2447 
‰õnd
 
è˘ic
 
ª≥©
—a˘i¯c⁄° & 
t
, 
max
);

2448 
‰õnd
 
è˘ic
 
wôh
—a˘i¯c⁄° & 
t
, 
∑øms
 c⁄° & 
p
);

2449 
‰õnd
 
è˘ic
 
åy_f‹
—a˘i¯c⁄° & 
t
, 
ms
);

2450 
‰õnd
 
è˘ic
 
∑r_‹
(
n
,Åa˘i¯c⁄°* 
è˘ics
);

2451 
‰õnd
 
è˘ic
 
∑r_™d_thí
—a˘i¯c⁄°& 
t1
,Åa˘i¯c⁄°& 
t2
);

2452 
∑øm_des¸s
 
gë_∑øm_des¸s
(Ë{ Ö¨am_des¸s(
˘x
(), 
Z3_è˘ic_gë_∑øm_des¸s
(˘x(), 
m_è˘ic
)); }

2455 
ölöe
 
è˘ic
 
	g›î©‹
&—a˘i¯c⁄° & 
	gt1
,Åa˘i¯c⁄° & 
	gt2
) {

2456 
check_c⁄ãxt
(
t1
, 
t2
);

2457 
Z3_è˘ic
 
	gr
 = 
Z3_è˘ic_™d_thí
(
t1
.
˘x
(),Å1, 
t2
);

2458 
	gt1
.
check_îr‹
();

2459  
è˘ic
(
t1
.
˘x
(), 
r
);

2462 
ölöe
 
è˘ic
 
	g›î©‹
|—a˘i¯c⁄° & 
	gt1
,Åa˘i¯c⁄° & 
	gt2
) {

2463 
check_c⁄ãxt
(
t1
, 
t2
);

2464 
Z3_è˘ic
 
	gr
 = 
Z3_è˘ic_‹_ñ£
(
t1
.
˘x
(),Å1, 
t2
);

2465 
	gt1
.
check_îr‹
();

2466  
è˘ic
(
t1
.
˘x
(), 
r
);

2469 
ölöe
 
è˘ic
 
	$ª≥©
(
è˘ic
 c⁄° & 
t
, 
max
=
UINT_MAX
) {

2470 
Z3_è˘ic
 
r
 = 
	`Z3_è˘ic_ª≥©
(
t
.
	`˘x
(),Å, 
max
);

2471 
t
.
	`check_îr‹
();

2472  
	`è˘ic
(
t
.
	`˘x
(), 
r
);

2473 
	}
}

2475 
ölöe
 
è˘ic
 
	$wôh
(
è˘ic
 c⁄° & 
t
, 
∑øms
 c⁄° & 
p
) {

2476 
Z3_è˘ic
 
r
 = 
	`Z3_è˘ic_usög_∑øms
(
t
.
	`˘x
(),Å, 
p
);

2477 
t
.
	`check_îr‹
();

2478  
	`è˘ic
(
t
.
	`˘x
(), 
r
);

2479 
	}
}

2480 
ölöe
 
è˘ic
 
	$åy_f‹
(
è˘ic
 c⁄° & 
t
, 
ms
) {

2481 
Z3_è˘ic
 
r
 = 
	`Z3_è˘ic_åy_f‹
(
t
.
	`˘x
(),Å, 
ms
);

2482 
t
.
	`check_îr‹
();

2483  
	`è˘ic
(
t
.
	`˘x
(), 
r
);

2484 
	}
}

2485 
ölöe
 
è˘ic
 
	$∑r_‹
(
n
, 
è˘ic
 c⁄°* 
è˘ics
) {

2486 i‡(
n
 == 0) {

2487 
	`Z3_THROW
(
	`ex˚±i⁄
("aÇon-zeroÇumber ofÅacticsÇeedÅo beÖassedÅoÖar_or"));

2489 
¨øy
<
Z3_è˘ic
> 
	`buf„r
(
n
);

2490 
i
 = 0; i < 
n
; ++iË
buf„r
[i] = 
è˘ics
[i];

2491  
	`è˘ic
(
è˘ics
[0].
	`˘x
(), 
	`Z3_è˘ic_∑r_‹
—a˘ics[0].˘x(), 
n
, 
buf„r
.
	`±r
()));

2492 
	}
}

2494 
ölöe
 
è˘ic
 
	$∑r_™d_thí
(
è˘ic
 c⁄° & 
t1
,Åa˘i¯c⁄° & 
t2
) {

2495 
	`check_c⁄ãxt
(
t1
, 
t2
);

2496 
Z3_è˘ic
 
r
 = 
	`Z3_è˘ic_∑r_™d_thí
(
t1
.
	`˘x
(),Å1, 
t2
);

2497 
t1
.
	`check_îr‹
();

2498  
	`è˘ic
(
t1
.
	`˘x
(), 
r
);

2499 
	}
}

2501 ˛as†
	c¥obe
 : 
public
 
obje˘
 {

2502 
Z3_¥obe
 
m_¥obe
;

2503 
öô
(
Z3_¥obe
 
s
) {

2504 
	gm_¥obe
 = 
s
;

2505 
Z3_¥obe_öc_ªf
(
˘x
(), 
s
);

2507 
	gpublic
:

2508 
¥obe
(
c⁄ãxt
 & 
c
, c⁄° * 
«me
):
obje˘
(cË{ 
Z3_¥obe
 
r
 = 
Z3_mk_¥obe
(c,Çame); 
check_îr‹
(); 
öô
(r); }

2509 
¥obe
(
c⁄ãxt
 & 
c
, 
vÆ
):
obje˘
(cË{ 
Z3_¥obe
 
r
 = 
Z3_¥obe_c⁄°
(c, vÆ); 
check_îr‹
(); 
öô
(r); }

2510 
¥obe
(
c⁄ãxt
 & 
c
, 
Z3_¥obe
 
s
):
obje˘
(cË{ 
öô
(s); }

2511 
¥obe
’robêc⁄° & 
s
):
obje˘
(sË{ 
öô
(s.
m_¥obe
); }

2512 ~
¥obe
(Ë{ 
Z3_¥obe_dec_ªf
(
˘x
(), 
m_¥obe
); }

2513 
›î©‹
 
Z3_¥obe
(Ëc⁄° {  
	gm_¥obe
; }

2514 
	g¥obe
 & 
	g›î©‹
=(
¥obe
 c⁄° & 
s
) {

2515 
Z3_¥obe_öc_ªf
(
s
.
˘x
(), s.
m_¥obe
);

2516 
Z3_¥obe_dec_ªf
(
˘x
(), 
m_¥obe
);

2517 
	gm_˘x
 = 
s
.
m_˘x
;

2518 
	gm_¥obe
 = 
s
.
m_¥obe
;

2519  *
	gthis
;

2521 
≠∂y
(
gﬂl
 c⁄° & 
g
Ëc⁄° { 
	gr
 = 
Z3_¥obe_≠∂y
(
˘x
(), 
m_¥obe
, g); 
check_îr‹
(); Ñ; }

2522 
›î©‹
()(
gﬂl
 c⁄° & 
	gg
Ëc⁄° {  
≠∂y
(
g
); }

2523 
‰õnd
 
¥obe
 
	g›î©‹
<=’robêc⁄° & 
p1
,Örobêc⁄° & 
	gp2
);

2524 
‰õnd
 
¥obe
 
	g›î©‹
<=’robêc⁄° & 
p1
, 
	gp2
);

2525 
‰õnd
 
¥obe
 
	g›î©‹
<=(
p1
,Örobêc⁄° & 
	gp2
);

2526 
‰õnd
 
¥obe
 
	g›î©‹
>=’robêc⁄° & 
p1
,Örobêc⁄° & 
	gp2
);

2527 
‰õnd
 
¥obe
 
	g›î©‹
>=’robêc⁄° & 
p1
, 
	gp2
);

2528 
‰õnd
 
¥obe
 
	g›î©‹
>=(
p1
,Örobêc⁄° & 
	gp2
);

2529 
‰õnd
 
¥obe
 
	g›î©‹
<’robêc⁄° & 
	gp1
,Örobêc⁄° & 
	gp2
);

2530 
‰õnd
 
¥obe
 
	g›î©‹
<’robêc⁄° & 
	gp1
, 
	gp2
);

2531 
‰õnd
 
¥obe
 
	g›î©‹
<(
	gp1
,Örobêc⁄° & 
	gp2
);

2532 
‰õnd
 
¥obe
 
	g›î©‹
>’robêc⁄° & 
	gp1
,Örobêc⁄° & 
	gp2
);

2533 
‰õnd
 
¥obe
 
	g›î©‹
>’robêc⁄° & 
	gp1
, 
	gp2
);

2534 
‰õnd
 
¥obe
 
	g›î©‹
>(
	gp1
,Örobêc⁄° & 
	gp2
);

2535 
‰õnd
 
¥obe
 
	g›î©‹
==’robêc⁄° & 
p1
,Örobêc⁄° & 
	gp2
);

2536 
‰õnd
 
¥obe
 
	g›î©‹
==’robêc⁄° & 
p1
, 
	gp2
);

2537 
‰õnd
 
¥obe
 
	g›î©‹
==(
p1
,Örobêc⁄° & 
	gp2
);

2538 
‰õnd
 
¥obe
 
	g›î©‹
&&’robêc⁄° & 
	gp1
,Örobêc⁄° & 
	gp2
);

2539 
‰õnd
 
¥obe
 
	g›î©‹
||’robêc⁄° & 
	gp1
,Örobêc⁄° & 
	gp2
);

2540 
‰õnd
 
¥obe
 
	g›î©‹
!’robêc⁄° & 
	gp
);

2543 
ölöe
 
¥obe
 
	g›î©‹
<=’robêc⁄° & 
p1
,Örobêc⁄° & 
	gp2
) {

2544 
check_c⁄ãxt
(
p1
, 
p2
); 
Z3_¥obe
 
	gr
 = 
Z3_¥obe_À
’1.
˘x
(),Ö1,Ö2); 
	gp1
.
check_îr‹
();  
¥obe
’1.˘x(), 
r
);

2546 
ölöe
 
¥obe
 
	g›î©‹
<=’robêc⁄° & 
p1
, 
	gp2
Ë{  
	gp1
 <¥obe’1.
˘x
(), 
p2
); }

2547 
ölöe
 
¥obe
 
	g›î©‹
<=(
p1
,Örobêc⁄° & 
	gp2
Ë{ Örobe(
p2
.
˘x
(),Ö1) <=Ö2; }

2548 
ölöe
 
¥obe
 
	g›î©‹
>=’robêc⁄° & 
p1
,Örobêc⁄° & 
	gp2
) {

2549 
check_c⁄ãxt
(
p1
, 
p2
); 
Z3_¥obe
 
	gr
 = 
Z3_¥obe_ge
’1.
˘x
(),Ö1,Ö2); 
	gp1
.
check_îr‹
();  
¥obe
’1.˘x(), 
r
);

2551 
ölöe
 
¥obe
 
	g›î©‹
>=’robêc⁄° & 
p1
, 
	gp2
Ë{  
	gp1
 >¥obe’1.
˘x
(), 
p2
); }

2552 
ölöe
 
¥obe
 
	g›î©‹
>=(
p1
,Örobêc⁄° & 
	gp2
Ë{ Örobe(
p2
.
˘x
(),Ö1) >=Ö2; }

2553 
ölöe
 
¥obe
 
	g›î©‹
<’robêc⁄° & 
	gp1
,Örobêc⁄° & 
	gp2
) {

2554 
check_c⁄ãxt
(
p1
, 
p2
); 
Z3_¥obe
 
	gr
 = 
Z3_¥obe_…
’1.
˘x
(),Ö1,Ö2); 
	gp1
.
check_îr‹
();  
¥obe
’1.˘x(), 
r
);

2556 
ölöe
 
¥obe
 
	g›î©‹
<’robêc⁄° & 
	gp1
, 
	gp2
Ë{ Ö1 <Örobe(
p1
.
˘x
(), 
p2
); }

2557 
ölöe
 
¥obe
 
	g›î©‹
<(
	gp1
,Örobêc⁄° & 
	gp2
Ë{ Örobe(
p2
.
˘x
(), 
p1
) <Ö2; }

2558 
ölöe
 
¥obe
 
	g›î©‹
>’robêc⁄° & 
	gp1
,Örobêc⁄° & 
	gp2
) {

2559 
check_c⁄ãxt
(
p1
, 
p2
); 
Z3_¥obe
 
	gr
 = 
Z3_¥obe_gt
’1.
˘x
(),Ö1,Ö2); 
	gp1
.
check_îr‹
();  
¥obe
’1.˘x(), 
r
);

2561 
ölöe
 
¥obe
 
	g›î©‹
>’robêc⁄° & 
	gp1
, 
	gp2
Ë{ Ö1 >Örobe(
p1
.
˘x
(), 
p2
); }

2562 
ölöe
 
¥obe
 
	g›î©‹
>(
	gp1
,Örobêc⁄° & 
	gp2
Ë{ Örobe(
p2
.
˘x
(), 
p1
) >Ö2; }

2563 
ölöe
 
¥obe
 
	g›î©‹
==’robêc⁄° & 
p1
,Örobêc⁄° & 
	gp2
) {

2564 
check_c⁄ãxt
(
p1
, 
p2
); 
Z3_¥obe
 
	gr
 = 
Z3_¥obe_eq
’1.
˘x
(),Ö1,Ö2); 
	gp1
.
check_îr‹
();  
¥obe
’1.˘x(), 
r
);

2566 
ölöe
 
¥obe
 
	g›î©‹
==’robêc⁄° & 
p1
, 
	gp2
Ë{  
	gp1
 =¥obe’1.
˘x
(), 
p2
); }

2567 
ölöe
 
¥obe
 
	g›î©‹
==(
p1
,Örobêc⁄° & 
	gp2
Ë{ Örobe(
p2
.
˘x
(),Ö1) ==Ö2; }

2568 
ölöe
 
¥obe
 
	g›î©‹
&&’robêc⁄° & 
	gp1
,Örobêc⁄° & 
	gp2
) {

2569 
check_c⁄ãxt
(
p1
, 
p2
); 
Z3_¥obe
 
	gr
 = 
Z3_¥obe_™d
’1.
˘x
(),Ö1,Ö2); 
	gp1
.
check_îr‹
();  
¥obe
’1.˘x(), 
r
);

2571 
ölöe
 
¥obe
 
	g›î©‹
||’robêc⁄° & 
	gp1
,Örobêc⁄° & 
	gp2
) {

2572 
check_c⁄ãxt
(
p1
, 
p2
); 
Z3_¥obe
 
	gr
 = 
Z3_¥obe_‹
’1.
˘x
(),Ö1,Ö2); 
	gp1
.
check_îr‹
();  
¥obe
’1.˘x(), 
r
);

2574 
ölöe
 
¥obe
 
	g›î©‹
!’robêc⁄° & 
	gp
) {

2575 
Z3_¥obe
 
	gr
 = 
Z3_¥obe_nŸ
(
p
.
˘x
(),Ö); 
	gp
.
check_îr‹
();  
¥obe
’.˘x(), 
r
);

2578 ˛as†
	c›timize
 : 
public
 
obje˘
 {

2579 
Z3_›timize
 
m_›t
;

2581 
	gpublic
:

2582 ˛as†
	ch™dÀ
 {

2583 
m_h
;

2584 
	gpublic
:

2585 
h™dÀ
(
h
): 
m_h
(h) {}

2586 
h
(Ëc⁄° {  
m_h
; }

2588 
›timize
(
c⁄ãxt
& 
c
):
obje˘
(cË{ 
m_›t
 = 
Z3_mk_›timize
(c); 
Z3_›timize_öc_ªf
(c, m_opt); }

2589 
›timize
(›timize& 
o
):
obje˘
(o) {

2590 
Z3_›timize_öc_ªf
(
o
.
˘x
(), o.
m_›t
);

2591 
	gm_›t
 = 
o
.
m_›t
;

2593 
	g›timize
& 
	g›î©‹
=(
›timize
 c⁄°& 
o
) {

2594 
Z3_›timize_öc_ªf
(
o
.
˘x
(), o.
m_›t
);

2595 
Z3_›timize_dec_ªf
(
˘x
(), 
m_›t
);

2596 
	gm_›t
 = 
o
.
m_›t
;

2597 
	gm_˘x
 = 
o
.
m_˘x
;

2598  *
	gthis
;

2600 ~
›timize
(Ë{ 
Z3_›timize_dec_ªf
(
˘x
(), 
m_›t
); }

2601 
›î©‹
 
Z3_›timize
(Ëc⁄° {  
	gm_›t
; }

2602 
add
(
ex¥
 c⁄°& 
e
) {

2603 
as£π
(
e
.
is_boﬁ
());

2604 
Z3_›timize_as£π
(
˘x
(), 
m_›t
, 
e
);

2606 
h™dÀ
 
add
(
ex¥
 c⁄°& 
e
, 
weight
) {

2607 
as£π
(
e
.
is_boﬁ
());

2608 
	g°d
::
°rög°ªam
 
°rm
;

2609 
	g°rm
 << 
	gweight
;

2610  
h™dÀ
(
Z3_›timize_as£π_so·
(
˘x
(), 
m_›t
, 
e
, 
°rm
.
°r
().
c_°r
(), 0));

2612 
h™dÀ
 
add
(
ex¥
 c⁄°& 
e
, c⁄°* 
weight
) {

2613 
as£π
(
e
.
is_boﬁ
());

2614  
h™dÀ
(
Z3_›timize_as£π_so·
(
˘x
(), 
m_›t
, 
e
, 
weight
, 0));

2616 
h™dÀ
 
maximize
(
ex¥
 c⁄°& 
e
) {

2617  
h™dÀ
(
Z3_›timize_maximize
(
˘x
(), 
m_›t
, 
e
));

2619 
h™dÀ
 
möimize
(
ex¥
 c⁄°& 
e
) {

2620  
h™dÀ
(
Z3_›timize_möimize
(
˘x
(), 
m_›t
, 
e
));

2622 
push
() {

2623 
Z3_›timize_push
(
˘x
(), 
m_›t
);

2625 
p›
() {

2626 
Z3_›timize_p›
(
˘x
(), 
m_›t
);

2628 
check_ªsu…
 
check
(Ë{ 
Z3_lboﬁ
 
	gr
 = 
Z3_›timize_check
(
˘x
(), 
m_›t
, 0, 0); 
check_îr‹
();  
to_check_ªsu…
(
r
); }

2629 
check_ªsu…
 
check
(
ex¥_ve˘‹
 c⁄°& 
asms
) {

2630 
	gn
 = 
asms
.
size
();

2631 
	g¨øy
<
	gZ3_a°
> 
_asms
(
n
);

2632 
	gi
 = 0; i < 
	gn
; i++) {

2633 
check_c⁄ãxt
(*
this
, 
asms
[
i
]);

2634 
	g_asms
[
i
] = 
asms
[i];

2636 
Z3_lboﬁ
 
	gr
 = 
Z3_›timize_check
(
˘x
(), 
m_›t
, 
n
, 
_asms
.
±r
());

2637 
check_îr‹
();

2638  
to_check_ªsu…
(
r
);

2640 
modñ
 
gë_modñ
(Ëc⁄° { 
Z3_modñ
 
	gm
 = 
Z3_›timize_gë_modñ
(
˘x
(), 
m_›t
); 
check_îr‹
();  modñ(˘x(), 
m
); }

2641 
ex¥_ve˘‹
 
unßt_c‹e
(Ëc⁄° { 
Z3_a°_ve˘‹
 
	gr
 = 
Z3_›timize_gë_unßt_c‹e
(
˘x
(), 
m_›t
); 
check_îr‹
(); Éx¥_ve˘‹(˘x(), 
r
); }

2642 
£t
(
∑øms
 c⁄° & 
p
Ë{ 
Z3_›timize_£t_∑øms
(
˘x
(), 
m_›t
,Ö); 
check_îr‹
(); }

2643 
ex¥
 
lowî
(
h™dÀ
 c⁄°& 
h
) {

2644 
Z3_a°
 
	gr
 = 
Z3_›timize_gë_lowî
(
˘x
(), 
m_›t
, 
h
.h());

2645 
check_îr‹
();

2646  
ex¥
(
˘x
(), 
r
);

2648 
ex¥
 
uµî
(
h™dÀ
 c⁄°& 
h
) {

2649 
Z3_a°
 
	gr
 = 
Z3_›timize_gë_uµî
(
˘x
(), 
m_›t
, 
h
.h());

2650 
check_îr‹
();

2651  
ex¥
(
˘x
(), 
r
);

2653 
ex¥_ve˘‹
 
as£πi⁄s
(Ëc⁄° { 
Z3_a°_ve˘‹
 
	gr
 = 
Z3_›timize_gë_as£πi⁄s
(
˘x
(), 
m_›t
); 
check_îr‹
(); Éx¥_ve˘‹(˘x(), 
r
); }

2654 
ex¥_ve˘‹
 
obje˘ives
(Ëc⁄° { 
Z3_a°_ve˘‹
 
	gr
 = 
Z3_›timize_gë_obje˘ives
(
˘x
(), 
m_›t
); 
check_îr‹
(); Éx¥_ve˘‹(˘x(), 
r
); }

2655 
°©s
 
°©i°ics
(Ëc⁄° { 
Z3_°©s
 
	gr
 = 
Z3_›timize_gë_°©i°ics
(
˘x
(), 
m_›t
); 
check_îr‹
();  sèts(˘x(), 
r
); }

2656 
‰õnd
 
	g°d
::
o°ªam
 & 
›î©‹
<<(
°d
::o°ªam & 
out
, 
›timize
 c⁄° & 
	gs
);

2657 
‰om_fûe
(c⁄°* 
fûíame
Ë{ 
Z3_›timize_‰om_fûe
(
˘x
(), 
m_›t
, fûíame); 
check_îr‹
(); }

2658 
‰om_°rög
(c⁄°* 
c⁄°øöts
Ë{ 
Z3_›timize_‰om_°rög
(
˘x
(), 
m_›t
, c⁄°øöts); 
check_îr‹
(); }

2659 
	g°d
::
°rög
 
hñp
(Ëc⁄° { c⁄° * 
r
 = 
Z3_›timize_gë_hñp
(
˘x
(), 
m_›t
); 
check_îr‹
();  
	gr
; }

2661 
ölöe
 
	g°d
::
o°ªam
 & 
›î©‹
<<(
°d
::o°ªam & 
out
, 
›timize
 c⁄° & 
	gs
Ë{ 
	gout
 << 
Z3_›timize_to_°rög
(
s
.
˘x
(), s.
m_›t
);  out; }

2663 ˛as†
	cfixedpoöt
 : 
public
 
obje˘
 {

2664 
Z3_fixedpoöt
 
m_Â
;

2665 
	gpublic
:

2666 
fixedpoöt
(
c⁄ãxt
& 
c
):
obje˘
(cË{ 
m_Â
 = 
Z3_mk_fixedpoöt
(c); 
Z3_fixedpoöt_öc_ªf
(c, m_fp); }

2667 ~
fixedpoöt
(Ë{ 
Z3_fixedpoöt_dec_ªf
(
˘x
(), 
m_Â
); }

2668 
›î©‹
 
Z3_fixedpoöt
(Ëc⁄° {  
	gm_Â
; }

2669 
‰om_°rög
(c⁄°* 
s
Ë{ 
Z3_fixedpoöt_‰om_°rög
(
˘x
(), 
m_Â
, s); 
check_îr‹
(); }

2670 
‰om_fûe
(c⁄°* 
s
Ë{ 
Z3_fixedpoöt_‰om_fûe
(
˘x
(), 
m_Â
, s); 
check_îr‹
(); }

2671 
add_ruÀ
(
ex¥
& 
ruÀ
, 
symbﬁ
 c⁄°& 
«me
Ë{ 
Z3_fixedpoöt_add_ruÀ
(
˘x
(), 
m_Â
,ÑuÀ,Çame); 
check_îr‹
(); }

2672 
add_Á˘
(
func_de˛
& 
f
, * 
¨gs
Ë{ 
Z3_fixedpoöt_add_Á˘
(
˘x
(), 
m_Â
, f, f.
¨ôy
(),árgs); 
check_îr‹
(); }

2673 
check_ªsu…
 
quîy
(
ex¥
& 
q
Ë{ 
Z3_lboﬁ
 
	gr
 = 
Z3_fixedpoöt_quîy
(
˘x
(), 
m_Â
, q); 
check_îr‹
();  
to_check_ªsu…
(
r
); }

2674 
check_ªsu…
 
quîy
(
func_de˛_ve˘‹
& 
ªœti⁄s
) {

2675 
	g¨øy
<
	gZ3_func_de˛
> 
rs
(
ªœti⁄s
);

2676 
Z3_lboﬁ
 
	gr
 = 
Z3_fixedpoöt_quîy_ªœti⁄s
(
˘x
(), 
m_Â
, 
rs
.
size
(),Ñs.
±r
());

2677 
check_îr‹
();

2678  
to_check_ªsu…
(
r
);

2680 
ex¥
 
gë_™swî
(Ë{ 
Z3_a°
 
	gr
 = 
Z3_fixedpoöt_gë_™swî
(
˘x
(), 
m_Â
); 
check_îr‹
(); Éx¥(˘x(), 
r
); }

2681 
	g°d
::
°rög
 
ªas⁄_unknown
(Ë{  
Z3_fixedpoöt_gë_ªas⁄_unknown
(
˘x
(), 
m_Â
); }

2682 
upd©e_ruÀ
(
ex¥
& 
ruÀ
, 
symbﬁ
 c⁄°& 
«me
Ë{ 
Z3_fixedpoöt_upd©e_ruÀ
(
˘x
(), 
m_Â
,ÑuÀ,Çame); 
check_îr‹
(); }

2683 
gë_num_Àvñs
(
func_de˛
& 
p
Ë{ 
	gr
 = 
Z3_fixedpoöt_gë_num_Àvñs
(
˘x
(), 
m_Â
,Ö); 
check_îr‹
(); Ñ; }

2684 
ex¥
 
gë_covî_dñè
(
Àvñ
, 
func_de˛
& 
p
) {

2685 
Z3_a°
 
	gr
 = 
Z3_fixedpoöt_gë_covî_dñè
(
˘x
(), 
m_Â
, 
Àvñ
, 
p
);

2686 
check_îr‹
();

2687  
ex¥
(
˘x
(), 
r
);

2689 
add_covî
(
Àvñ
, 
func_de˛
& 
p
, 
ex¥
& 
¥›îty
Ë{ 
Z3_fixedpoöt_add_covî
(
˘x
(), 
m_Â
,Üevñ,Ö,Ör›îty); 
check_îr‹
(); }

2690 
°©s
 
°©i°ics
(Ëc⁄° { 
Z3_°©s
 
	gr
 = 
Z3_fixedpoöt_gë_°©i°ics
(
˘x
(), 
m_Â
); 
check_îr‹
();  sèts(˘x(), 
r
); }

2691 
ªgi°î_ªœti⁄
(
func_de˛
& 
p
Ë{ 
Z3_fixedpoöt_ªgi°î_ªœti⁄
(
˘x
(), 
m_Â
,Ö); }

2692 
ex¥_ve˘‹
 
as£πi⁄s
(Ëc⁄° { 
Z3_a°_ve˘‹
 
	gr
 = 
Z3_fixedpoöt_gë_as£πi⁄s
(
˘x
(), 
m_Â
); 
check_îr‹
(); Éx¥_ve˘‹(˘x(), 
r
); }

2693 
ex¥_ve˘‹
 
ruÀs
(Ëc⁄° { 
Z3_a°_ve˘‹
 
	gr
 = 
Z3_fixedpoöt_gë_ruÀs
(
˘x
(), 
m_Â
); 
check_îr‹
(); Éx¥_ve˘‹(˘x(), 
r
); }

2694 
£t
(
∑øms
 c⁄° & 
p
Ë{ 
Z3_fixedpoöt_£t_∑øms
(
˘x
(), 
m_Â
,Ö); 
check_îr‹
(); }

2695 
	g°d
::
°rög
 
hñp
(Ëc⁄° {  
Z3_fixedpoöt_gë_hñp
(
˘x
(), 
m_Â
); }

2696 
∑øm_des¸s
 
gë_∑øm_des¸s
(Ë{ Ö¨am_des¸s(
˘x
(), 
Z3_fixedpoöt_gë_∑øm_des¸s
(˘x(), 
m_Â
)); }

2697 
	g°d
::
°rög
 
to_°rög
(Ë{  
Z3_fixedpoöt_to_°rög
(
˘x
(), 
m_Â
, 0, 0); }

2698 
	g°d
::
°rög
 
to_°rög
(
ex¥_ve˘‹
 c⁄°& 
quîõs
) {

2699 
¨øy
<
Z3_a°
> 
qs
(
quîõs
);

2700  
Z3_fixedpoöt_to_°rög
(
˘x
(), 
m_Â
, 
qs
.
size
(), qs.
±r
());

2702 
push
(Ë{ 
Z3_fixedpoöt_push
(
˘x
(), 
m_Â
); 
check_îr‹
(); }

2703 
p›
(Ë{ 
Z3_fixedpoöt_p›
(
˘x
(), 
m_Â
); 
check_îr‹
(); }

2705 
ölöe
 
	g°d
::
o°ªam
 & 
›î©‹
<<(
°d
::o°ªam & 
out
, 
fixedpoöt
 c⁄° & 
	gf
Ë{  
	gout
 << 
Z3_fixedpoöt_to_°rög
(
f
.
˘x
(), f, 0, 0); }

2707 
ölöe
 
è˘ic
 
	$Áû_if
(
¥obe
 c⁄° & 
p
) {

2708 
Z3_è˘ic
 
r
 = 
	`Z3_è˘ic_Áû_if
(
p
.
	`˘x
(),Ö);

2709 
p
.
	`check_îr‹
();

2710  
	`è˘ic
(
p
.
	`˘x
(), 
r
);

2711 
	}
}

2712 
ölöe
 
è˘ic
 
	$whí
(
¥obe
 c⁄° & 
p
, 
è˘ic
 c⁄° & 
t
) {

2713 
	`check_c⁄ãxt
(
p
, 
t
);

2714 
Z3_è˘ic
 
r
 = 
	`Z3_è˘ic_whí
(
t
.
	`˘x
(), 
p
,Å);

2715 
t
.
	`check_îr‹
();

2716  
	`è˘ic
(
t
.
	`˘x
(), 
r
);

2717 
	}
}

2718 
ölöe
 
è˘ic
 
	$c⁄d
(
¥obe
 c⁄° & 
p
, 
è˘ic
 c⁄° & 
t1
,Åa˘i¯c⁄° & 
t2
) {

2719 
	`check_c⁄ãxt
(
p
, 
t1
); check_c⁄ãxt’, 
t2
);

2720 
Z3_è˘ic
 
r
 = 
	`Z3_è˘ic_c⁄d
(
t1
.
	`˘x
(), 
p
,Å1, 
t2
);

2721 
t1
.
	`check_îr‹
();

2722  
	`è˘ic
(
t1
.
	`˘x
(), 
r
);

2723 
	}
}

2725 
ölöe
 
symbﬁ
 
	gc⁄ãxt
::
	$°r_symbﬁ
(c⁄° * 
s
Ë{ 
Z3_symbﬁ
 
r
 = 
	`Z3_mk_°rög_symbﬁ
(
m_˘x
, s); 
	`check_îr‹
();  
	`symbﬁ
(*
this
,Ñ); 
	}
}

2726 
ölöe
 
symbﬁ
 
	gc⁄ãxt
::
	$öt_symbﬁ
(
n
Ë{ 
Z3_symbﬁ
 
r
 = 
	`Z3_mk_öt_symbﬁ
(
m_˘x
,Ç); 
	`check_îr‹
();  
	`symbﬁ
(*
this
,Ñ); 
	}
}

2728 
ölöe
 
s‹t
 
	gc⁄ãxt
::
	$boﬁ_s‹t
(Ë{ 
Z3_s‹t
 
s
 = 
	`Z3_mk_boﬁ_s‹t
(
m_˘x
); 
	`check_îr‹
();  
	`s‹t
(*
this
, s); 
	}
}

2729 
ölöe
 
s‹t
 
	gc⁄ãxt
::
	$öt_s‹t
(Ë{ 
Z3_s‹t
 
s
 = 
	`Z3_mk_öt_s‹t
(
m_˘x
); 
	`check_îr‹
();  
	`s‹t
(*
this
, s); 
	}
}

2730 
ölöe
 
s‹t
 
	gc⁄ãxt
::
	$ªÆ_s‹t
(Ë{ 
Z3_s‹t
 
s
 = 
	`Z3_mk_ªÆ_s‹t
(
m_˘x
); 
	`check_îr‹
();  
	`s‹t
(*
this
, s); 
	}
}

2731 
ölöe
 
s‹t
 
	gc⁄ãxt
::
	$bv_s‹t
(
sz
Ë{ 
Z3_s‹t
 
s
 = 
	`Z3_mk_bv_s‹t
(
m_˘x
, sz); 
	`check_îr‹
();  
	`s‹t
(*
this
, s); 
	}
}

2732 
ölöe
 
s‹t
 
	gc⁄ãxt
::
	$°rög_s‹t
(Ë{ 
Z3_s‹t
 
s
 = 
	`Z3_mk_°rög_s‹t
(
m_˘x
); 
	`check_îr‹
();  
	`s‹t
(*
this
, s); 
	}
}

2733 
ölöe
 
s‹t
 
	gc⁄ãxt
::
	$£q_s‹t
(
s‹t
& 
s
Ë{ 
Z3_s‹t
 
r
 = 
	`Z3_mk_£q_s‹t
(
m_˘x
, s); 
	`check_îr‹
();  
	`s‹t
(*
this
,Ñ); 
	}
}

2734 
ölöe
 
s‹t
 
	gc⁄ãxt
::
	$ª_s‹t
(
s‹t
& 
s
Ë{ 
Z3_s‹t
 
r
 = 
	`Z3_mk_ª_s‹t
(
m_˘x
, s); 
	`check_îr‹
();  
	`s‹t
(*
this
,Ñ); 
	}
}

2735 
ölöe
 
s‹t
 
	gc⁄ãxt
::
	$Âa_s‹t
(
ebôs
, 
sbôs
Ë{ 
Z3_s‹t
 
s
 = 
	`Z3_mk_Âa_s‹t
(
m_˘x
,Ébôs, sbôs); 
	`check_îr‹
();  
	`s‹t
(*
this
, s); 
	}
}

2737 
	gãm∂©e
<>

2738 
ölöe
 
s‹t
 
	gc⁄ãxt
::
Âa_s‹t
<16>() {  fpa_sort(5, 11); }

2740 
	gãm∂©e
<>

2741 
ölöe
 
s‹t
 
	gc⁄ãxt
::
Âa_s‹t
<32>() {  fpa_sort(8, 24); }

2743 
	gãm∂©e
<>

2744 
ölöe
 
s‹t
 
	gc⁄ãxt
::
Âa_s‹t
<64>() {  fpa_sort(11, 53); }

2746 
	gãm∂©e
<>

2747 
ölöe
 
s‹t
 
	gc⁄ãxt
::
Âa_s‹t
<128>() {  fpa_sort(15, 113); }

2749 
ölöe
 
s‹t
 
	gc⁄ãxt
::
	$Âa_roundög_mode
() {

2750 
m_roundög_mode
) {

2751 
RNA
:  
	`s‹t
(*
this
, 
	`Z3_mk_Âa_∫a
(
m_˘x
));

2752 
RNE
:  
	`s‹t
(*
this
, 
	`Z3_mk_Âa_∫e
(
m_˘x
));

2753 
RTP
:  
	`s‹t
(*
this
, 
	`Z3_mk_Âa_πp
(
m_˘x
));

2754 
RTN
:  
	`s‹t
(*
this
, 
	`Z3_mk_Âa_πn
(
m_˘x
));

2755 
RTZ
:  
	`s‹t
(*
this
, 
	`Z3_mk_Âa_πz
(
m_˘x
));

2756 :  
	`s‹t
(*
this
);

2758 
	}
}

2760 
ölöe
 
	gc⁄ãxt
::
	$£t_roundög_mode
(
roundög_mode
 
rm
Ë{ 
m_roundög_mode
 =Ñm; 
	}
}

2762 
ölöe
 
s‹t
 
	gc⁄ãxt
::
	$¨øy_s‹t
(
s‹t
 
d
, s‹à
r
Ë{ 
Z3_s‹t
 
s
 = 
	`Z3_mk_¨øy_s‹t
(
m_˘x
, d,Ñ); 
	`check_îr‹
();  
	`s‹t
(*
this
, s); 
	}
}

2763 
ölöe
 
s‹t
 
	gc⁄ãxt
::
	$¨øy_s‹t
(
s‹t_ve˘‹
 c⁄°& 
d
, 
s‹t
 
r
) {

2764 
¨øy
<
Z3_s‹t
> 
	`dom
(
d
);

2765 
Z3_s‹t
 
s
 = 
	`Z3_mk_¨øy_s‹t_n
(
m_˘x
, 
dom
.
	`size
(), dom.
	`±r
(), 
r
); 
	`check_îr‹
();  
	`s‹t
(*
this
, s);

2766 
	}
}

2767 
ölöe
 
s‹t
 
	gc⁄ãxt
::
	$íumî©i⁄_s‹t
(c⁄° * 
«me
, 
n
, c⁄° * c⁄° * 
íum_«mes
, 
func_de˛_ve˘‹
 & 
cs
, func_de˛_ve˘‹ & 
ts
) {

2768 
¨øy
<
Z3_symbﬁ
> 
	`_íum_«mes
(
n
);

2769 
i
 = 0; i < 
n
; i++Ë{ 
_íum_«mes
[i] = 
	`Z3_mk_°rög_symbﬁ
(*
this
, 
íum_«mes
[i]); }

2770 
¨øy
<
Z3_func_de˛
> 
	`_cs
(
n
);

2771 
¨øy
<
Z3_func_de˛
> 
	`_ts
(
n
);

2772 
Z3_symbﬁ
 
_«me
 = 
	`Z3_mk_°rög_symbﬁ
(*
this
, 
«me
);

2773 
s‹t
 
s
 = 
	`to_s‹t
(*
this
, 
	`Z3_mk_íumî©i⁄_s‹t
(*this, 
_«me
, 
n
, 
_íum_«mes
.
	`±r
(), 
_cs
.±r(), 
_ts
.ptr()));

2774 
	`check_îr‹
();

2775 
i
 = 0; i < 
n
; i++Ë{ 
cs
.
	`push_back
(
	`func_de˛
(*
this
, 
_cs
[i])); 
ts
.push_back(func_de˛(*this, 
_ts
[i])); }

2776  
s
;

2777 
	}
}

2778 
ölöe
 
func_de˛
 
	gc⁄ãxt
::
	$tu∂e_s‹t
(c⁄° * 
«me
, 
n
, c⁄° * c⁄° * 
«mes
, 
s‹t
 c⁄°* 
s‹ts
, 
func_de˛_ve˘‹
 & 
¥ojs
) {

2779 
¨øy
<
Z3_symbﬁ
> 
	`_«mes
(
n
);

2780 
¨øy
<
Z3_s‹t
> 
	`_s‹ts
(
n
);

2781 
i
 = 0; i < 
n
; i++Ë{ 
_«mes
[i] = 
	`Z3_mk_°rög_symbﬁ
(*
this
, 
«mes
[i]); 
_s‹ts
[i] = 
s‹ts
[i]; }

2782 
¨øy
<
Z3_func_de˛
> 
	`_¥ojs
(
n
);

2783 
Z3_symbﬁ
 
_«me
 = 
	`Z3_mk_°rög_symbﬁ
(*
this
, 
«me
);

2784 
Z3_func_de˛
 
tu∂e
;

2785 
s‹t
 
_ign‹e_s
 = 
	`to_s‹t
(*
this
, 
	`Z3_mk_tu∂e_s‹t
(*this, 
_«me
, 
n
, 
_«mes
.
	`±r
(), 
_s‹ts
.±r(), &
tu∂e
, 
_¥ojs
.ptr()));

2786 
	`check_îr‹
();

2787 
i
 = 0; i < 
n
; i++Ë{ 
¥ojs
.
	`push_back
(
	`func_de˛
(*
this
, 
_¥ojs
[i])); }

2788  
	`func_de˛
(*
this
, 
tu∂e
);

2789 
	}
}

2791 
ölöe
 
s‹t
 
	gc⁄ãxt
::
	$unöãΩªãd_s‹t
(c⁄°* 
«me
) {

2792 
Z3_symbﬁ
 
_«me
 = 
	`Z3_mk_°rög_symbﬁ
(*
this
, 
«me
);

2793  
	`to_s‹t
(*
this
, 
	`Z3_mk_unöãΩªãd_s‹t
(*this, 
_«me
));

2794 
	}
}

2795 
ölöe
 
s‹t
 
	gc⁄ãxt
::
	$unöãΩªãd_s‹t
(
symbﬁ
 c⁄°& 
«me
) {

2796  
	`to_s‹t
(*
this
, 
	`Z3_mk_unöãΩªãd_s‹t
(*this, 
«me
));

2797 
	}
}

2799 
ölöe
 
func_de˛
 
	gc⁄ãxt
::
	$fun˘i⁄
(
symbﬁ
 c⁄° & 
«me
, 
¨ôy
, 
s‹t
 c⁄° * 
domaö
, s‹àc⁄° & 
ønge
) {

2800 
¨øy
<
Z3_s‹t
> 
	`¨gs
(
¨ôy
);

2801 
i
 = 0; i < 
¨ôy
; i++) {

2802 
	`check_c⁄ãxt
(
domaö
[
i
], 
ønge
);

2803 
¨gs
[
i
] = 
domaö
[i];

2805 
Z3_func_de˛
 
f
 = 
	`Z3_mk_func_de˛
(
m_˘x
, 
«me
, 
¨ôy
, 
¨gs
.
	`±r
(), 
ønge
);

2806 
	`check_îr‹
();

2807  
	`func_de˛
(*
this
, 
f
);

2808 
	}
}

2810 
ölöe
 
func_de˛
 
	gc⁄ãxt
::
	$fun˘i⁄
(c⁄° * 
«me
, 
¨ôy
, 
s‹t
 c⁄° * 
domaö
, s‹àc⁄° & 
ønge
) {

2811  
	`fun˘i⁄
(
ønge
.
	`˘x
().
	`°r_symbﬁ
(
«me
), 
¨ôy
, 
domaö
,Ñange);

2812 
	}
}

2814 
ölöe
 
func_de˛
 
	gc⁄ãxt
::
	$fun˘i⁄
(
symbﬁ
 c⁄°& 
«me
, 
s‹t_ve˘‹
 c⁄°& 
domaö
, 
s‹t
 c⁄°& 
ønge
) {

2815 
¨øy
<
Z3_s‹t
> 
	`¨gs
(
domaö
.
	`size
());

2816 
i
 = 0; i < 
domaö
.
	`size
(); i++) {

2817 
	`check_c⁄ãxt
(
domaö
[
i
], 
ønge
);

2818 
¨gs
[
i
] = 
domaö
[i];

2820 
Z3_func_de˛
 
f
 = 
	`Z3_mk_func_de˛
(
m_˘x
, 
«me
, 
domaö
.
	`size
(), 
¨gs
.
	`±r
(), 
ønge
);

2821 
	`check_îr‹
();

2822  
	`func_de˛
(*
this
, 
f
);

2823 
	}
}

2825 
ölöe
 
func_de˛
 
	gc⁄ãxt
::
	$fun˘i⁄
(c⁄° * 
«me
, 
s‹t_ve˘‹
 c⁄°& 
domaö
, 
s‹t
 c⁄°& 
ønge
) {

2826  
	`fun˘i⁄
(
ønge
.
	`˘x
().
	`°r_symbﬁ
(
«me
), 
domaö
,Ñange);

2827 
	}
}

2830 
ölöe
 
func_de˛
 
	gc⁄ãxt
::
	$fun˘i⁄
(c⁄° * 
«me
, 
s‹t
 c⁄° & 
domaö
, s‹àc⁄° & 
ønge
) {

2831 
	`check_c⁄ãxt
(
domaö
, 
ønge
);

2832 
Z3_s‹t
 
¨gs
[1] = { 
domaö
 };

2833 
Z3_func_de˛
 
f
 = 
	`Z3_mk_func_de˛
(
m_˘x
, 
	`°r_symbﬁ
(
«me
), 1, 
¨gs
, 
ønge
);

2834 
	`check_îr‹
();

2835  
	`func_de˛
(*
this
, 
f
);

2836 
	}
}

2838 
ölöe
 
func_de˛
 
	gc⁄ãxt
::
	$fun˘i⁄
(c⁄° * 
«me
, 
s‹t
 c⁄° & 
d1
, s‹àc⁄° & 
d2
, s‹àc⁄° & 
ønge
) {

2839 
	`check_c⁄ãxt
(
d1
, 
ønge
); check_c⁄ãxt(
d2
,Ñange);

2840 
Z3_s‹t
 
¨gs
[2] = { 
d1
, 
d2
 };

2841 
Z3_func_de˛
 
f
 = 
	`Z3_mk_func_de˛
(
m_˘x
, 
	`°r_symbﬁ
(
«me
), 2, 
¨gs
, 
ønge
);

2842 
	`check_îr‹
();

2843  
	`func_de˛
(*
this
, 
f
);

2844 
	}
}

2846 
ölöe
 
func_de˛
 
	gc⁄ãxt
::
	$fun˘i⁄
(c⁄° * 
«me
, 
s‹t
 c⁄° & 
d1
, s‹àc⁄° & 
d2
, s‹àc⁄° & 
d3
, s‹àc⁄° & 
ønge
) {

2847 
	`check_c⁄ãxt
(
d1
, 
ønge
); check_c⁄ãxt(
d2
,Ñ™ge); check_c⁄ãxt(
d3
,Ñange);

2848 
Z3_s‹t
 
¨gs
[3] = { 
d1
, 
d2
, 
d3
 };

2849 
Z3_func_de˛
 
f
 = 
	`Z3_mk_func_de˛
(
m_˘x
, 
	`°r_symbﬁ
(
«me
), 3, 
¨gs
, 
ønge
);

2850 
	`check_îr‹
();

2851  
	`func_de˛
(*
this
, 
f
);

2852 
	}
}

2854 
ölöe
 
func_de˛
 
	gc⁄ãxt
::
	$fun˘i⁄
(c⁄° * 
«me
, 
s‹t
 c⁄° & 
d1
, s‹àc⁄° & 
d2
, s‹àc⁄° & 
d3
, s‹àc⁄° & 
d4
, s‹àc⁄° & 
ønge
) {

2855 
	`check_c⁄ãxt
(
d1
, 
ønge
); check_c⁄ãxt(
d2
,Ñ™ge); check_c⁄ãxt(
d3
,Ñ™ge); check_c⁄ãxt(
d4
,Ñange);

2856 
Z3_s‹t
 
¨gs
[4] = { 
d1
, 
d2
, 
d3
, 
d4
 };

2857 
Z3_func_de˛
 
f
 = 
	`Z3_mk_func_de˛
(
m_˘x
, 
	`°r_symbﬁ
(
«me
), 4, 
¨gs
, 
ønge
);

2858 
	`check_îr‹
();

2859  
	`func_de˛
(*
this
, 
f
);

2860 
	}
}

2862 
ölöe
 
func_de˛
 
	gc⁄ãxt
::
	$fun˘i⁄
(c⁄° * 
«me
, 
s‹t
 c⁄° & 
d1
, s‹àc⁄° & 
d2
, s‹àc⁄° & 
d3
, s‹àc⁄° & 
d4
, s‹àc⁄° & 
d5
, s‹àc⁄° & 
ønge
) {

2863 
	`check_c⁄ãxt
(
d1
, 
ønge
); check_c⁄ãxt(
d2
,Ñ™ge); check_c⁄ãxt(
d3
,Ñ™ge); check_c⁄ãxt(
d4
,Ñ™ge); check_c⁄ãxt(
d5
,Ñange);

2864 
Z3_s‹t
 
¨gs
[5] = { 
d1
, 
d2
, 
d3
, 
d4
, 
d5
 };

2865 
Z3_func_de˛
 
f
 = 
	`Z3_mk_func_de˛
(
m_˘x
, 
	`°r_symbﬁ
(
«me
), 5, 
¨gs
, 
ønge
);

2866 
	`check_îr‹
();

2867  
	`func_de˛
(*
this
, 
f
);

2868 
	}
}

2870 
ölöe
 
func_de˛
 
	gc⁄ãxt
::
	$ªcfun
(
symbﬁ
 c⁄° & 
«me
, 
¨ôy
, 
s‹t
 c⁄° * 
domaö
, s‹àc⁄° & 
ønge
) {

2871 
¨øy
<
Z3_s‹t
> 
	`¨gs
(
¨ôy
);

2872 
i
 = 0; i < 
¨ôy
; i++) {

2873 
	`check_c⁄ãxt
(
domaö
[
i
], 
ønge
);

2874 
¨gs
[
i
] = 
domaö
[i];

2876 
Z3_func_de˛
 
f
 = 
	`Z3_mk_ªc_func_de˛
(
m_˘x
, 
«me
, 
¨ôy
, 
¨gs
.
	`±r
(), 
ønge
);

2877 
	`check_îr‹
();

2878  
	`func_de˛
(*
this
, 
f
);

2880 
	}
}

2882 
ölöe
 
func_de˛
 
	gc⁄ãxt
::
	$ªcfun
(c⁄° * 
«me
, 
¨ôy
, 
s‹t
 c⁄° * 
domaö
, s‹àc⁄° & 
ønge
) {

2883  
	`ªcfun
(
	`°r_symbﬁ
(
«me
), 
¨ôy
, 
domaö
, 
ønge
);

2884 
	}
}

2886 
ölöe
 
func_de˛
 
	gc⁄ãxt
::
	$ªcfun
(c⁄° * 
«me
, 
s‹t
 c⁄°& 
d1
, s‹àc⁄° & 
ønge
) {

2887  
	`ªcfun
(
	`°r_symbﬁ
(
«me
), 1, &
d1
, 
ønge
);

2888 
	}
}

2890 
ölöe
 
func_de˛
 
	gc⁄ãxt
::
	$ªcfun
(c⁄° * 
«me
, 
s‹t
 c⁄°& 
d1
, s‹àc⁄°& 
d2
, s‹àc⁄° & 
ønge
) {

2891 
s‹t
 
dom
[2] = { 
d1
, 
d2
 };

2892  
	`ªcfun
(
	`°r_symbﬁ
(
«me
), 2, 
dom
, 
ønge
);

2893 
	}
}

2895 
ölöe
 
	gc⁄ãxt
::
	$ªcdef
(
func_de˛
 
f
, 
ex¥_ve˘‹
 c⁄°& 
¨gs
, 
ex¥
 c⁄°& 
body
) {

2896 
	`check_c⁄ãxt
(
f
, 
¨gs
); check_c⁄ãxt(f, 
body
);

2897 
¨øy
<
Z3_a°
> 
	`v¨s
(
¨gs
);

2898 
	`Z3_add_ªc_def
(
f
.
	`˘x
(), f, 
v¨s
.
	`size
(), v¨s.
	`±r
(), 
body
);

2899 
	}
}

2901 
ölöe
 
ex¥
 
	gc⁄ãxt
::
	$c⁄°™t
(
symbﬁ
 c⁄° & 
«me
, 
s‹t
 c⁄° & 
s
) {

2902 
Z3_a°
 
r
 = 
	`Z3_mk_c⁄°
(
m_˘x
, 
«me
, 
s
);

2903 
	`check_îr‹
();

2904  
	`ex¥
(*
this
, 
r
);

2905 
	}
}

2906 
ölöe
 
ex¥
 
	gc⁄ãxt
::
	$c⁄°™t
(c⁄° * 
«me
, 
s‹t
 c⁄° & 
s
Ë{  
	`c⁄°™t
(
	`°r_symbﬁ
“ame), s); 
	}
}

2907 
ölöe
 
ex¥
 
	gc⁄ãxt
::
	$boﬁ_c⁄°
(c⁄° * 
«me
Ë{  
	`c⁄°™t
“ame, 
	`boﬁ_s‹t
()); 
	}
}

2908 
ölöe
 
ex¥
 
	gc⁄ãxt
::
	$öt_c⁄°
(c⁄° * 
«me
Ë{  
	`c⁄°™t
“ame, 
	`öt_s‹t
()); 
	}
}

2909 
ölöe
 
ex¥
 
	gc⁄ãxt
::
	$ªÆ_c⁄°
(c⁄° * 
«me
Ë{  
	`c⁄°™t
“ame, 
	`ªÆ_s‹t
()); 
	}
}

2910 
ölöe
 
ex¥
 
	gc⁄ãxt
::
	$bv_c⁄°
(c⁄° * 
«me
, 
sz
Ë{  
	`c⁄°™t
“ame, 
	`bv_s‹t
(sz)); 
	}
}

2911 
ölöe
 
ex¥
 
	gc⁄ãxt
::
	$Âa_c⁄°
(c⁄° * 
«me
, 
ebôs
, 
sbôs
Ë{  
	`c⁄°™t
“ame, 
	`Âa_s‹t
”bôs, sbôs)); 
	}
}

2913 
	gãm∂©e
<
size_t
 
	g¥ecisi⁄
>

2914 
ölöe
 
ex¥
 
	gc⁄ãxt
::
	$Âa_c⁄°
(c⁄° * 
«me
Ë{  
	`c⁄°™t
“ame, 
Âa_s‹t
<
¥ecisi⁄
>()); 
	}
}

2916 
ölöe
 
ex¥
 
	gc⁄ãxt
::
	$boﬁ_vÆ
(
boﬁ
 
b
Ë{  b ? 
	`ex¥
(*
this
, 
	`Z3_mk_åue
(
m_˘x
)Ë:Éx¥(*this, 
	`Z3_mk_Ál£
(m_˘x)); 
	}
}

2918 
ölöe
 
ex¥
 
	gc⁄ãxt
::
	$öt_vÆ
(
n
Ë{ 
Z3_a°
 
r
 = 
	`Z3_mk_öt
(
m_˘x
,Ç, 
	`öt_s‹t
()); 
	`check_îr‹
();  
	`ex¥
(*
this
,Ñ); 
	}
}

2919 
ölöe
 
ex¥
 
	gc⁄ãxt
::
	$öt_vÆ
(
n
Ë{ 
Z3_a°
 
r
 = 
	`Z3_mk_unsig√d_öt
(
m_˘x
,Ç, 
	`öt_s‹t
()); 
	`check_îr‹
();  
	`ex¥
(*
this
,Ñ); 
	}
}

2920 
ölöe
 
ex¥
 
	gc⁄ãxt
::
	$öt_vÆ
(
öt64_t
 
n
Ë{ 
Z3_a°
 
r
 = 
	`Z3_mk_öt64
(
m_˘x
,Ç, 
	`öt_s‹t
()); 
	`check_îr‹
();  
	`ex¥
(*
this
,Ñ); 
	}
}

2921 
ölöe
 
ex¥
 
	gc⁄ãxt
::
	$öt_vÆ
(
uöt64_t
 
n
Ë{ 
Z3_a°
 
r
 = 
	`Z3_mk_unsig√d_öt64
(
m_˘x
,Ç, 
	`öt_s‹t
()); 
	`check_îr‹
();  
	`ex¥
(*
this
,Ñ); 
	}
}

2922 
ölöe
 
ex¥
 
	gc⁄ãxt
::
	$öt_vÆ
(c⁄° * 
n
Ë{ 
Z3_a°
 
r
 = 
	`Z3_mk_numîÆ
(
m_˘x
,Ç, 
	`öt_s‹t
()); 
	`check_îr‹
();  
	`ex¥
(*
this
,Ñ); 
	}
}

2924 
ölöe
 
ex¥
 
	gc⁄ãxt
::
	$ªÆ_vÆ
(
n
, 
d
Ë{ 
Z3_a°
 
r
 = 
	`Z3_mk_ªÆ
(
m_˘x
,Ç, d); 
	`check_îr‹
();  
	`ex¥
(*
this
,Ñ); 
	}
}

2925 
ölöe
 
ex¥
 
	gc⁄ãxt
::
	$ªÆ_vÆ
(
n
Ë{ 
Z3_a°
 
r
 = 
	`Z3_mk_öt
(
m_˘x
,Ç, 
	`ªÆ_s‹t
()); 
	`check_îr‹
();  
	`ex¥
(*
this
,Ñ); 
	}
}

2926 
ölöe
 
ex¥
 
	gc⁄ãxt
::
	$ªÆ_vÆ
(
n
Ë{ 
Z3_a°
 
r
 = 
	`Z3_mk_unsig√d_öt
(
m_˘x
,Ç, 
	`ªÆ_s‹t
()); 
	`check_îr‹
();  
	`ex¥
(*
this
,Ñ); 
	}
}

2927 
ölöe
 
ex¥
 
	gc⁄ãxt
::
	$ªÆ_vÆ
(
öt64_t
 
n
Ë{ 
Z3_a°
 
r
 = 
	`Z3_mk_öt64
(
m_˘x
,Ç, 
	`ªÆ_s‹t
()); 
	`check_îr‹
();  
	`ex¥
(*
this
,Ñ); 
	}
}

2928 
ölöe
 
ex¥
 
	gc⁄ãxt
::
	$ªÆ_vÆ
(
uöt64_t
 
n
Ë{ 
Z3_a°
 
r
 = 
	`Z3_mk_unsig√d_öt64
(
m_˘x
,Ç, 
	`ªÆ_s‹t
()); 
	`check_îr‹
();  
	`ex¥
(*
this
,Ñ); 
	}
}

2929 
ölöe
 
ex¥
 
	gc⁄ãxt
::
	$ªÆ_vÆ
(c⁄° * 
n
Ë{ 
Z3_a°
 
r
 = 
	`Z3_mk_numîÆ
(
m_˘x
,Ç, 
	`ªÆ_s‹t
()); 
	`check_îr‹
();  
	`ex¥
(*
this
,Ñ); 
	}
}

2931 
ölöe
 
ex¥
 
	gc⁄ãxt
::
	$bv_vÆ
(
n
, 
sz
Ë{ 
s‹t
 
s
 = 
	`bv_s‹t
(sz); 
Z3_a°
 
r
 = 
	`Z3_mk_öt
(
m_˘x
,Ç, s); 
	`check_îr‹
();  
	`ex¥
(*
this
,Ñ); 
	}
}

2932 
ölöe
 
ex¥
 
	gc⁄ãxt
::
	$bv_vÆ
(
n
, 
sz
Ë{ 
s‹t
 
s
 = 
	`bv_s‹t
(sz); 
Z3_a°
 
r
 = 
	`Z3_mk_unsig√d_öt
(
m_˘x
,Ç, s); 
	`check_îr‹
();  
	`ex¥
(*
this
,Ñ); 
	}
}

2933 
ölöe
 
ex¥
 
	gc⁄ãxt
::
	$bv_vÆ
(
öt64_t
 
n
, 
sz
Ë{ 
s‹t
 
s
 = 
	`bv_s‹t
(sz); 
Z3_a°
 
r
 = 
	`Z3_mk_öt64
(
m_˘x
,Ç, s); 
	`check_îr‹
();  
	`ex¥
(*
this
,Ñ); 
	}
}

2934 
ölöe
 
ex¥
 
	gc⁄ãxt
::
	$bv_vÆ
(
uöt64_t
 
n
, 
sz
Ë{ 
s‹t
 
s
 = 
	`bv_s‹t
(sz); 
Z3_a°
 
r
 = 
	`Z3_mk_unsig√d_öt64
(
m_˘x
,Ç, s); 
	`check_îr‹
();  
	`ex¥
(*
this
,Ñ); 
	}
}

2935 
ölöe
 
ex¥
 
	gc⁄ãxt
::
	$bv_vÆ
(c⁄° * 
n
, 
sz
Ë{ 
s‹t
 
s
 = 
	`bv_s‹t
(sz); 
Z3_a°
 
r
 = 
	`Z3_mk_numîÆ
(
m_˘x
,Ç, s); 
	`check_îr‹
();  
	`ex¥
(*
this
,Ñ); 
	}
}

2936 
ölöe
 
ex¥
 
	gc⁄ãxt
::
	$bv_vÆ
(
n
, 
boﬁ
 c⁄°* 
bôs
) {

2937 
¨øy
<
boﬁ
> 
	`_bôs
(
n
);

2938 
i
 = 0; i < 
n
; ++iË
_bôs
[i] = 
bôs
[i] ? 1 : 0;

2939 
Z3_a°
 
r
 = 
	`Z3_mk_bv_numîÆ
(
m_˘x
, 
n
, 
_bôs
.
	`±r
()); 
	`check_îr‹
();  
	`ex¥
(*
this
,Ñ);

2940 
	}
}

2942 
ölöe
 
ex¥
 
	gc⁄ãxt
::
	$Âa_vÆ
(
n
Ë{ 
s‹t
 
s
 = 
Âa_s‹t
<64>(); 
Z3_a°
 
r
 = 
	`Z3_mk_Âa_numîÆ_doubÀ
(
m_˘x
,Ç, s); 
	`check_îr‹
();  
	`ex¥
(*
this
,Ñ); 
	}
}

2943 
ölöe
 
ex¥
 
	gc⁄ãxt
::
	$Âa_vÆ
(
n
Ë{ 
s‹t
 
s
 = 
Âa_s‹t
<32>(); 
Z3_a°
 
r
 = 
	`Z3_mk_Âa_numîÆ_Êﬂt
(
m_˘x
,Ç, s); 
	`check_îr‹
();  
	`ex¥
(*
this
,Ñ); 
	}
}

2945 
ölöe
 
ex¥
 
	gc⁄ãxt
::
	$°rög_vÆ
(c⁄°* 
s
Ë{ 
Z3_a°
 
r
 = 
	`Z3_mk_°rög
(
m_˘x
, s); 
	`check_îr‹
();  
	`ex¥
(*
this
,Ñ); 
	}
}

2946 
ölöe
 
ex¥
 
	gc⁄ãxt
::
	$°rög_vÆ
(
°d
::
°rög
 c⁄°& 
s
Ë{ 
Z3_a°
 
r
 = 
	`Z3_mk_°rög
(
m_˘x
, s.
	`c_°r
()); 
	`check_îr‹
();  
	`ex¥
(*
this
,Ñ); 
	}
}

2948 
ölöe
 
ex¥
 
	gc⁄ãxt
::
	$num_vÆ
(
n
, 
s‹t
 c⁄° & 
s
Ë{ 
Z3_a°
 
r
 = 
	`Z3_mk_öt
(
m_˘x
,Ç, s); 
	`check_îr‹
();  
	`ex¥
(*
this
,Ñ); 
	}
}

2950 
ölöe
 
ex¥
 
	gfunc_de˛
::
	$›î©‹
()(
n
, 
ex¥
 c⁄° * 
¨gs
) const {

2951 
¨øy
<
Z3_a°
> 
	`_¨gs
(
n
);

2952 
i
 = 0; i < 
n
; i++) {

2953 
	`check_c⁄ãxt
(*
this
, 
¨gs
[
i
]);

2954 
_¨gs
[
i
] = 
¨gs
[i];

2956 
Z3_a°
 
r
 = 
	`Z3_mk_≠p
(
	`˘x
(), *
this
, 
n
, 
_¨gs
.
	`±r
());

2957 
	`check_îr‹
();

2958  
	`ex¥
(
	`˘x
(), 
r
);

2960 
	}
}

2961 
ölöe
 
ex¥
 
	gfunc_de˛
::
	$›î©‹
()(
ex¥_ve˘‹
 c⁄°& 
¨gs
) const {

2962 
¨øy
<
Z3_a°
> 
	`_¨gs
(
¨gs
.
	`size
());

2963 
i
 = 0; i < 
¨gs
.
	`size
(); i++) {

2964 
	`check_c⁄ãxt
(*
this
, 
¨gs
[
i
]);

2965 
_¨gs
[
i
] = 
¨gs
[i];

2967 
Z3_a°
 
r
 = 
	`Z3_mk_≠p
(
	`˘x
(), *
this
, 
¨gs
.
	`size
(), 
_¨gs
.
	`±r
());

2968 
	`check_îr‹
();

2969  
	`ex¥
(
	`˘x
(), 
r
);

2970 
	}
}

2971 
ölöe
 
ex¥
 
	gfunc_de˛
::
	$›î©‹
()() const {

2972 
Z3_a°
 
r
 = 
	`Z3_mk_≠p
(
	`˘x
(), *
this
, 0, 0);

2973 
	`˘x
().
	`check_îr‹
();

2974  
	`ex¥
(
	`˘x
(), 
r
);

2975 
	}
}

2976 
ölöe
 
ex¥
 
	gfunc_de˛
::
	$›î©‹
()(
ex¥
 c⁄° & 
a
) const {

2977 
	`check_c⁄ãxt
(*
this
, 
a
);

2978 
Z3_a°
 
¨gs
[1] = { 
a
 };

2979 
Z3_a°
 
r
 = 
	`Z3_mk_≠p
(
	`˘x
(), *
this
, 1, 
¨gs
);

2980 
	`˘x
().
	`check_îr‹
();

2981  
	`ex¥
(
	`˘x
(), 
r
);

2982 
	}
}

2983 
ölöe
 
ex¥
 
	gfunc_de˛
::
	$›î©‹
()(
a
) const {

2984 
Z3_a°
 
¨gs
[1] = { 
	`˘x
().
	`num_vÆ
(
a
, 
	`domaö
(0)) };

2985 
Z3_a°
 
r
 = 
	`Z3_mk_≠p
(
	`˘x
(), *
this
, 1, 
¨gs
);

2986 
	`˘x
().
	`check_îr‹
();

2987  
	`ex¥
(
	`˘x
(), 
r
);

2988 
	}
}

2989 
ölöe
 
ex¥
 
	gfunc_de˛
::
	$›î©‹
()(
ex¥
 c⁄° & 
a1
,Éx¥ c⁄° & 
a2
) const {

2990 
	`check_c⁄ãxt
(*
this
, 
a1
); check_c⁄ãxt(*this, 
a2
);

2991 
Z3_a°
 
¨gs
[2] = { 
a1
, 
a2
 };

2992 
Z3_a°
 
r
 = 
	`Z3_mk_≠p
(
	`˘x
(), *
this
, 2, 
¨gs
);

2993 
	`˘x
().
	`check_îr‹
();

2994  
	`ex¥
(
	`˘x
(), 
r
);

2995 
	}
}

2996 
ölöe
 
ex¥
 
	gfunc_de˛
::
	$›î©‹
()(
ex¥
 c⁄° & 
a1
, 
a2
) const {

2997 
	`check_c⁄ãxt
(*
this
, 
a1
);

2998 
Z3_a°
 
¨gs
[2] = { 
a1
, 
	`˘x
().
	`num_vÆ
(
a2
, 
	`domaö
(1)) };

2999 
Z3_a°
 
r
 = 
	`Z3_mk_≠p
(
	`˘x
(), *
this
, 2, 
¨gs
);

3000 
	`˘x
().
	`check_îr‹
();

3001  
	`ex¥
(
	`˘x
(), 
r
);

3002 
	}
}

3003 
ölöe
 
ex¥
 
	gfunc_de˛
::
	$›î©‹
()(
a1
, 
ex¥
 c⁄° & 
a2
) const {

3004 
	`check_c⁄ãxt
(*
this
, 
a2
);

3005 
Z3_a°
 
¨gs
[2] = { 
	`˘x
().
	`num_vÆ
(
a1
, 
	`domaö
(0)), 
a2
 };

3006 
Z3_a°
 
r
 = 
	`Z3_mk_≠p
(
	`˘x
(), *
this
, 2, 
¨gs
);

3007 
	`˘x
().
	`check_îr‹
();

3008  
	`ex¥
(
	`˘x
(), 
r
);

3009 
	}
}

3010 
ölöe
 
ex¥
 
	gfunc_de˛
::
	$›î©‹
()(
ex¥
 c⁄° & 
a1
,Éx¥ c⁄° & 
a2
,Éx¥ c⁄° & 
a3
) const {

3011 
	`check_c⁄ãxt
(*
this
, 
a1
); check_c⁄ãxt(*this, 
a2
); check_c⁄ãxt(*this, 
a3
);

3012 
Z3_a°
 
¨gs
[3] = { 
a1
, 
a2
, 
a3
 };

3013 
Z3_a°
 
r
 = 
	`Z3_mk_≠p
(
	`˘x
(), *
this
, 3, 
¨gs
);

3014 
	`˘x
().
	`check_îr‹
();

3015  
	`ex¥
(
	`˘x
(), 
r
);

3016 
	}
}

3017 
ölöe
 
ex¥
 
	gfunc_de˛
::
	$›î©‹
()(
ex¥
 c⁄° & 
a1
,Éx¥ c⁄° & 
a2
,Éx¥ c⁄° & 
a3
,Éx¥ c⁄° & 
a4
) const {

3018 
	`check_c⁄ãxt
(*
this
, 
a1
); check_c⁄ãxt(*this, 
a2
); check_c⁄ãxt(*this, 
a3
); check_c⁄ãxt(*this, 
a4
);

3019 
Z3_a°
 
¨gs
[4] = { 
a1
, 
a2
, 
a3
, 
a4
 };

3020 
Z3_a°
 
r
 = 
	`Z3_mk_≠p
(
	`˘x
(), *
this
, 4, 
¨gs
);

3021 
	`˘x
().
	`check_îr‹
();

3022  
	`ex¥
(
	`˘x
(), 
r
);

3023 
	}
}

3024 
ölöe
 
ex¥
 
	gfunc_de˛
::
	$›î©‹
()(
ex¥
 c⁄° & 
a1
,Éx¥ c⁄° & 
a2
,Éx¥ c⁄° & 
a3
,Éx¥ c⁄° & 
a4
,Éx¥ c⁄° & 
a5
) const {

3025 
	`check_c⁄ãxt
(*
this
, 
a1
); check_c⁄ãxt(*this, 
a2
); check_c⁄ãxt(*this, 
a3
); check_c⁄ãxt(*this, 
a4
); check_c⁄ãxt(*this, 
a5
);

3026 
Z3_a°
 
¨gs
[5] = { 
a1
, 
a2
, 
a3
, 
a4
, 
a5
 };

3027 
Z3_a°
 
r
 = 
	`Z3_mk_≠p
(
	`˘x
(), *
this
, 5, 
¨gs
);

3028 
	`˘x
().
	`check_îr‹
();

3029  
	`ex¥
(
	`˘x
(), 
r
);

3030 
	}
}

3032 
ölöe
 
ex¥
 
	$to_ªÆ
(
ex¥
 c⁄° & 
a
Ë{ 
Z3_a°
 
r
 = 
	`Z3_mk_öt2ªÆ
◊.
	`˘x
(),á);á.
	`check_îr‹
();  
	`ex¥
◊.˘x(),Ñ); 
	}
}

3034 
ölöe
 
func_de˛
 
	$fun˘i⁄
(
symbﬁ
 c⁄° & 
«me
, 
¨ôy
, 
s‹t
 c⁄° * 
domaö
, s‹àc⁄° & 
ønge
) {

3035  
ønge
.
	`˘x
().
	`fun˘i⁄
(
«me
, 
¨ôy
, 
domaö
,Ñange);

3036 
	}
}

3037 
ölöe
 
func_de˛
 
	$fun˘i⁄
(c⁄° * 
«me
, 
¨ôy
, 
s‹t
 c⁄° * 
domaö
, s‹àc⁄° & 
ønge
) {

3038  
ønge
.
	`˘x
().
	`fun˘i⁄
(
«me
, 
¨ôy
, 
domaö
,Ñange);

3039 
	}
}

3040 
ölöe
 
func_de˛
 
	$fun˘i⁄
(c⁄° * 
«me
, 
s‹t
 c⁄° & 
domaö
, s‹àc⁄° & 
ønge
) {

3041  
ønge
.
	`˘x
().
	`fun˘i⁄
(
«me
, 
domaö
,Ñange);

3042 
	}
}

3043 
ölöe
 
func_de˛
 
	$fun˘i⁄
(c⁄° * 
«me
, 
s‹t
 c⁄° & 
d1
, s‹àc⁄° & 
d2
, s‹àc⁄° & 
ønge
) {

3044  
ønge
.
	`˘x
().
	`fun˘i⁄
(
«me
, 
d1
, 
d2
,Ñange);

3045 
	}
}

3046 
ölöe
 
func_de˛
 
	$fun˘i⁄
(c⁄° * 
«me
, 
s‹t
 c⁄° & 
d1
, s‹àc⁄° & 
d2
, s‹àc⁄° & 
d3
, s‹àc⁄° & 
ønge
) {

3047  
ønge
.
	`˘x
().
	`fun˘i⁄
(
«me
, 
d1
, 
d2
, 
d3
,Ñange);

3048 
	}
}

3049 
ölöe
 
func_de˛
 
	$fun˘i⁄
(c⁄° * 
«me
, 
s‹t
 c⁄° & 
d1
, s‹àc⁄° & 
d2
, s‹àc⁄° & 
d3
, s‹àc⁄° & 
d4
, s‹àc⁄° & 
ønge
) {

3050  
ønge
.
	`˘x
().
	`fun˘i⁄
(
«me
, 
d1
, 
d2
, 
d3
, 
d4
,Ñange);

3051 
	}
}

3052 
ölöe
 
func_de˛
 
	$fun˘i⁄
(c⁄° * 
«me
, 
s‹t
 c⁄° & 
d1
, s‹àc⁄° & 
d2
, s‹àc⁄° & 
d3
, s‹àc⁄° & 
d4
, s‹àc⁄° & 
d5
, s‹àc⁄° & 
ønge
) {

3053  
ønge
.
	`˘x
().
	`fun˘i⁄
(
«me
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
,Ñange);

3054 
	}
}

3055 
ölöe
 
func_de˛
 
	$fun˘i⁄
(c⁄°* 
«me
, 
s‹t_ve˘‹
 c⁄°& 
domaö
, 
s‹t
 c⁄°& 
ønge
) {

3056  
ønge
.
	`˘x
().
	`fun˘i⁄
(
«me
, 
domaö
,Ñange);

3057 
	}
}

3058 
ölöe
 
func_de˛
 
	$fun˘i⁄
(
°d
::
°rög
 c⁄°& 
«me
, 
s‹t_ve˘‹
 c⁄°& 
domaö
, 
s‹t
 c⁄°& 
ønge
) {

3059  
ønge
.
	`˘x
().
	`fun˘i⁄
(
«me
.
	`c_°r
(), 
domaö
,Ñange);

3060 
	}
}

3062 
ölöe
 
func_de˛
 
	$ªcfun
(
symbﬁ
 c⁄° & 
«me
, 
¨ôy
, 
s‹t
 c⁄° * 
domaö
, s‹àc⁄° & 
ønge
) {

3063  
ønge
.
	`˘x
().
	`ªcfun
(
«me
, 
¨ôy
, 
domaö
,Ñange);

3064 
	}
}

3065 
ölöe
 
func_de˛
 
	$ªcfun
(c⁄° * 
«me
, 
¨ôy
, 
s‹t
 c⁄° * 
domaö
, s‹àc⁄° & 
ønge
) {

3066  
ønge
.
	`˘x
().
	`ªcfun
(
«me
, 
¨ôy
, 
domaö
,Ñange);

3067 
	}
}

3068 
ölöe
 
func_de˛
 
	$ªcfun
(c⁄° * 
«me
, 
s‹t
 c⁄°& 
d1
, s‹àc⁄° & 
ønge
) {

3069  
ønge
.
	`˘x
().
	`ªcfun
(
«me
, 
d1
,Ñange);

3070 
	}
}

3071 
ölöe
 
func_de˛
 
	$ªcfun
(c⁄° * 
«me
, 
s‹t
 c⁄°& 
d1
, s‹àc⁄°& 
d2
, s‹àc⁄° & 
ønge
) {

3072  
ønge
.
	`˘x
().
	`ªcfun
(
«me
, 
d1
, 
d2
,Ñange);

3073 
	}
}

3075 
ölöe
 
ex¥
 
	$£À˘
(
ex¥
 c⁄° & 
a
,Éx¥ c⁄° & 
i
) {

3076 
	`check_c⁄ãxt
(
a
, 
i
);

3077 
Z3_a°
 
r
 = 
	`Z3_mk_£À˘
(
a
.
	`˘x
(),á, 
i
);

3078 
a
.
	`check_îr‹
();

3079  
	`ex¥
(
a
.
	`˘x
(), 
r
);

3080 
	}
}

3081 
ölöe
 
ex¥
 
	$£À˘
(
ex¥
 c⁄° & 
a
, 
i
) {

3082  
	`£À˘
(
a
,á.
	`˘x
().
	`num_vÆ
(
i
,á.
	`gë_s‹t
().
	`¨øy_domaö
()));

3083 
	}
}

3084 
ölöe
 
ex¥
 
	$£À˘
(
ex¥
 c⁄° & 
a
, 
ex¥_ve˘‹
 c⁄° & 
i
) {

3085 
	`check_c⁄ãxt
(
a
, 
i
);

3086 
¨øy
<
Z3_a°
> 
	`idxs
(
i
);

3087 
Z3_a°
 
r
 = 
	`Z3_mk_£À˘_n
(
a
.
	`˘x
(),á, 
idxs
.
	`size
(), idxs.
	`±r
());

3088 
a
.
	`check_îr‹
();

3089  
	`ex¥
(
a
.
	`˘x
(), 
r
);

3090 
	}
}

3092 
ölöe
 
ex¥
 
	$°‹e
(
ex¥
 c⁄° & 
a
,Éx¥ c⁄° & 
i
,Éx¥ c⁄° & 
v
) {

3093 
	`check_c⁄ãxt
(
a
, 
i
); check_c⁄ãxt◊, 
v
);

3094 
Z3_a°
 
r
 = 
	`Z3_mk_°‹e
(
a
.
	`˘x
(),á, 
i
, 
v
);

3095 
a
.
	`check_îr‹
();

3096  
	`ex¥
(
a
.
	`˘x
(), 
r
);

3097 
	}
}

3099 
ölöe
 
ex¥
 
	$°‹e
(
ex¥
 c⁄° & 
a
, 
i
,Éx¥ c⁄° & 
v
Ë{  
	`°‹e
◊,á.
	`˘x
().
	`num_vÆ
(i,á.
	`gë_s‹t
().
	`¨øy_domaö
()), v); 
	}
}

3100 
ölöe
 
ex¥
 
	$°‹e
(
ex¥
 c⁄° & 
a
,Éx¥ 
i
, 
v
Ë{  
	`°‹e
◊, i,á.
	`˘x
().
	`num_vÆ
(v,á.
	`gë_s‹t
().
	`¨øy_ønge
())); 
	}
}

3101 
ölöe
 
ex¥
 
	$°‹e
(
ex¥
 c⁄° & 
a
, 
i
, 
v
) {

3102  
	`°‹e
(
a
,á.
	`˘x
().
	`num_vÆ
(
i
,á.
	`gë_s‹t
().
	`¨øy_domaö
()),á.˘x().num_vÆ(
v
,á.gë_s‹t().
	`¨øy_ønge
()));

3103 
	}
}

3104 
ölöe
 
ex¥
 
	$°‹e
(
ex¥
 c⁄° & 
a
, 
ex¥_ve˘‹
 c⁄° & 
i
,Éx¥ c⁄° & 
v
) {

3105 
	`check_c⁄ãxt
(
a
, 
i
); check_c⁄ãxt◊, 
v
);

3106 
¨øy
<
Z3_a°
> 
	`idxs
(
i
);

3107 
Z3_a°
 
r
 = 
	`Z3_mk_°‹e_n
(
a
.
	`˘x
(),á, 
idxs
.
	`size
(), idxs.
	`±r
(), 
v
);

3108 
a
.
	`check_îr‹
();

3109  
	`ex¥
(
a
.
	`˘x
(), 
r
);

3110 
	}
}

3112 
ölöe
 
ex¥
 
	$as_¨øy
(
func_de˛
 & 
f
) {

3113 
Z3_a°
 
r
 = 
	`Z3_mk_as_¨øy
(
f
.
	`˘x
(), f);

3114 
f
.
	`check_îr‹
();

3115  
	`ex¥
(
f
.
	`˘x
(), 
r
);

3116 
	}
}

3118 
	#MK_EXPR1
(
_‚
, 
_¨g
) \

3119 
Z3_a°
 
r
 = 
	`_‚
(
_¨g
.
	`˘x
(), _arg); \

3120 
_¨g
.
	`check_îr‹
(); \

3121  
	`ex¥
(
_¨g
.
	`˘x
(), 
r
);

	)

3123 
	#MK_EXPR2
(
_‚
, 
_¨g1
, 
_¨g2
) \

3124 
	`check_c⁄ãxt
(
_¨g1
, 
_¨g2
); \

3125 
Z3_a°
 
r
 = 
	`_‚
(
_¨g1
.
	`˘x
(), _¨g1, 
_¨g2
); \

3126 
_¨g1
.
	`check_îr‹
(); \

3127  
	`ex¥
(
_¨g1
.
	`˘x
(), 
r
);

	)

3129 
ölöe
 
ex¥
 
	$c⁄°_¨øy
(
s‹t
 c⁄° & 
d
, 
ex¥
 c⁄° & 
v
) {

3130 
	`MK_EXPR2
(
Z3_mk_c⁄°_¨øy
, 
d
, 
v
);

3131 
	}
}

3133 
ölöe
 
ex¥
 
	$em±y_£t
(
s‹t
 c⁄°& 
s
) {

3134 
	`MK_EXPR1
(
Z3_mk_em±y_£t
, 
s
);

3135 
	}
}

3137 
ölöe
 
ex¥
 
	$fuŒ_£t
(
s‹t
 c⁄°& 
s
) {

3138 
	`MK_EXPR1
(
Z3_mk_fuŒ_£t
, 
s
);

3139 
	}
}

3141 
ölöe
 
ex¥
 
	$£t_add
(
ex¥
 c⁄°& 
s
,Éx¥ c⁄°& 
e
) {

3142 
	`MK_EXPR2
(
Z3_mk_£t_add
, 
s
, 
e
);

3143 
	}
}

3145 
ölöe
 
ex¥
 
	$£t_dñ
(
ex¥
 c⁄°& 
s
,Éx¥ c⁄°& 
e
) {

3146 
	`MK_EXPR2
(
Z3_mk_£t_dñ
, 
s
, 
e
);

3147 
	}
}

3149 
ölöe
 
ex¥
 
	$£t_uni⁄
(
ex¥
 c⁄°& 
a
,Éx¥ c⁄°& 
b
) {

3150 
	`check_c⁄ãxt
(
a
, 
b
);

3151 
Z3_a°
 
es
[2] = { 
a
, 
b
 };

3152 
Z3_a°
 
r
 = 
	`Z3_mk_£t_uni⁄
(
a
.
	`˘x
(), 2, 
es
);

3153 
a
.
	`check_îr‹
();

3154  
	`ex¥
(
a
.
	`˘x
(), 
r
);

3155 
	}
}

3157 
ölöe
 
ex¥
 
	$£t_öãr£˘
(
ex¥
 c⁄°& 
a
,Éx¥ c⁄°& 
b
) {

3158 
	`check_c⁄ãxt
(
a
, 
b
);

3159 
Z3_a°
 
es
[2] = { 
a
, 
b
 };

3160 
Z3_a°
 
r
 = 
	`Z3_mk_£t_öãr£˘
(
a
.
	`˘x
(), 2, 
es
);

3161 
a
.
	`check_îr‹
();

3162  
	`ex¥
(
a
.
	`˘x
(), 
r
);

3163 
	}
}

3165 
ölöe
 
ex¥
 
	$£t_dif„ªn˚
(
ex¥
 c⁄°& 
a
,Éx¥ c⁄°& 
b
) {

3166 
	`MK_EXPR2
(
Z3_mk_£t_dif„ªn˚
, 
a
, 
b
);

3167 
	}
}

3169 
ölöe
 
ex¥
 
	$£t_com∂emít
(
ex¥
 c⁄°& 
a
) {

3170 
	`MK_EXPR1
(
Z3_mk_£t_com∂emít
, 
a
);

3171 
	}
}

3173 
ölöe
 
ex¥
 
	$£t_membî
(
ex¥
 c⁄°& 
s
,Éx¥ c⁄°& 
e
) {

3174 
	`MK_EXPR2
(
Z3_mk_£t_membî
, 
s
, 
e
);

3175 
	}
}

3177 
ölöe
 
ex¥
 
	$£t_sub£t
(
ex¥
 c⁄°& 
a
,Éx¥ c⁄°& 
b
) {

3178 
	`MK_EXPR2
(
Z3_mk_£t_sub£t
, 
a
, 
b
);

3179 
	}
}

3185 
ölöe
 
ex¥
 
	$em±y
(
s‹t
 c⁄°& 
s
) {

3186 
Z3_a°
 
r
 = 
	`Z3_mk_£q_em±y
(
s
.
	`˘x
(), s);

3187 
s
.
	`check_îr‹
();

3188  
	`ex¥
(
s
.
	`˘x
(), 
r
);

3189 
	}
}

3190 
ölöe
 
ex¥
 
	$suffixof
(
ex¥
 c⁄°& 
a
,Éx¥ c⁄°& 
b
) {

3191 
	`check_c⁄ãxt
(
a
, 
b
);

3192 
Z3_a°
 
r
 = 
	`Z3_mk_£q_suffix
(
a
.
	`˘x
(),á, 
b
);

3193 
a
.
	`check_îr‹
();

3194  
	`ex¥
(
a
.
	`˘x
(), 
r
);

3195 
	}
}

3196 
ölöe
 
ex¥
 
	$¥efixof
(
ex¥
 c⁄°& 
a
,Éx¥ c⁄°& 
b
) {

3197 
	`check_c⁄ãxt
(
a
, 
b
);

3198 
Z3_a°
 
r
 = 
	`Z3_mk_£q_¥efix
(
a
.
	`˘x
(),á, 
b
);

3199 
a
.
	`check_îr‹
();

3200  
	`ex¥
(
a
.
	`˘x
(), 
r
);

3201 
	}
}

3202 
ölöe
 
ex¥
 
	$ödexof
(
ex¥
 c⁄°& 
s
,Éx¥ c⁄°& 
sub°r
,Éx¥ c⁄°& 
off£t
) {

3203 
	`check_c⁄ãxt
(
s
, 
sub°r
); check_c⁄ãxt(s, 
off£t
);

3204 
Z3_a°
 
r
 = 
	`Z3_mk_£q_ödex
(
s
.
	`˘x
(), s, 
sub°r
, 
off£t
);

3205 
s
.
	`check_îr‹
();

3206  
	`ex¥
(
s
.
	`˘x
(), 
r
);

3207 
	}
}

3208 
ölöe
 
ex¥
 
	$to_ª
(
ex¥
 c⁄°& 
s
) {

3209 
	`MK_EXPR1
(
Z3_mk_£q_to_ª
, 
s
);

3210 
	}
}

3211 
ölöe
 
ex¥
 
	$ö_ª
(
ex¥
 c⁄°& 
s
,Éx¥ c⁄°& 
ª
) {

3212 
	`MK_EXPR2
(
Z3_mk_£q_ö_ª
, 
s
, 
ª
);

3213 
	}
}

3214 
ölöe
 
ex¥
 
	$∂us
(
ex¥
 c⁄°& 
ª
) {

3215 
	`MK_EXPR1
(
Z3_mk_ª_∂us
, 
ª
);

3216 
	}
}

3217 
ölöe
 
ex¥
 
	$›ti⁄
(
ex¥
 c⁄°& 
ª
) {

3218 
	`MK_EXPR1
(
Z3_mk_ª_›ti⁄
, 
ª
);

3219 
	}
}

3220 
ölöe
 
ex¥
 
	$°¨
(
ex¥
 c⁄°& 
ª
) {

3221 
	`MK_EXPR1
(
Z3_mk_ª_°¨
, 
ª
);

3222 
	}
}

3223 
ölöe
 
ex¥
 
	$ª_em±y
(
s‹t
 c⁄°& 
s
) {

3224 
Z3_a°
 
r
 = 
	`Z3_mk_ª_em±y
(
s
.
	`˘x
(), s);

3225 
s
.
	`check_îr‹
();

3226  
	`ex¥
(
s
.
	`˘x
(), 
r
);

3227 
	}
}

3228 
ölöe
 
ex¥
 
	$ª_fuŒ
(
s‹t
 c⁄°& 
s
) {

3229 
Z3_a°
 
r
 = 
	`Z3_mk_ª_fuŒ
(
s
.
	`˘x
(), s);

3230 
s
.
	`check_îr‹
();

3231  
	`ex¥
(
s
.
	`˘x
(), 
r
);

3232 
	}
}

3233 
ölöe
 
ex¥
 
	$ª_öãr£˘
(
ex¥_ve˘‹
 c⁄°& 
¨gs
) {

3234 
	`as£π
(
¨gs
.
	`size
() > 0);

3235 
c⁄ãxt
& 
˘x
 = 
¨gs
[0].
	`˘x
();

3236 
¨øy
<
Z3_a°
> 
	`_¨gs
(
¨gs
);

3237 
Z3_a°
 
r
 = 
	`Z3_mk_ª_öãr£˘
(
˘x
, 
_¨gs
.
	`size
(), _¨gs.
	`±r
());

3238 
˘x
.
	`check_îr‹
();

3239  
	`ex¥
(
˘x
, 
r
);

3240 
	}
}

3241 
ölöe
 
ex¥
 
	$ª_com∂emít
(
ex¥
 c⁄°& 
a
) {

3242 
	`MK_EXPR1
(
Z3_mk_ª_com∂emít
, 
a
);

3243 
	}
}

3244 
ölöe
 
ex¥
 
	$ønge
(
ex¥
 c⁄°& 
lo
,Éx¥ c⁄°& 
hi
) {

3245 
	`check_c⁄ãxt
(
lo
, 
hi
);

3246 
Z3_a°
 
r
 = 
	`Z3_mk_ª_ønge
(
lo
.
	`˘x
(),Üo, 
hi
);

3247 
lo
.
	`check_îr‹
();

3248  
	`ex¥
(
lo
.
	`˘x
(), 
r
);

3249 
	}
}

3255 
ölöe
 
ex¥_ve˘‹
 
	gc⁄ãxt
::
	$∑r£_°rög
(c⁄°* 
s
) {

3256 
Z3_a°_ve˘‹
 
r
 = 
	`Z3_∑r£_sméib2_°rög
(*
this
, 
s
, 0, 0, 0, 0, 0, 0);

3257 
	`check_îr‹
();

3258  
	`ex¥_ve˘‹
(*
this
, 
r
);

3260 
	}
}

3261 
ölöe
 
ex¥_ve˘‹
 
	gc⁄ãxt
::
	$∑r£_fûe
(c⁄°* 
s
) {

3262 
Z3_a°_ve˘‹
 
r
 = 
	`Z3_∑r£_sméib2_fûe
(*
this
, 
s
, 0, 0, 0, 0, 0, 0);

3263 
	`check_îr‹
();

3264  
	`ex¥_ve˘‹
(*
this
, 
r
);

3265 
	}
}

3267 
ölöe
 
ex¥_ve˘‹
 
	gc⁄ãxt
::
	$∑r£_°rög
(c⁄°* 
s
, 
s‹t_ve˘‹
 c⁄°& 
s‹ts
, 
func_de˛_ve˘‹
 c⁄°& 
de˛s
) {

3268 
¨øy
<
Z3_symbﬁ
> 
	`s‹t_«mes
(
s‹ts
.
	`size
());

3269 
¨øy
<
Z3_symbﬁ
> 
	`de˛_«mes
(
de˛s
.
	`size
());

3270 
¨øy
<
Z3_s‹t
> 
	`s‹ts1
(
s‹ts
);

3271 
¨øy
<
Z3_func_de˛
> 
	`de˛s1
(
de˛s
);

3272 
i
 = 0; i < 
s‹ts
.
	`size
(); ++i) {

3273 
s‹t_«mes
[
i
] = 
s‹ts
[i].
	`«me
();

3275 
i
 = 0; i < 
de˛s
.
	`size
(); ++i) {

3276 
de˛_«mes
[
i
] = 
de˛s
[i].
	`«me
();

3279 
Z3_a°_ve˘‹
 
r
 = 
	`Z3_∑r£_sméib2_°rög
(*
this
, 
s
, 
s‹ts
.
	`size
(), 
s‹t_«mes
.
	`±r
(), 
s‹ts1
.±r(), 
de˛s
.size(), 
de˛_«mes
.±r(), 
de˛s1
.ptr());

3280 
	`check_îr‹
();

3281  
	`ex¥_ve˘‹
(*
this
, 
r
);

3282 
	}
}

3284 
ölöe
 
ex¥_ve˘‹
 
	gc⁄ãxt
::
	$∑r£_fûe
(c⁄°* 
s
, 
s‹t_ve˘‹
 c⁄°& 
s‹ts
, 
func_de˛_ve˘‹
 c⁄°& 
de˛s
) {

3285 
¨øy
<
Z3_symbﬁ
> 
	`s‹t_«mes
(
s‹ts
.
	`size
());

3286 
¨øy
<
Z3_symbﬁ
> 
	`de˛_«mes
(
de˛s
.
	`size
());

3287 
¨øy
<
Z3_s‹t
> 
	`s‹ts1
(
s‹ts
);

3288 
¨øy
<
Z3_func_de˛
> 
	`de˛s1
(
de˛s
);

3289 
i
 = 0; i < 
s‹ts
.
	`size
(); ++i) {

3290 
s‹t_«mes
[
i
] = 
s‹ts
[i].
	`«me
();

3292 
i
 = 0; i < 
de˛s
.
	`size
(); ++i) {

3293 
de˛_«mes
[
i
] = 
de˛s
[i].
	`«me
();

3295 
Z3_a°_ve˘‹
 
r
 = 
	`Z3_∑r£_sméib2_fûe
(*
this
, 
s
, 
s‹ts
.
	`size
(), 
s‹t_«mes
.
	`±r
(), 
s‹ts1
.±r(), 
de˛s
.size(), 
de˛_«mes
.±r(), 
de˛s1
.ptr());

3296 
	`check_îr‹
();

3297  
	`ex¥_ve˘‹
(*
this
, 
r
);

3298 
	}
}

3301 
ölöe
 
ex¥
 
	gex¥
::
	$sub°ôuã
(
ex¥_ve˘‹
 c⁄°& 
§c
,Éx¥_ve˘‹ c⁄°& 
d°
) {

3302 
	`as£π
(
§c
.
	`size
(Ë=
d°
.size());

3303 
¨øy
<
Z3_a°
> 
	`_§c
(
§c
.
	`size
());

3304 
¨øy
<
Z3_a°
> 
	`_d°
(
d°
.
	`size
());

3305 
i
 = 0; i < 
§c
.
	`size
(); ++i) {

3306 
_§c
[
i
] = 
§c
[i];

3307 
_d°
[
i
] = 
d°
[i];

3309 
Z3_a°
 
r
 = 
	`Z3_sub°ôuã
(
	`˘x
(), 
m_a°
, 
§c
.
	`size
(), 
_§c
.
	`±r
(), 
_d°
.ptr());

3310 
	`check_îr‹
();

3311  
	`ex¥
(
	`˘x
(), 
r
);

3312 
	}
}

3314 
ölöe
 
ex¥
 
	gex¥
::
	$sub°ôuã
(
ex¥_ve˘‹
 c⁄°& 
d°
) {

3315 
¨øy
<
Z3_a°
> 
	`_d°
(
d°
.
	`size
());

3316 
i
 = 0; i < 
d°
.
	`size
(); ++i) {

3317 
_d°
[
i
] = 
d°
[i];

3319 
Z3_a°
 
r
 = 
	`Z3_sub°ôuã_v¨s
(
	`˘x
(), 
m_a°
, 
d°
.
	`size
(), 
_d°
.
	`±r
());

3320 
	`check_îr‹
();

3321  
	`ex¥
(
	`˘x
(), 
r
);

3322 
	}
}

3330 #unde‡
Z3_THROW


	@/usr/include/asm-generic/types.h

2 #i‚de‡
_ASM_GENERIC_TYPES_H


3 
	#_ASM_GENERIC_TYPES_H


	)

7 
	~<asm-gíîic/öt-Œ64.h
>

	@/usr/include/asm/posix_types.h

2 #ifde‡
__i386__


3 
	~<asm/posix_ty≥s_32.h
>

4 #ñi‡
deföed
(
__ILP32__
)

5 
	~<asm/posix_ty≥s_x32.h
>

7 
	~<asm/posix_ty≥s_64.h
>

	@/usr/include/bits/auxv.h

20 
	#AT_NULL
 0

	)

21 
	#AT_IGNORE
 1

	)

22 
	#AT_EXECFD
 2

	)

23 
	#AT_PHDR
 3

	)

24 
	#AT_PHENT
 4

	)

25 
	#AT_PHNUM
 5

	)

26 
	#AT_PAGESZ
 6

	)

27 
	#AT_BASE
 7

	)

28 
	#AT_FLAGS
 8

	)

29 
	#AT_ENTRY
 9

	)

30 
	#AT_NOTELF
 10

	)

31 
	#AT_UID
 11

	)

32 
	#AT_EUID
 12

	)

33 
	#AT_GID
 13

	)

34 
	#AT_EGID
 14

	)

35 
	#AT_CLKTCK
 17

	)

38 
	#AT_PLATFORM
 15

	)

39 
	#AT_HWCAP
 16

	)

44 
	#AT_FPUCW
 18

	)

47 
	#AT_DCACHEBSIZE
 19

	)

48 
	#AT_ICACHEBSIZE
 20

	)

49 
	#AT_UCACHEBSIZE
 21

	)

53 
	#AT_IGNOREPPC
 22

	)

55 
	#AT_SECURE
 23

	)

57 
	#AT_BASE_PLATFORM
 24

	)

59 
	#AT_RANDOM
 25

	)

61 
	#AT_HWCAP2
 26

	)

64 
	#AT_EXECFN
 31

	)

68 
	#AT_SYSINFO
 32

	)

69 
	#AT_SYSINFO_EHDR
 33

	)

73 
	#AT_L1I_CACHESHAPE
 34

	)

74 
	#AT_L1D_CACHESHAPE
 35

	)

75 
	#AT_L2_CACHESHAPE
 36

	)

76 
	#AT_L3_CACHESHAPE
 37

	)

81 
	#AT_L1I_CACHESIZE
 40

	)

82 
	#AT_L1I_CACHEGEOMETRY
 41

	)

83 
	#AT_L1D_CACHESIZE
 42

	)

84 
	#AT_L1D_CACHEGEOMETRY
 43

	)

85 
	#AT_L2_CACHESIZE
 44

	)

86 
	#AT_L2_CACHEGEOMETRY
 45

	)

87 
	#AT_L3_CACHESIZE
 46

	)

88 
	#AT_L3_CACHEGEOMETRY
 47

	)

90 
	#AT_MINSIGSTKSZ
 51

	)

	@/usr/include/bits/floatn-common.h

20 #i‚de‡
_BITS_FLOATN_COMMON_H


21 
	#_BITS_FLOATN_COMMON_H


	)

23 
	~<„©uªs.h
>

24 
	~<bôs/l⁄g-doubÀ.h
>

34 
	#__HAVE_FLOAT16
 0

	)

35 
	#__HAVE_FLOAT32
 1

	)

36 
	#__HAVE_FLOAT64
 1

	)

37 
	#__HAVE_FLOAT32X
 1

	)

38 
	#__HAVE_FLOAT128X
 0

	)

52 
	#__HAVE_DISTINCT_FLOAT16
 
__HAVE_FLOAT16


	)

53 
	#__HAVE_DISTINCT_FLOAT32
 0

	)

54 
	#__HAVE_DISTINCT_FLOAT64
 0

	)

55 
	#__HAVE_DISTINCT_FLOAT32X
 0

	)

56 
	#__HAVE_DISTINCT_FLOAT64X
 0

	)

57 
	#__HAVE_DISTINCT_FLOAT128X
 
__HAVE_FLOAT128X


	)

63 
	#__HAVE_FLOAT128_UNLIKE_LDBL
 (
__HAVE_DISTINCT_FLOAT128
 \

64 && 
__LDBL_MANT_DIG__
 !113)

	)

69 #i‡
__GNUC_PREREQ
 (7, 0Ë&& !
deföed
 
__˝lu•lus


70 
	#__HAVE_FLOATN_NOT_TYPEDEF
 1

	)

72 
	#__HAVE_FLOATN_NOT_TYPEDEF
 0

	)

75 #i‚de‡
__ASSEMBLER__


80 #i‡
__HAVE_FLOAT16


81 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


83 
	#__f16
(
x
Ë((
_Flﬂt16
Ëx##
f
)

	)

85 
	#__f16
(
x
Ëx##
f16


	)

89 #i‡
__HAVE_FLOAT32


90 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


91 
	#__f32
(
x
Ëx##
f


	)

93 
	#__f32
(
x
Ëx##
f32


	)

97 #i‡
__HAVE_FLOAT64


98 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


99 #ifde‡
__NO_LONG_DOUBLE_MATH


100 
	#__f64
(
x
Ëx##
l


	)

102 
	#__f64
(
x
Ë
	)
x

105 
	#__f64
(
x
Ëx##
f64


	)

109 #i‡
__HAVE_FLOAT32X


110 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


111 
	#__f32x
(
x
Ë
	)
x

113 
	#__f32x
(
x
Ëx##
f32x


	)

117 #i‡
__HAVE_FLOAT64X


118 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


119 #i‡
__HAVE_FLOAT64X_LONG_DOUBLE


120 
	#__f64x
(
x
Ëx##
l


	)

122 
	#__f64x
(
x
Ë
	`__f128
 (x)

	)

125 
	#__f64x
(
x
Ëx##
f64x


	)

129 #i‡
__HAVE_FLOAT128X


130 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


133 
	#__f128x
(
x
Ëx##
f128x


	)

138 #i‡
__HAVE_FLOAT16


139 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


140 
_Com∂ex
 
	t__cÊﬂt16
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HC__
)));

141 
	#__CFLOAT16
 
__cÊﬂt16


	)

143 
	#__CFLOAT16
 
_Com∂ex
 
_Flﬂt16


	)

147 #i‡
__HAVE_FLOAT32


148 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


149 
	#__CFLOAT32
 
_Com∂ex
 

	)

151 
	#__CFLOAT32
 
_Com∂ex
 
_Flﬂt32


	)

155 #i‡
__HAVE_FLOAT64


156 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


157 #ifde‡
__NO_LONG_DOUBLE_MATH


158 
	#__CFLOAT64
 
_Com∂ex
 

	)

160 
	#__CFLOAT64
 
_Com∂ex
 

	)

163 
	#__CFLOAT64
 
_Com∂ex
 
_Flﬂt64


	)

167 #i‡
__HAVE_FLOAT32X


168 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


169 
	#__CFLOAT32X
 
_Com∂ex
 

	)

171 
	#__CFLOAT32X
 
_Com∂ex
 
_Flﬂt32x


	)

175 #i‡
__HAVE_FLOAT64X


176 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


177 #i‡
__HAVE_FLOAT64X_LONG_DOUBLE


178 
	#__CFLOAT64X
 
_Com∂ex
 

	)

180 
	#__CFLOAT64X
 
__CFLOAT128


	)

183 
	#__CFLOAT64X
 
_Com∂ex
 
_Flﬂt64x


	)

187 #i‡
__HAVE_FLOAT128X


188 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


191 
	#__CFLOAT128X
 
_Com∂ex
 
_Flﬂt128x


	)

196 #i‡
__HAVE_FLOAT16


198 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


199 
	t_Flﬂt16
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HF__
)));

202 #i‡!
__GNUC_PREREQ
 (7, 0)

203 
	#__buûtö_huge_vÆf16
(Ë((
_Flﬂt16
Ë
	`__buûtö_huge_vÆ
 ())

	)

204 
	#__buûtö_öff16
(Ë((
_Flﬂt16
Ë
	`__buûtö_öf
 ())

	)

205 
	#__buûtö_«nf16
(
x
Ë((
_Flﬂt16
Ë
	`__buûtö_«n
 (x))

	)

206 
	#__buûtö_«nsf16
(
x
Ë((
_Flﬂt16
Ë
	`__buûtö_«ns
 (x))

	)

211 #i‡
__HAVE_FLOAT32


213 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


214 
	t_Flﬂt32
;

217 #i‡!
__GNUC_PREREQ
 (7, 0)

218 
	#__buûtö_huge_vÆf32
(Ë(
	`__buûtö_huge_vÆf
 ())

	)

219 
	#__buûtö_öff32
(Ë(
	`__buûtö_öff
 ())

	)

220 
	#__buûtö_«nf32
(
x
Ë(
	`__buûtö_«nf
 (x))

	)

221 
	#__buûtö_«nsf32
(
x
Ë(
	`__buûtö_«nsf
 (x))

	)

226 #i‡
__HAVE_FLOAT64


235 #ifde‡
__NO_LONG_DOUBLE_MATH


237 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


238 
	t_Flﬂt64
;

241 #i‡!
__GNUC_PREREQ
 (7, 0)

242 
	#__buûtö_huge_vÆf64
(Ë(
	`__buûtö_huge_vÆl
 ())

	)

243 
	#__buûtö_öff64
(Ë(
	`__buûtö_öÊ
 ())

	)

244 
	#__buûtö_«nf64
(
x
Ë(
	`__buûtö_«∆
 (x))

	)

245 
	#__buûtö_«nsf64
(
x
Ë(
	`__buûtö_«n¶
 (x))

	)

250 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


251 
	t_Flﬂt64
;

254 #i‡!
__GNUC_PREREQ
 (7, 0)

255 
	#__buûtö_huge_vÆf64
(Ë(
	`__buûtö_huge_vÆ
 ())

	)

256 
	#__buûtö_öff64
(Ë(
	`__buûtö_öf
 ())

	)

257 
	#__buûtö_«nf64
(
x
Ë(
	`__buûtö_«n
 (x))

	)

258 
	#__buûtö_«nsf64
(
x
Ë(
	`__buûtö_«ns
 (x))

	)

265 #i‡
__HAVE_FLOAT32X


267 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


268 
	t_Flﬂt32x
;

271 #i‡!
__GNUC_PREREQ
 (7, 0)

272 
	#__buûtö_huge_vÆf32x
(Ë(
	`__buûtö_huge_vÆ
 ())

	)

273 
	#__buûtö_öff32x
(Ë(
	`__buûtö_öf
 ())

	)

274 
	#__buûtö_«nf32x
(
x
Ë(
	`__buûtö_«n
 (x))

	)

275 
	#__buûtö_«nsf32x
(
x
Ë(
	`__buûtö_«ns
 (x))

	)

280 #i‡
__HAVE_FLOAT64X


282 #i‡
__HAVE_FLOAT64X_LONG_DOUBLE


284 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


285 
	t_Flﬂt64x
;

288 #i‡!
__GNUC_PREREQ
 (7, 0)

289 
	#__buûtö_huge_vÆf64x
(Ë(
	`__buûtö_huge_vÆl
 ())

	)

290 
	#__buûtö_öff64x
(Ë(
	`__buûtö_öÊ
 ())

	)

291 
	#__buûtö_«nf64x
(
x
Ë(
	`__buûtö_«∆
 (x))

	)

292 
	#__buûtö_«nsf64x
(
x
Ë(
	`__buûtö_«n¶
 (x))

	)

297 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


298 
_Flﬂt128
 
	t_Flﬂt64x
;

301 #i‡!
__GNUC_PREREQ
 (7, 0)

302 
	#__buûtö_huge_vÆf64x
(Ë(
	`__buûtö_huge_vÆf128
 ())

	)

303 
	#__buûtö_öff64x
(Ë(
	`__buûtö_öff128
 ())

	)

304 
	#__buûtö_«nf64x
(
x
Ë(
	`__buûtö_«nf128
 (x))

	)

305 
	#__buûtö_«nsf64x
(
x
Ë(
	`__buûtö_«nsf128
 (x))

	)

312 #i‡
__HAVE_FLOAT128X


314 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


318 #i‡!
__GNUC_PREREQ
 (7, 0)

319 
	#__buûtö_huge_vÆf128x
(Ë((
_Flﬂt128x
Ë
	`__buûtö_huge_vÆ
 ())

	)

320 
	#__buûtö_öff128x
(Ë((
_Flﬂt128x
Ë
	`__buûtö_öf
 ())

	)

321 
	#__buûtö_«nf128x
(
x
Ë((
_Flﬂt128x
Ë
	`__buûtö_«n
 (x))

	)

322 
	#__buûtö_«nsf128x
(
x
Ë((
_Flﬂt128x
Ë
	`__buûtö_«ns
 (x))

	)

	@/usr/include/bits/getopt_core.h

20 #i‚de‡
_GETOPT_CORE_H


21 
	#_GETOPT_CORE_H
 1

	)

28 
__BEGIN_DECLS


36 *
›èrg
;

50 
›töd
;

55 
›ãº
;

59 
›t›t
;

91 
	$gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

92 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

94 
__END_DECLS


	@/usr/include/bits/mman-linux.h

19 #i‚de‡
_SYS_MMAN_H


32 
	#PROT_READ
 0x1

	)

33 
	#PROT_WRITE
 0x2

	)

34 
	#PROT_EXEC
 0x4

	)

35 
	#PROT_NONE
 0x0

	)

36 
	#PROT_GROWSDOWN
 0x01000000

	)

38 
	#PROT_GROWSUP
 0x02000000

	)

42 
	#MAP_SHARED
 0x01

	)

43 
	#MAP_PRIVATE
 0x02

	)

44 #ifde‡
__USE_MISC


45 
	#MAP_SHARED_VALIDATE
 0x03

	)

47 
	#MAP_TYPE
 0x0‡

	)

51 
	#MAP_FIXED
 0x10

	)

52 #ifde‡
__USE_MISC


53 
	#MAP_FILE
 0

	)

54 #ifde‡
__MAP_ANONYMOUS


55 
	#MAP_ANONYMOUS
 
__MAP_ANONYMOUS


	)

57 
	#MAP_ANONYMOUS
 0x20

	)

59 
	#MAP_ANON
 
MAP_ANONYMOUS


	)

61 
	#MAP_HUGE_SHIFT
 26

	)

62 
	#MAP_HUGE_MASK
 0x3f

	)

66 
	#MS_ASYNC
 1

	)

67 
	#MS_SYNC
 4

	)

68 
	#MS_INVALIDATE
 2

	)

71 #ifde‡
__USE_MISC


72 
	#MADV_NORMAL
 0

	)

73 
	#MADV_RANDOM
 1

	)

74 
	#MADV_SEQUENTIAL
 2

	)

75 
	#MADV_WILLNEED
 3

	)

76 
	#MADV_DONTNEED
 4

	)

77 
	#MADV_FREE
 8

	)

78 
	#MADV_REMOVE
 9

	)

79 
	#MADV_DONTFORK
 10

	)

80 
	#MADV_DOFORK
 11

	)

81 
	#MADV_MERGEABLE
 12

	)

82 
	#MADV_UNMERGEABLE
 13

	)

83 
	#MADV_HUGEPAGE
 14

	)

84 
	#MADV_NOHUGEPAGE
 15

	)

85 
	#MADV_DONTDUMP
 16

	)

87 
	#MADV_DODUMP
 17

	)

88 
	#MADV_WIPEONFORK
 18

	)

89 
	#MADV_KEEPONFORK
 19

	)

90 
	#MADV_HWPOISON
 100

	)

94 #ifde‡
__USE_XOPEN2K


95 
	#POSIX_MADV_NORMAL
 0

	)

96 
	#POSIX_MADV_RANDOM
 1

	)

97 
	#POSIX_MADV_SEQUENTIAL
 2

	)

98 
	#POSIX_MADV_WILLNEED
 3

	)

99 
	#POSIX_MADV_DONTNEED
 4

	)

103 #i‚de‡
MCL_CURRENT


104 
	#MCL_CURRENT
 1

	)

105 
	#MCL_FUTURE
 2

	)

107 
	#MCL_ONFAULT
 4

	)

111 
	~<bôs/mm™-sh¨ed.h
>

	@/usr/include/bits/mman-map-flags-generic.h

19 #i‚de‡
_SYS_MMAN_H


28 #ifde‡
__USE_MISC


29 
	#MAP_GROWSDOWN
 0x00100

	)

30 
	#MAP_DENYWRITE
 0x00800

	)

31 
	#MAP_EXECUTABLE
 0x01000

	)

32 
	#MAP_LOCKED
 0x02000

	)

33 
	#MAP_NORESERVE
 0x04000

	)

34 
	#MAP_POPULATE
 0x08000

	)

35 
	#MAP_NONBLOCK
 0x10000

	)

36 
	#MAP_STACK
 0x20000

	)

37 
	#MAP_HUGETLB
 0x40000

	)

38 
	#MAP_SYNC
 0x80000

	)

40 
	#MAP_FIXED_NOREPLACE
 0x100000

	)

	@/usr/include/bits/siginfo-arch.h

2 #i‚de‡
_BITS_SIGINFO_ARCH_H


3 
	#_BITS_SIGINFO_ARCH_H
 1

	)

5 #i‡
deföed
 
__x86_64__
 && 
__WORDSIZE
 == 32

12 
__˛ock_t
 
	t__©åibuã__
 ((
	t__Æig√d__
 (4))Ë
	t__sigchld_˛ock_t
;

13 
	#__SI_ALIGNMENT
 
	`__©åibuã__
 ((
	`__Æig√d__
 (8)))

	)

14 
	#__SI_CLOCK_T
 
__sigchld_˛ock_t


	)

	@/usr/include/bits/siginfo-consts-arch.h

2 #i‚de‡
_BITS_SIGINFO_CONSTS_ARCH_H


3 
	#_BITS_SIGINFO_CONSTS_ARCH_H
 1

	)

	@/usr/include/bits/signum-generic.h

19 #i‚def 
_BITS_SIGNUM_GENERIC_H


20 
	#_BITS_SIGNUM_GENERIC_H
 1

	)

22 #i‚de‡
_SIGNAL_H


28 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

29 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

30 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

32 #ifde‡
__USE_XOPEN


33 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

48 
	#SIGINT
 2

	)

49 
	#SIGILL
 4

	)

50 
	#SIGABRT
 6

	)

51 
	#SIGFPE
 8

	)

52 
	#SIGSEGV
 11

	)

53 
	#SIGTERM
 15

	)

56 
	#SIGHUP
 1

	)

57 
	#SIGQUIT
 3

	)

58 
	#SIGTRAP
 5

	)

59 
	#SIGKILL
 9

	)

60 
	#SIGBUS
 10

	)

61 
	#SIGSYS
 12

	)

62 
	#SIGPIPE
 13

	)

63 
	#SIGALRM
 14

	)

66 
	#SIGURG
 16

	)

67 
	#SIGSTOP
 17

	)

68 
	#SIGTSTP
 18

	)

69 
	#SIGCONT
 19

	)

70 
	#SIGCHLD
 20

	)

71 
	#SIGTTIN
 21

	)

72 
	#SIGTTOU
 22

	)

73 
	#SIGPOLL
 23

	)

74 
	#SIGXCPU
 24

	)

75 
	#SIGXFSZ
 25

	)

76 
	#SIGVTALRM
 26

	)

77 
	#SIGPROF
 27

	)

78 
	#SIGUSR1
 30

	)

79 
	#SIGUSR2
 31

	)

83 
	#SIGWINCH
 28

	)

86 
	#SIGIO
 
SIGPOLL


	)

87 
	#SIGIOT
 
SIGABRT


	)

88 
	#SIGCLD
 
SIGCHLD


	)

96 
	#__SIGRTMIN
 32

	)

97 
	#__SIGRTMAX
 
__SIGRTMIN


	)

100 
	#_NSIG
 (
__SIGRTMAX
 + 1)

	)

	@/usr/include/bits/stdint-intn.h

19 #i‚de‡
_BITS_STDINT_INTN_H


20 
	#_BITS_STDINT_INTN_H
 1

	)

22 
	~<bôs/ty≥s.h
>

24 
__öt8_t
 
	töt8_t
;

25 
__öt16_t
 
	töt16_t
;

26 
__öt32_t
 
	töt32_t
;

27 
__öt64_t
 
	töt64_t
;

	@/usr/include/bits/strings_fortified.h

19 #i‚de‡
__STRINGS_FORTIFIED


20 
	#__STRINGS_FORTIFIED
 1

	)

22 
__f‹tify_fun˘i⁄
 

23 
__NTH
 (
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__Àn
))

25 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

26 
	}
}

28 
__f‹tify_fun˘i⁄
 

29 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

31 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

32 
	}
}

	@/usr/include/bits/thread-shared-types.h

19 #i‚de‡
_THREAD_SHARED_TYPES_H


20 
	#_THREAD_SHARED_TYPES_H
 1

	)

77 
	~<bôs/±hªadty≥s-¨ch.h
>

81 #i‡!
__PTHREAD_MUTEX_USE_UNION


82 
	s__±hªad_öã∫Æ_li°


84 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

85 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

86 } 
	t__±hªad_li°_t
;

88 
	s__±hªad_öã∫Æ_¶i°


90 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

91 } 
	t__±hªad_¶i°_t
;

95 #i‡
__PTHREAD_MUTEX_LOCK_ELISION


96 #i‡!
__PTHREAD_MUTEX_USE_UNION


97 
	#__PTHREAD_SPINS_DATA
 \

98 
__•ös
; \

99 
__ñisi⁄


	)

100 
	#__PTHREAD_SPINS
 0, 0

	)

102 
	#__PTHREAD_SPINS_DATA
 \

105 
__e•ös
; \

106 
__ìlisi⁄
; \

107 } 
__ñisi⁄_d©a


	)

108 
	#__PTHREAD_SPINS
 { 0, 0 }

	)

109 
	#__•ös
 
__ñisi⁄_d©a
.
__e•ös


	)

110 
	#__ñisi⁄
 
__ñisi⁄_d©a
.
__ìlisi⁄


	)

113 
	#__PTHREAD_SPINS_DATA
 
__•ös


	)

115 
	#__PTHREAD_SPINS
 0

	)

118 
	s__±hªad_muãx_s


120 
__lock
 
	m__LOCK_ALIGNMENT
;

121 
	m__cou¡
;

122 
	m__ow√r
;

123 #i‡!
__PTHREAD_MUTEX_NUSERS_AFTER_KIND


124 
	m__nu£rs
;

148 
	m__köd
;

149 
	m__PTHREAD_COMPAT_PADDING_MID


150 #i‡
__PTHREAD_MUTEX_NUSERS_AFTER_KIND


151 
	m__nu£rs
;

153 #i‡!
__PTHREAD_MUTEX_USE_UNION


154 
	m__PTHREAD_SPINS_DATA
;

155 
__±hªad_li°_t
 
	m__li°
;

156 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

158 
__exãnsi⁄__
 union

160 
	m__PTHREAD_SPINS_DATA
;

161 
__±hªad_¶i°_t
 
	m__li°
;

163 
	#__PTHREAD_MUTEX_HAVE_PREV
 0

	)

165 
	m__PTHREAD_COMPAT_PADDING_END


171 
	s__±hªad_c⁄d_s


173 
__exãnsi⁄__
 union

175 
__exãnsi⁄__
 
	m__w£q
;

178 
	m__low
;

179 
	m__high
;

180 } 
	m__w£q32
;

182 
__exãnsi⁄__
 union

184 
__exãnsi⁄__
 
	m__g1_°¨t
;

187 
	m__low
;

188 
	m__high
;

189 } 
	m__g1_°¨t32
;

191 
	m__g_ªfs
[2] 
	m__LOCK_ALIGNMENT
;

192 
	m__g_size
[2];

193 
	m__g1_‹ig_size
;

194 
	m__wªfs
;

195 
	m__g_sig«ls
[2];

	@/usr/include/bits/time64.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TIME64_H


24 
	#_BITS_TIME64_H
 1

	)

28 #i‡
__TIMESIZE
 == 64

30 
	#__TIME64_T_TYPE
 
__TIME_T_TYPE


	)

33 
	#__TIME64_T_TYPE
 
__SQUAD_TYPE


	)

	@/usr/include/bits/timesize.h

19 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


21 
	#__TIMESIZE
 64

	)

24 
	#__TIMESIZE
 
__WORDSIZE


	)

	@/usr/include/bits/types/__locale_t.h

20 #i‚de‡
_BITS_TYPES___LOCALE_T_H


21 
	#_BITS_TYPES___LOCALE_T_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

42 
__loˇÀ_°ru˘
 *
	t__loˇÀ_t
;

	@/usr/include/bits/types/__mbstate_t.h

1 #i‚de‡
____mb°©e_t_deföed


2 
	#____mb°©e_t_deföed
 1

	)

8 #i‚de‡
__WINT_TYPE__


9 
	#__WINT_TYPE__
 

	)

15 
	m__cou¡
;

18 
__WINT_TYPE__
 
	m__wch
;

19 
	m__wchb
[4];

20 } 
	m__vÆue
;

21 } 
	t__mb°©e_t
;

	@/usr/include/bits/types/__sigset_t.h

1 #i‚de‡
____sig£t_t_deföed


2 
	#____sig£t_t_deföed


	)

4 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

7 
	m__vÆ
[
_SIGSET_NWORDS
];

8 } 
	t__sig£t_t
;

	@/usr/include/bits/types/__sigval_t.h

19 #i‚de‡
____sigvÆ_t_deföed


20 
	#____sigvÆ_t_deföed


	)

23 #ifde‡
__USE_POSIX199309


24 
	usigvÆ


26 
	msivÆ_öt
;

27 *
	msivÆ_±r
;

30 
sigvÆ
 
	t__sigvÆ_t
;

32 
	u__sigvÆ


34 
	m__sivÆ_öt
;

35 *
	m__sivÆ_±r
;

38 
__sigvÆ
 
	t__sigvÆ_t
;

	@/usr/include/bits/types/clock_t.h

1 #i‚de‡
__˛ock_t_deföed


2 
	#__˛ock_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

7 
__˛ock_t
 
	t˛ock_t
;

	@/usr/include/bits/types/clockid_t.h

1 #i‚de‡
__˛ockid_t_deföed


2 
	#__˛ockid_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

7 
__˛ockid_t
 
	t˛ockid_t
;

	@/usr/include/bits/types/time_t.h

1 #i‚de‡
__time_t_deföed


2 
	#__time_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

7 
__time_t
 
	ttime_t
;

	@/usr/include/bits/types/timer_t.h

1 #i‚de‡
__timî_t_deföed


2 
	#__timî_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

7 
__timî_t
 
	ttimî_t
;

	@/usr/include/bits/typesizes.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TYPESIZES_H


24 
	#_BITS_TYPESIZES_H
 1

	)

30 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


31 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifde‡
__x86_64__


45 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

68 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

69 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

70 
	#__TIMER_T_TYPE
 *

	)

71 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

72 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

73 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

74 
	#__CPU_MASK_TYPE
 
__SYSCALL_ULONG_TYPE


	)

76 #ifde‡
__x86_64__


80 
	#__OFF_T_MATCHES_OFF64_T
 1

	)

83 
	#__INO_T_MATCHES_INO64_T
 1

	)

86 
	#__RLIM_T_MATCHES_RLIM64_T
 1

	)

88 
	#__RLIM_T_MATCHES_RLIM64_T
 0

	)

92 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__
 && !deföed 
__ILP32__


4 
	#__WORDSIZE
 64

	)

6 
	#__WORDSIZE
 32

	)

7 
	#__WORDSIZE32_SIZE_ULONG
 0

	)

8 
	#__WORDSIZE32_PTRDIFF_LONG
 0

	)

11 #ifde‡
__x86_64__


12 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

14 
	#__SYSCALL_WORDSIZE
 64

	)

16 
	#__WORDSIZE_TIME64_COMPAT32
 0

	)

	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_MISC


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

61 
	~<bôs/uöä-idítôy.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

80 
	#htobe16
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

81 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

82 
	#be16toh
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

83 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

85 
	#htobe32
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

86 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

87 
	#be32toh
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

88 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

90 
	#htobe64
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

91 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

92 
	#be64toh
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

93 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/gnu/stubs.h

6 #i‡!
deföed
 
__x86_64__


7 
	~<gnu/°ubs-32.h
>

9 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


10 
	~<gnu/°ubs-64.h
>

12 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


13 
	~<gnu/°ubs-x32.h
>

	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

32 
	#MB_LEN_MAX
 16

	)

37 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

42 #i‚de‡
_LIMITS_H


43 
	#_LIMITS_H
 1

	)

45 
	~<bôs/w‹dsize.h
>

54 
	#CHAR_BIT
 8

	)

57 
	#SCHAR_MIN
 (-128)

	)

58 
	#SCHAR_MAX
 127

	)

61 
	#UCHAR_MAX
 255

	)

64 #ifde‡
__CHAR_UNSIGNED__


65 
	#CHAR_MIN
 0

	)

66 
	#CHAR_MAX
 
UCHAR_MAX


	)

68 
	#CHAR_MIN
 
SCHAR_MIN


	)

69 
	#CHAR_MAX
 
SCHAR_MAX


	)

73 
	#SHRT_MIN
 (-32768)

	)

74 
	#SHRT_MAX
 32767

	)

77 
	#USHRT_MAX
 65535

	)

80 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

81 
	#INT_MAX
 2147483647

	)

84 
	#UINT_MAX
 4294967295U

	)

87 #i‡
__WORDSIZE
 == 64

88 
	#LONG_MAX
 9223372036854775807L

	)

90 
	#LONG_MAX
 2147483647L

	)

92 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

95 #i‡
__WORDSIZE
 == 64

96 
	#ULONG_MAX
 18446744073709551615UL

	)

98 
	#ULONG_MAX
 4294967295UL

	)

101 #ifde‡
__USE_ISOC99


104 
	#LLONG_MAX
 9223372036854775807LL

	)

105 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

108 
	#ULLONG_MAX
 18446744073709551615ULL

	)

122 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


124 #ö˛ude_√xà<
limôs
.
h
>

130 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


131 #i‚de‡
LLONG_MIN


132 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

134 #i‚de‡
LLONG_MAX


135 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

137 #i‚de‡
ULLONG_MAX


138 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

145 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

146 #i‚de‡
CHAR_WIDTH


147 
	#CHAR_WIDTH
 8

	)

149 #i‚de‡
SCHAR_WIDTH


150 
	#SCHAR_WIDTH
 8

	)

152 #i‚de‡
UCHAR_WIDTH


153 
	#UCHAR_WIDTH
 8

	)

155 #i‚de‡
SHRT_WIDTH


156 
	#SHRT_WIDTH
 16

	)

158 #i‚de‡
USHRT_WIDTH


159 
	#USHRT_WIDTH
 16

	)

161 #i‚de‡
INT_WIDTH


162 
	#INT_WIDTH
 32

	)

164 #i‚de‡
UINT_WIDTH


165 
	#UINT_WIDTH
 32

	)

167 #i‚de‡
LONG_WIDTH


168 
	#LONG_WIDTH
 
__WORDSIZE


	)

170 #i‚de‡
ULONG_WIDTH


171 
	#ULONG_WIDTH
 
__WORDSIZE


	)

173 #i‚de‡
LLONG_WIDTH


174 
	#LLONG_WIDTH
 64

	)

176 #i‚de‡
ULLONG_WIDTH


177 
	#ULLONG_WIDTH
 64

	)

181 #ifdef 
__USE_POSIX


183 
	~<bôs/posix1_lim.h
>

186 #ifdef 
__USE_POSIX2


187 
	~<bôs/posix2_lim.h
>

190 #ifdef 
__USE_XOPEN


191 
	~<bôs/x›í_lim.h
>

	@/usr/include/linux/const.h

4 #i‚de‡
_LINUX_CONST_H


5 
	#_LINUX_CONST_H


	)

16 #ifde‡
__ASSEMBLY__


17 
	#_AC
(
X
,
Y
Ë
	)
X

18 
	#_AT
(
T
,
X
Ë
	)
X

20 
	#__AC
(
X
,
Y
Ë(X##Y)

	)

21 
	#_AC
(
X
,
Y
Ë
	`__AC
(X,Y)

	)

22 
	#_AT
(
T
,
X
Ë((T)(X))

	)

25 
	#_UL
(
x
Ë(
	`_AC
(x, 
UL
))

	)

26 
	#_ULL
(
x
Ë(
	`_AC
(x, 
ULL
))

	)

28 
	#_BITUL
(
x
Ë(
	`_UL
(1Ë<< (x))

	)

29 
	#_BITULL
(
x
Ë(
	`_ULL
(1Ë<< (x))

	)

	@/usr/include/linux/stddef.h

4 #i‚de‡
__Æways_ölöe


5 
	#__Æways_ölöe
 
__ölöe__


	)

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

58 
	#__STDC_ISO_10646__
 201706L

	)

	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/wch¨.h
>

29 
	~<bôs/w‹dsize.h
>

34 
	~<bôs/°döt-öä.h
>

37 
	~<bôs/°döt-uöä.h
>

43 
__öt_Àa°8_t
 
	töt_Àa°8_t
;

44 
__öt_Àa°16_t
 
	töt_Àa°16_t
;

45 
__öt_Àa°32_t
 
	töt_Àa°32_t
;

46 
__öt_Àa°64_t
 
	töt_Àa°64_t
;

49 
__uöt_Àa°8_t
 
	tuöt_Àa°8_t
;

50 
__uöt_Àa°16_t
 
	tuöt_Àa°16_t
;

51 
__uöt_Àa°32_t
 
	tuöt_Àa°32_t
;

52 
__uöt_Àa°64_t
 
	tuöt_Àa°64_t
;

58 sig√d 
	töt_Á°8_t
;

59 #i‡
__WORDSIZE
 == 64

60 
	töt_Á°16_t
;

61 
	töt_Á°32_t
;

62 
	töt_Á°64_t
;

64 
	töt_Á°16_t
;

65 
	töt_Á°32_t
;

66 
__exãnsi⁄__


67 
	töt_Á°64_t
;

71 
	tuöt_Á°8_t
;

72 #i‡
__WORDSIZE
 == 64

73 
	tuöt_Á°16_t
;

74 
	tuöt_Á°32_t
;

75 
	tuöt_Á°64_t
;

77 
	tuöt_Á°16_t
;

78 
	tuöt_Á°32_t
;

79 
__exãnsi⁄__


80 
	tuöt_Á°64_t
;

85 #i‡
__WORDSIZE
 == 64

86 #i‚de‡
__öçå_t_deföed


87 
	töçå_t
;

88 
	#__öçå_t_deföed


	)

90 
	tuöçå_t
;

92 #i‚de‡
__öçå_t_deföed


93 
	töçå_t
;

94 
	#__öçå_t_deföed


	)

96 
	tuöçå_t
;

101 
__ötmax_t
 
	tötmax_t
;

102 
__uötmax_t
 
	tuötmax_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	#__INT64_C
(
c
Ë¯## 
L


	)

107 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

109 
	#__INT64_C
(
c
Ë¯## 
LL


	)

110 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

116 
	#INT8_MIN
 (-128)

	)

117 
	#INT16_MIN
 (-32767-1)

	)

118 
	#INT32_MIN
 (-2147483647-1)

	)

119 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

121 
	#INT8_MAX
 (127)

	)

122 
	#INT16_MAX
 (32767)

	)

123 
	#INT32_MAX
 (2147483647)

	)

124 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

127 
	#UINT8_MAX
 (255)

	)

128 
	#UINT16_MAX
 (65535)

	)

129 
	#UINT32_MAX
 (4294967295U)

	)

130 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

134 
	#INT_LEAST8_MIN
 (-128)

	)

135 
	#INT_LEAST16_MIN
 (-32767-1)

	)

136 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

137 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

139 
	#INT_LEAST8_MAX
 (127)

	)

140 
	#INT_LEAST16_MAX
 (32767)

	)

141 
	#INT_LEAST32_MAX
 (2147483647)

	)

142 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

145 
	#UINT_LEAST8_MAX
 (255)

	)

146 
	#UINT_LEAST16_MAX
 (65535)

	)

147 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

148 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

152 
	#INT_FAST8_MIN
 (-128)

	)

153 #i‡
__WORDSIZE
 == 64

154 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

155 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

157 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

158 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

160 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

162 
	#INT_FAST8_MAX
 (127)

	)

163 #i‡
__WORDSIZE
 == 64

164 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

165 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

167 
	#INT_FAST16_MAX
 (2147483647)

	)

168 
	#INT_FAST32_MAX
 (2147483647)

	)

170 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

173 
	#UINT_FAST8_MAX
 (255)

	)

174 #i‡
__WORDSIZE
 == 64

175 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

176 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

178 
	#UINT_FAST16_MAX
 (4294967295U)

	)

179 
	#UINT_FAST32_MAX
 (4294967295U)

	)

181 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

185 #i‡
__WORDSIZE
 == 64

186 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

187 
	#INTPTR_MAX
 (9223372036854775807L)

	)

188 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

190 
	#INTPTR_MIN
 (-2147483647-1)

	)

191 
	#INTPTR_MAX
 (2147483647)

	)

192 
	#UINTPTR_MAX
 (4294967295U)

	)

197 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

199 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

202 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

208 #i‡
__WORDSIZE
 == 64

209 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

210 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

212 #i‡
__WORDSIZE32_PTRDIFF_LONG


213 
	#PTRDIFF_MIN
 (-2147483647L-1)

	)

214 
	#PTRDIFF_MAX
 (2147483647L)

	)

216 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

217 
	#PTRDIFF_MAX
 (2147483647)

	)

222 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

223 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

226 #i‡
__WORDSIZE
 == 64

227 
	#SIZE_MAX
 (18446744073709551615UL)

	)

229 #i‡
__WORDSIZE32_SIZE_ULONG


230 
	#SIZE_MAX
 (4294967295UL)

	)

232 
	#SIZE_MAX
 (4294967295U)

	)

237 #i‚de‡
WCHAR_MIN


239 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

240 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

244 
	#WINT_MIN
 (0u)

	)

245 
	#WINT_MAX
 (4294967295u)

	)

248 
	#INT8_C
(
c
Ë
	)
c

249 
	#INT16_C
(
c
Ë
	)
c

250 
	#INT32_C
(
c
Ë
	)
c

251 #i‡
__WORDSIZE
 == 64

252 
	#INT64_C
(
c
Ë¯## 
L


	)

254 
	#INT64_C
(
c
Ë¯## 
LL


	)

258 
	#UINT8_C
(
c
Ë
	)
c

259 
	#UINT16_C
(
c
Ë
	)
c

260 
	#UINT32_C
(
c
Ë¯## 
U


	)

261 #i‡
__WORDSIZE
 == 64

262 
	#UINT64_C
(
c
Ë¯## 
UL


	)

264 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

268 #i‡
__WORDSIZE
 == 64

269 
	#INTMAX_C
(
c
Ë¯## 
L


	)

270 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

272 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

273 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

276 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

278 
	#INT8_WIDTH
 8

	)

279 
	#UINT8_WIDTH
 8

	)

280 
	#INT16_WIDTH
 16

	)

281 
	#UINT16_WIDTH
 16

	)

282 
	#INT32_WIDTH
 32

	)

283 
	#UINT32_WIDTH
 32

	)

284 
	#INT64_WIDTH
 64

	)

285 
	#UINT64_WIDTH
 64

	)

287 
	#INT_LEAST8_WIDTH
 8

	)

288 
	#UINT_LEAST8_WIDTH
 8

	)

289 
	#INT_LEAST16_WIDTH
 16

	)

290 
	#UINT_LEAST16_WIDTH
 16

	)

291 
	#INT_LEAST32_WIDTH
 32

	)

292 
	#UINT_LEAST32_WIDTH
 32

	)

293 
	#INT_LEAST64_WIDTH
 64

	)

294 
	#UINT_LEAST64_WIDTH
 64

	)

296 
	#INT_FAST8_WIDTH
 8

	)

297 
	#UINT_FAST8_WIDTH
 8

	)

298 
	#INT_FAST16_WIDTH
 
__WORDSIZE


	)

299 
	#UINT_FAST16_WIDTH
 
__WORDSIZE


	)

300 
	#INT_FAST32_WIDTH
 
__WORDSIZE


	)

301 
	#UINT_FAST32_WIDTH
 
__WORDSIZE


	)

302 
	#INT_FAST64_WIDTH
 64

	)

303 
	#UINT_FAST64_WIDTH
 64

	)

305 
	#INTPTR_WIDTH
 
__WORDSIZE


	)

306 
	#UINTPTR_WIDTH
 
__WORDSIZE


	)

308 
	#INTMAX_WIDTH
 64

	)

309 
	#UINTMAX_WIDTH
 64

	)

311 
	#PTRDIFF_WIDTH
 
__WORDSIZE


	)

312 
	#SIG_ATOMIC_WIDTH
 32

	)

313 
	#SIZE_WIDTH
 
__WORDSIZE


	)

314 
	#WCHAR_WIDTH
 32

	)

315 
	#WINT_WIDTH
 32

	)

	@/usr/include/sys/cdefs.h

18 #i‚def 
_SYS_CDEFS_H


19 
	#_SYS_CDEFS_H
 1

	)

22 #i‚de‡
_FEATURES_H


23 
	~<„©uªs.h
>

29 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


34 #unde‡
__P


35 #unde‡
__PMT


37 #ifde‡
__GNUC__


41 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


42 
	#__LEAF
 , 
__Àaf__


	)

43 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

45 
	#__LEAF


	)

46 
	#__LEAF_ATTR


	)

54 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

55 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

56 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

57 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

58 
	#__NTHNL
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
)Ë
	)
fct

60 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

61 
	#__THROW
 
	`throw
 ()

	)

62 
	#__THROWNL
 
	`throw
 ()

	)

63 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

64 
	#__NTHNL
(
f˘
Ëf˘ 
	`throw
 ()

	)

66 
	#__THROW


	)

67 
	#__THROWNL


	)

68 
	#__NTH
(
f˘
Ë
	)
fct

69 
	#__NTHNL
(
f˘
Ë
	)
fct

75 #i‡(
deföed
 
__˝lu•lus
 \

76 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

77 
	#__ölöe
 
ölöe


	)

79 
	#__ölöe


	)

82 
	#__THROW


	)

83 
	#__THROWNL


	)

84 
	#__NTH
(
f˘
Ë
	)
fct

91 #i‡
deföed
 
__˛™g__
 && deföed 
__has_exãnsi⁄


92 
	#__glibc_˛™g_has_exãnsi⁄
(
ext
Ë
	`__has_exãnsi⁄
 (ext)

	)

94 
	#__glibc_˛™g_has_exãnsi⁄
(
ext
Ë0

	)

99 
	#__P
(
¨gs
Ë
	)
args

100 
	#__PMT
(
¨gs
Ë
	)
args

105 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

106 
	#__STRING
(
x
Ë#x

	)

109 
	#__±r_t
 *

	)

113 #ifdef 
__˝lu•lus


114 
	#__BEGIN_DECLS
 "C" {

	)

115 
	#__END_DECLS
 }

	)

117 
	#__BEGIN_DECLS


	)

118 
	#__END_DECLS


	)

123 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

124 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

126 #i‡
__GNUC_PREREQ
 (4,3)

127 
	#__w¨nde˛
(
«me
, 
msg
) \

128 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

129 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

130 
	#__îr‹de˛
(
«me
, 
msg
) \

131 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

133 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

134 
	#__w¨«âr
(
msg
)

	)

135 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

142 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

143 
	#__Êex¨r
 []

	)

144 
	#__glibc_c99_Êex¨r_avaûabÀ
 1

	)

145 #ñi‡
__GNUC_PREREQ
 (2,97)

148 
	#__Êex¨r
 []

	)

149 
	#__glibc_c99_Êex¨r_avaûabÀ
 1

	)

150 #ñi‡
deföed
 
__GNUC__


153 
	#__Êex¨r
 [0]

	)

154 
	#__glibc_c99_Êex¨r_avaûabÀ
 1

	)

157 
	#__Êex¨r
 [1]

	)

158 
	#__glibc_c99_Êex¨r_avaûabÀ
 0

	)

172 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

174 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

175 #ifde‡
__˝lu•lus


176 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

177 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

178 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

179 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

181 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

182 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

183 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

184 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

186 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

187 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

200 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

201 
	#__©åibuã__
(
xyz
Ë

	)

207 #i‡
__GNUC_PREREQ
 (2,96)

208 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

210 
	#__©åibuã_mÆloc__


	)

215 #i‡
__GNUC_PREREQ
 (4, 3)

216 
	#__©åibuã_Æloc_size__
(
∑øms
) \

217 
	`__©åibuã__
 ((
__Æloc_size__
 
∑øms
))

	)

219 
	#__©åibuã_Æloc_size__
(
∑øms
Ë

	)

225 #i‡
__GNUC_PREREQ
 (2,96)

226 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

228 
	#__©åibuã_puª__


	)

232 #i‡
__GNUC_PREREQ
 (2,5)

233 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

235 
	#__©åibuã_c⁄°__


	)

241 #i‡
__GNUC_PREREQ
 (3,1)

242 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

243 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

245 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

246 
	#__©åibuã_noölöe__


	)

250 #i‡
__GNUC_PREREQ
 (3,2)

251 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

253 
	#__©åibuã_dïªˇãd__


	)

259 #i‡
__GNUC_PREREQ
 (4,5) \

260 || 
	$__glibc_˛™g_has_exãnsi⁄
 (
__©åibuã_dïªˇãd_wôh_mesßge__
)

261 
	#__©åibuã_dïªˇãd_msg__
(
msg
) \

262 
	`__©åibuã__
 ((
	`__dïªˇãd__
 (
msg
)))

	)

264 
	#__©åibuã_dïªˇãd_msg__
(
msg
Ë
__©åibuã_dïªˇãd__


	)

273 #i‡
	`__GNUC_PREREQ
 (2,8)

274 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

276 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

283 #i‡
	`__GNUC_PREREQ
 (2,97)

284 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

285 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

287 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

292 #i‡
	`__GNUC_PREREQ
 (3,3)

293 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

295 
	#__n⁄nuŒ
(
∑øms
)

	)

300 #i‡
	`__GNUC_PREREQ
 (3,4)

301 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

302 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

303 #i‡
__USE_FORTIFY_LEVEL
 > 0

304 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

307 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

309 #i‚de‡
__wur


310 
	#__wur


	)

314 #i‡
	`__GNUC_PREREQ
 (3,2)

318 #unde‡
__Æways_ölöe


319 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

321 #unde‡
__Æways_ölöe


322 
	#__Æways_ölöe
 
__ölöe


	)

327 #i‡
	`__GNUC_PREREQ
 (4,3)

328 
	#__©åibuã_¨tificül__
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

330 
	#__©åibuã_¨tificül__


	)

342 #i‡(!
deföed
 
__˝lu•lus
 || 
	`__GNUC_PREREQ
 (4,3) \

343 || (
deföed
 
__˛™g__
 && (deföed 
__GNUC_STDC_INLINE__
 \

344 || 
deföed
 
__GNUC_GNU_INLINE__
)))

345 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


346 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

347 
	#__exã∫_Æways_ölöe
 \

348 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

350 
	#__exã∫_ölöe
 
__ölöe


	)

351 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

355 #ifde‡
__exã∫_Æways_ölöe


356 
	#__f‹tify_fun˘i⁄
 
__exã∫_Æways_ölöe
 
__©åibuã_¨tificül__


	)

361 #i‡
	`__GNUC_PREREQ
 (4,3)

362 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

363 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

370 #i‡!
	`__GNUC_PREREQ
 (2,8)

371 
	#__exãnsi⁄__


	)

375 #i‡!
	`__GNUC_PREREQ
 (2,92)

376 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

377 
	#__ª°ri˘
 
ª°ri˘


	)

379 
	#__ª°ri˘


	)

386 #i‡
	`__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


387 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

389 #ifde‡
__GNUC__


390 
	#__ª°ri˘_¨r


	)

392 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

393 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

396 
	#__ª°ri˘_¨r


	)

401 #i‡
__GNUC__
 >= 3

402 
	#__glibc_u∆ikñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 0)

	)

403 
	#__glibc_likñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 1)

	)

405 
	#__glibc_u∆ikñy
(
c⁄d
Ë(c⁄d)

	)

406 
	#__glibc_likñy
(
c⁄d
Ë(c⁄d)

	)

409 #ifde‡
__has_©åibuã


410 
	#__glibc_has_©åibuã
(
©å
Ë
	`__has_©åibuã
 (©å)

	)

412 
	#__glibc_has_©åibuã
(
©å
Ë0

	)

415 #ifde‡
__has_ö˛ude


418 
	#__glibc_has_ö˛ude
 
__has_ö˛ude


	)

420 
	#__glibc_has_ö˛ude
(
hódî
Ë0

	)

423 #i‡(!
deföed
 
_N‹ëu∫
 \

424 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

425 && !
	$__GNUC_PREREQ
 (4,7))

426 #i‡
	`__GNUC_PREREQ
 (2,8)

427 
	#_N‹ëu∫
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

	)

429 
	#_N‹ëu∫


	)

433 #i‡
	`__GNUC_PREREQ
 (8, 0)

437 
	#__©åibuã_n⁄°rög__
 
	`__©åibuã__
 ((
__n⁄°rög__
))

	)

439 
	#__©åibuã_n⁄°rög__


	)

443 #unde‡
__©åibuã_c›y__


444 #i‡
	`__GNUC_PREREQ
 (9, 0)

447 
	#__©åibuã_c›y__
(
¨g
Ë
	`__©åibuã__
 ((
	`__c›y__
 (¨g)))

	)

449 
	#__©åibuã_c›y__
(
¨g
)

	)

452 #i‡(!
deföed
 
_Sètic_as£π
 && !deföed 
__˝lu•lus
 \

453 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

454 && (!
	`__GNUC_PREREQ
 (4, 6Ë|| 
deföed
 
__STRICT_ANSI__
))

455 
	#_Sètic_as£π
(
ex¥
, 
dügno°ic
) \

456 (*
	`__Sètic_as£π_fun˘i⁄
 ()) \

457 [!! (°ru˘ { 
__îr‹_if_√g©ive
: (
ex¥
Ë? 2 : -1; })]

	)

460 
	~<bôs/w‹dsize.h
>

461 
	~<bôs/l⁄g-doubÀ.h
>

463 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


464 
	#__LDBL_COMPAT
 1

	)

465 #ifde‡
__REDIRECT


466 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

467 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

468 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

469 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

470 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

471 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

472 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

473 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

474 
	#__LDBL_REDIR_DECL
(
«me
) \

475 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

476 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

477 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

478 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

479 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

482 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


483 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

484 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

485 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

486 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

487 
	#__LDBL_REDIR_DECL
(
«me
)

	)

488 #ifde‡
__REDIRECT


489 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

490 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

491 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

500 #i‡
	`__GNUC_PREREQ
 (4,8Ë|| 
	`__glibc_˛™g_¥îeq
 (3,5)

501 
	#__glibc_ma¸o_w¨nög1
(
mesßge
Ë
	`_Pøgma
 (#mesßge)

	)

502 
	#__glibc_ma¸o_w¨nög
(
mesßge
) \

503 
	`__glibc_ma¸o_w¨nög1
 (
GCC
 
w¨nög
 
mesßge
)

	)

505 
	#__glibc_ma¸o_w¨nög
(
msg
)

	)

515 #i‡!
deföed
 
__˝lu•lus
 \

516 && (
	`__GNUC_PREREQ
 (4, 9) \

517 || 
	`__glibc_˛™g_has_exãnsi⁄
 (
c_gíîic_£À˘i⁄s
) \

518 || (!
deföed
 
__GNUC__
 && deföed 
__STDC_VERSION__
 \

519 && 
__STDC_VERSION__
 >= 201112L))

520 
	#__HAVE_GENERIC_SELECTION
 1

	)

522 
	#__HAVE_GENERIC_SELECTION
 0

	)

	@/usr/include/sys/select.h

21 #i‚de‡
_SYS_SELECT_H


22 
	#_SYS_SELECT_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	~<bôs/£À˘.h
>

33 
	~<bôs/ty≥s/sig£t_t.h
>

36 
	~<bôs/ty≥s/time_t.h
>

37 
	~<bôs/ty≥s/°ru˘_timevÆ.h
>

38 #ifde‡
__USE_XOPEN2K


39 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

42 #i‚de‡
__su£c⁄ds_t_deföed


43 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

44 
	#__su£c⁄ds_t_deföed


	)

49 
	t__fd_mask
;

52 #unde‡
__NFDBITS


54 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

55 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

56 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë(1UL << ((dË% 
__NFDBITS
)))

	)

63 #ifde‡
__USE_XOPEN


64 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

65 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

67 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

68 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

70 } 
	tfd_£t
;

73 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

75 #ifde‡
__USE_MISC


77 
__fd_mask
 
	tfd_mask
;

80 
	#NFDBITS
 
__NFDBITS


	)

85 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

86 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

87 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

88 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

91 
__BEGIN_DECLS


101 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

102 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

103 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

104 
timevÆ
 *
__ª°ri˘
 
__timeout
);

106 #ifde‡
__USE_XOPEN2K


113 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

114 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

115 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

116 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

117 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

122 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


123 
	~<bôs/£À˘2.h
>

126 
	g__END_DECLS


	@/usr/include/z3.h

21 #i‚de‡
Z3_H_


22 
	#Z3_H_


	)

24 
	~<°dio.h
>

25 
	~<°dboﬁ.h
>

26 
	~<°döt.h
>

27 
	~"z3_ma¸os.h
"

28 
	~"z3_≠i.h
"

29 
	~"z3_a°_c⁄èöîs.h
"

30 
	~"z3_Ægebøic.h
"

31 
	~"z3_pﬁynomül.h
"

32 
	~"z3_rcf.h
"

33 
	~"z3_fixedpoöt.h
"

34 
	~"z3_›timiz©i⁄.h
"

35 
	~"z3_Âa.h
"

36 
	~"z3_•a˚r.h
"

	@/usr/include/asm-generic/int-ll64.h

9 #i‚de‡
_ASM_GENERIC_INT_LL64_H


10 
	#_ASM_GENERIC_INT_LL64_H


	)

12 
	~<asm/bô•îl⁄g.h
>

14 #i‚de‡
__ASSEMBLY__


20 
__sig√d__
 
	t__s8
;

21 
	t__u8
;

23 
__sig√d__
 
	t__s16
;

24 
	t__u16
;

26 
__sig√d__
 
	t__s32
;

27 
	t__u32
;

29 #ifde‡
__GNUC__


30 
__exãnsi⁄__
 
__sig√d__
 
	t__s64
;

31 
__exãnsi⁄__
 
	t__u64
;

33 
__sig√d__
 
	t__s64
;

34 
	t__u64
;

	@/usr/include/asm/posix_types_32.h

2 #i‚de‡
_ASM_X86_POSIX_TYPES_32_H


3 
	#_ASM_X86_POSIX_TYPES_32_H


	)

11 
	t__kî√l_mode_t
;

12 
	#__kî√l_mode_t
 
__kî√l_mode_t


	)

14 
	t__kî√l_ùc_pid_t
;

15 
	#__kî√l_ùc_pid_t
 
__kî√l_ùc_pid_t


	)

17 
	t__kî√l_uid_t
;

18 
	t__kî√l_gid_t
;

19 
	#__kî√l_uid_t
 
__kî√l_uid_t


	)

21 
	t__kî√l_ﬁd_dev_t
;

22 
	#__kî√l_ﬁd_dev_t
 
__kî√l_ﬁd_dev_t


	)

24 
	~<asm-gíîic/posix_ty≥s.h
>

	@/usr/include/asm/posix_types_64.h

2 #i‚de‡
_ASM_X86_POSIX_TYPES_64_H


3 
	#_ASM_X86_POSIX_TYPES_64_H


	)

11 
	t__kî√l_ﬁd_uid_t
;

12 
	t__kî√l_ﬁd_gid_t
;

13 
	#__kî√l_ﬁd_uid_t
 
__kî√l_ﬁd_uid_t


	)

15 
	t__kî√l_ﬁd_dev_t
;

16 
	#__kî√l_ﬁd_dev_t
 
__kî√l_ﬁd_dev_t


	)

18 
	~<asm-gíîic/posix_ty≥s.h
>

	@/usr/include/asm/posix_types_x32.h

2 #i‚de‡
_ASM_X86_POSIX_TYPES_X32_H


3 
	#_ASM_X86_POSIX_TYPES_X32_H


	)

14 
	t__kî√l_l⁄g_t
;

15 
	t__kî√l_ul⁄g_t
;

16 
	#__kî√l_l⁄g_t
 
__kî√l_l⁄g_t


	)

18 
	~<asm/posix_ty≥s_64.h
>

	@/usr/include/bits/byteswap.h

19 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_BYTESWAP_H


24 
	#_BITS_BYTESWAP_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	#__bsw≠_c⁄°™t_16
(
x
) \

31 ((
__uöt16_t
Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

33 
__ölöe
 
__uöt16_t


34 
	$__bsw≠_16
 (
__uöt16_t
 
__bsx
)

36 #i‡
	`__GNUC_PREREQ
 (4, 8)

37  
	`__buûtö_bsw≠16
 (
__bsx
);

39  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

41 
	}
}

44 
	#__bsw≠_c⁄°™t_32
(
x
) \

45 ((((
x
) & 0xff000000u) >> 24) | (((x) & 0x00ff0000u) >> 8) \

46 | (((
x
Ë& 0x0000ff00uË<< 8Ë| (((xË& 0x000000ffuË<< 24))

	)

48 
__ölöe
 
__uöt32_t


49 
	$__bsw≠_32
 (
__uöt32_t
 
__bsx
)

51 #i‡
	`__GNUC_PREREQ
 (4, 3)

52  
	`__buûtö_bsw≠32
 (
__bsx
);

54  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

56 
	}
}

59 
	#__bsw≠_c⁄°™t_64
(
x
) \

60 ((((
x
) & 0xff00000000000000ull) >> 56) \

61 | (((
x
) & 0x00ff000000000000ull) >> 40) \

62 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

63 | (((
x
) & 0x000000ff00000000ull) >> 8) \

64 | (((
x
) & 0x00000000ff000000ull) << 8) \

65 | (((
x
) & 0x0000000000ff0000ull) << 24) \

66 | (((
x
) & 0x000000000000ff00ull) << 40) \

67 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

69 
__exãnsi⁄__
 
__ölöe
 
__uöt64_t


70 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

72 #i‡
	`__GNUC_PREREQ
 (4, 3)

73  
	`__buûtö_bsw≠64
 (
__bsx
);

75  
	`__bsw≠_c⁄°™t_64
 (
__bsx
);

77 
	}
}

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/long-double.h

	@/usr/include/bits/mman-shared.h

19 #i‚de‡
_SYS_MMAN_H


23 #ifde‡
__USE_GNU


25 
	#MREMAP_MAYMOVE
 1

	)

26 
	#MREMAP_FIXED
 2

	)

29 #i‚de‡
MFD_CLOEXEC


30 
	#MFD_CLOEXEC
 1U

	)

31 
	#MFD_ALLOW_SEALING
 2U

	)

32 
	#MFD_HUGETLB
 4U

	)

36 #i‚de‡
MLOCK_ONFAULT


37 
	#MLOCK_ONFAULT
 1U

	)

41 #i‚de‡
PKEY_DISABLE_ACCESS


42 
	#PKEY_DISABLE_ACCESS
 0x1

	)

43 
	#PKEY_DISABLE_WRITE
 0x2

	)

46 
__BEGIN_DECLS


50 
	$memfd_¸óã
 (c⁄° *
__«me
, 
__Êags
Ë
__THROW
;

54 
	$mlock2
 (c⁄° *
__addr
, 
size_t
 
__Àngth
, 
__Êags
Ë
__THROW
;

60 
	$pkey_Æloc
 (
__Êags
, 
__ac˚ss_rights
Ë
__THROW
;

64 
	$pkey_£t
 (
__key
, 
__ac˚ss_rights
Ë
__THROW
;

68 
	$pkey_gë
 (
__key
Ë
__THROW
;

72 
	$pkey_‰ì
 (
__key
Ë
__THROW
;

76 
	$pkey_m¥Ÿe˘
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
, 
__pkey
Ë
__THROW
;

78 
__END_DECLS


	@/usr/include/bits/posix1_lim.h

24 #i‚def 
_BITS_POSIX1_LIM_H


25 
	#_BITS_POSIX1_LIM_H
 1

	)

27 
	~<bôs/w‹dsize.h
>

32 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

35 
	#_POSIX_AIO_MAX
 1

	)

38 
	#_POSIX_ARG_MAX
 4096

	)

41 #ifde‡
__USE_XOPEN2K


42 
	#_POSIX_CHILD_MAX
 25

	)

44 
	#_POSIX_CHILD_MAX
 6

	)

48 
	#_POSIX_DELAYTIMER_MAX
 32

	)

52 
	#_POSIX_HOST_NAME_MAX
 255

	)

55 
	#_POSIX_LINK_MAX
 8

	)

58 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

61 
	#_POSIX_MAX_CANON
 255

	)

65 
	#_POSIX_MAX_INPUT
 255

	)

68 
	#_POSIX_MQ_OPEN_MAX
 8

	)

71 
	#_POSIX_MQ_PRIO_MAX
 32

	)

74 
	#_POSIX_NAME_MAX
 14

	)

77 #ifde‡
__USE_XOPEN2K


78 
	#_POSIX_NGROUPS_MAX
 8

	)

80 
	#_POSIX_NGROUPS_MAX
 0

	)

84 #ifde‡
__USE_XOPEN2K


85 
	#_POSIX_OPEN_MAX
 20

	)

87 
	#_POSIX_OPEN_MAX
 16

	)

90 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


93 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

97 
	#_POSIX_PATH_MAX
 256

	)

100 
	#_POSIX_PIPE_BUF
 512

	)

104 
	#_POSIX_RE_DUP_MAX
 255

	)

107 
	#_POSIX_RTSIG_MAX
 8

	)

110 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

113 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

116 
	#_POSIX_SIGQUEUE_MAX
 32

	)

119 
	#_POSIX_SSIZE_MAX
 32767

	)

122 
	#_POSIX_STREAM_MAX
 8

	)

125 
	#_POSIX_SYMLINK_MAX
 255

	)

129 
	#_POSIX_SYMLOOP_MAX
 8

	)

132 
	#_POSIX_TIMER_MAX
 32

	)

135 
	#_POSIX_TTY_NAME_MAX
 9

	)

138 #ifde‡
__USE_XOPEN2K


139 
	#_POSIX_TZNAME_MAX
 6

	)

141 
	#_POSIX_TZNAME_MAX
 3

	)

144 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


146 
	#_POSIX_QLIMIT
 1

	)

150 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

153 
	#_POSIX_UIO_MAXIOV
 16

	)

157 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

161 
	~<bôs/loˇl_lim.h
>

164 #i‚def 
SSIZE_MAX


168 #i‡
__WORDSIZE
 =64 || 
__WORDSIZE32_SIZE_ULONG


169 
	#SSIZE_MAX
 
LONG_MAX


	)

171 
	#SSIZE_MAX
 
INT_MAX


	)

179 #i‚def 
NGROUPS_MAX


180 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/posix2_lim.h

22 #i‚def 
_BITS_POSIX2_LIM_H


23 
	#_BITS_POSIX2_LIM_H
 1

	)

27 
	#_POSIX2_BC_BASE_MAX
 99

	)

30 
	#_POSIX2_BC_DIM_MAX
 2048

	)

33 
	#_POSIX2_BC_SCALE_MAX
 99

	)

36 
	#_POSIX2_BC_STRING_MAX
 1000

	)

40 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

44 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

47 
	#_POSIX2_LINE_MAX
 2048

	)

51 
	#_POSIX2_RE_DUP_MAX
 255

	)

55 
	#_POSIX2_CHARCLASS_NAME_MAX
 14

	)

62 #i‚def 
BC_BASE_MAX


63 
	#BC_BASE_MAX
 
_POSIX2_BC_BASE_MAX


	)

65 #i‚def 
BC_DIM_MAX


66 
	#BC_DIM_MAX
 
_POSIX2_BC_DIM_MAX


	)

68 #i‚def 
BC_SCALE_MAX


69 
	#BC_SCALE_MAX
 
_POSIX2_BC_SCALE_MAX


	)

71 #i‚def 
BC_STRING_MAX


72 
	#BC_STRING_MAX
 
_POSIX2_BC_STRING_MAX


	)

74 #i‚def 
COLL_WEIGHTS_MAX


75 
	#COLL_WEIGHTS_MAX
 255

	)

77 #i‚def 
EXPR_NEST_MAX


78 
	#EXPR_NEST_MAX
 
_POSIX2_EXPR_NEST_MAX


	)

80 #i‚def 
LINE_MAX


81 
	#LINE_MAX
 
_POSIX2_LINE_MAX


	)

83 #i‚def 
CHARCLASS_NAME_MAX


84 
	#CHARCLASS_NAME_MAX
 2048

	)

88 
	#RE_DUP_MAX
 (0x7fff)

	)

	@/usr/include/bits/pthreadtypes-arch.h

18 #i‚de‡
_BITS_PTHREADTYPES_ARCH_H


19 
	#_BITS_PTHREADTYPES_ARCH_H
 1

	)

21 
	~<bôs/w‹dsize.h
>

23 #ifde‡
__x86_64__


24 #i‡
__WORDSIZE
 == 64

25 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

26 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

28 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

29 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

31 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

32 
	#__SIZEOF_PTHREAD_ATTR_T
 32

	)

33 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

34 
	#__SIZEOF_PTHREAD_RWLOCK_T
 44

	)

35 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

38 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

39 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

40 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

41 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

42 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

44 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

45 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

46 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

47 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

48 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

51 
	#__PTHREAD_COMPAT_PADDING_MID


	)

52 
	#__PTHREAD_COMPAT_PADDING_END


	)

53 
	#__PTHREAD_MUTEX_LOCK_ELISION
 1

	)

54 #ifde‡
__x86_64__


55 
	#__PTHREAD_MUTEX_NUSERS_AFTER_KIND
 0

	)

56 
	#__PTHREAD_MUTEX_USE_UNION
 0

	)

58 
	#__PTHREAD_MUTEX_NUSERS_AFTER_KIND
 1

	)

59 
	#__PTHREAD_MUTEX_USE_UNION
 1

	)

62 
	#__LOCK_ALIGNMENT


	)

63 
	#__ONCE_ALIGNMENT


	)

65 
	s__±hªad_rwlock_¨ch_t


67 
	m__ªadîs
;

68 
	m__wrôîs
;

69 
	m__wΩha£_fuãx
;

70 
	m__wrôîs_fuãx
;

71 
	m__∑d3
;

72 
	m__∑d4
;

73 #ifde‡
__x86_64__


74 
	m__cur_wrôî
;

75 
	m__sh¨ed
;

76 sig√d 
	m__rwñisi⁄
;

77 #ifde‡ 
__ILP32__


78 
	m__∑d1
[3];

79 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0 }

	)

81 
	m__∑d1
[7];

82 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0, 0, 0, 0, 0 }

	)

84 
	m__∑d2
;

87 
	m__Êags
;

88 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

92 
	m__Êags
;

93 
	m__sh¨ed
;

94 sig√d 
	m__rwñisi⁄
;

95 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0

	)

96 
	m__∑d2
;

97 
	m__cur_wrôî
;

101 #i‚de‡
__x86_64__


103 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/select.h

18 #i‚de‡
_SYS_SELECT_H


22 
	~<bôs/w‹dsize.h
>

25 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

27 #i‡
__WORDSIZE
 == 64

28 
	#__FD_ZERO_STOS
 "°osq"

	)

30 
	#__FD_ZERO_STOS
 "°o¶"

	)

33 
	#__FD_ZERO
(
fd•
) \

35 
__d0
, 
__d1
; \

36 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

37 : "=c" (
__d0
), "=D" (
__d1
) \

38 : "a" (0), "0" ( (
fd_£t
) \

39 /  (
__fd_mask
)), \

40 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

42 } 0)

	)

48 
	#__FD_ZERO
(
£t
) \

50 
__i
; \

51 
fd_£t
 *
__¨r
 = (
£t
); \

52 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

53 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

54 } 0)

	)

58 
	#__FD_SET
(
d
, 
£t
) \

59 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] |
	`__FD_MASK
 (d)))

	)

60 
	#__FD_CLR
(
d
, 
£t
) \

61 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] &~
	`__FD_MASK
 (d)))

	)

62 
	#__FD_ISSET
(
d
, 
£t
) \

63 ((
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/bits/select2.h

19 #i‚de‡
_SYS_SELECT_H


24 
__fdñt_chk
 (
__d
);

25 
	$__fdñt_w¨n
 (
__d
)

26 
	`__w¨«âr
 ("bit outside of fd_set selected");

27 #unde‡
__FD_ELT


28 
	#__FD_ELT
(
d
) \

29 
__exãnsi⁄__
 \

30 ({ 
__d
 = (
d
); \

31 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

32 ? (0 <
__d
 && __d < 
__FD_SETSIZE
 \

33 ? (
__d
 / 
__NFDBITS
) \

34 : 
	`__fdñt_w¨n
 (
__d
)) \

35 : 
	`__fdñt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/stdint-uintn.h

19 #i‚de‡
_BITS_STDINT_UINTN_H


20 
	#_BITS_STDINT_UINTN_H
 1

	)

22 
	~<bôs/ty≥s.h
>

24 
__uöt8_t
 
	tuöt8_t
;

25 
__uöt16_t
 
	tuöt16_t
;

26 
__uöt32_t
 
	tuöt32_t
;

27 
__uöt64_t
 
	tuöt64_t
;

	@/usr/include/bits/types/struct_timeval.h

1 #i‚de‡
__timevÆ_deföed


2 
	#__timevÆ_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

8 
	stimevÆ


10 
__time_t
 
	mtv_£c
;

11 
__su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/bits/uintn-identity.h

19 #i‡!
deföed
 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_UINTN_IDENTITY_H


24 
	#_BITS_UINTN_IDENTITY_H
 1

	)

26 
	~<bôs/ty≥s.h
>

32 
__ölöe
 
__uöt16_t


33 
	$__uöt16_idítôy
 (
__uöt16_t
 
__x
)

35  
__x
;

36 
	}
}

38 
__ölöe
 
__uöt32_t


39 
	$__uöt32_idítôy
 (
__uöt32_t
 
__x
)

41  
__x
;

42 
	}
}

44 
__ölöe
 
__uöt64_t


45 
	$__uöt64_idítôy
 (
__uöt64_t
 
__x
)

47  
__x
;

48 
	}
}

	@/usr/include/bits/wchar.h

19 #i‚de‡
_BITS_WCHAR_H


20 
	#_BITS_WCHAR_H
 1

	)

33 #ifde‡
__WCHAR_MAX__


34 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

35 #ñi‡
L
'\0' - 1 > 0

36 
	#__WCHAR_MAX
 (0xffffffffu + 
L
'\0')

	)

38 
	#__WCHAR_MAX
 (0x7ffffff‡+ 
L
'\0')

	)

41 #ifde‡
__WCHAR_MIN__


42 
	#__WCHAR_MIN
 
__WCHAR_MIN__


	)

43 #ñi‡
L
'\0' - 1 > 0

44 
	#__WCHAR_MIN
 (
L
'\0' + 0)

	)

46 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/bits/xopen_lim.h

29 #i‚de‡
_XOPEN_LIM_H


30 
	#_XOPEN_LIM_H
 1

	)

62 
	#_XOPEN_IOV_MAX
 
_POSIX_UIO_MAXIOV


	)

64 
	~<bôs/uio_lim.h
>

65 #ifde‡
__IOV_MAX


66 
	#IOV_MAX
 
__IOV_MAX


	)

68 #unde‡
IOV_MAX


73 
	#NL_ARGMAX
 
_POSIX_ARG_MAX


	)

76 
	#NL_LANGMAX
 
_POSIX2_LINE_MAX


	)

79 
	#NL_MSGMAX
 
INT_MAX


	)

83 #i‡
deföed
 
__USE_GNU
 || !deföed 
__USE_XOPEN2K8


84 
	#NL_NMAX
 
INT_MAX


	)

88 
	#NL_SETMAX
 
INT_MAX


	)

91 
	#NL_TEXTMAX
 
INT_MAX


	)

94 
	#NZERO
 20

	)

98 #ifde‡
INT_MAX


99 #i‡
INT_MAX
 == 32767

100 
	#WORD_BIT
 16

	)

102 #i‡
INT_MAX
 == 2147483647

103 
	#WORD_BIT
 32

	)

106 
	#WORD_BIT
 64

	)

109 #ñi‡
deföed
 
__INT_MAX__


110 #i‡
__INT_MAX__
 == 32767

111 
	#WORD_BIT
 16

	)

113 #i‡
__INT_MAX__
 == 2147483647

114 
	#WORD_BIT
 32

	)

117 
	#WORD_BIT
 64

	)

121 
	#WORD_BIT
 32

	)

125 #ifde‡
LONG_MAX


126 #i‡
LONG_MAX
 == 2147483647

127 
	#LONG_BIT
 32

	)

130 
	#LONG_BIT
 64

	)

132 #ñi‡
deföed
 
__LONG_MAX__


133 #i‡
__LONG_MAX__
 == 2147483647

134 
	#LONG_BIT
 32

	)

137 
	#LONG_BIT
 64

	)

140 
	~<bôs/w‹dsize.h
>

141 #i‡
__WORDSIZE
 == 64

142 
	#LONG_BIT
 64

	)

144 
	#LONG_BIT
 32

	)

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_chÊags


	)

11 
	#__°ub_fchÊags


	)

12 
	#__°ub_gây


	)

13 
	#__°ub_lchmod


	)

14 
	#__°ub_ªvoke


	)

15 
	#__°ub_£éogö


	)

16 
	#__°ub_sigªtu∫


	)

17 
	#__°ub_s°k


	)

18 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___com∑t_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_fchÊags


	)

13 
	#__°ub_gây


	)

14 
	#__°ub_lchmod


	)

15 
	#__°ub_ªvoke


	)

16 
	#__°ub_£éogö


	)

17 
	#__°ub_sigªtu∫


	)

18 
	#__°ub_s°k


	)

19 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-x32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___com∑t_bdÊush


	)

11 
	#__°ub___com∑t_¸óã_moduÀ


	)

12 
	#__°ub___com∑t_gë_kî√l_syms


	)

13 
	#__°ub___com∑t_nfs£rv˘l


	)

14 
	#__°ub___com∑t_quîy_moduÀ


	)

15 
	#__°ub___com∑t_u£lib


	)

16 
	#__°ub_chÊags


	)

17 
	#__°ub_fchÊags


	)

18 
	#__°ub_gây


	)

19 
	#__°ub_lchmod


	)

20 
	#__°ub_ªvoke


	)

21 
	#__°ub_£éogö


	)

22 
	#__°ub_sigªtu∫


	)

23 
	#__°ub_s°k


	)

24 
	#__°ub_°ty


	)

	@/usr/include/z3_algebraic.h

21 #i‚de‡
Z3_ALGEBRAIC_H_


22 
	#Z3_ALGEBRAIC_H_


	)

24 #ifde‡
__˝lu•lus


39 
boﬁ
 
Z3_API
 
Z3_Ægebøic_is_vÆue
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
a
);

48 
boﬁ
 
Z3_API
 
Z3_Ægebøic_is_pos
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
a
);

57 
boﬁ
 
Z3_API
 
Z3_Ægebøic_is_√g
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
a
);

66 
boﬁ
 
Z3_API
 
Z3_Ægebøic_is_zîo
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
a
);

75 
Z3_API
 
Z3_Ægebøic_sign
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
a
);

86 
Z3_a°
 
Z3_API
 
Z3_Ægebøic_add
(
Z3_c⁄ãxt
 
c
, Z3_a° 
a
, Z3_a° 
b
);

97 
Z3_a°
 
Z3_API
 
Z3_Ægebøic_sub
(
Z3_c⁄ãxt
 
c
, Z3_a° 
a
, Z3_a° 
b
);

108 
Z3_a°
 
Z3_API
 
Z3_Ægebøic_mul
(
Z3_c⁄ãxt
 
c
, Z3_a° 
a
, Z3_a° 
b
);

120 
Z3_a°
 
Z3_API
 
Z3_Ægebøic_div
(
Z3_c⁄ãxt
 
c
, Z3_a° 
a
, Z3_a° 
b
);

131 
Z3_a°
 
Z3_API
 
Z3_Ægebøic_roŸ
(
Z3_c⁄ãxt
 
c
, Z3_a° 
a
, 
k
);

141 
Z3_a°
 
Z3_API
 
Z3_Ægebøic_powî
(
Z3_c⁄ãxt
 
c
, Z3_a° 
a
, 
k
);

151 
boﬁ
 
Z3_API
 
Z3_Ægebøic_…
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
a
, Z3_a° 
b
);

161 
boﬁ
 
Z3_API
 
Z3_Ægebøic_gt
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
a
, Z3_a° 
b
);

171 
boﬁ
 
Z3_API
 
Z3_Ægebøic_À
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
a
, Z3_a° 
b
);

181 
boﬁ
 
Z3_API
 
Z3_Ægebøic_ge
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
a
, Z3_a° 
b
);

191 
boﬁ
 
Z3_API
 
Z3_Ægebøic_eq
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
a
, Z3_a° 
b
);

201 
boﬁ
 
Z3_API
 
Z3_Ægebøic_√q
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
a
, Z3_a° 
b
);

213 
Z3_a°_ve˘‹
 
Z3_API
 
Z3_Ægebøic_roŸs
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
p
, 
n
, Z3_a° 
a
[]);

224 
Z3_API
 
Z3_Ægebøic_evÆ
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
p
, 
n
, Z3_a° 
a
[]);

229 #ifde‡
__˝lu•lus


	@/usr/include/z3_api.h

5 #i‚de‡
Z3_API_H_


6 
	#Z3_API_H_


	)

8 
DEFINE_TYPE
(
Z3_symbﬁ
);

9 
DEFINE_TYPE
(
Z3_lôîÆs
);

10 
DEFINE_TYPE
(
Z3_c⁄fig
);

11 
DEFINE_TYPE
(
Z3_c⁄ãxt
);

12 
DEFINE_TYPE
(
Z3_s‹t
);

13 
	#Z3_s‹t_›t
 
Z3_s‹t


	)

14 
DEFINE_TYPE
(
Z3_func_de˛
);

15 
DEFINE_TYPE
(
Z3_a°
);

16 
	#Z3_a°_›t
 
Z3_a°


	)

17 
DEFINE_TYPE
(
Z3_≠p
);

18 
DEFINE_TYPE
(
Z3_∑âîn
);

19 
DEFINE_TYPE
(
Z3_modñ
);

20 
DEFINE_TYPE
(
Z3_c⁄°ru˘‹
);

21 
DEFINE_TYPE
(
Z3_c⁄°ru˘‹_li°
);

22 
DEFINE_TYPE
(
Z3_∑øms
);

23 
DEFINE_TYPE
(
Z3_∑øm_des¸s
);

24 
DEFINE_TYPE
(
Z3_gﬂl
);

25 
DEFINE_TYPE
(
Z3_è˘ic
);

26 
DEFINE_TYPE
(
Z3_¥obe
);

27 
DEFINE_TYPE
(
Z3_°©s
);

28 
DEFINE_TYPE
(
Z3_sﬁvî
);

29 
DEFINE_TYPE
(
Z3_a°_ve˘‹
);

30 
DEFINE_TYPE
(
Z3_a°_m≠
);

31 
DEFINE_TYPE
(
Z3_≠∂y_ªsu…
);

32 
DEFINE_TYPE
(
Z3_func_öãΩ
);

33 
	#Z3_func_öãΩ_›t
 
Z3_func_öãΩ


	)

34 
DEFINE_TYPE
(
Z3_func_íåy
);

35 
DEFINE_TYPE
(
Z3_fixedpoöt
);

36 
DEFINE_TYPE
(
Z3_›timize
);

37 
DEFINE_TYPE
(
Z3_rcf_num
);

77 
boﬁ
 
	tZ3_boﬁ
;

82 c⁄° * 
	tZ3_°rög
;

83 
Z3_°rög
 * 
	tZ3_°rög_±r
;

88 
	#Z3_TRUE
 
åue


	)

93 
	#Z3_FALSE
 
Ál£


	)

100 
	mZ3_L_FALSE
 = -1,

101 
	mZ3_L_UNDEF
,

102 
	mZ3_L_TRUE


103 } 
	tZ3_lboﬁ
;

114 
	mZ3_INT_SYMBOL
,

115 
	mZ3_STRING_SYMBOL


116 } 
	tZ3_symbﬁ_köd
;

134 
	mZ3_PARAMETER_INT
,

135 
	mZ3_PARAMETER_DOUBLE
,

136 
	mZ3_PARAMETER_RATIONAL
,

137 
	mZ3_PARAMETER_SYMBOL
,

138 
	mZ3_PARAMETER_SORT
,

139 
	mZ3_PARAMETER_AST
,

140 
	mZ3_PARAMETER_FUNC_DECL


141 } 
	tZ3_∑ømëî_köd
;

148 
	mZ3_UNINTERPRETED_SORT
,

149 
	mZ3_BOOL_SORT
,

150 
	mZ3_INT_SORT
,

151 
	mZ3_REAL_SORT
,

152 
	mZ3_BV_SORT
,

153 
	mZ3_ARRAY_SORT
,

154 
	mZ3_DATATYPE_SORT
,

155 
	mZ3_RELATION_SORT
,

156 
	mZ3_FINITE_DOMAIN_SORT
,

157 
	mZ3_FLOATING_POINT_SORT
,

158 
	mZ3_ROUNDING_MODE_SORT
,

159 
	mZ3_SEQ_SORT
,

160 
	mZ3_RE_SORT
,

161 
	mZ3_UNKNOWN_SORT
 = 1000

162 } 
	tZ3_s‹t_köd
;

178 
	mZ3_NUMERAL_AST
,

179 
	mZ3_APP_AST
,

180 
	mZ3_VAR_AST
,

181 
	mZ3_QUANTIFIER_AST
,

182 
	mZ3_SORT_AST
,

183 
	mZ3_FUNC_DECL_AST
,

184 
	mZ3_UNKNOWN_AST
 = 1000

185 } 
	tZ3_a°_köd
;

984 
	mZ3_OP_TRUE
 = 0x100,

985 
	mZ3_OP_FALSE
,

986 
	mZ3_OP_EQ
,

987 
	mZ3_OP_DISTINCT
,

988 
	mZ3_OP_ITE
,

989 
	mZ3_OP_AND
,

990 
	mZ3_OP_OR
,

991 
	mZ3_OP_IFF
,

992 
	mZ3_OP_XOR
,

993 
	mZ3_OP_NOT
,

994 
	mZ3_OP_IMPLIES
,

995 
	mZ3_OP_OEQ
,

998 
	mZ3_OP_ANUM
 = 0x200,

999 
	mZ3_OP_AGNUM
,

1000 
	mZ3_OP_LE
,

1001 
	mZ3_OP_GE
,

1002 
	mZ3_OP_LT
,

1003 
	mZ3_OP_GT
,

1004 
	mZ3_OP_ADD
,

1005 
	mZ3_OP_SUB
,

1006 
	mZ3_OP_UMINUS
,

1007 
	mZ3_OP_MUL
,

1008 
	mZ3_OP_DIV
,

1009 
	mZ3_OP_IDIV
,

1010 
	mZ3_OP_REM
,

1011 
	mZ3_OP_MOD
,

1012 
	mZ3_OP_TO_REAL
,

1013 
	mZ3_OP_TO_INT
,

1014 
	mZ3_OP_IS_INT
,

1015 
	mZ3_OP_POWER
,

1018 
	mZ3_OP_STORE
 = 0x300,

1019 
	mZ3_OP_SELECT
,

1020 
	mZ3_OP_CONST_ARRAY
,

1021 
	mZ3_OP_ARRAY_MAP
,

1022 
	mZ3_OP_ARRAY_DEFAULT
,

1023 
	mZ3_OP_SET_UNION
,

1024 
	mZ3_OP_SET_INTERSECT
,

1025 
	mZ3_OP_SET_DIFFERENCE
,

1026 
	mZ3_OP_SET_COMPLEMENT
,

1027 
	mZ3_OP_SET_SUBSET
,

1028 
	mZ3_OP_AS_ARRAY
,

1029 
	mZ3_OP_ARRAY_EXT
,

1032 
	mZ3_OP_BNUM
 = 0x400,

1033 
	mZ3_OP_BIT1
,

1034 
	mZ3_OP_BIT0
,

1035 
	mZ3_OP_BNEG
,

1036 
	mZ3_OP_BADD
,

1037 
	mZ3_OP_BSUB
,

1038 
	mZ3_OP_BMUL
,

1040 
	mZ3_OP_BSDIV
,

1041 
	mZ3_OP_BUDIV
,

1042 
	mZ3_OP_BSREM
,

1043 
	mZ3_OP_BUREM
,

1044 
	mZ3_OP_BSMOD
,

1048 
	mZ3_OP_BSDIV0
,

1049 
	mZ3_OP_BUDIV0
,

1050 
	mZ3_OP_BSREM0
,

1051 
	mZ3_OP_BUREM0
,

1052 
	mZ3_OP_BSMOD0
,

1054 
	mZ3_OP_ULEQ
,

1055 
	mZ3_OP_SLEQ
,

1056 
	mZ3_OP_UGEQ
,

1057 
	mZ3_OP_SGEQ
,

1058 
	mZ3_OP_ULT
,

1059 
	mZ3_OP_SLT
,

1060 
	mZ3_OP_UGT
,

1061 
	mZ3_OP_SGT
,

1063 
	mZ3_OP_BAND
,

1064 
	mZ3_OP_BOR
,

1065 
	mZ3_OP_BNOT
,

1066 
	mZ3_OP_BXOR
,

1067 
	mZ3_OP_BNAND
,

1068 
	mZ3_OP_BNOR
,

1069 
	mZ3_OP_BXNOR
,

1071 
	mZ3_OP_CONCAT
,

1072 
	mZ3_OP_SIGN_EXT
,

1073 
	mZ3_OP_ZERO_EXT
,

1074 
	mZ3_OP_EXTRACT
,

1075 
	mZ3_OP_REPEAT
,

1077 
	mZ3_OP_BREDOR
,

1078 
	mZ3_OP_BREDAND
,

1079 
	mZ3_OP_BCOMP
,

1081 
	mZ3_OP_BSHL
,

1082 
	mZ3_OP_BLSHR
,

1083 
	mZ3_OP_BASHR
,

1084 
	mZ3_OP_ROTATE_LEFT
,

1085 
	mZ3_OP_ROTATE_RIGHT
,

1086 
	mZ3_OP_EXT_ROTATE_LEFT
,

1087 
	mZ3_OP_EXT_ROTATE_RIGHT
,

1089 
	mZ3_OP_BIT2BOOL
,

1090 
	mZ3_OP_INT2BV
,

1091 
	mZ3_OP_BV2INT
,

1092 
	mZ3_OP_CARRY
,

1093 
	mZ3_OP_XOR3
,

1095 
	mZ3_OP_BSMUL_NO_OVFL
,

1096 
	mZ3_OP_BUMUL_NO_OVFL
,

1097 
	mZ3_OP_BSMUL_NO_UDFL
,

1098 
	mZ3_OP_BSDIV_I
,

1099 
	mZ3_OP_BUDIV_I
,

1100 
	mZ3_OP_BSREM_I
,

1101 
	mZ3_OP_BUREM_I
,

1102 
	mZ3_OP_BSMOD_I
,

1105 
	mZ3_OP_PR_UNDEF
 = 0x500,

1106 
	mZ3_OP_PR_TRUE
,

1107 
	mZ3_OP_PR_ASSERTED
,

1108 
	mZ3_OP_PR_GOAL
,

1109 
	mZ3_OP_PR_MODUS_PONENS
,

1110 
	mZ3_OP_PR_REFLEXIVITY
,

1111 
	mZ3_OP_PR_SYMMETRY
,

1112 
	mZ3_OP_PR_TRANSITIVITY
,

1113 
	mZ3_OP_PR_TRANSITIVITY_STAR
,

1114 
	mZ3_OP_PR_MONOTONICITY
,

1115 
	mZ3_OP_PR_QUANT_INTRO
,

1116 
	mZ3_OP_PR_BIND
,

1117 
	mZ3_OP_PR_DISTRIBUTIVITY
,

1118 
	mZ3_OP_PR_AND_ELIM
,

1119 
	mZ3_OP_PR_NOT_OR_ELIM
,

1120 
	mZ3_OP_PR_REWRITE
,

1121 
	mZ3_OP_PR_REWRITE_STAR
,

1122 
	mZ3_OP_PR_PULL_QUANT
,

1123 
	mZ3_OP_PR_PUSH_QUANT
,

1124 
	mZ3_OP_PR_ELIM_UNUSED_VARS
,

1125 
	mZ3_OP_PR_DER
,

1126 
	mZ3_OP_PR_QUANT_INST
,

1127 
	mZ3_OP_PR_HYPOTHESIS
,

1128 
	mZ3_OP_PR_LEMMA
,

1129 
	mZ3_OP_PR_UNIT_RESOLUTION
,

1130 
	mZ3_OP_PR_IFF_TRUE
,

1131 
	mZ3_OP_PR_IFF_FALSE
,

1132 
	mZ3_OP_PR_COMMUTATIVITY
,

1133 
	mZ3_OP_PR_DEF_AXIOM
,

1134 
	mZ3_OP_PR_DEF_INTRO
,

1135 
	mZ3_OP_PR_APPLY_DEF
,

1136 
	mZ3_OP_PR_IFF_OEQ
,

1137 
	mZ3_OP_PR_NNF_POS
,

1138 
	mZ3_OP_PR_NNF_NEG
,

1139 
	mZ3_OP_PR_SKOLEMIZE
,

1140 
	mZ3_OP_PR_MODUS_PONENS_OEQ
,

1141 
	mZ3_OP_PR_TH_LEMMA
,

1142 
	mZ3_OP_PR_HYPER_RESOLVE
,

1145 
	mZ3_OP_RA_STORE
 = 0x600,

1146 
	mZ3_OP_RA_EMPTY
,

1147 
	mZ3_OP_RA_IS_EMPTY
,

1148 
	mZ3_OP_RA_JOIN
,

1149 
	mZ3_OP_RA_UNION
,

1150 
	mZ3_OP_RA_WIDEN
,

1151 
	mZ3_OP_RA_PROJECT
,

1152 
	mZ3_OP_RA_FILTER
,

1153 
	mZ3_OP_RA_NEGATION_FILTER
,

1154 
	mZ3_OP_RA_RENAME
,

1155 
	mZ3_OP_RA_COMPLEMENT
,

1156 
	mZ3_OP_RA_SELECT
,

1157 
	mZ3_OP_RA_CLONE
,

1158 
	mZ3_OP_FD_CONSTANT
,

1159 
	mZ3_OP_FD_LT
,

1162 
	mZ3_OP_SEQ_UNIT
,

1163 
	mZ3_OP_SEQ_EMPTY
,

1164 
	mZ3_OP_SEQ_CONCAT
,

1165 
	mZ3_OP_SEQ_PREFIX
,

1166 
	mZ3_OP_SEQ_SUFFIX
,

1167 
	mZ3_OP_SEQ_CONTAINS
,

1168 
	mZ3_OP_SEQ_EXTRACT
,

1169 
	mZ3_OP_SEQ_REPLACE
,

1170 
	mZ3_OP_SEQ_AT
,

1171 
	mZ3_OP_SEQ_LENGTH
,

1172 
	mZ3_OP_SEQ_INDEX
,

1173 
	mZ3_OP_SEQ_TO_RE
,

1174 
	mZ3_OP_SEQ_IN_RE
,

1177 
	mZ3_OP_STR_TO_INT
,

1178 
	mZ3_OP_INT_TO_STR
,

1181 
	mZ3_OP_RE_PLUS
,

1182 
	mZ3_OP_RE_STAR
,

1183 
	mZ3_OP_RE_OPTION
,

1184 
	mZ3_OP_RE_CONCAT
,

1185 
	mZ3_OP_RE_UNION
,

1186 
	mZ3_OP_RE_RANGE
,

1187 
	mZ3_OP_RE_LOOP
,

1188 
	mZ3_OP_RE_INTERSECT
,

1189 
	mZ3_OP_RE_EMPTY_SET
,

1190 
	mZ3_OP_RE_FULL_SET
,

1191 
	mZ3_OP_RE_COMPLEMENT
,

1194 
	mZ3_OP_LABEL
 = 0x700,

1195 
	mZ3_OP_LABEL_LIT
,

1198 
	mZ3_OP_DT_CONSTRUCTOR
=0x800,

1199 
	mZ3_OP_DT_RECOGNISER
,

1200 
	mZ3_OP_DT_IS
,

1201 
	mZ3_OP_DT_ACCESSOR
,

1202 
	mZ3_OP_DT_UPDATE_FIELD
,

1205 
	mZ3_OP_PB_AT_MOST
=0x900,

1206 
	mZ3_OP_PB_AT_LEAST
,

1207 
	mZ3_OP_PB_LE
,

1208 
	mZ3_OP_PB_GE
,

1209 
	mZ3_OP_PB_EQ
,

1212 
	mZ3_OP_FPA_RM_NEAREST_TIES_TO_EVEN
,

1213 
	mZ3_OP_FPA_RM_NEAREST_TIES_TO_AWAY
,

1214 
	mZ3_OP_FPA_RM_TOWARD_POSITIVE
,

1215 
	mZ3_OP_FPA_RM_TOWARD_NEGATIVE
,

1216 
	mZ3_OP_FPA_RM_TOWARD_ZERO
,

1218 
	mZ3_OP_FPA_NUM
,

1219 
	mZ3_OP_FPA_PLUS_INF
,

1220 
	mZ3_OP_FPA_MINUS_INF
,

1221 
	mZ3_OP_FPA_NAN
,

1222 
	mZ3_OP_FPA_PLUS_ZERO
,

1223 
	mZ3_OP_FPA_MINUS_ZERO
,

1225 
	mZ3_OP_FPA_ADD
,

1226 
	mZ3_OP_FPA_SUB
,

1227 
	mZ3_OP_FPA_NEG
,

1228 
	mZ3_OP_FPA_MUL
,

1229 
	mZ3_OP_FPA_DIV
,

1230 
	mZ3_OP_FPA_REM
,

1231 
	mZ3_OP_FPA_ABS
,

1232 
	mZ3_OP_FPA_MIN
,

1233 
	mZ3_OP_FPA_MAX
,

1234 
	mZ3_OP_FPA_FMA
,

1235 
	mZ3_OP_FPA_SQRT
,

1236 
	mZ3_OP_FPA_ROUND_TO_INTEGRAL
,

1238 
	mZ3_OP_FPA_EQ
,

1239 
	mZ3_OP_FPA_LT
,

1240 
	mZ3_OP_FPA_GT
,

1241 
	mZ3_OP_FPA_LE
,

1242 
	mZ3_OP_FPA_GE
,

1243 
	mZ3_OP_FPA_IS_NAN
,

1244 
	mZ3_OP_FPA_IS_INF
,

1245 
	mZ3_OP_FPA_IS_ZERO
,

1246 
	mZ3_OP_FPA_IS_NORMAL
,

1247 
	mZ3_OP_FPA_IS_SUBNORMAL
,

1248 
	mZ3_OP_FPA_IS_NEGATIVE
,

1249 
	mZ3_OP_FPA_IS_POSITIVE
,

1251 
	mZ3_OP_FPA_FP
,

1252 
	mZ3_OP_FPA_TO_FP
,

1253 
	mZ3_OP_FPA_TO_FP_UNSIGNED
,

1254 
	mZ3_OP_FPA_TO_UBV
,

1255 
	mZ3_OP_FPA_TO_SBV
,

1256 
	mZ3_OP_FPA_TO_REAL
,

1258 
	mZ3_OP_FPA_TO_IEEE_BV
,

1260 
	mZ3_OP_FPA_BVWRAP
,

1261 
	mZ3_OP_FPA_BV2RM
,

1263 
	mZ3_OP_INTERNAL
,

1265 
	mZ3_OP_UNINTERPRETED


1266 } 
	tZ3_de˛_köd
;

1281 
	mZ3_PK_UINT
,

1282 
	mZ3_PK_BOOL
,

1283 
	mZ3_PK_DOUBLE
,

1284 
	mZ3_PK_SYMBOL
,

1285 
	mZ3_PK_STRING
,

1286 
	mZ3_PK_OTHER
,

1287 
	mZ3_PK_INVALID


1288 } 
	tZ3_∑øm_köd
;

1298 
	mZ3_PRINT_SMTLIB_FULL
,

1299 
	mZ3_PRINT_LOW_LEVEL
,

1300 
	mZ3_PRINT_SMTLIB2_COMPLIANT


1301 } 
	tZ3_a°_¥öt_mode
;

1323 
	mZ3_OK
,

1324 
	mZ3_SORT_ERROR
,

1325 
	mZ3_IOB
,

1326 
	mZ3_INVALID_ARG
,

1327 
	mZ3_PARSER_ERROR
,

1328 
	mZ3_NO_PARSER
,

1329 
	mZ3_INVALID_PATTERN
,

1330 
	mZ3_MEMOUT_FAIL
,

1331 
	mZ3_FILE_ACCESS_ERROR
,

1332 
	mZ3_INTERNAL_FATAL
,

1333 
	mZ3_INVALID_USAGE
,

1334 
	mZ3_DEC_REF_ERROR
,

1335 
	mZ3_EXCEPTION


1336 } 
	tZ3_îr‹_code
;

1372 
	tZ3_îr‹_h™dÀr
(
	tZ3_c⁄ãxt
 
	tc
, 
	tZ3_îr‹_code
 
	te
);

1386 
	mZ3_GOAL_PRECISE
,

1387 
	mZ3_GOAL_UNDER
,

1388 
	mZ3_GOAL_OVER
,

1389 
	mZ3_GOAL_UNDER_OVER


1390 } 
	tZ3_gﬂl_¥ec
;

1394 #ifde‡
__˝lu•lus


1422 
Z3_API
 
Z3_globÆ_∑øm_£t
(
Z3_°rög
 
∑øm_id
, Z3_°rög 
∑øm_vÆue
);

1433 
Z3_API
 
Z3_globÆ_∑øm_ª£t_Æl
();

1447 
Z3_boﬁ_›t
 
Z3_API
 
Z3_globÆ_∑øm_gë
(
Z3_°rög
 
∑øm_id
, 
Z3_°rög_±r
 
∑øm_vÆue
);

1484 
Z3_c⁄fig
 
Z3_API
 
Z3_mk_c⁄fig
();

1493 
Z3_API
 
Z3_dñ_c⁄fig
(
Z3_c⁄fig
 
c
);

1504 
Z3_API
 
Z3_£t_∑øm_vÆue
(
Z3_c⁄fig
 
c
, 
Z3_°rög
 
∑øm_id
, Z3_°rög 
∑øm_vÆue
);

1537 
Z3_c⁄ãxt
 
Z3_API
 
Z3_mk_c⁄ãxt
(
Z3_c⁄fig
 
c
);

1561 
Z3_c⁄ãxt
 
Z3_API
 
Z3_mk_c⁄ãxt_rc
(
Z3_c⁄fig
 
c
);

1570 
Z3_API
 
Z3_dñ_c⁄ãxt
(
Z3_c⁄ãxt
 
c
);

1579 
Z3_API
 
Z3_öc_ªf
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
a
);

1588 
Z3_API
 
Z3_dec_ªf
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
a
);

1597 
Z3_API
 
Z3_upd©e_∑øm_vÆue
(
Z3_c⁄ãxt
 
c
, 
Z3_°rög
 
∑øm_id
, Z3_°rög 
∑øm_vÆue
);

1605 
Z3_API
 
Z3_öãºu±
(
Z3_c⁄ãxt
 
c
);

1623 
Z3_∑øms
 
Z3_API
 
Z3_mk_∑øms
(
Z3_c⁄ãxt
 
c
);

1630 
Z3_API
 
Z3_∑øms_öc_ªf
(
Z3_c⁄ãxt
 
c
, 
Z3_∑øms
 
p
);

1637 
Z3_API
 
Z3_∑øms_dec_ªf
(
Z3_c⁄ãxt
 
c
, 
Z3_∑øms
 
p
);

1644 
Z3_API
 
Z3_∑øms_£t_boﬁ
(
Z3_c⁄ãxt
 
c
, 
Z3_∑øms
 
p
, 
Z3_symbﬁ
 
k
, 
boﬁ
 
v
);

1651 
Z3_API
 
Z3_∑øms_£t_uöt
(
Z3_c⁄ãxt
 
c
, 
Z3_∑øms
 
p
, 
Z3_symbﬁ
 
k
, 
v
);

1658 
Z3_API
 
Z3_∑øms_£t_doubÀ
(
Z3_c⁄ãxt
 
c
, 
Z3_∑øms
 
p
, 
Z3_symbﬁ
 
k
, 
v
);

1665 
Z3_API
 
Z3_∑øms_£t_symbﬁ
(
Z3_c⁄ãxt
 
c
, 
Z3_∑øms
 
p
, 
Z3_symbﬁ
 
k
, Z3_symbﬁ 
v
);

1673 
Z3_°rög
 
Z3_API
 
Z3_∑øms_to_°rög
(
Z3_c⁄ãxt
 
c
, 
Z3_∑øms
 
p
);

1682 
Z3_API
 
Z3_∑øms_vÆid©e
(
Z3_c⁄ãxt
 
c
, 
Z3_∑øms
 
p
, 
Z3_∑øm_des¸s
 
d
);

1694 
Z3_API
 
Z3_∑øm_des¸s_öc_ªf
(
Z3_c⁄ãxt
 
c
, 
Z3_∑øm_des¸s
 
p
);

1701 
Z3_API
 
Z3_∑øm_des¸s_dec_ªf
(
Z3_c⁄ãxt
 
c
, 
Z3_∑øm_des¸s
 
p
);

1708 
Z3_∑øm_köd
 
Z3_API
 
Z3_∑øm_des¸s_gë_köd
(
Z3_c⁄ãxt
 
c
, 
Z3_∑øm_des¸s
 
p
, 
Z3_symbﬁ
 
n
);

1715 
Z3_API
 
Z3_∑øm_des¸s_size
(
Z3_c⁄ãxt
 
c
, 
Z3_∑øm_des¸s
 
p
);

1724 
Z3_symbﬁ
 
Z3_API
 
Z3_∑øm_des¸s_gë_«me
(
Z3_c⁄ãxt
 
c
, 
Z3_∑øm_des¸s
 
p
, 
i
);

1731 
Z3_°rög
 
Z3_API
 
Z3_∑øm_des¸s_gë_documíèti⁄
(
Z3_c⁄ãxt
 
c
, 
Z3_∑øm_des¸s
 
p
, 
Z3_symbﬁ
 
s
);

1739 
Z3_°rög
 
Z3_API
 
Z3_∑øm_des¸s_to_°rög
(
Z3_c⁄ãxt
 
c
, 
Z3_∑øm_des¸s
 
p
);

1759 
Z3_symbﬁ
 
Z3_API
 
Z3_mk_öt_symbﬁ
(
Z3_c⁄ãxt
 
c
, 
i
);

1771 
Z3_symbﬁ
 
Z3_API
 
Z3_mk_°rög_symbﬁ
(
Z3_c⁄ãxt
 
c
, 
Z3_°rög
 
s
);

1785 
Z3_s‹t
 
Z3_API
 
Z3_mk_unöãΩªãd_s‹t
(
Z3_c⁄ãxt
 
c
, 
Z3_symbﬁ
 
s
);

1794 
Z3_s‹t
 
Z3_API
 
Z3_mk_boﬁ_s‹t
(
Z3_c⁄ãxt
 
c
);

1807 
Z3_s‹t
 
Z3_API
 
Z3_mk_öt_s‹t
(
Z3_c⁄ãxt
 
c
);

1816 
Z3_s‹t
 
Z3_API
 
Z3_mk_ªÆ_s‹t
(
Z3_c⁄ãxt
 
c
);

1827 
Z3_s‹t
 
Z3_API
 
Z3_mk_bv_s‹t
(
Z3_c⁄ãxt
 
c
, 
sz
);

1842 
Z3_s‹t
 
Z3_API
 
Z3_mk_föôe_domaö_s‹t
(
Z3_c⁄ãxt
 
c
, 
Z3_symbﬁ
 
«me
, 
uöt64_t
 
size
);

1855 
Z3_s‹t
 
Z3_API
 
Z3_mk_¨øy_s‹t
(
Z3_c⁄ãxt
 
c
, Z3_s‹à
domaö
, Z3_s‹à
ønge
);

1865 
Z3_s‹t
 
Z3_API
 
Z3_mk_¨øy_s‹t_n
(
Z3_c⁄ãxt
 
c
, 
n
, Z3_s‹àc⁄° * 
domaö
, Z3_s‹à
ønge
);

1883 
Z3_s‹t
 
Z3_API
 
Z3_mk_tu∂e_s‹t
(
Z3_c⁄ãxt
 
c
,

1884 
Z3_symbﬁ
 
mk_tu∂e_«me
,

1885 
num_fõlds
,

1886 
Z3_symbﬁ
 c⁄° 
fõld_«mes
[],

1887 
Z3_s‹t
 c⁄° 
fõld_s‹ts
[],

1888 
Z3_func_de˛
 * 
mk_tu∂e_de˛
,

1889 
Z3_func_de˛
 
¥oj_de˛
[]);

1912 
Z3_s‹t
 
Z3_API
 
Z3_mk_íumî©i⁄_s‹t
(
Z3_c⁄ãxt
 
c
,

1913 
Z3_symbﬁ
 
«me
,

1914 
n
,

1915 
Z3_symbﬁ
 c⁄° 
íum_«mes
[],

1916 
Z3_func_de˛
 
íum_c⁄°s
[],

1917 
Z3_func_de˛
 
íum_ã°îs
[]);

1937 
Z3_s‹t
 
Z3_API
 
Z3_mk_li°_s‹t
(
Z3_c⁄ãxt
 
c
,

1938 
Z3_symbﬁ
 
«me
,

1939 
Z3_s‹t
 
ñem_s‹t
,

1940 
Z3_func_de˛
* 
nû_de˛
,

1941 
Z3_func_de˛
* 
is_nû_de˛
,

1942 
Z3_func_de˛
* 
c⁄s_de˛
,

1943 
Z3_func_de˛
* 
is_c⁄s_de˛
,

1944 
Z3_func_de˛
* 
hód_de˛
,

1945 
Z3_func_de˛
* 
èû_de˛


1963 
Z3_c⁄°ru˘‹
 
Z3_API
 
Z3_mk_c⁄°ru˘‹
(
Z3_c⁄ãxt
 
c
,

1964 
Z3_symbﬁ
 
«me
,

1965 
Z3_symbﬁ
 
ªcognizî
,

1966 
num_fõlds
,

1967 
Z3_symbﬁ
 c⁄° 
fõld_«mes
[],

1968 
Z3_s‹t_›t
 c⁄° 
s‹ts
[],

1969 
s‹t_ªfs
[]

1980 
Z3_API
 
Z3_dñ_c⁄°ru˘‹
(
Z3_c⁄ãxt
 
c
, 
Z3_c⁄°ru˘‹
 
c⁄°r
);

1993 
Z3_s‹t
 
Z3_API
 
Z3_mk_d©©y≥
(
Z3_c⁄ãxt
 
c
,

1994 
Z3_symbﬁ
 
«me
,

1995 
num_c⁄°ru˘‹s
,

1996 
Z3_c⁄°ru˘‹
 
c⁄°ru˘‹s
[]);

2007 
Z3_c⁄°ru˘‹_li°
 
Z3_API
 
Z3_mk_c⁄°ru˘‹_li°
(
Z3_c⁄ãxt
 
c
,

2008 
num_c⁄°ru˘‹s
,

2009 
Z3_c⁄°ru˘‹
 c⁄° 
c⁄°ru˘‹s
[]);

2021 
Z3_API
 
Z3_dñ_c⁄°ru˘‹_li°
(
Z3_c⁄ãxt
 
c
, 
Z3_c⁄°ru˘‹_li°
 
˛i°
);

2034 
Z3_API
 
Z3_mk_d©©y≥s
(
Z3_c⁄ãxt
 
c
,

2035 
num_s‹ts
,

2036 
Z3_symbﬁ
 c⁄° 
s‹t_«mes
[],

2037 
Z3_s‹t
 
s‹ts
[],

2038 
Z3_c⁄°ru˘‹_li°
 
c⁄°ru˘‹_li°s
[]);

2052 
Z3_API
 
Z3_quîy_c⁄°ru˘‹
(
Z3_c⁄ãxt
 
c
,

2053 
Z3_c⁄°ru˘‹
 
c⁄°r
,

2054 
num_fõlds
,

2055 
Z3_func_de˛
* 
c⁄°ru˘‹
,

2056 
Z3_func_de˛
* 
ã°î
,

2057 
Z3_func_de˛
 
ac˚ss‹s
[]);

2081 
Z3_func_de˛
 
Z3_API
 
Z3_mk_func_de˛
(
Z3_c⁄ãxt
 
c
, 
Z3_symbﬁ
 
s
,

2082 
domaö_size
, 
Z3_s‹t
 c⁄° 
domaö
[],

2083 
Z3_s‹t
 
ønge
);

2094 
Z3_a°
 
Z3_API
 
Z3_mk_≠p
(

2095 
Z3_c⁄ãxt
 
c
,

2096 
Z3_func_de˛
 
d
,

2097 
num_¨gs
,

2098 
Z3_a°
 c⁄° 
¨gs
[]);

2114 
Z3_a°
 
Z3_API
 
Z3_mk_c⁄°
(
Z3_c⁄ãxt
 
c
, 
Z3_symbﬁ
 
s
, 
Z3_s‹t
 
ty
);

2128 
Z3_func_de˛
 
Z3_API
 
Z3_mk_‰esh_func_de˛
(
Z3_c⁄ãxt
 
c
, 
Z3_°rög
 
¥efix
,

2129 
domaö_size
, 
Z3_s‹t
 c⁄° 
domaö
[],

2130 
Z3_s‹t
 
ønge
);

2145 
Z3_a°
 
Z3_API
 
Z3_mk_‰esh_c⁄°
(
Z3_c⁄ãxt
 
c
, 
Z3_°rög
 
¥efix
, 
Z3_s‹t
 
ty
);

2166 
Z3_func_de˛
 
Z3_API
 
Z3_mk_ªc_func_de˛
(
Z3_c⁄ãxt
 
c
, 
Z3_symbﬁ
 
s
,

2167 
domaö_size
, 
Z3_s‹t
 c⁄° 
domaö
[],

2168 
Z3_s‹t
 
ønge
);

2186 
Z3_API
 
Z3_add_ªc_def
(
Z3_c⁄ãxt
 
c
, 
Z3_func_de˛
 
f
, 
n
, 
Z3_a°
 
¨gs
[], Z3_a° 
body
);

2197 
Z3_a°
 
Z3_API
 
Z3_mk_åue
(
Z3_c⁄ãxt
 
c
);

2204 
Z3_a°
 
Z3_API
 
Z3_mk_Ál£
(
Z3_c⁄ãxt
 
c
);

2213 
Z3_a°
 
Z3_API
 
Z3_mk_eq
(
Z3_c⁄ãxt
 
c
, Z3_a° 
l
, Z3_a° 
r
);

2227 
Z3_a°
 
Z3_API
 
Z3_mk_di°ö˘
(
Z3_c⁄ãxt
 
c
, 
num_¨gs
, Z3_a° c⁄° 
¨gs
[]);

2236 
Z3_a°
 
Z3_API
 
Z3_mk_nŸ
(
Z3_c⁄ãxt
 
c
, Z3_a° 
a
);

2246 
Z3_a°
 
Z3_API
 
Z3_mk_ôe
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
, Z3_a° 
t2
, Z3_a° 
t3
);

2255 
Z3_a°
 
Z3_API
 
Z3_mk_iff
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
, Z3_a° 
t2
);

2264 
Z3_a°
 
Z3_API
 
Z3_mk_im∂õs
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
, Z3_a° 
t2
);

2273 
Z3_a°
 
Z3_API
 
Z3_mk_x‹
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
, Z3_a° 
t2
);

2285 
Z3_a°
 
Z3_API
 
Z3_mk_™d
(
Z3_c⁄ãxt
 
c
, 
num_¨gs
, Z3_a° c⁄° 
¨gs
[]);

2297 
Z3_a°
 
Z3_API
 
Z3_mk_‹
(
Z3_c⁄ãxt
 
c
, 
num_¨gs
, Z3_a° c⁄° 
¨gs
[]);

2312 
Z3_a°
 
Z3_API
 
Z3_mk_add
(
Z3_c⁄ãxt
 
c
, 
num_¨gs
, Z3_a° c⁄° 
¨gs
[]);

2325 
Z3_a°
 
Z3_API
 
Z3_mk_mul
(
Z3_c⁄ãxt
 
c
, 
num_¨gs
, Z3_a° c⁄° 
¨gs
[]);

2337 
Z3_a°
 
Z3_API
 
Z3_mk_sub
(
Z3_c⁄ãxt
 
c
, 
num_¨gs
, Z3_a° c⁄° 
¨gs
[]);

2346 
Z3_a°
 
Z3_API
 
Z3_mk_u«ry_möus
(
Z3_c⁄ãxt
 
c
, Z3_a° 
¨g
);

2357 
Z3_a°
 
Z3_API
 
Z3_mk_div
(
Z3_c⁄ãxt
 
c
, Z3_a° 
¨g1
, Z3_a° 
¨g2
);

2366 
Z3_a°
 
Z3_API
 
Z3_mk_mod
(
Z3_c⁄ãxt
 
c
, Z3_a° 
¨g1
, Z3_a° 
¨g2
);

2375 
Z3_a°
 
Z3_API
 
Z3_mk_ªm
(
Z3_c⁄ãxt
 
c
, Z3_a° 
¨g1
, Z3_a° 
¨g2
);

2384 
Z3_a°
 
Z3_API
 
Z3_mk_powî
(
Z3_c⁄ãxt
 
c
, Z3_a° 
¨g1
, Z3_a° 
¨g2
);

2393 
Z3_a°
 
Z3_API
 
Z3_mk_…
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
, Z3_a° 
t2
);

2402 
Z3_a°
 
Z3_API
 
Z3_mk_À
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
, Z3_a° 
t2
);

2411 
Z3_a°
 
Z3_API
 
Z3_mk_gt
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
, Z3_a° 
t2
);

2420 
Z3_a°
 
Z3_API
 
Z3_mk_ge
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
, Z3_a° 
t2
);

2439 
Z3_a°
 
Z3_API
 
Z3_mk_öt2ªÆ
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
);

2452 
Z3_a°
 
Z3_API
 
Z3_mk_ªÆ2öt
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
);

2462 
Z3_a°
 
Z3_API
 
Z3_mk_is_öt
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
);

2474 
Z3_a°
 
Z3_API
 
Z3_mk_bvnŸ
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
);

2483 
Z3_a°
 
Z3_API
 
Z3_mk_bvªd™d
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
);

2492 
Z3_a°
 
Z3_API
 
Z3_mk_bvªd‹
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
);

2501 
Z3_a°
 
Z3_API
 
Z3_mk_bv™d
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
, Z3_a° 
t2
);

2510 
Z3_a°
 
Z3_API
 
Z3_mk_bv‹
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
, Z3_a° 
t2
);

2519 
Z3_a°
 
Z3_API
 
Z3_mk_bvx‹
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
, Z3_a° 
t2
);

2528 
Z3_a°
 
Z3_API
 
Z3_mk_bv«nd
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
, Z3_a° 
t2
);

2537 
Z3_a°
 
Z3_API
 
Z3_mk_bvn‹
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
, Z3_a° 
t2
);

2546 
Z3_a°
 
Z3_API
 
Z3_mk_bvxn‹
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
, Z3_a° 
t2
);

2555 
Z3_a°
 
Z3_API
 
Z3_mk_bv√g
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
);

2564 
Z3_a°
 
Z3_API
 
Z3_mk_bvadd
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
, Z3_a° 
t2
);

2573 
Z3_a°
 
Z3_API
 
Z3_mk_bvsub
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
, Z3_a° 
t2
);

2582 
Z3_a°
 
Z3_API
 
Z3_mk_bvmul
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
, Z3_a° 
t2
);

2595 
Z3_a°
 
Z3_API
 
Z3_mk_bvudiv
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
, Z3_a° 
t2
);

2612 
Z3_a°
 
Z3_API
 
Z3_mk_bvsdiv
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
, Z3_a° 
t2
);

2625 
Z3_a°
 
Z3_API
 
Z3_mk_bvuªm
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
, Z3_a° 
t2
);

2641 
Z3_a°
 
Z3_API
 
Z3_mk_bv§em
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
, Z3_a° 
t2
);

2654 
Z3_a°
 
Z3_API
 
Z3_mk_bvsmod
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
, Z3_a° 
t2
);

2663 
Z3_a°
 
Z3_API
 
Z3_mk_bvu…
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
, Z3_a° 
t2
);

2680 
Z3_a°
 
Z3_API
 
Z3_mk_bv¶t
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
, Z3_a° 
t2
);

2689 
Z3_a°
 
Z3_API
 
Z3_mk_bvuÀ
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
, Z3_a° 
t2
);

2698 
Z3_a°
 
Z3_API
 
Z3_mk_bv¶e
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
, Z3_a° 
t2
);

2707 
Z3_a°
 
Z3_API
 
Z3_mk_bvuge
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
, Z3_a° 
t2
);

2716 
Z3_a°
 
Z3_API
 
Z3_mk_bvsge
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
, Z3_a° 
t2
);

2725 
Z3_a°
 
Z3_API
 
Z3_mk_bvugt
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
, Z3_a° 
t2
);

2734 
Z3_a°
 
Z3_API
 
Z3_mk_bvsgt
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
, Z3_a° 
t2
);

2746 
Z3_a°
 
Z3_API
 
Z3_mk_c⁄ˇt
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
, Z3_a° 
t2
);

2756 
Z3_a°
 
Z3_API
 
Z3_mk_exåa˘
(
Z3_c⁄ãxt
 
c
, 
high
, 
low
, Z3_a° 
t1
);

2767 
Z3_a°
 
Z3_API
 
Z3_mk_sign_ext
(
Z3_c⁄ãxt
 
c
, 
i
, Z3_a° 
t1
);

2778 
Z3_a°
 
Z3_API
 
Z3_mk_zîo_ext
(
Z3_c⁄ãxt
 
c
, 
i
, Z3_a° 
t1
);

2787 
Z3_a°
 
Z3_API
 
Z3_mk_ª≥©
(
Z3_c⁄ãxt
 
c
, 
i
, Z3_a° 
t1
);

2803 
Z3_a°
 
Z3_API
 
Z3_mk_bvshl
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
, Z3_a° 
t2
);

2819 
Z3_a°
 
Z3_API
 
Z3_mk_bvlshr
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
, Z3_a° 
t2
);

2836 
Z3_a°
 
Z3_API
 
Z3_mk_bvashr
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
, Z3_a° 
t2
);

2845 
Z3_a°
 
Z3_API
 
Z3_mk_rŸ©e_À·
(
Z3_c⁄ãxt
 
c
, 
i
, Z3_a° 
t1
);

2854 
Z3_a°
 
Z3_API
 
Z3_mk_rŸ©e_right
(
Z3_c⁄ãxt
 
c
, 
i
, Z3_a° 
t1
);

2863 
Z3_a°
 
Z3_API
 
Z3_mk_ext_rŸ©e_À·
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
, Z3_a° 
t2
);

2872 
Z3_a°
 
Z3_API
 
Z3_mk_ext_rŸ©e_right
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
, Z3_a° 
t2
);

2884 
Z3_a°
 
Z3_API
 
Z3_mk_öt2bv
(
Z3_c⁄ãxt
 
c
, 
n
, Z3_a° 
t1
);

2898 
Z3_a°
 
Z3_API
 
Z3_mk_bv2öt
(
Z3_c⁄ãxt
 
c
,Z3_a° 
t1
, 
boﬁ
 
is_sig√d
);

2908 
Z3_a°
 
Z3_API
 
Z3_mk_bvadd_no_ovîÊow
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
, Z3_a° 
t2
, 
boﬁ
 
is_sig√d
);

2918 
Z3_a°
 
Z3_API
 
Z3_mk_bvadd_no_undîÊow
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
, Z3_a° 
t2
);

2928 
Z3_a°
 
Z3_API
 
Z3_mk_bvsub_no_ovîÊow
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
, Z3_a° 
t2
);

2938 
Z3_a°
 
Z3_API
 
Z3_mk_bvsub_no_undîÊow
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
, Z3_a° 
t2
, 
boﬁ
 
is_sig√d
);

2948 
Z3_a°
 
Z3_API
 
Z3_mk_bvsdiv_no_ovîÊow
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
, Z3_a° 
t2
);

2958 
Z3_a°
 
Z3_API
 
Z3_mk_bv√g_no_ovîÊow
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
);

2968 
Z3_a°
 
Z3_API
 
Z3_mk_bvmul_no_ovîÊow
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
, Z3_a° 
t2
, 
boﬁ
 
is_sig√d
);

2978 
Z3_a°
 
Z3_API
 
Z3_mk_bvmul_no_undîÊow
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
, Z3_a° 
t2
);

2996 
Z3_a°
 
Z3_API
 
Z3_mk_£À˘
(
Z3_c⁄ãxt
 
c
, Z3_a° 
a
, Z3_a° 
i
);

3007 
Z3_a°
 
Z3_API
 
Z3_mk_£À˘_n
(
Z3_c⁄ãxt
 
c
, Z3_a° 
a
, 
n
, Z3_a° c⁄°* 
idxs
);

3026 
Z3_a°
 
Z3_API
 
Z3_mk_°‹e
(
Z3_c⁄ãxt
 
c
, Z3_a° 
a
, Z3_a° 
i
, Z3_a° 
v
);

3035 
Z3_a°
 
Z3_API
 
Z3_mk_°‹e_n
(
Z3_c⁄ãxt
 
c
, Z3_a° 
a
, 
n
, Z3_a° c⁄°* 
idxs
, Z3_a° 
v
);

3049 
Z3_a°
 
Z3_API
 
Z3_mk_c⁄°_¨øy
(
Z3_c⁄ãxt
 
c
, 
Z3_s‹t
 
domaö
, Z3_a° 
v
);

3064 
Z3_a°
 
Z3_API
 
Z3_mk_m≠
(
Z3_c⁄ãxt
 
c
, 
Z3_func_de˛
 
f
, 
n
, Z3_a° c⁄°* 
¨gs
);

3076 
Z3_a°
 
Z3_API
 
Z3_mk_¨øy_deÁu…
(
Z3_c⁄ãxt
 
c
, Z3_a° 
¨øy
);

3085 
Z3_a°
 
Z3_API
 
Z3_mk_as_¨øy
(
Z3_c⁄ãxt
 
c
, 
Z3_func_de˛
 
f
);

3095 
Z3_s‹t
 
Z3_API
 
Z3_mk_£t_s‹t
(
Z3_c⁄ãxt
 
c
, Z3_s‹à
ty
);

3102 
Z3_a°
 
Z3_API
 
Z3_mk_em±y_£t
(
Z3_c⁄ãxt
 
c
, 
Z3_s‹t
 
domaö
);

3109 
Z3_a°
 
Z3_API
 
Z3_mk_fuŒ_£t
(
Z3_c⁄ãxt
 
c
, 
Z3_s‹t
 
domaö
);

3118 
Z3_a°
 
Z3_API
 
Z3_mk_£t_add
(
Z3_c⁄ãxt
 
c
, Z3_a° 
£t
, Z3_a° 
ñem
);

3127 
Z3_a°
 
Z3_API
 
Z3_mk_£t_dñ
(
Z3_c⁄ãxt
 
c
, Z3_a° 
£t
, Z3_a° 
ñem
);

3134 
Z3_a°
 
Z3_API
 
Z3_mk_£t_uni⁄
(
Z3_c⁄ãxt
 
c
, 
num_¨gs
, Z3_a° c⁄° 
¨gs
[]);

3141 
Z3_a°
 
Z3_API
 
Z3_mk_£t_öãr£˘
(
Z3_c⁄ãxt
 
c
, 
num_¨gs
, Z3_a° c⁄° 
¨gs
[]);

3148 
Z3_a°
 
Z3_API
 
Z3_mk_£t_dif„ªn˚
(
Z3_c⁄ãxt
 
c
, Z3_a° 
¨g1
, Z3_a° 
¨g2
);

3155 
Z3_a°
 
Z3_API
 
Z3_mk_£t_com∂emít
(
Z3_c⁄ãxt
 
c
, Z3_a° 
¨g
);

3164 
Z3_a°
 
Z3_API
 
Z3_mk_£t_membî
(
Z3_c⁄ãxt
 
c
, Z3_a° 
ñem
, Z3_a° 
£t
);

3171 
Z3_a°
 
Z3_API
 
Z3_mk_£t_sub£t
(
Z3_c⁄ãxt
 
c
, Z3_a° 
¨g1
, Z3_a° 
¨g2
);

3181 
Z3_a°
 
Z3_API
 
Z3_mk_¨øy_ext
(
Z3_c⁄ãxt
 
c
, Z3_a° 
¨g1
, Z3_a° 
¨g2
);

3199 
Z3_a°
 
Z3_API
 
Z3_mk_numîÆ
(
Z3_c⁄ãxt
 
c
, 
Z3_°rög
 
numîÆ
, 
Z3_s‹t
 
ty
);

3216 
Z3_a°
 
Z3_API
 
Z3_mk_ªÆ
(
Z3_c⁄ãxt
 
c
, 
num
, 
dí
);

3228 
Z3_a°
 
Z3_API
 
Z3_mk_öt
(
Z3_c⁄ãxt
 
c
, 
v
, 
Z3_s‹t
 
ty
);

3240 
Z3_a°
 
Z3_API
 
Z3_mk_unsig√d_öt
(
Z3_c⁄ãxt
 
c
, 
v
, 
Z3_s‹t
 
ty
);

3252 
Z3_a°
 
Z3_API
 
Z3_mk_öt64
(
Z3_c⁄ãxt
 
c
, 
öt64_t
 
v
, 
Z3_s‹t
 
ty
);

3264 
Z3_a°
 
Z3_API
 
Z3_mk_unsig√d_öt64
(
Z3_c⁄ãxt
 
c
, 
uöt64_t
 
v
, 
Z3_s‹t
 
ty
);

3272 
Z3_a°
 
Z3_API
 
Z3_mk_bv_numîÆ
(
Z3_c⁄ãxt
 
c
, 
sz
, 
boﬁ
 c⁄°* 
bôs
);

3284 
Z3_s‹t
 
Z3_API
 
Z3_mk_£q_s‹t
(
Z3_c⁄ãxt
 
c
, Z3_s‹à
s
);

3291 
boﬁ
 
Z3_API
 
Z3_is_£q_s‹t
(
Z3_c⁄ãxt
 
c
, 
Z3_s‹t
 
s
);

3298 
Z3_s‹t
 
Z3_API
 
Z3_mk_ª_s‹t
(
Z3_c⁄ãxt
 
c
, Z3_s‹à
£q
);

3305 
boﬁ
 
Z3_API
 
Z3_is_ª_s‹t
(
Z3_c⁄ãxt
 
c
, 
Z3_s‹t
 
s
);

3315 
Z3_s‹t
 
Z3_API
 
Z3_mk_°rög_s‹t
(
Z3_c⁄ãxt
 
c
);

3322 
boﬁ
 
Z3_API
 
Z3_is_°rög_s‹t
(
Z3_c⁄ãxt
 
c
, 
Z3_s‹t
 
s
);

3328 
Z3_a°
 
Z3_API
 
Z3_mk_°rög
(
Z3_c⁄ãxt
 
c
, 
Z3_°rög
 
s
);

3335 
boﬁ
 
Z3_API
 
Z3_is_°rög
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
s
);

3344 
Z3_°rög
 
Z3_API
 
Z3_gë_°rög
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
s
);

3353 
Z3_a°
 
Z3_API
 
Z3_mk_£q_em±y
(
Z3_c⁄ãxt
 
c
, 
Z3_s‹t
 
£q
);

3360 
Z3_a°
 
Z3_API
 
Z3_mk_£q_unô
(
Z3_c⁄ãxt
 
c
, Z3_a° 
a
);

3369 
Z3_a°
 
Z3_API
 
Z3_mk_£q_c⁄ˇt
(
Z3_c⁄ãxt
 
c
, 
n
, Z3_a° c⁄° 
¨gs
[]);

3378 
Z3_a°
 
Z3_API
 
Z3_mk_£q_¥efix
(
Z3_c⁄ãxt
 
c
, Z3_a° 
¥efix
, Z3_a° 
s
);

3387 
Z3_a°
 
Z3_API
 
Z3_mk_£q_suffix
(
Z3_c⁄ãxt
 
c
, Z3_a° 
suffix
, Z3_a° 
s
);

3396 
Z3_a°
 
Z3_API
 
Z3_mk_£q_c⁄èös
(
Z3_c⁄ãxt
 
c
, Z3_a° 
c⁄èöî
, Z3_a° 
c⁄èöì
);

3403 
Z3_a°
 
Z3_API
 
Z3_mk_£q_exåa˘
(
Z3_c⁄ãxt
 
c
, Z3_a° 
s
, Z3_a° 
off£t
, Z3_a° 
Àngth
);

3410 
Z3_a°
 
Z3_API
 
Z3_mk_£q_ª∂a˚
(
Z3_c⁄ãxt
 
c
, Z3_a° 
s
, Z3_a° 
§c
, Z3_a° 
d°
);

3417 
Z3_a°
 
Z3_API
 
Z3_mk_£q_©
(
Z3_c⁄ãxt
 
c
, Z3_a° 
s
, Z3_a° 
ödex
);

3424 
Z3_a°
 
Z3_API
 
Z3_mk_£q_Àngth
(
Z3_c⁄ãxt
 
c
, Z3_a° 
s
);

3434 
Z3_a°
 
Z3_API
 
Z3_mk_£q_ödex
(
Z3_c⁄ãxt
 
c
, Z3_a° 
s
, Z3_a° 
sub°r
, Z3_a° 
off£t
);

3441 
Z3_a°
 
Z3_API
 
Z3_mk_°r_to_öt
(
Z3_c⁄ãxt
 
c
, Z3_a° 
s
);

3449 
Z3_a°
 
Z3_API
 
Z3_mk_öt_to_°r
(
Z3_c⁄ãxt
 
c
, Z3_a° 
s
);

3456 
Z3_a°
 
Z3_API
 
Z3_mk_£q_to_ª
(
Z3_c⁄ãxt
 
c
, Z3_a° 
£q
);

3463 
Z3_a°
 
Z3_API
 
Z3_mk_£q_ö_ª
(
Z3_c⁄ãxt
 
c
, Z3_a° 
£q
, Z3_a° 
ª
);

3470 
Z3_a°
 
Z3_API
 
Z3_mk_ª_∂us
(
Z3_c⁄ãxt
 
c
, Z3_a° 
ª
);

3477 
Z3_a°
 
Z3_API
 
Z3_mk_ª_°¨
(
Z3_c⁄ãxt
 
c
, Z3_a° 
ª
);

3484 
Z3_a°
 
Z3_API
 
Z3_mk_ª_›ti⁄
(
Z3_c⁄ãxt
 
c
, Z3_a° 
ª
);

3493 
Z3_a°
 
Z3_API
 
Z3_mk_ª_uni⁄
(
Z3_c⁄ãxt
 
c
, 
n
, Z3_a° c⁄° 
¨gs
[]);

3502 
Z3_a°
 
Z3_API
 
Z3_mk_ª_c⁄ˇt
(
Z3_c⁄ãxt
 
c
, 
n
, Z3_a° c⁄° 
¨gs
[]);

3510 
Z3_a°
 
Z3_API
 
Z3_mk_ª_ønge
(
Z3_c⁄ãxt
 
c
, Z3_a° 
lo
, Z3_a° 
hi
);

3520 
Z3_a°
 
Z3_API
 
Z3_mk_ª_lo›
(
Z3_c⁄ãxt
 
c
, Z3_a° 
r
, 
lo
, 
hi
);

3529 
Z3_a°
 
Z3_API
 
Z3_mk_ª_öãr£˘
(
Z3_c⁄ãxt
 
c
, 
n
, Z3_a° c⁄° 
¨gs
[]);

3536 
Z3_a°
 
Z3_API
 
Z3_mk_ª_com∂emít
(
Z3_c⁄ãxt
 
c
, Z3_a° 
ª
);

3545 
Z3_a°
 
Z3_API
 
Z3_mk_ª_em±y
(
Z3_c⁄ãxt
 
c
, 
Z3_s‹t
 
ª
);

3555 
Z3_a°
 
Z3_API
 
Z3_mk_ª_fuŒ
(
Z3_c⁄ãxt
 
c
, 
Z3_s‹t
 
ª
);

3583 
Z3_∑âîn
 
Z3_API
 
Z3_mk_∑âîn
(
Z3_c⁄ãxt
 
c
, 
num_∑âîns
, 
Z3_a°
 c⁄° 
ãrms
[]);

3614 
Z3_a°
 
Z3_API
 
Z3_mk_bound
(
Z3_c⁄ãxt
 
c
, 
ödex
, 
Z3_s‹t
 
ty
);

3639 
Z3_a°
 
Z3_API
 
Z3_mk_f‹Æl
(
Z3_c⁄ãxt
 
c
, 
weight
,

3640 
num_∑âîns
, 
Z3_∑âîn
 c⁄° 
∑âîns
[],

3641 
num_de˛s
, 
Z3_s‹t
 c⁄° 
s‹ts
[],

3642 
Z3_symbﬁ
 c⁄° 
de˛_«mes
[],

3643 
Z3_a°
 
body
);

3655 
Z3_a°
 
Z3_API
 
Z3_mk_exi°s
(
Z3_c⁄ãxt
 
c
, 
weight
,

3656 
num_∑âîns
, 
Z3_∑âîn
 c⁄° 
∑âîns
[],

3657 
num_de˛s
, 
Z3_s‹t
 c⁄° 
s‹ts
[],

3658 
Z3_symbﬁ
 c⁄° 
de˛_«mes
[],

3659 
Z3_a°
 
body
);

3682 
Z3_a°
 
Z3_API
 
Z3_mk_qu™tifõr
(

3683 
Z3_c⁄ãxt
 
c
,

3684 
boﬁ
 
is_f‹Æl
,

3685 
weight
,

3686 
num_∑âîns
, 
Z3_∑âîn
 c⁄° 
∑âîns
[],

3687 
num_de˛s
, 
Z3_s‹t
 c⁄° 
s‹ts
[],

3688 
Z3_symbﬁ
 c⁄° 
de˛_«mes
[],

3689 
Z3_a°
 
body
);

3716 
Z3_a°
 
Z3_API
 
Z3_mk_qu™tifõr_ex
(

3717 
Z3_c⁄ãxt
 
c
,

3718 
boﬁ
 
is_f‹Æl
,

3719 
weight
,

3720 
Z3_symbﬁ
 
qu™tifõr_id
,

3721 
Z3_symbﬁ
 
skﬁem_id
,

3722 
num_∑âîns
, 
Z3_∑âîn
 c⁄° 
∑âîns
[],

3723 
num_no_∑âîns
, 
Z3_a°
 c⁄° 
no_∑âîns
[],

3724 
num_de˛s
, 
Z3_s‹t
 c⁄° 
s‹ts
[],

3725 
Z3_symbﬁ
 c⁄° 
de˛_«mes
[],

3726 
Z3_a°
 
body
);

3746 
Z3_a°
 
Z3_API
 
Z3_mk_f‹Æl_c⁄°
(

3747 
Z3_c⁄ãxt
 
c
,

3748 
weight
,

3749 
num_bound
,

3750 
Z3_≠p
 c⁄° 
bound
[],

3751 
num_∑âîns
,

3752 
Z3_∑âîn
 c⁄° 
∑âîns
[],

3753 
Z3_a°
 
body


3776 
Z3_a°
 
Z3_API
 
Z3_mk_exi°s_c⁄°
(

3777 
Z3_c⁄ãxt
 
c
,

3778 
weight
,

3779 
num_bound
,

3780 
Z3_≠p
 c⁄° 
bound
[],

3781 
num_∑âîns
,

3782 
Z3_∑âîn
 c⁄° 
∑âîns
[],

3783 
Z3_a°
 
body


3792 
Z3_a°
 
Z3_API
 
Z3_mk_qu™tifõr_c⁄°
(

3793 
Z3_c⁄ãxt
 
c
,

3794 
boﬁ
 
is_f‹Æl
,

3795 
weight
,

3796 
num_bound
, 
Z3_≠p
 c⁄° 
bound
[],

3797 
num_∑âîns
, 
Z3_∑âîn
 c⁄° 
∑âîns
[],

3798 
Z3_a°
 
body


3807 
Z3_a°
 
Z3_API
 
Z3_mk_qu™tifõr_c⁄°_ex
(

3808 
Z3_c⁄ãxt
 
c
,

3809 
boﬁ
 
is_f‹Æl
,

3810 
weight
,

3811 
Z3_symbﬁ
 
qu™tifõr_id
,

3812 
Z3_symbﬁ
 
skﬁem_id
,

3813 
num_bound
, 
Z3_≠p
 c⁄° 
bound
[],

3814 
num_∑âîns
, 
Z3_∑âîn
 c⁄° 
∑âîns
[],

3815 
num_no_∑âîns
, 
Z3_a°
 c⁄° 
no_∑âîns
[],

3816 
Z3_a°
 
body


3842 
Z3_a°
 
Z3_API
 
Z3_mk_œmbda
(
Z3_c⁄ãxt
 
c
,

3843 
num_de˛s
, 
Z3_s‹t
 c⁄° 
s‹ts
[],

3844 
Z3_symbﬁ
 c⁄° 
de˛_«mes
[],

3845 
Z3_a°
 
body
);

3862 
Z3_a°
 
Z3_API
 
Z3_mk_œmbda_c⁄°
(
Z3_c⁄ãxt
 
c
,

3863 
num_bound
, 
Z3_≠p
 c⁄° 
bound
[],

3864 
Z3_a°
 
body
);

3878 
Z3_symbﬁ_köd
 
Z3_API
 
Z3_gë_symbﬁ_köd
(
Z3_c⁄ãxt
 
c
, 
Z3_symbﬁ
 
s
);

3889 
Z3_API
 
Z3_gë_symbﬁ_öt
(
Z3_c⁄ãxt
 
c
, 
Z3_symbﬁ
 
s
);

3904 
Z3_°rög
 
Z3_API
 
Z3_gë_symbﬁ_°rög
(
Z3_c⁄ãxt
 
c
, 
Z3_symbﬁ
 
s
);

3911 
Z3_symbﬁ
 
Z3_API
 
Z3_gë_s‹t_«me
(
Z3_c⁄ãxt
 
c
, 
Z3_s‹t
 
d
);

3918 
Z3_API
 
Z3_gë_s‹t_id
(
Z3_c⁄ãxt
 
c
, 
Z3_s‹t
 
s
);

3925 
Z3_a°
 
Z3_API
 
Z3_s‹t_to_a°
(
Z3_c⁄ãxt
 
c
, 
Z3_s‹t
 
s
);

3932 
boﬁ
 
Z3_API
 
Z3_is_eq_s‹t
(
Z3_c⁄ãxt
 
c
, 
Z3_s‹t
 
s1
, Z3_s‹à
s2
);

3941 
Z3_s‹t_köd
 
Z3_API
 
Z3_gë_s‹t_köd
(
Z3_c⁄ãxt
 
c
, 
Z3_s‹t
 
t
);

3953 
Z3_API
 
Z3_gë_bv_s‹t_size
(
Z3_c⁄ãxt
 
c
, 
Z3_s‹t
 
t
);

3961 
Z3_boﬁ_›t
 
Z3_API
 
Z3_gë_föôe_domaö_s‹t_size
(
Z3_c⁄ãxt
 
c
, 
Z3_s‹t
 
s
, 
uöt64_t
* 
r
);

3974 
Z3_s‹t
 
Z3_API
 
Z3_gë_¨øy_s‹t_domaö
(
Z3_c⁄ãxt
 
c
, Z3_s‹à
t
);

3986 
Z3_s‹t
 
Z3_API
 
Z3_gë_¨øy_s‹t_ønge
(
Z3_c⁄ãxt
 
c
, Z3_s‹à
t
);

3999 
Z3_func_de˛
 
Z3_API
 
Z3_gë_tu∂e_s‹t_mk_de˛
(
Z3_c⁄ãxt
 
c
, 
Z3_s‹t
 
t
);

4011 
Z3_API
 
Z3_gë_tu∂e_s‹t_num_fõlds
(
Z3_c⁄ãxt
 
c
, 
Z3_s‹t
 
t
);

4025 
Z3_func_de˛
 
Z3_API
 
Z3_gë_tu∂e_s‹t_fõld_de˛
(
Z3_c⁄ãxt
 
c
, 
Z3_s‹t
 
t
, 
i
);

4038 
Z3_API
 
Z3_gë_d©©y≥_s‹t_num_c⁄°ru˘‹s
(

4039 
Z3_c⁄ãxt
 
c
, 
Z3_s‹t
 
t
);

4053 
Z3_func_de˛
 
Z3_API
 
Z3_gë_d©©y≥_s‹t_c⁄°ru˘‹
(

4054 
Z3_c⁄ãxt
 
c
, 
Z3_s‹t
 
t
, 
idx
);

4068 
Z3_func_de˛
 
Z3_API
 
Z3_gë_d©©y≥_s‹t_ªcognizî
(

4069 
Z3_c⁄ãxt
 
c
, 
Z3_s‹t
 
t
, 
idx
);

4084 
Z3_func_de˛
 
Z3_API
 
Z3_gë_d©©y≥_s‹t_c⁄°ru˘‹_ac˚ss‹
(
Z3_c⁄ãxt
 
c
,

4085 
Z3_s‹t
 
t
,

4086 
idx_c
,

4087 
idx_a
);

4108 
Z3_a°
 
Z3_API
 
Z3_d©©y≥_upd©e_fõld
(
Z3_c⁄ãxt
 
c
, 
Z3_func_de˛
 
fõld_ac˚ss
,

4109 
Z3_a°
 
t
, Z3_a° 
vÆue
);

4120 
Z3_API
 
Z3_gë_ªœti⁄_¨ôy
(
Z3_c⁄ãxt
 
c
, 
Z3_s‹t
 
s
);

4132 
Z3_s‹t
 
Z3_API
 
Z3_gë_ªœti⁄_cﬁumn
(
Z3_c⁄ãxt
 
c
, Z3_s‹à
s
, 
cﬁ
);

4141 
Z3_a°
 
Z3_API
 
Z3_mk_©mo°
(
Z3_c⁄ãxt
 
c
, 
num_¨gs
,

4142 
Z3_a°
 c⁄° 
¨gs
[], 
k
);

4151 
Z3_a°
 
Z3_API
 
Z3_mk_©Àa°
(
Z3_c⁄ãxt
 
c
, 
num_¨gs
,

4152 
Z3_a°
 c⁄° 
¨gs
[], 
k
);

4161 
Z3_a°
 
Z3_API
 
Z3_mk_pbÀ
(
Z3_c⁄ãxt
 
c
, 
num_¨gs
,

4162 
Z3_a°
 c⁄° 
¨gs
[], c⁄° 
c€ffs
[],

4163 
k
);

4172 
Z3_a°
 
Z3_API
 
Z3_mk_pbge
(
Z3_c⁄ãxt
 
c
, 
num_¨gs
,

4173 
Z3_a°
 c⁄° 
¨gs
[], c⁄° 
c€ffs
[],

4174 
k
);

4183 
Z3_a°
 
Z3_API
 
Z3_mk_pbeq
(
Z3_c⁄ãxt
 
c
, 
num_¨gs
,

4184 
Z3_a°
 c⁄° 
¨gs
[], c⁄° 
c€ffs
[],

4185 
k
);

4192 
Z3_a°
 
Z3_API
 
Z3_func_de˛_to_a°
(
Z3_c⁄ãxt
 
c
, 
Z3_func_de˛
 
f
);

4199 
boﬁ
 
Z3_API
 
Z3_is_eq_func_de˛
(
Z3_c⁄ãxt
 
c
, 
Z3_func_de˛
 
f1
, Z3_func_de˛ 
f2
);

4206 
Z3_API
 
Z3_gë_func_de˛_id
(
Z3_c⁄ãxt
 
c
, 
Z3_func_de˛
 
f
);

4213 
Z3_symbﬁ
 
Z3_API
 
Z3_gë_de˛_«me
(
Z3_c⁄ãxt
 
c
, 
Z3_func_de˛
 
d
);

4220 
Z3_de˛_köd
 
Z3_API
 
Z3_gë_de˛_köd
(
Z3_c⁄ãxt
 
c
, 
Z3_func_de˛
 
d
);

4229 
Z3_API
 
Z3_gë_domaö_size
(
Z3_c⁄ãxt
 
c
, 
Z3_func_de˛
 
d
);

4238 
Z3_API
 
Z3_gë_¨ôy
(
Z3_c⁄ãxt
 
c
, 
Z3_func_de˛
 
d
);

4249 
Z3_s‹t
 
Z3_API
 
Z3_gë_domaö
(
Z3_c⁄ãxt
 
c
, 
Z3_func_de˛
 
d
, 
i
);

4259 
Z3_s‹t
 
Z3_API
 
Z3_gë_ønge
(
Z3_c⁄ãxt
 
c
, 
Z3_func_de˛
 
d
);

4266 
Z3_API
 
Z3_gë_de˛_num_∑ømëîs
(
Z3_c⁄ãxt
 
c
, 
Z3_func_de˛
 
d
);

4277 
Z3_∑ømëî_köd
 
Z3_API
 
Z3_gë_de˛_∑ømëî_köd
(
Z3_c⁄ãxt
 
c
, 
Z3_func_de˛
 
d
, 
idx
);

4286 
Z3_API
 
Z3_gë_de˛_öt_∑ømëî
(
Z3_c⁄ãxt
 
c
, 
Z3_func_de˛
 
d
, 
idx
);

4295 
Z3_API
 
Z3_gë_de˛_doubÀ_∑ømëî
(
Z3_c⁄ãxt
 
c
, 
Z3_func_de˛
 
d
, 
idx
);

4304 
Z3_symbﬁ
 
Z3_API
 
Z3_gë_de˛_symbﬁ_∑ømëî
(
Z3_c⁄ãxt
 
c
, 
Z3_func_de˛
 
d
, 
idx
);

4313 
Z3_s‹t
 
Z3_API
 
Z3_gë_de˛_s‹t_∑ømëî
(
Z3_c⁄ãxt
 
c
, 
Z3_func_de˛
 
d
, 
idx
);

4322 
Z3_a°
 
Z3_API
 
Z3_gë_de˛_a°_∑ømëî
(
Z3_c⁄ãxt
 
c
, 
Z3_func_de˛
 
d
, 
idx
);

4331 
Z3_func_de˛
 
Z3_API
 
Z3_gë_de˛_func_de˛_∑ømëî
(
Z3_c⁄ãxt
 
c
, Z3_func_de˛ 
d
, 
idx
);

4340 
Z3_°rög
 
Z3_API
 
Z3_gë_de˛_øti⁄Æ_∑ømëî
(
Z3_c⁄ãxt
 
c
, 
Z3_func_de˛
 
d
, 
idx
);

4347 
Z3_a°
 
Z3_API
 
Z3_≠p_to_a°
(
Z3_c⁄ãxt
 
c
, 
Z3_≠p
 
a
);

4354 
Z3_func_de˛
 
Z3_API
 
Z3_gë_≠p_de˛
(
Z3_c⁄ãxt
 
c
, 
Z3_≠p
 
a
);

4362 
Z3_API
 
Z3_gë_≠p_num_¨gs
(
Z3_c⁄ãxt
 
c
, 
Z3_≠p
 
a
);

4371 
Z3_a°
 
Z3_API
 
Z3_gë_≠p_¨g
(
Z3_c⁄ãxt
 
c
, 
Z3_≠p
 
a
, 
i
);

4378 
boﬁ
 
Z3_API
 
Z3_is_eq_a°
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
t1
, Z3_a° 
t2
);

4391 
Z3_API
 
Z3_gë_a°_id
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
t
);

4400 
Z3_API
 
Z3_gë_a°_hash
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
a
);

4409 
Z3_s‹t
 
Z3_API
 
Z3_gë_s‹t
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
a
);

4416 
boﬁ
 
Z3_API
 
Z3_is_wñl_s‹ãd
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
t
);

4423 
Z3_lboﬁ
 
Z3_API
 
Z3_gë_boﬁ_vÆue
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
a
);

4430 
Z3_a°_köd
 
Z3_API
 
Z3_gë_a°_köd
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
a
);

4435 
boﬁ
 
Z3_API
 
Z3_is_≠p
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
a
);

4440 
boﬁ
 
Z3_API
 
Z3_is_numîÆ_a°
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
a
);

4447 
boﬁ
 
Z3_API
 
Z3_is_Ægebøic_numbî
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
a
);

4456 
Z3_≠p
 
Z3_API
 
Z3_to_≠p
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
a
);

4465 
Z3_func_de˛
 
Z3_API
 
Z3_to_func_de˛
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
a
);

4474 
Z3_°rög
 
Z3_API
 
Z3_gë_numîÆ_°rög
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
a
);

4484 
Z3_°rög
 
Z3_API
 
Z3_gë_numîÆ_decimÆ_°rög
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
a
, 
¥ecisi⁄
);

4493 
Z3_API
 
Z3_gë_numîÆ_doubÀ
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
a
);

4502 
Z3_a°
 
Z3_API
 
Z3_gë_numî©‹
(
Z3_c⁄ãxt
 
c
, Z3_a° 
a
);

4511 
Z3_a°
 
Z3_API
 
Z3_gë_díomö©‹
(
Z3_c⁄ãxt
 
c
, Z3_a° 
a
);

4527 
boﬁ
 
Z3_API
 
Z3_gë_numîÆ_smÆl
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
a
, 
öt64_t
* 
num
, i¡64_t* 
dí
);

4539 
boﬁ
 
Z3_API
 
Z3_gë_numîÆ_öt
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
v
, * 
i
);

4551 
boﬁ
 
Z3_API
 
Z3_gë_numîÆ_uöt
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
v
, * 
u
);

4563 
boﬁ
 
Z3_API
 
Z3_gë_numîÆ_uöt64
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
v
, 
uöt64_t
* 
u
);

4575 
boﬁ
 
Z3_API
 
Z3_gë_numîÆ_öt64
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
v
, 
öt64_t
* 
i
);

4587 
boﬁ
 
Z3_API
 
Z3_gë_numîÆ_øti⁄Æ_öt64
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
v
, 
öt64_t
* 
num
, i¡64_t* 
dí
);

4598 
Z3_a°
 
Z3_API
 
Z3_gë_Ægebøic_numbî_lowî
(
Z3_c⁄ãxt
 
c
, Z3_a° 
a
, 
¥ecisi⁄
);

4609 
Z3_a°
 
Z3_API
 
Z3_gë_Ægebøic_numbî_uµî
(
Z3_c⁄ãxt
 
c
, Z3_a° 
a
, 
¥ecisi⁄
);

4616 
Z3_a°
 
Z3_API
 
Z3_∑âîn_to_a°
(
Z3_c⁄ãxt
 
c
, 
Z3_∑âîn
 
p
);

4623 
Z3_API
 
Z3_gë_∑âîn_num_ãrms
(
Z3_c⁄ãxt
 
c
, 
Z3_∑âîn
 
p
);

4630 
Z3_a°
 
Z3_API
 
Z3_gë_∑âîn
(
Z3_c⁄ãxt
 
c
, 
Z3_∑âîn
 
p
, 
idx
);

4639 
Z3_API
 
Z3_gë_ödex_vÆue
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
a
);

4646 
boﬁ
 
Z3_API
 
Z3_is_qu™tifõr_f‹Æl
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
a
);

4654 
boﬁ
 
Z3_API
 
Z3_is_qu™tifõr_exi°s
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
a
);

4663 
boﬁ
 
Z3_API
 
Z3_is_œmbda
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
a
);

4672 
Z3_API
 
Z3_gë_qu™tifõr_weight
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
a
);

4681 
Z3_API
 
Z3_gë_qu™tifõr_num_∑âîns
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
a
);

4690 
Z3_∑âîn
 
Z3_API
 
Z3_gë_qu™tifõr_∑âîn_a°
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
a
, 
i
);

4699 
Z3_API
 
Z3_gë_qu™tifõr_num_no_∑âîns
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
a
);

4708 
Z3_a°
 
Z3_API
 
Z3_gë_qu™tifõr_no_∑âîn_a°
(
Z3_c⁄ãxt
 
c
, Z3_a° 
a
, 
i
);

4717 
Z3_API
 
Z3_gë_qu™tifõr_num_bound
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
a
);

4726 
Z3_symbﬁ
 
Z3_API
 
Z3_gë_qu™tifõr_bound_«me
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
a
, 
i
);

4735 
Z3_s‹t
 
Z3_API
 
Z3_gë_qu™tifõr_bound_s‹t
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
a
, 
i
);

4744 
Z3_a°
 
Z3_API
 
Z3_gë_qu™tifõr_body
(
Z3_c⁄ãxt
 
c
, Z3_a° 
a
);

4758 
Z3_a°
 
Z3_API
 
Z3_sim∂ify
(
Z3_c⁄ãxt
 
c
, Z3_a° 
a
);

4773 
Z3_a°
 
Z3_API
 
Z3_sim∂ify_ex
(
Z3_c⁄ãxt
 
c
, Z3_a° 
a
, 
Z3_∑øms
 
p
);

4783 
Z3_°rög
 
Z3_API
 
Z3_sim∂ify_gë_hñp
(
Z3_c⁄ãxt
 
c
);

4793 
Z3_∑øm_des¸s
 
Z3_API
 
Z3_sim∂ify_gë_∑øm_des¸s
(
Z3_c⁄ãxt
 
c
);

4806 
Z3_a°
 
Z3_API
 
Z3_upd©e_ãrm
(
Z3_c⁄ãxt
 
c
, Z3_a° 
a
, 
num_¨gs
, Z3_a° c⁄° 
¨gs
[]);

4815 
Z3_a°
 
Z3_API
 
Z3_sub°ôuã
(
Z3_c⁄ãxt
 
c
,

4816 
Z3_a°
 
a
,

4817 
num_ex¥s
,

4818 
Z3_a°
 c⁄° 
‰om
[],

4819 
Z3_a°
 c⁄° 
to
[]);

4827 
Z3_a°
 
Z3_API
 
Z3_sub°ôuã_v¨s
(
Z3_c⁄ãxt
 
c
,

4828 
Z3_a°
 
a
,

4829 
num_ex¥s
,

4830 
Z3_a°
 c⁄° 
to
[]);

4839 
Z3_a°
 
Z3_API
 
Z3_å™¶©e
(
Z3_c⁄ãxt
 
sour˚
, Z3_a° 
a
, Z3_c⁄ãxà
èrgë
);

4850 
Z3_modñ
 
Z3_API
 
Z3_mk_modñ
(
Z3_c⁄ãxt
 
c
);

4857 
Z3_API
 
Z3_modñ_öc_ªf
(
Z3_c⁄ãxt
 
c
, 
Z3_modñ
 
m
);

4864 
Z3_API
 
Z3_modñ_dec_ªf
(
Z3_c⁄ãxt
 
c
, 
Z3_modñ
 
m
);

4889 
Z3_boﬁ_›t
 
Z3_API
 
Z3_modñ_evÆ
(
Z3_c⁄ãxt
 
c
, 
Z3_modñ
 
m
, 
Z3_a°
 
t
, 
boﬁ
 
modñ_com∂ëi⁄
, Z3_a° * 
v
);

4900 
Z3_a°_›t
 
Z3_API
 
Z3_modñ_gë_c⁄°_öãΩ
(
Z3_c⁄ãxt
 
c
, 
Z3_modñ
 
m
, 
Z3_func_de˛
 
a
);

4907 
boﬁ
 
Z3_API
 
Z3_modñ_has_öãΩ
(
Z3_c⁄ãxt
 
c
, 
Z3_modñ
 
m
, 
Z3_func_de˛
 
a
);

4921 
Z3_func_öãΩ_›t
 
Z3_API
 
Z3_modñ_gë_func_öãΩ
(
Z3_c⁄ãxt
 
c
, 
Z3_modñ
 
m
, 
Z3_func_de˛
 
f
);

4930 
Z3_API
 
Z3_modñ_gë_num_c⁄°s
(
Z3_c⁄ãxt
 
c
, 
Z3_modñ
 
m
);

4941 
Z3_func_de˛
 
Z3_API
 
Z3_modñ_gë_c⁄°_de˛
(
Z3_c⁄ãxt
 
c
, 
Z3_modñ
 
m
, 
i
);

4951 
Z3_API
 
Z3_modñ_gë_num_funcs
(
Z3_c⁄ãxt
 
c
, 
Z3_modñ
 
m
);

4962 
Z3_func_de˛
 
Z3_API
 
Z3_modñ_gë_func_de˛
(
Z3_c⁄ãxt
 
c
, 
Z3_modñ
 
m
, 
i
);

4976 
Z3_API
 
Z3_modñ_gë_num_s‹ts
(
Z3_c⁄ãxt
 
c
, 
Z3_modñ
 
m
);

4988 
Z3_s‹t
 
Z3_API
 
Z3_modñ_gë_s‹t
(
Z3_c⁄ãxt
 
c
, 
Z3_modñ
 
m
, 
i
);

4998 
Z3_a°_ve˘‹
 
Z3_API
 
Z3_modñ_gë_s‹t_univî£
(
Z3_c⁄ãxt
 
c
, 
Z3_modñ
 
m
, 
Z3_s‹t
 
s
);

5005 
Z3_modñ
 
Z3_API
 
Z3_modñ_å™¶©e
(
Z3_c⁄ãxt
 
c
, Z3_modñ 
m
, Z3_c⁄ãxà
d°
);

5018 
boﬁ
 
Z3_API
 
Z3_is_as_¨øy
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
a
);

5027 
Z3_func_de˛
 
Z3_API
 
Z3_gë_as_¨øy_func_de˛
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
a
);

5040 
Z3_func_öãΩ
 
Z3_API
 
Z3_add_func_öãΩ
(
Z3_c⁄ãxt
 
c
, 
Z3_modñ
 
m
, 
Z3_func_de˛
 
f
, 
Z3_a°
 
deÁu…_vÆue
);

5047 
Z3_API
 
Z3_add_c⁄°_öãΩ
(
Z3_c⁄ãxt
 
c
, 
Z3_modñ
 
m
, 
Z3_func_de˛
 
f
, 
Z3_a°
 
a
);

5054 
Z3_API
 
Z3_func_öãΩ_öc_ªf
(
Z3_c⁄ãxt
 
c
, 
Z3_func_öãΩ
 
f
);

5061 
Z3_API
 
Z3_func_öãΩ_dec_ªf
(
Z3_c⁄ãxt
 
c
, 
Z3_func_öãΩ
 
f
);

5072 
Z3_API
 
Z3_func_öãΩ_gë_num_íåõs
(
Z3_c⁄ãxt
 
c
, 
Z3_func_öãΩ
 
f
);

5084 
Z3_func_íåy
 
Z3_API
 
Z3_func_öãΩ_gë_íåy
(
Z3_c⁄ãxt
 
c
, 
Z3_func_öãΩ
 
f
, 
i
);

5094 
Z3_a°
 
Z3_API
 
Z3_func_öãΩ_gë_ñ£
(
Z3_c⁄ãxt
 
c
, 
Z3_func_öãΩ
 
f
);

5104 
Z3_API
 
Z3_func_öãΩ_£t_ñ£
(
Z3_c⁄ãxt
 
c
, 
Z3_func_öãΩ
 
f
, 
Z3_a°
 
ñ£_vÆue
);

5111 
Z3_API
 
Z3_func_öãΩ_gë_¨ôy
(
Z3_c⁄ãxt
 
c
, 
Z3_func_öãΩ
 
f
);

5127 
Z3_API
 
Z3_func_öãΩ_add_íåy
(
Z3_c⁄ãxt
 
c
, 
Z3_func_öãΩ
 
fi
, 
Z3_a°_ve˘‹
 
¨gs
, 
Z3_a°
 
vÆue
);

5134 
Z3_API
 
Z3_func_íåy_öc_ªf
(
Z3_c⁄ãxt
 
c
, 
Z3_func_íåy
 
e
);

5141 
Z3_API
 
Z3_func_íåy_dec_ªf
(
Z3_c⁄ãxt
 
c
, 
Z3_func_íåy
 
e
);

5153 
Z3_a°
 
Z3_API
 
Z3_func_íåy_gë_vÆue
(
Z3_c⁄ãxt
 
c
, 
Z3_func_íåy
 
e
);

5162 
Z3_API
 
Z3_func_íåy_gë_num_¨gs
(
Z3_c⁄ãxt
 
c
, 
Z3_func_íåy
 
e
);

5173 
Z3_a°
 
Z3_API
 
Z3_func_íåy_gë_¨g
(
Z3_c⁄ãxt
 
c
, 
Z3_func_íåy
 
e
, 
i
);

5183 
boﬁ
 
Z3_API
 
Z3_›í_log
(
Z3_°rög
 
fûíame
);

5194 
Z3_API
 
Z3_≠≥nd_log
(
Z3_°rög
 
°rög
);

5201 
Z3_API
 
Z3_˛o£_log
();

5211 
Z3_API
 
Z3_toggÀ_w¨nög_mesßges
(
boﬁ
 
íabÀd
);

5233 
Z3_API
 
Z3_£t_a°_¥öt_mode
(
Z3_c⁄ãxt
 
c
, 
Z3_a°_¥öt_mode
 
mode
);

5247 
Z3_°rög
 
Z3_API
 
Z3_a°_to_°rög
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
a
);

5252 
Z3_°rög
 
Z3_API
 
Z3_∑âîn_to_°rög
(
Z3_c⁄ãxt
 
c
, 
Z3_∑âîn
 
p
);

5257 
Z3_°rög
 
Z3_API
 
Z3_s‹t_to_°rög
(
Z3_c⁄ãxt
 
c
, 
Z3_s‹t
 
s
);

5262 
Z3_°rög
 
Z3_API
 
Z3_func_de˛_to_°rög
(
Z3_c⁄ãxt
 
c
, 
Z3_func_de˛
 
d
);

5273 
Z3_°rög
 
Z3_API
 
Z3_modñ_to_°rög
(
Z3_c⁄ãxt
 
c
, 
Z3_modñ
 
m
);

5293 
Z3_°rög
 
Z3_API
 
Z3_bíchm¨k_to_sméib_°rög
(
Z3_c⁄ãxt
 
c
,

5294 
Z3_°rög
 
«me
,

5295 
Z3_°rög
 
logic
,

5296 
Z3_°rög
 
°©us
,

5297 
Z3_°rög
 
©åibuãs
,

5298 
num_assum±i⁄s
,

5299 
Z3_a°
 c⁄° 
assum±i⁄s
[],

5300 
Z3_a°
 
f‹muœ
);

5314 
Z3_a°_ve˘‹
 
Z3_API
 
Z3_∑r£_sméib2_°rög
(
Z3_c⁄ãxt
 
c
,

5315 
Z3_°rög
 
°r
,

5316 
num_s‹ts
,

5317 
Z3_symbﬁ
 c⁄° 
s‹t_«mes
[],

5318 
Z3_s‹t
 c⁄° 
s‹ts
[],

5319 
num_de˛s
,

5320 
Z3_symbﬁ
 c⁄° 
de˛_«mes
[],

5321 
Z3_func_de˛
 c⁄° 
de˛s
[]);

5328 
Z3_a°_ve˘‹
 
Z3_API
 
Z3_∑r£_sméib2_fûe
(
Z3_c⁄ãxt
 
c
,

5329 
Z3_°rög
 
fûe_«me
,

5330 
num_s‹ts
,

5331 
Z3_symbﬁ
 c⁄° 
s‹t_«mes
[],

5332 
Z3_s‹t
 c⁄° 
s‹ts
[],

5333 
num_de˛s
,

5334 
Z3_symbﬁ
 c⁄° 
de˛_«mes
[],

5335 
Z3_func_de˛
 c⁄° 
de˛s
[]);

5347 
Z3_°rög
 
Z3_API
 
Z3_evÆ_sméib2_°rög
(
Z3_c⁄ãxt
, Z3_°rög 
°r
);

5353 #i‚de‡
SAFE_ERRORS


5364 
Z3_îr‹_code
 
Z3_API
 
Z3_gë_îr‹_code
(
Z3_c⁄ãxt
 
c
);

5378 
Z3_API
 
Z3_£t_îr‹_h™dÀr
(
Z3_c⁄ãxt
 
c
, 
Z3_îr‹_h™dÀr
 
h
);

5386 
Z3_API
 
Z3_£t_îr‹
(
Z3_c⁄ãxt
 
c
, 
Z3_îr‹_code
 
e
);

5393 
Z3_°rög
 
Z3_API
 
Z3_gë_îr‹_msg
(
Z3_c⁄ãxt
 
c
, 
Z3_îr‹_code
 
îr
);

5405 
Z3_API
 
Z3_gë_vîsi⁄
(* 
maj‹
, * 
mö‹
, * 
buûd_numbî
, * 
ªvisi⁄_numbî
);

5412 
Z3_°rög
 
Z3_API
 
Z3_gë_fuŒ_vîsi⁄
();

5420 
Z3_API
 
Z3_íabÀ_åa˚
(
Z3_°rög
 
èg
);

5428 
Z3_API
 
Z3_dißbÀ_åa˚
(
Z3_°rög
 
èg
);

5440 
Z3_API
 
Z3_ª£t_mem‹y
();

5450 
Z3_API
 
Z3_föÆize_mem‹y
();

5472 
Z3_gﬂl
 
Z3_API
 
Z3_mk_gﬂl
(
Z3_c⁄ãxt
 
c
, 
boﬁ
 
modñs
, boﬁ 
unßt_c‹es
, boﬁ 
¥oofs
);

5479 
Z3_API
 
Z3_gﬂl_öc_ªf
(
Z3_c⁄ãxt
 
c
, 
Z3_gﬂl
 
g
);

5486 
Z3_API
 
Z3_gﬂl_dec_ªf
(
Z3_c⁄ãxt
 
c
, 
Z3_gﬂl
 
g
);

5495 
Z3_gﬂl_¥ec
 
Z3_API
 
Z3_gﬂl_¥ecisi⁄
(
Z3_c⁄ãxt
 
c
, 
Z3_gﬂl
 
g
);

5509 
Z3_API
 
Z3_gﬂl_as£π
(
Z3_c⁄ãxt
 
c
, 
Z3_gﬂl
 
g
, 
Z3_a°
 
a
);

5516 
boﬁ
 
Z3_API
 
Z3_gﬂl_öc⁄si°ít
(
Z3_c⁄ãxt
 
c
, 
Z3_gﬂl
 
g
);

5523 
Z3_API
 
Z3_gﬂl_dïth
(
Z3_c⁄ãxt
 
c
, 
Z3_gﬂl
 
g
);

5530 
Z3_API
 
Z3_gﬂl_ª£t
(
Z3_c⁄ãxt
 
c
, 
Z3_gﬂl
 
g
);

5537 
Z3_API
 
Z3_gﬂl_size
(
Z3_c⁄ãxt
 
c
, 
Z3_gﬂl
 
g
);

5546 
Z3_a°
 
Z3_API
 
Z3_gﬂl_f‹muœ
(
Z3_c⁄ãxt
 
c
, 
Z3_gﬂl
 
g
, 
idx
);

5553 
Z3_API
 
Z3_gﬂl_num_ex¥s
(
Z3_c⁄ãxt
 
c
, 
Z3_gﬂl
 
g
);

5560 
boﬁ
 
Z3_API
 
Z3_gﬂl_is_decided_ßt
(
Z3_c⁄ãxt
 
c
, 
Z3_gﬂl
 
g
);

5567 
boﬁ
 
Z3_API
 
Z3_gﬂl_is_decided_unßt
(
Z3_c⁄ãxt
 
c
, 
Z3_gﬂl
 
g
);

5574 
Z3_gﬂl
 
Z3_API
 
Z3_gﬂl_å™¶©e
(
Z3_c⁄ãxt
 
sour˚
, Z3_gﬂ»
g
, Z3_c⁄ãxà
èrgë
);

5583 
Z3_modñ
 
Z3_API
 
Z3_gﬂl_c⁄vît_modñ
(
Z3_c⁄ãxt
 
c
, 
Z3_gﬂl
 
g
, Z3_modñ 
m
);

5590 
Z3_°rög
 
Z3_API
 
Z3_gﬂl_to_°rög
(
Z3_c⁄ãxt
 
c
, 
Z3_gﬂl
 
g
);

5602 
Z3_°rög
 
Z3_API
 
Z3_gﬂl_to_dimacs_°rög
(
Z3_c⁄ãxt
 
c
, 
Z3_gﬂl
 
g
);

5617 
Z3_è˘ic
 
Z3_API
 
Z3_mk_è˘ic
(
Z3_c⁄ãxt
 
c
, 
Z3_°rög
 
«me
);

5624 
Z3_API
 
Z3_è˘ic_öc_ªf
(
Z3_c⁄ãxt
 
c
, 
Z3_è˘ic
 
t
);

5631 
Z3_API
 
Z3_è˘ic_dec_ªf
(
Z3_c⁄ãxt
 
c
, 
Z3_è˘ic
 
g
);

5643 
Z3_¥obe
 
Z3_API
 
Z3_mk_¥obe
(
Z3_c⁄ãxt
 
c
, 
Z3_°rög
 
«me
);

5650 
Z3_API
 
Z3_¥obe_öc_ªf
(
Z3_c⁄ãxt
 
c
, 
Z3_¥obe
 
p
);

5657 
Z3_API
 
Z3_¥obe_dec_ªf
(
Z3_c⁄ãxt
 
c
, 
Z3_¥obe
 
p
);

5665 
Z3_è˘ic
 
Z3_API
 
Z3_è˘ic_™d_thí
(
Z3_c⁄ãxt
 
c
, Z3_è˘i¯
t1
, Z3_è˘i¯
t2
);

5673 
Z3_è˘ic
 
Z3_API
 
Z3_è˘ic_‹_ñ£
(
Z3_c⁄ãxt
 
c
, Z3_è˘i¯
t1
, Z3_è˘i¯
t2
);

5680 
Z3_è˘ic
 
Z3_API
 
Z3_è˘ic_∑r_‹
(
Z3_c⁄ãxt
 
c
, 
num
, Z3_è˘i¯c⁄° 
ts
[]);

5688 
Z3_è˘ic
 
Z3_API
 
Z3_è˘ic_∑r_™d_thí
(
Z3_c⁄ãxt
 
c
, Z3_è˘i¯
t1
, Z3_è˘i¯
t2
);

5696 
Z3_è˘ic
 
Z3_API
 
Z3_è˘ic_åy_f‹
(
Z3_c⁄ãxt
 
c
, Z3_è˘i¯
t
, 
ms
);

5704 
Z3_è˘ic
 
Z3_API
 
Z3_è˘ic_whí
(
Z3_c⁄ãxt
 
c
, 
Z3_¥obe
 
p
, Z3_è˘i¯
t
);

5712 
Z3_è˘ic
 
Z3_API
 
Z3_è˘ic_c⁄d
(
Z3_c⁄ãxt
 
c
, 
Z3_¥obe
 
p
, Z3_è˘i¯
t1
, Z3_è˘i¯
t2
);

5720 
Z3_è˘ic
 
Z3_API
 
Z3_è˘ic_ª≥©
(
Z3_c⁄ãxt
 
c
, Z3_è˘i¯
t
, 
max
);

5727 
Z3_è˘ic
 
Z3_API
 
Z3_è˘ic_skù
(
Z3_c⁄ãxt
 
c
);

5734 
Z3_è˘ic
 
Z3_API
 
Z3_è˘ic_Áû
(
Z3_c⁄ãxt
 
c
);

5741 
Z3_è˘ic
 
Z3_API
 
Z3_è˘ic_Áû_if
(
Z3_c⁄ãxt
 
c
, 
Z3_¥obe
 
p
);

5749 
Z3_è˘ic
 
Z3_API
 
Z3_è˘ic_Áû_if_nŸ_decided
(
Z3_c⁄ãxt
 
c
);

5756 
Z3_è˘ic
 
Z3_API
 
Z3_è˘ic_usög_∑øms
(
Z3_c⁄ãxt
 
c
, Z3_è˘i¯
t
, 
Z3_∑øms
 
p
);

5763 
Z3_¥obe
 
Z3_API
 
Z3_¥obe_c⁄°
(
Z3_c⁄ãxt
 
x
, 
vÆ
);

5772 
Z3_¥obe
 
Z3_API
 
Z3_¥obe_…
(
Z3_c⁄ãxt
 
x
, Z3_¥obê
p1
, Z3_¥obê
p2
);

5781 
Z3_¥obe
 
Z3_API
 
Z3_¥obe_gt
(
Z3_c⁄ãxt
 
x
, Z3_¥obê
p1
, Z3_¥obê
p2
);

5790 
Z3_¥obe
 
Z3_API
 
Z3_¥obe_À
(
Z3_c⁄ãxt
 
x
, Z3_¥obê
p1
, Z3_¥obê
p2
);

5799 
Z3_¥obe
 
Z3_API
 
Z3_¥obe_ge
(
Z3_c⁄ãxt
 
x
, Z3_¥obê
p1
, Z3_¥obê
p2
);

5808 
Z3_¥obe
 
Z3_API
 
Z3_¥obe_eq
(
Z3_c⁄ãxt
 
x
, Z3_¥obê
p1
, Z3_¥obê
p2
);

5817 
Z3_¥obe
 
Z3_API
 
Z3_¥obe_™d
(
Z3_c⁄ãxt
 
x
, Z3_¥obê
p1
, Z3_¥obê
p2
);

5826 
Z3_¥obe
 
Z3_API
 
Z3_¥obe_‹
(
Z3_c⁄ãxt
 
x
, Z3_¥obê
p1
, Z3_¥obê
p2
);

5835 
Z3_¥obe
 
Z3_API
 
Z3_¥obe_nŸ
(
Z3_c⁄ãxt
 
x
, Z3_¥obê
p
);

5842 
Z3_API
 
Z3_gë_num_è˘ics
(
Z3_c⁄ãxt
 
c
);

5851 
Z3_°rög
 
Z3_API
 
Z3_gë_è˘ic_«me
(
Z3_c⁄ãxt
 
c
, 
i
);

5858 
Z3_API
 
Z3_gë_num_¥obes
(
Z3_c⁄ãxt
 
c
);

5867 
Z3_°rög
 
Z3_API
 
Z3_gë_¥obe_«me
(
Z3_c⁄ãxt
 
c
, 
i
);

5874 
Z3_°rög
 
Z3_API
 
Z3_è˘ic_gë_hñp
(
Z3_c⁄ãxt
 
c
, 
Z3_è˘ic
 
t
);

5881 
Z3_∑øm_des¸s
 
Z3_API
 
Z3_è˘ic_gë_∑øm_des¸s
(
Z3_c⁄ãxt
 
c
, 
Z3_è˘ic
 
t
);

5888 
Z3_°rög
 
Z3_API
 
Z3_è˘ic_gë_des¸
(
Z3_c⁄ãxt
 
c
, Z3_°rög 
«me
);

5895 
Z3_°rög
 
Z3_API
 
Z3_¥obe_gë_des¸
(
Z3_c⁄ãxt
 
c
, Z3_°rög 
«me
);

5903 
Z3_API
 
Z3_¥obe_≠∂y
(
Z3_c⁄ãxt
 
c
, 
Z3_¥obe
 
p
, 
Z3_gﬂl
 
g
);

5910 
Z3_≠∂y_ªsu…
 
Z3_API
 
Z3_è˘ic_≠∂y
(
Z3_c⁄ãxt
 
c
, 
Z3_è˘ic
 
t
, 
Z3_gﬂl
 
g
);

5917 
Z3_≠∂y_ªsu…
 
Z3_API
 
Z3_è˘ic_≠∂y_ex
(
Z3_c⁄ãxt
 
c
, 
Z3_è˘ic
 
t
, 
Z3_gﬂl
 
g
, 
Z3_∑øms
 
p
);

5924 
Z3_API
 
Z3_≠∂y_ªsu…_öc_ªf
(
Z3_c⁄ãxt
 
c
, 
Z3_≠∂y_ªsu…
 
r
);

5931 
Z3_API
 
Z3_≠∂y_ªsu…_dec_ªf
(
Z3_c⁄ãxt
 
c
, 
Z3_≠∂y_ªsu…
 
r
);

5938 
Z3_°rög
 
Z3_API
 
Z3_≠∂y_ªsu…_to_°rög
(
Z3_c⁄ãxt
 
c
, 
Z3_≠∂y_ªsu…
 
r
);

5945 
Z3_API
 
Z3_≠∂y_ªsu…_gë_num_subgﬂls
(
Z3_c⁄ãxt
 
c
, 
Z3_≠∂y_ªsu…
 
r
);

5954 
Z3_gﬂl
 
Z3_API
 
Z3_≠∂y_ªsu…_gë_subgﬂl
(
Z3_c⁄ãxt
 
c
, 
Z3_≠∂y_ªsu…
 
r
, 
i
);

5996 
Z3_sﬁvî
 
Z3_API
 
Z3_mk_sﬁvî
(
Z3_c⁄ãxt
 
c
);

6023 
Z3_sﬁvî
 
Z3_API
 
Z3_mk_sim∂e_sﬁvî
(
Z3_c⁄ãxt
 
c
);

6034 
Z3_sﬁvî
 
Z3_API
 
Z3_mk_sﬁvî_f‹_logic
(
Z3_c⁄ãxt
 
c
, 
Z3_symbﬁ
 
logic
);

6046 
Z3_sﬁvî
 
Z3_API
 
Z3_mk_sﬁvî_‰om_è˘ic
(
Z3_c⁄ãxt
 
c
, 
Z3_è˘ic
 
t
);

6053 
Z3_sﬁvî
 
Z3_API
 
Z3_sﬁvî_å™¶©e
(
Z3_c⁄ãxt
 
sour˚
, Z3_sﬁvî 
s
, Z3_c⁄ãxà
èrgë
);

6060 
Z3_API
 
Z3_sﬁvî_imp‹t_modñ_c⁄vîãr
(
Z3_c⁄ãxt
 
˘x
, 
Z3_sﬁvî
 
§c
, Z3_sﬁvî 
d°
);

6070 
Z3_°rög
 
Z3_API
 
Z3_sﬁvî_gë_hñp
(
Z3_c⁄ãxt
 
c
, 
Z3_sﬁvî
 
s
);

6080 
Z3_∑øm_des¸s
 
Z3_API
 
Z3_sﬁvî_gë_∑øm_des¸s
(
Z3_c⁄ãxt
 
c
, 
Z3_sﬁvî
 
s
);

6090 
Z3_API
 
Z3_sﬁvî_£t_∑øms
(
Z3_c⁄ãxt
 
c
, 
Z3_sﬁvî
 
s
, 
Z3_∑øms
 
p
);

6097 
Z3_API
 
Z3_sﬁvî_öc_ªf
(
Z3_c⁄ãxt
 
c
, 
Z3_sﬁvî
 
s
);

6104 
Z3_API
 
Z3_sﬁvî_dec_ªf
(
Z3_c⁄ãxt
 
c
, 
Z3_sﬁvî
 
s
);

6116 
Z3_API
 
Z3_sﬁvî_push
(
Z3_c⁄ãxt
 
c
, 
Z3_sﬁvî
 
s
);

6128 
Z3_API
 
Z3_sﬁvî_p›
(
Z3_c⁄ãxt
 
c
, 
Z3_sﬁvî
 
s
, 
n
);

6138 
Z3_API
 
Z3_sﬁvî_ª£t
(
Z3_c⁄ãxt
 
c
, 
Z3_sﬁvî
 
s
);

6148 
Z3_API
 
Z3_sﬁvî_gë_num_sc›es
(
Z3_c⁄ãxt
 
c
, 
Z3_sﬁvî
 
s
);

6161 
Z3_API
 
Z3_sﬁvî_as£π
(
Z3_c⁄ãxt
 
c
, 
Z3_sﬁvî
 
s
, 
Z3_a°
 
a
);

6180 
Z3_API
 
Z3_sﬁvî_as£π_™d_åack
(
Z3_c⁄ãxt
 
c
, 
Z3_sﬁvî
 
s
, 
Z3_a°
 
a
, Z3_a° 
p
);

6190 
Z3_API
 
Z3_sﬁvî_‰om_fûe
(
Z3_c⁄ãxt
 
c
, 
Z3_sﬁvî
 
s
, 
Z3_°rög
 
fûe_«me
);

6200 
Z3_API
 
Z3_sﬁvî_‰om_°rög
(
Z3_c⁄ãxt
 
c
, 
Z3_sﬁvî
 
s
, 
Z3_°rög
 
fûe_«me
);

6207 
Z3_a°_ve˘‹
 
Z3_API
 
Z3_sﬁvî_gë_as£πi⁄s
(
Z3_c⁄ãxt
 
c
, 
Z3_sﬁvî
 
s
);

6214 
Z3_a°_ve˘‹
 
Z3_API
 
Z3_sﬁvî_gë_unôs
(
Z3_c⁄ãxt
 
c
, 
Z3_sﬁvî
 
s
);

6222 
Z3_a°_ve˘‹
 
Z3_API
 
Z3_sﬁvî_gë_n⁄_unôs
(
Z3_c⁄ãxt
 
c
, 
Z3_sﬁvî
 
s
);

6242 
Z3_lboﬁ
 
Z3_API
 
Z3_sﬁvî_check
(
Z3_c⁄ãxt
 
c
, 
Z3_sﬁvî
 
s
);

6255 
Z3_lboﬁ
 
Z3_API
 
Z3_sﬁvî_check_assum±i⁄s
(
Z3_c⁄ãxt
 
c
, 
Z3_sﬁvî
 
s
,

6256 
num_assum±i⁄s
, 
Z3_a°
 c⁄° 
assum±i⁄s
[]);

6276 
Z3_lboﬁ
 
Z3_API
 
Z3_gë_im∂õd_equÆôõs
(
Z3_c⁄ãxt
 
c
,

6277 
Z3_sﬁvî
 
s
,

6278 
num_ãrms
,

6279 
Z3_a°
 c⁄° 
ãrms
[],

6280 
˛ass_ids
[]);

6288 
Z3_lboﬁ
 
Z3_API
 
Z3_sﬁvî_gë_c⁄£quí˚s
(
Z3_c⁄ãxt
 
c
,

6289 
Z3_sﬁvî
 
s
,

6290 
Z3_a°_ve˘‹
 
assum±i⁄s
,

6291 
Z3_a°_ve˘‹
 
v¨übÀs
,

6292 
Z3_a°_ve˘‹
 
c⁄£quí˚s
);

6313 
Z3_a°_ve˘‹
 
Z3_API
 
Z3_sﬁvî_cube
(
Z3_c⁄ãxt
 
c
, 
Z3_sﬁvî
 
s
, Z3_a°_ve˘‹ 
v¨s
, 
backåack_Àvñ
);

6323 
Z3_modñ
 
Z3_API
 
Z3_sﬁvî_gë_modñ
(
Z3_c⁄ãxt
 
c
, 
Z3_sﬁvî
 
s
);

6334 
Z3_a°
 
Z3_API
 
Z3_sﬁvî_gë_¥oof
(
Z3_c⁄ãxt
 
c
, 
Z3_sﬁvî
 
s
);

6342 
Z3_a°_ve˘‹
 
Z3_API
 
Z3_sﬁvî_gë_unßt_c‹e
(
Z3_c⁄ãxt
 
c
, 
Z3_sﬁvî
 
s
);

6350 
Z3_°rög
 
Z3_API
 
Z3_sﬁvî_gë_ªas⁄_unknown
(
Z3_c⁄ãxt
 
c
, 
Z3_sﬁvî
 
s
);

6359 
Z3_°©s
 
Z3_API
 
Z3_sﬁvî_gë_°©i°ics
(
Z3_c⁄ãxt
 
c
, 
Z3_sﬁvî
 
s
);

6369 
Z3_°rög
 
Z3_API
 
Z3_sﬁvî_to_°rög
(
Z3_c⁄ãxt
 
c
, 
Z3_sﬁvî
 
s
);

6381 
Z3_°rög
 
Z3_API
 
Z3_°©s_to_°rög
(
Z3_c⁄ãxt
 
c
, 
Z3_°©s
 
s
);

6388 
Z3_API
 
Z3_°©s_öc_ªf
(
Z3_c⁄ãxt
 
c
, 
Z3_°©s
 
s
);

6395 
Z3_API
 
Z3_°©s_dec_ªf
(
Z3_c⁄ãxt
 
c
, 
Z3_°©s
 
s
);

6402 
Z3_API
 
Z3_°©s_size
(
Z3_c⁄ãxt
 
c
, 
Z3_°©s
 
s
);

6411 
Z3_°rög
 
Z3_API
 
Z3_°©s_gë_key
(
Z3_c⁄ãxt
 
c
, 
Z3_°©s
 
s
, 
idx
);

6420 
boﬁ
 
Z3_API
 
Z3_°©s_is_uöt
(
Z3_c⁄ãxt
 
c
, 
Z3_°©s
 
s
, 
idx
);

6429 
boﬁ
 
Z3_API
 
Z3_°©s_is_doubÀ
(
Z3_c⁄ãxt
 
c
, 
Z3_°©s
 
s
, 
idx
);

6438 
Z3_API
 
Z3_°©s_gë_uöt_vÆue
(
Z3_c⁄ãxt
 
c
, 
Z3_°©s
 
s
, 
idx
);

6447 
Z3_API
 
Z3_°©s_gë_doubÀ_vÆue
(
Z3_c⁄ãxt
 
c
, 
Z3_°©s
 
s
, 
idx
);

6454 
uöt64_t
 
Z3_API
 
Z3_gë_e°im©ed_Æloc_size
();

6458 #ifde‡
__˝lu•lus


	@/usr/include/z3_ast_containers.h

19 #i‚de‡
Z3_AST_CONTAINERS_H_


20 
	#Z3_AST_CONTAINERS_H_


	)

22 #ifde‡
__˝lu•lus


39 
Z3_a°_ve˘‹
 
Z3_API
 
Z3_mk_a°_ve˘‹
(
Z3_c⁄ãxt
 
c
);

46 
Z3_API
 
Z3_a°_ve˘‹_öc_ªf
(
Z3_c⁄ãxt
 
c
, 
Z3_a°_ve˘‹
 
v
);

53 
Z3_API
 
Z3_a°_ve˘‹_dec_ªf
(
Z3_c⁄ãxt
 
c
, 
Z3_a°_ve˘‹
 
v
);

60 
Z3_API
 
Z3_a°_ve˘‹_size
(
Z3_c⁄ãxt
 
c
, 
Z3_a°_ve˘‹
 
v
);

69 
Z3_a°
 
Z3_API
 
Z3_a°_ve˘‹_gë
(
Z3_c⁄ãxt
 
c
, 
Z3_a°_ve˘‹
 
v
, 
i
);

78 
Z3_API
 
Z3_a°_ve˘‹_£t
(
Z3_c⁄ãxt
 
c
, 
Z3_a°_ve˘‹
 
v
, 
i
, 
Z3_a°
 
a
);

85 
Z3_API
 
Z3_a°_ve˘‹_ªsize
(
Z3_c⁄ãxt
 
c
, 
Z3_a°_ve˘‹
 
v
, 
n
);

92 
Z3_API
 
Z3_a°_ve˘‹_push
(
Z3_c⁄ãxt
 
c
, 
Z3_a°_ve˘‹
 
v
, 
Z3_a°
 
a
);

99 
Z3_a°_ve˘‹
 
Z3_API
 
Z3_a°_ve˘‹_å™¶©e
(
Z3_c⁄ãxt
 
s
, Z3_a°_ve˘‹ 
v
, Z3_c⁄ãxà
t
);

106 
Z3_°rög
 
Z3_API
 
Z3_a°_ve˘‹_to_°rög
(
Z3_c⁄ãxt
 
c
, 
Z3_a°_ve˘‹
 
v
);

120 
Z3_a°_m≠
 
Z3_API
 
Z3_mk_a°_m≠
(
Z3_c⁄ãxt
 
c
);

127 
Z3_API
 
Z3_a°_m≠_öc_ªf
(
Z3_c⁄ãxt
 
c
, 
Z3_a°_m≠
 
m
);

134 
Z3_API
 
Z3_a°_m≠_dec_ªf
(
Z3_c⁄ãxt
 
c
, 
Z3_a°_m≠
 
m
);

141 
boﬁ
 
Z3_API
 
Z3_a°_m≠_c⁄èös
(
Z3_c⁄ãxt
 
c
, 
Z3_a°_m≠
 
m
, 
Z3_a°
 
k
);

150 
Z3_a°
 
Z3_API
 
Z3_a°_m≠_föd
(
Z3_c⁄ãxt
 
c
, 
Z3_a°_m≠
 
m
, Z3_a° 
k
);

157 
Z3_API
 
Z3_a°_m≠_ö£π
(
Z3_c⁄ãxt
 
c
, 
Z3_a°_m≠
 
m
, 
Z3_a°
 
k
, Z3_a° 
v
);

164 
Z3_API
 
Z3_a°_m≠_îa£
(
Z3_c⁄ãxt
 
c
, 
Z3_a°_m≠
 
m
, 
Z3_a°
 
k
);

171 
Z3_API
 
Z3_a°_m≠_ª£t
(
Z3_c⁄ãxt
 
c
, 
Z3_a°_m≠
 
m
);

178 
Z3_API
 
Z3_a°_m≠_size
(
Z3_c⁄ãxt
 
c
, 
Z3_a°_m≠
 
m
);

185 
Z3_a°_ve˘‹
 
Z3_API
 
Z3_a°_m≠_keys
(
Z3_c⁄ãxt
 
c
, 
Z3_a°_m≠
 
m
);

192 
Z3_°rög
 
Z3_API
 
Z3_a°_m≠_to_°rög
(
Z3_c⁄ãxt
 
c
, 
Z3_a°_m≠
 
m
);

196 #ifde‡
__˝lu•lus


	@/usr/include/z3_fixedpoint.h

19 #i‚de‡
Z3_FIXEDPOINT_H_


20 
	#Z3_FIXEDPOINT_H_


	)

22 #ifde‡
__˝lu•lus


39 
Z3_fixedpoöt
 
Z3_API
 
Z3_mk_fixedpoöt
(
Z3_c⁄ãxt
 
c
);

46 
Z3_API
 
Z3_fixedpoöt_öc_ªf
(
Z3_c⁄ãxt
 
c
, 
Z3_fixedpoöt
 
d
);

53 
Z3_API
 
Z3_fixedpoöt_dec_ªf
(
Z3_c⁄ãxt
 
c
, 
Z3_fixedpoöt
 
d
);

67 
Z3_API
 
Z3_fixedpoöt_add_ruÀ
(
Z3_c⁄ãxt
 
c
, 
Z3_fixedpoöt
 
d
, 
Z3_a°
 
ruÀ
, 
Z3_symbﬁ
 
«me
);

86 
Z3_API
 
Z3_fixedpoöt_add_Á˘
(
Z3_c⁄ãxt
 
c
, 
Z3_fixedpoöt
 
d
,

87 
Z3_func_de˛
 
r
,

88 
num_¨gs
, 
¨gs
[]);

98 
Z3_API
 
Z3_fixedpoöt_as£π
(
Z3_c⁄ãxt
 
c
, 
Z3_fixedpoöt
 
d
, 
Z3_a°
 
axiom
);

115 
Z3_lboﬁ
 
Z3_API
 
Z3_fixedpoöt_quîy
(
Z3_c⁄ãxt
 
c
, 
Z3_fixedpoöt
 
d
, 
Z3_a°
 
quîy
);

129 
Z3_lboﬁ
 
Z3_API
 
Z3_fixedpoöt_quîy_ªœti⁄s
(

130 
Z3_c⁄ãxt
 
c
, 
Z3_fixedpoöt
 
d
,

131 
num_ªœti⁄s
, 
Z3_func_de˛
 c⁄° 
ªœti⁄s
[]);

146 
Z3_a°
 
Z3_API
 
Z3_fixedpoöt_gë_™swî
(
Z3_c⁄ãxt
 
c
, 
Z3_fixedpoöt
 
d
);

155 
Z3_°rög
 
Z3_API
 
Z3_fixedpoöt_gë_ªas⁄_unknown
(
Z3_c⁄ãxt
 
c
, 
Z3_fixedpoöt
 
d
);

163 
Z3_API
 
Z3_fixedpoöt_upd©e_ruÀ
(
Z3_c⁄ãxt
 
c
, 
Z3_fixedpoöt
 
d
, 
Z3_a°
 
a
, 
Z3_symbﬁ
 
«me
);

174 
Z3_API
 
Z3_fixedpoöt_gë_num_Àvñs
(
Z3_c⁄ãxt
 
c
, 
Z3_fixedpoöt
 
d
, 
Z3_func_de˛
 
¥ed
);

186 
Z3_a°
 
Z3_API
 
Z3_fixedpoöt_gë_covî_dñè
(
Z3_c⁄ãxt
 
c
, 
Z3_fixedpoöt
 
d
, 
Àvñ
, 
Z3_func_de˛
 
¥ed
);

200 
Z3_API
 
Z3_fixedpoöt_add_covî
(
Z3_c⁄ãxt
 
c
, 
Z3_fixedpoöt
 
d
, 
Àvñ
, 
Z3_func_de˛
 
¥ed
, 
Z3_a°
 
¥›îty
);

207 
Z3_°©s
 
Z3_API
 
Z3_fixedpoöt_gë_°©i°ics
(
Z3_c⁄ãxt
 
c
, 
Z3_fixedpoöt
 
d
);

217 
Z3_API
 
Z3_fixedpoöt_ªgi°î_ªœti⁄
(
Z3_c⁄ãxt
 
c
, 
Z3_fixedpoöt
 
d
, 
Z3_func_de˛
 
f
);

228 
Z3_API
 
Z3_fixedpoöt_£t_¥ediˇã_ª¥e£¡©i⁄
(

229 
Z3_c⁄ãxt
 
c
,

230 
Z3_fixedpoöt
 
d
,

231 
Z3_func_de˛
 
f
,

232 
num_ªœti⁄s
,

233 
Z3_symbﬁ
 c⁄° 
ªœti⁄_köds
[]);

240 
Z3_a°_ve˘‹
 
Z3_API
 
Z3_fixedpoöt_gë_ruÀs
(

241 
Z3_c⁄ãxt
 
c
,

242 
Z3_fixedpoöt
 
f
);

249 
Z3_a°_ve˘‹
 
Z3_API
 
Z3_fixedpoöt_gë_as£πi⁄s
(

250 
Z3_c⁄ãxt
 
c
,

251 
Z3_fixedpoöt
 
f
);

261 
Z3_API
 
Z3_fixedpoöt_£t_∑øms
(
Z3_c⁄ãxt
 
c
, 
Z3_fixedpoöt
 
f
, 
Z3_∑øms
 
p
);

271 
Z3_°rög
 
Z3_API
 
Z3_fixedpoöt_gë_hñp
(
Z3_c⁄ãxt
 
c
, 
Z3_fixedpoöt
 
f
);

281 
Z3_∑øm_des¸s
 
Z3_API
 
Z3_fixedpoöt_gë_∑øm_des¸s
(
Z3_c⁄ãxt
 
c
, 
Z3_fixedpoöt
 
f
);

295 
Z3_°rög
 
Z3_API
 
Z3_fixedpoöt_to_°rög
(

296 
Z3_c⁄ãxt
 
c
,

297 
Z3_fixedpoöt
 
f
,

298 
num_quîõs
,

299 
Z3_a°
 
quîõs
[]);

315 
Z3_a°_ve˘‹
 
Z3_API
 
Z3_fixedpoöt_‰om_°rög
(
Z3_c⁄ãxt
 
c
,

316 
Z3_fixedpoöt
 
f
,

317 
Z3_°rög
 
s
);

333 
Z3_a°_ve˘‹
 
Z3_API
 
Z3_fixedpoöt_‰om_fûe
(
Z3_c⁄ãxt
 
c
,

334 
Z3_fixedpoöt
 
f
,

335 
Z3_°rög
 
s
);

347 
Z3_API
 
Z3_fixedpoöt_push
(
Z3_c⁄ãxt
 
c
, 
Z3_fixedpoöt
 
d
);

358 
Z3_API
 
Z3_fixedpoöt_p›
(
Z3_c⁄ãxt
 
c
, 
Z3_fixedpoöt
 
d
);

362 
	tZ3_fixedpoöt_ªdu˚_assign_ˇŒback_Âå
(

363 *, 
	tZ3_func_de˛
,

364 , 
	tZ3_a°
 const [],

365 , 
	tZ3_a°
 const []);

367 
	tZ3_fixedpoöt_ªdu˚_≠p_ˇŒback_Âå
(

368 *, 
	tZ3_func_de˛
,

369 , 
	tZ3_a°
 const [],

370 
	tZ3_a°
*);

374 
Z3_API
 
Z3_fixedpoöt_öô
(
Z3_c⁄ãxt
 
c
, 
Z3_fixedpoöt
 
d
, * 
°©e
);

381 
Z3_API
 
Z3_fixedpoöt_£t_ªdu˚_assign_ˇŒback
(

382 
Z3_c⁄ãxt
 
c
 ,
Z3_fixedpoöt
 
d
, 
Z3_fixedpoöt_ªdu˚_assign_ˇŒback_Âå
 
cb
);

385 
Z3_API
 
Z3_fixedpoöt_£t_ªdu˚_≠p_ˇŒback
(

386 
Z3_c⁄ãxt
 
c
, 
Z3_fixedpoöt
 
d
, 
Z3_fixedpoöt_ªdu˚_≠p_ˇŒback_Âå
 
cb
);

388 (*
Z3_fixedpoöt_√w_Àmma_eh
)(*
	t°©e
, 
	tZ3_a°
 
	tÀmma
, 
	tÀvñ
);

389 (*
Z3_fixedpoöt_¥ede˚ss‹_eh
)(*
	t°©e
);

390 (*
Z3_fixedpoöt_unfﬁd_eh
)(*
	t°©e
);

393 
Z3_API
 
Z3_fixedpoöt_add_ˇŒback
(
Z3_c⁄ãxt
 
˘x
, 
Z3_fixedpoöt
 
f
, *
°©e
,

394 
Z3_fixedpoöt_√w_Àmma_eh
 
√w_Àmma_eh
,

395 
Z3_fixedpoöt_¥ede˚ss‹_eh
 
¥ede˚ss‹_eh
,

396 
Z3_fixedpoöt_unfﬁd_eh
 
unfﬁd_eh
);

398 
Z3_API
 
Z3_fixedpoöt_add_c⁄°øöt
 (
Z3_c⁄ãxt
 
c
, 
Z3_fixedpoöt
 
d
, 
Z3_a°
 
e
, 
lvl
);

403 #ifde‡
__˝lu•lus


	@/usr/include/z3_fpa.h

19 #i‚de‡
Z3_FPA_H_


20 
	#Z3_FPA_H_


	)

22 #ifde‡
__˝lu•lus


38 
Z3_s‹t
 
Z3_API
 
Z3_mk_Âa_roundög_mode_s‹t
(
Z3_c⁄ãxt
 
c
);

47 
Z3_a°
 
Z3_API
 
Z3_mk_Âa_round_√¨e°_tõs_to_eví
(
Z3_c⁄ãxt
 
c
);

56 
Z3_a°
 
Z3_API
 
Z3_mk_Âa_∫e
(
Z3_c⁄ãxt
 
c
);

65 
Z3_a°
 
Z3_API
 
Z3_mk_Âa_round_√¨e°_tõs_to_away
(
Z3_c⁄ãxt
 
c
);

74 
Z3_a°
 
Z3_API
 
Z3_mk_Âa_∫a
(
Z3_c⁄ãxt
 
c
);

83 
Z3_a°
 
Z3_API
 
Z3_mk_Âa_round_tow¨d_posôive
(
Z3_c⁄ãxt
 
c
);

92 
Z3_a°
 
Z3_API
 
Z3_mk_Âa_πp
(
Z3_c⁄ãxt
 
c
);

101 
Z3_a°
 
Z3_API
 
Z3_mk_Âa_round_tow¨d_√g©ive
(
Z3_c⁄ãxt
 
c
);

110 
Z3_a°
 
Z3_API
 
Z3_mk_Âa_πn
(
Z3_c⁄ãxt
 
c
);

119 
Z3_a°
 
Z3_API
 
Z3_mk_Âa_round_tow¨d_zîo
(
Z3_c⁄ãxt
 
c
);

128 
Z3_a°
 
Z3_API
 
Z3_mk_Âa_πz
(
Z3_c⁄ãxt
 
c
);

141 
Z3_s‹t
 
Z3_API
 
Z3_mk_Âa_s‹t
(
Z3_c⁄ãxt
 
c
, 
ebôs
, 
sbôs
);

150 
Z3_s‹t
 
Z3_API
 
Z3_mk_Âa_s‹t_hÆf
(
Z3_c⁄ãxt
 
c
);

159 
Z3_s‹t
 
Z3_API
 
Z3_mk_Âa_s‹t_16
(
Z3_c⁄ãxt
 
c
);

168 
Z3_s‹t
 
Z3_API
 
Z3_mk_Âa_s‹t_sögÀ
(
Z3_c⁄ãxt
 
c
);

177 
Z3_s‹t
 
Z3_API
 
Z3_mk_Âa_s‹t_32
(
Z3_c⁄ãxt
 
c
);

186 
Z3_s‹t
 
Z3_API
 
Z3_mk_Âa_s‹t_doubÀ
(
Z3_c⁄ãxt
 
c
);

195 
Z3_s‹t
 
Z3_API
 
Z3_mk_Âa_s‹t_64
(
Z3_c⁄ãxt
 
c
);

204 
Z3_s‹t
 
Z3_API
 
Z3_mk_Âa_s‹t_quadru∂e
(
Z3_c⁄ãxt
 
c
);

213 
Z3_s‹t
 
Z3_API
 
Z3_mk_Âa_s‹t_128
(
Z3_c⁄ãxt
 
c
);

223 
Z3_a°
 
Z3_API
 
Z3_mk_Âa_«n
(
Z3_c⁄ãxt
 
c
, 
Z3_s‹t
 
s
);

236 
Z3_a°
 
Z3_API
 
Z3_mk_Âa_öf
(
Z3_c⁄ãxt
 
c
, 
Z3_s‹t
 
s
, 
boﬁ
 
√g©ive
);

249 
Z3_a°
 
Z3_API
 
Z3_mk_Âa_zîo
(
Z3_c⁄ãxt
 
c
, 
Z3_s‹t
 
s
, 
boﬁ
 
√g©ive
);

267 
Z3_a°
 
Z3_API
 
Z3_mk_Âa_Â
(
Z3_c⁄ãxt
 
c
, Z3_a° 
sgn
, Z3_a° 
exp
, Z3_a° 
sig
);

285 
Z3_a°
 
Z3_API
 
Z3_mk_Âa_numîÆ_Êﬂt
(
Z3_c⁄ãxt
 
c
, 
v
, 
Z3_s‹t
 
ty
);

303 
Z3_a°
 
Z3_API
 
Z3_mk_Âa_numîÆ_doubÀ
(
Z3_c⁄ãxt
 
c
, 
v
, 
Z3_s‹t
 
ty
);

318 
Z3_a°
 
Z3_API
 
Z3_mk_Âa_numîÆ_öt
(
Z3_c⁄ãxt
 
c
, sig√d 
v
, 
Z3_s‹t
 
ty
);

335 
Z3_a°
 
Z3_API
 
Z3_mk_Âa_numîÆ_öt_uöt
(
Z3_c⁄ãxt
 
c
, 
boﬁ
 
sgn
, sig√d 
exp
, 
sig
, 
Z3_s‹t
 
ty
);

352 
Z3_a°
 
Z3_API
 
Z3_mk_Âa_numîÆ_öt64_uöt64
(
Z3_c⁄ãxt
 
c
, 
boﬁ
 
sgn
, 
öt64_t
 
exp
, 
uöt64_t
 
sig
, 
Z3_s‹t
 
ty
);

362 
Z3_a°
 
Z3_API
 
Z3_mk_Âa_abs
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t
);

372 
Z3_a°
 
Z3_API
 
Z3_mk_Âa_√g
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t
);

386 
Z3_a°
 
Z3_API
 
Z3_mk_Âa_add
(
Z3_c⁄ãxt
 
c
, Z3_a° 
rm
, Z3_a° 
t1
, Z3_a° 
t2
);

400 
Z3_a°
 
Z3_API
 
Z3_mk_Âa_sub
(
Z3_c⁄ãxt
 
c
, Z3_a° 
rm
, Z3_a° 
t1
, Z3_a° 
t2
);

414 
Z3_a°
 
Z3_API
 
Z3_mk_Âa_mul
(
Z3_c⁄ãxt
 
c
, Z3_a° 
rm
, Z3_a° 
t1
, Z3_a° 
t2
);

428 
Z3_a°
 
Z3_API
 
Z3_mk_Âa_div
(
Z3_c⁄ãxt
 
c
, Z3_a° 
rm
, Z3_a° 
t1
, Z3_a° 
t2
);

445 
Z3_a°
 
Z3_API
 
Z3_mk_Âa_fma
(
Z3_c⁄ãxt
 
c
, Z3_a° 
rm
, Z3_a° 
t1
, Z3_a° 
t2
, Z3_a° 
t3
);

458 
Z3_a°
 
Z3_API
 
Z3_mk_Âa_sqπ
(
Z3_c⁄ãxt
 
c
, Z3_a° 
rm
, Z3_a° 
t
);

471 
Z3_a°
 
Z3_API
 
Z3_mk_Âa_ªm
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
, Z3_a° 
t2
);

485 
Z3_a°
 
Z3_API
 
Z3_mk_Âa_round_to_öãgøl
(
Z3_c⁄ãxt
 
c
, Z3_a° 
rm
, Z3_a° 
t
);

498 
Z3_a°
 
Z3_API
 
Z3_mk_Âa_mö
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
, Z3_a° 
t2
);

511 
Z3_a°
 
Z3_API
 
Z3_mk_Âa_max
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
, Z3_a° 
t2
);

524 
Z3_a°
 
Z3_API
 
Z3_mk_Âa_Àq
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
, Z3_a° 
t2
);

537 
Z3_a°
 
Z3_API
 
Z3_mk_Âa_…
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
, Z3_a° 
t2
);

550 
Z3_a°
 
Z3_API
 
Z3_mk_Âa_geq
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
, Z3_a° 
t2
);

563 
Z3_a°
 
Z3_API
 
Z3_mk_Âa_gt
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
, Z3_a° 
t2
);

578 
Z3_a°
 
Z3_API
 
Z3_mk_Âa_eq
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t1
, Z3_a° 
t2
);

590 
Z3_a°
 
Z3_API
 
Z3_mk_Âa_is_n‹mÆ
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t
);

602 
Z3_a°
 
Z3_API
 
Z3_mk_Âa_is_subn‹mÆ
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t
);

614 
Z3_a°
 
Z3_API
 
Z3_mk_Âa_is_zîo
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t
);

626 
Z3_a°
 
Z3_API
 
Z3_mk_Âa_is_öföôe
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t
);

638 
Z3_a°
 
Z3_API
 
Z3_mk_Âa_is_«n
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t
);

650 
Z3_a°
 
Z3_API
 
Z3_mk_Âa_is_√g©ive
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t
);

662 
Z3_a°
 
Z3_API
 
Z3_mk_Âa_is_posôive
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t
);

680 
Z3_a°
 
Z3_API
 
Z3_mk_Âa_to_Â_bv
(
Z3_c⁄ãxt
 
c
, Z3_a° 
bv
, 
Z3_s‹t
 
s
);

698 
Z3_a°
 
Z3_API
 
Z3_mk_Âa_to_Â_Êﬂt
(
Z3_c⁄ãxt
 
c
, Z3_a° 
rm
, Z3_a° 
t
, 
Z3_s‹t
 
s
);

716 
Z3_a°
 
Z3_API
 
Z3_mk_Âa_to_Â_ªÆ
(
Z3_c⁄ãxt
 
c
, Z3_a° 
rm
, Z3_a° 
t
, 
Z3_s‹t
 
s
);

735 
Z3_a°
 
Z3_API
 
Z3_mk_Âa_to_Â_sig√d
(
Z3_c⁄ãxt
 
c
, Z3_a° 
rm
, Z3_a° 
t
, 
Z3_s‹t
 
s
);

754 
Z3_a°
 
Z3_API
 
Z3_mk_Âa_to_Â_unsig√d
(
Z3_c⁄ãxt
 
c
, Z3_a° 
rm
, Z3_a° 
t
, 
Z3_s‹t
 
s
);

770 
Z3_a°
 
Z3_API
 
Z3_mk_Âa_to_ubv
(
Z3_c⁄ãxt
 
c
, Z3_a° 
rm
, Z3_a° 
t
, 
sz
);

786 
Z3_a°
 
Z3_API
 
Z3_mk_Âa_to_sbv
(
Z3_c⁄ãxt
 
c
, Z3_a° 
rm
, Z3_a° 
t
, 
sz
);

800 
Z3_a°
 
Z3_API
 
Z3_mk_Âa_to_ªÆ
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t
);

813 
Z3_API
 
Z3_Âa_gë_ebôs
(
Z3_c⁄ãxt
 
c
, 
Z3_s‹t
 
s
);

823 
Z3_API
 
Z3_Âa_gë_sbôs
(
Z3_c⁄ãxt
 
c
, 
Z3_s‹t
 
s
);

833 
boﬁ
 
Z3_API
 
Z3_Âa_is_numîÆ_«n
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
t
);

843 
boﬁ
 
Z3_API
 
Z3_Âa_is_numîÆ_öf
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
t
);

853 
boﬁ
 
Z3_API
 
Z3_Âa_is_numîÆ_zîo
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
t
);

863 
boﬁ
 
Z3_API
 
Z3_Âa_is_numîÆ_n‹mÆ
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
t
);

873 
boﬁ
 
Z3_API
 
Z3_Âa_is_numîÆ_subn‹mÆ
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
t
);

883 
boﬁ
 
Z3_API
 
Z3_Âa_is_numîÆ_posôive
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
t
);

893 
boﬁ
 
Z3_API
 
Z3_Âa_is_numîÆ_√g©ive
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
t
);

905 
Z3_a°
 
Z3_API
 
Z3_Âa_gë_numîÆ_sign_bv
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t
);

917 
Z3_a°
 
Z3_API
 
Z3_Âa_gë_numîÆ_signifiˇnd_bv
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t
);

931 
boﬁ
 
Z3_API
 
Z3_Âa_gë_numîÆ_sign
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
t
, * 
sgn
);

944 
Z3_°rög
 
Z3_API
 
Z3_Âa_gë_numîÆ_signifiˇnd_°rög
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
t
);

959 
boﬁ
 
Z3_API
 
Z3_Âa_gë_numîÆ_signifiˇnd_uöt64
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
t
, 
uöt64_t
 * 
n
);

973 
Z3_°rög
 
Z3_API
 
Z3_Âa_gë_numîÆ_exp⁄ít_°rög
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
t
, 
boﬁ
 
bü£d
);

988 
boﬁ
 
Z3_API
 
Z3_Âa_gë_numîÆ_exp⁄ít_öt64
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
t
, 
öt64_t
 * 
n
, boﬁ 
bü£d
);

1002 
Z3_a°
 
Z3_API
 
Z3_Âa_gë_numîÆ_exp⁄ít_bv
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t
, 
boﬁ
 
bü£d
);

1019 
Z3_a°
 
Z3_API
 
Z3_mk_Âa_to_õì_bv
(
Z3_c⁄ãxt
 
c
, Z3_a° 
t
);

1038 
Z3_a°
 
Z3_API
 
Z3_mk_Âa_to_Â_öt_ªÆ
(
Z3_c⁄ãxt
 
c
, Z3_a° 
rm
, Z3_a° 
exp
, Z3_a° 
sig
, 
Z3_s‹t
 
s
);

1043 #ifde‡
__˝lu•lus


	@/usr/include/z3_macros.h

7 #i‚de‡
Z3_boﬁ_›t


8 
	#Z3_boﬁ_›t
 
Z3_boﬁ


	)

11 #i‚de‡
Z3_API


12 #ifde‡
__GNUC__


13 
	#Z3_API
 
	`__©åibuã__
 ((
	`visibûôy
 ("deÁu…")))

	)

15 
	#Z3_API


	)

19 #i‚de‡
DEFINE_TYPE


20 
	#DEFINE_TYPE
(
T
Ë
_
 ## 
	tT
 *
	)
T

	@/usr/include/z3_optimization.h

19 #i‚de‡
Z3_OPTIMIZATION_H_


20 
	#Z3_OPTIMIZATION_H_


	)

22 #ifde‡
__˝lu•lus


39 
Z3_›timize
 
Z3_API
 
Z3_mk_›timize
(
Z3_c⁄ãxt
 
c
);

46 
Z3_API
 
Z3_›timize_öc_ªf
(
Z3_c⁄ãxt
 
c
, 
Z3_›timize
 
d
);

53 
Z3_API
 
Z3_›timize_dec_ªf
(
Z3_c⁄ãxt
 
c
, 
Z3_›timize
 
d
);

62 
Z3_API
 
Z3_›timize_as£π
(
Z3_c⁄ãxt
 
c
, 
Z3_›timize
 
o
, 
Z3_a°
 
a
);

76 
Z3_API
 
Z3_›timize_as£π_so·
(
Z3_c⁄ãxt
 
c
, 
Z3_›timize
 
o
, 
Z3_a°
 
a
, 
Z3_°rög
 
weight
, 
Z3_symbﬁ
 
id
);

88 
Z3_API
 
Z3_›timize_maximize
(
Z3_c⁄ãxt
 
c
, 
Z3_›timize
 
o
, 
Z3_a°
 
t
);

100 
Z3_API
 
Z3_›timize_möimize
(
Z3_c⁄ãxt
 
c
, 
Z3_›timize
 
o
, 
Z3_a°
 
t
);

112 
Z3_API
 
Z3_›timize_push
(
Z3_c⁄ãxt
 
c
, 
Z3_›timize
 
d
);

123 
Z3_API
 
Z3_›timize_p›
(
Z3_c⁄ãxt
 
c
, 
Z3_›timize
 
d
);

139 
Z3_lboﬁ
 
Z3_API
 
Z3_›timize_check
(
Z3_c⁄ãxt
 
c
, 
Z3_›timize
 
o
, 
num_assum±i⁄s
, 
Z3_a°
 c⁄° 
assum±i⁄s
[]);

149 
Z3_°rög
 
Z3_API
 
Z3_›timize_gë_ªas⁄_unknown
(
Z3_c⁄ãxt
 
c
, 
Z3_›timize
 
d
);

160 
Z3_modñ
 
Z3_API
 
Z3_›timize_gë_modñ
(
Z3_c⁄ãxt
 
c
, 
Z3_›timize
 
o
);

168 
Z3_a°_ve˘‹
 
Z3_API
 
Z3_›timize_gë_unßt_c‹e
(
Z3_c⁄ãxt
 
c
, 
Z3_›timize
 
o
);

182 
Z3_API
 
Z3_›timize_£t_∑øms
(
Z3_c⁄ãxt
 
c
, 
Z3_›timize
 
o
, 
Z3_∑øms
 
p
);

195 
Z3_∑øm_des¸s
 
Z3_API
 
Z3_›timize_gë_∑øm_des¸s
(
Z3_c⁄ãxt
 
c
, 
Z3_›timize
 
o
);

210 
Z3_a°
 
Z3_API
 
Z3_›timize_gë_lowî
(
Z3_c⁄ãxt
 
c
, 
Z3_›timize
 
o
, 
idx
);

225 
Z3_a°
 
Z3_API
 
Z3_›timize_gë_uµî
(
Z3_c⁄ãxt
 
c
, 
Z3_›timize
 
o
, 
idx
);

244 
Z3_a°_ve˘‹
 
Z3_API
 
Z3_›timize_gë_lowî_as_ve˘‹
(
Z3_c⁄ãxt
 
c
, 
Z3_›timize
 
o
, 
idx
);

259 
Z3_a°_ve˘‹
 
Z3_API
 
Z3_›timize_gë_uµî_as_ve˘‹
(
Z3_c⁄ãxt
 
c
, 
Z3_›timize
 
o
, 
idx
);

272 
Z3_°rög
 
Z3_API
 
Z3_›timize_to_°rög
(
Z3_c⁄ãxt
 
c
, 
Z3_›timize
 
o
);

288 
Z3_API
 
Z3_›timize_‰om_°rög
(
Z3_c⁄ãxt
 
c
, 
Z3_›timize
 
o
, 
Z3_°rög
 
s
);

304 
Z3_API
 
Z3_›timize_‰om_fûe
(
Z3_c⁄ãxt
 
c
, 
Z3_›timize
 
o
, 
Z3_°rög
 
s
);

314 
Z3_°rög
 
Z3_API
 
Z3_›timize_gë_hñp
(
Z3_c⁄ãxt
 
c
, 
Z3_›timize
 
t
);

321 
Z3_°©s
 
Z3_API
 
Z3_›timize_gë_°©i°ics
(
Z3_c⁄ãxt
 
c
, 
Z3_›timize
 
d
);

328 
Z3_a°_ve˘‹
 
Z3_API
 
Z3_›timize_gë_as£πi⁄s
(
Z3_c⁄ãxt
 
c
, 
Z3_›timize
 
o
);

340 
Z3_a°_ve˘‹
 
Z3_API
 
Z3_›timize_gë_obje˘ives
(
Z3_c⁄ãxt
 
c
, 
Z3_›timize
 
o
);

345 #ifde‡
__˝lu•lus


	@/usr/include/z3_polynomial.h

20 #i‚de‡
Z3_POLYNOMIAL_H_


21 
	#Z3_POLYNOMIAL_H_


	)

23 #ifde‡
__˝lu•lus


44 
Z3_a°_ve˘‹
 
Z3_API
 
Z3_pﬁynomül_subªsu…™ts
(
Z3_c⁄ãxt
 
c
, 
Z3_a°
 
p
, Z3_a° 
q
, Z3_a° 
x
);

50 #ifde‡
__˝lu•lus


	@/usr/include/z3_rcf.h

22 #i‚de‡
Z3_RCF_H_


23 
	#Z3_RCF_H_


	)

25 #ifde‡
__˝lu•lus


39 
Z3_API
 
Z3_rcf_dñ
(
Z3_c⁄ãxt
 
c
, 
Z3_rcf_num
 
a
);

46 
Z3_rcf_num
 
Z3_API
 
Z3_rcf_mk_øti⁄Æ
(
Z3_c⁄ãxt
 
c
, 
Z3_°rög
 
vÆ
);

53 
Z3_rcf_num
 
Z3_API
 
Z3_rcf_mk_smÆl_öt
(
Z3_c⁄ãxt
 
c
, 
vÆ
);

60 
Z3_rcf_num
 
Z3_API
 
Z3_rcf_mk_pi
(
Z3_c⁄ãxt
 
c
);

67 
Z3_rcf_num
 
Z3_API
 
Z3_rcf_mk_e
(
Z3_c⁄ãxt
 
c
);

74 
Z3_rcf_num
 
Z3_API
 
Z3_rcf_mk_öföôesimÆ
(
Z3_c⁄ãxt
 
c
);

85 
Z3_API
 
Z3_rcf_mk_roŸs
(
Z3_c⁄ãxt
 
c
, 
n
, 
Z3_rcf_num
 c⁄° 
a
[], Z3_rcf_num 
roŸs
[]);

92 
Z3_rcf_num
 
Z3_API
 
Z3_rcf_add
(
Z3_c⁄ãxt
 
c
, Z3_rcf_num 
a
, Z3_rcf_num 
b
);

99 
Z3_rcf_num
 
Z3_API
 
Z3_rcf_sub
(
Z3_c⁄ãxt
 
c
, Z3_rcf_num 
a
, Z3_rcf_num 
b
);

106 
Z3_rcf_num
 
Z3_API
 
Z3_rcf_mul
(
Z3_c⁄ãxt
 
c
, Z3_rcf_num 
a
, Z3_rcf_num 
b
);

113 
Z3_rcf_num
 
Z3_API
 
Z3_rcf_div
(
Z3_c⁄ãxt
 
c
, Z3_rcf_num 
a
, Z3_rcf_num 
b
);

120 
Z3_rcf_num
 
Z3_API
 
Z3_rcf_√g
(
Z3_c⁄ãxt
 
c
, Z3_rcf_num 
a
);

127 
Z3_rcf_num
 
Z3_API
 
Z3_rcf_öv
(
Z3_c⁄ãxt
 
c
, Z3_rcf_num 
a
);

134 
Z3_rcf_num
 
Z3_API
 
Z3_rcf_powî
(
Z3_c⁄ãxt
 
c
, Z3_rcf_num 
a
, 
k
);

141 
boﬁ
 
Z3_API
 
Z3_rcf_…
(
Z3_c⁄ãxt
 
c
, 
Z3_rcf_num
 
a
, Z3_rcf_num 
b
);

148 
boﬁ
 
Z3_API
 
Z3_rcf_gt
(
Z3_c⁄ãxt
 
c
, 
Z3_rcf_num
 
a
, Z3_rcf_num 
b
);

155 
boﬁ
 
Z3_API
 
Z3_rcf_À
(
Z3_c⁄ãxt
 
c
, 
Z3_rcf_num
 
a
, Z3_rcf_num 
b
);

162 
boﬁ
 
Z3_API
 
Z3_rcf_ge
(
Z3_c⁄ãxt
 
c
, 
Z3_rcf_num
 
a
, Z3_rcf_num 
b
);

169 
boﬁ
 
Z3_API
 
Z3_rcf_eq
(
Z3_c⁄ãxt
 
c
, 
Z3_rcf_num
 
a
, Z3_rcf_num 
b
);

176 
boﬁ
 
Z3_API
 
Z3_rcf_√q
(
Z3_c⁄ãxt
 
c
, 
Z3_rcf_num
 
a
, Z3_rcf_num 
b
);

183 
Z3_°rög
 
Z3_API
 
Z3_rcf_num_to_°rög
(
Z3_c⁄ãxt
 
c
, 
Z3_rcf_num
 
a
, 
boﬁ
 
com∑˘
, boﬁ 
html
);

190 
Z3_°rög
 
Z3_API
 
Z3_rcf_num_to_decimÆ_°rög
(
Z3_c⁄ãxt
 
c
, 
Z3_rcf_num
 
a
, 
¥ec
);

198 
Z3_API
 
Z3_rcf_gë_numî©‹_díomö©‹
(
Z3_c⁄ãxt
 
c
, 
Z3_rcf_num
 
a
, Z3_rcf_num * 
n
, Z3_rcf_num * 
d
);

203 #ifde‡
__˝lu•lus


	@/usr/include/z3_spacer.h

19 #i‚de‡
Z3_SPACER_H_


20 
	#Z3_SPACER_H_


	)

22 #ifde‡
__˝lu•lus


46 
Z3_lboﬁ
 
Z3_API
 
Z3_fixedpoöt_quîy_‰om_lvl
 (
Z3_c⁄ãxt
 
c
,
Z3_fixedpoöt
 
d
, 
Z3_a°
 
quîy
, 
lvl
);

55 
Z3_a°
 
Z3_API
 
Z3_fixedpoöt_gë_ground_ßt_™swî
(
Z3_c⁄ãxt
 
c
,
Z3_fixedpoöt
 
d
);

62 
Z3_a°_ve˘‹
 
Z3_API
 
Z3_fixedpoöt_gë_ruÀs_Æ⁄g_åa˚
(
Z3_c⁄ãxt
 
c
,
Z3_fixedpoöt
 
d
);

69 
Z3_symbﬁ
 
Z3_API
 
Z3_fixedpoöt_gë_ruÀ_«mes_Æ⁄g_åa˚
(
Z3_c⁄ãxt
 
c
,
Z3_fixedpoöt
 
d
);

79 
Z3_API
 
Z3_fixedpoöt_add_öv¨ü¡
(
Z3_c⁄ãxt
 
c
, 
Z3_fixedpoöt
 
d
, 
Z3_func_de˛
 
¥ed
, 
Z3_a°
 
¥›îty
);

88 
Z3_a°
 
Z3_API
 
Z3_fixedpoöt_gë_ªachabÀ
(
Z3_c⁄ãxt
 
c
, 
Z3_fixedpoöt
 
d
, 
Z3_func_de˛
 
¥ed
);

95 
Z3_a°
 
Z3_API
 
Z3_qe_modñ_¥oje˘


96 (
Z3_c⁄ãxt
 
c
,

97 
Z3_modñ
 
m
,

98 
num_bounds
,

99 
Z3_≠p
 c⁄° 
bound
[],

100 
Z3_a°
 
body
);

108 
Z3_a°
 
Z3_API
 
Z3_qe_modñ_¥oje˘_skﬁem


109 (
Z3_c⁄ãxt
 
c
,

110 
Z3_modñ
 
m
,

111 
num_bounds
,

112 
Z3_≠p
 c⁄° 
bound
[],

113 
Z3_a°
 
body
,

114 
Z3_a°_m≠
 
m≠
);

121 
Z3_a°
 
Z3_API
 
Z3_modñ_exå≠ﬁ©e


122 (
Z3_c⁄ãxt
 
c
,

123 
Z3_modñ
 
m
,

124 
Z3_a°
 
fml
);

131 
Z3_a°
 
Z3_API
 
Z3_qe_lôe


132 (
Z3_c⁄ãxt
 
c
,

133 
Z3_a°_ve˘‹
 
v¨s
,

134 
Z3_a°
 
body
);

139 #ifde‡
__˝lu•lus


	@/usr/include/asm-generic/posix_types.h

2 #i‚de‡
__ASM_GENERIC_POSIX_TYPES_H


3 
	#__ASM_GENERIC_POSIX_TYPES_H


	)

5 
	~<asm/bô•îl⁄g.h
>

14 #i‚de‡
__kî√l_l⁄g_t


15 
	t__kî√l_l⁄g_t
;

16 
	t__kî√l_ul⁄g_t
;

19 #i‚de‡
__kî√l_öo_t


20 
__kî√l_ul⁄g_t
 
	t__kî√l_öo_t
;

23 #i‚de‡
__kî√l_mode_t


24 
	t__kî√l_mode_t
;

27 #i‚de‡
__kî√l_pid_t


28 
	t__kî√l_pid_t
;

31 #i‚de‡
__kî√l_ùc_pid_t


32 
	t__kî√l_ùc_pid_t
;

35 #i‚de‡
__kî√l_uid_t


36 
	t__kî√l_uid_t
;

37 
	t__kî√l_gid_t
;

40 #i‚de‡
__kî√l_su£c⁄ds_t


41 
__kî√l_l⁄g_t
 
	t__kî√l_su£c⁄ds_t
;

44 #i‚de‡
__kî√l_daddr_t


45 
	t__kî√l_daddr_t
;

48 #i‚de‡
__kî√l_uid32_t


49 
	t__kî√l_uid32_t
;

50 
	t__kî√l_gid32_t
;

53 #i‚de‡
__kî√l_ﬁd_uid_t


54 
__kî√l_uid_t
 
	t__kî√l_ﬁd_uid_t
;

55 
__kî√l_gid_t
 
	t__kî√l_ﬁd_gid_t
;

58 #i‚de‡
__kî√l_ﬁd_dev_t


59 
	t__kî√l_ﬁd_dev_t
;

66 #i‚de‡
__kî√l_size_t


67 #i‡
__BITS_PER_LONG
 != 64

68 
	t__kî√l_size_t
;

69 
	t__kî√l_ssize_t
;

70 
	t__kî√l_±rdiff_t
;

72 
__kî√l_ul⁄g_t
 
	t__kî√l_size_t
;

73 
__kî√l_l⁄g_t
 
	t__kî√l_ssize_t
;

74 
__kî√l_l⁄g_t
 
	t__kî√l_±rdiff_t
;

78 #i‚de‡
__kî√l_fsid_t


80 
	mvÆ
[2];

81 } 
	t__kî√l_fsid_t
;

87 
__kî√l_l⁄g_t
 
	t__kî√l_off_t
;

88 
	t__kî√l_loff_t
;

89 
__kî√l_l⁄g_t
 
	t__kî√l_time_t
;

90 
	t__kî√l_time64_t
;

91 
__kî√l_l⁄g_t
 
	t__kî√l_˛ock_t
;

92 
	t__kî√l_timî_t
;

93 
	t__kî√l_˛ockid_t
;

94 * 
	t__kî√l_ˇddr_t
;

95 
	t__kî√l_uid16_t
;

96 
	t__kî√l_gid16_t
;

	@/usr/include/asm/bitsperlong.h

2 #i‚de‡
__ASM_X86_BITSPERLONG_H


3 
	#__ASM_X86_BITSPERLONG_H


	)

5 #i‡
deföed
(
__x86_64__
Ë&& !deföed(
__ILP32__
)

6 
	#__BITS_PER_LONG
 64

	)

8 
	#__BITS_PER_LONG
 32

	)

11 
	~<asm-gíîic/bô•îl⁄g.h
>

	@/usr/include/bits/local_lim.h

24 #i‚de‡
NR_OPEN


25 
	#__undef_NR_OPEN


	)

27 #i‚de‡
LINK_MAX


28 
	#__undef_LINK_MAX


	)

30 #i‚de‡
OPEN_MAX


31 
	#__undef_OPEN_MAX


	)

33 #i‚de‡
ARG_MAX


34 
	#__undef_ARG_MAX


	)

38 
	~<löux/limôs.h
>

41 #ifde‡
__undef_NR_OPEN


42 #unde‡
NR_OPEN


43 #unde‡
__undef_NR_OPEN


46 #ifde‡
__undef_LINK_MAX


47 #unde‡
LINK_MAX


48 #unde‡
__undef_LINK_MAX


51 #ifde‡
__undef_OPEN_MAX


52 #unde‡
OPEN_MAX


53 #unde‡
__undef_OPEN_MAX


56 #ifde‡
__undef_ARG_MAX


57 #unde‡
ARG_MAX


58 #unde‡
__undef_ARG_MAX


62 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

64 
	#PTHREAD_KEYS_MAX
 1024

	)

67 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

69 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

72 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

74 #unde‡
PTHREAD_THREADS_MAX


78 
	#AIO_PRIO_DELTA_MAX
 20

	)

81 
	#PTHREAD_STACK_MIN
 16384

	)

84 
	#DELAYTIMER_MAX
 2147483647

	)

87 
	#TTY_NAME_MAX
 32

	)

90 
	#LOGIN_NAME_MAX
 256

	)

93 
	#HOST_NAME_MAX
 64

	)

96 
	#MQ_PRIO_MAX
 32768

	)

99 
	#SEM_VALUE_MAX
 (2147483647)

	)

	@/usr/include/bits/uio_lim.h

19 #i‚de‡
_BITS_UIO_LIM_H


20 
	#_BITS_UIO_LIM_H
 1

	)

30 
	#__IOV_MAX
 1024

	)

	@/usr/include/asm-generic/bitsperlong.h

2 #i‚de‡
__ASM_GENERIC_BITS_PER_LONG


3 
	#__ASM_GENERIC_BITS_PER_LONG


	)

12 #i‚de‡
__BITS_PER_LONG


13 
	#__BITS_PER_LONG
 32

	)

	@/usr/include/linux/limits.h

2 #i‚de‡
_LINUX_LIMITS_H


3 
	#_LINUX_LIMITS_H


	)

5 
	#NR_OPEN
 1024

	)

7 
	#NGROUPS_MAX
 65536

	)

8 
	#ARG_MAX
 131072

	)

9 
	#LINK_MAX
 127

	)

10 
	#MAX_CANON
 255

	)

11 
	#MAX_INPUT
 255

	)

12 
	#NAME_MAX
 255

	)

13 
	#PATH_MAX
 4096

	)

14 
	#PIPE_BUF
 4096

	)

15 
	#XATTR_NAME_MAX
 255

	)

16 
	#XATTR_SIZE_MAX
 65536

	)

17 
	#XATTR_LIST_MAX
 65536

	)

19 
	#RTSIG_MAX
 32

	)

	@
1
.
1
/usr/include
182
5651
/home/jqhong/Documents/KernelSE/CPUState.cpp
/home/jqhong/Documents/KernelSE/CPUState.h
/home/jqhong/Documents/KernelSE/EFlagsManager.cpp
/home/jqhong/Documents/KernelSE/EFlagsManager.h
/home/jqhong/Documents/KernelSE/Expr.cpp
/home/jqhong/Documents/KernelSE/Expr.h
/home/jqhong/Documents/KernelSE/MemState.cpp
/home/jqhong/Documents/KernelSE/MemState.h
/home/jqhong/Documents/KernelSE/VMState.cpp
/home/jqhong/Documents/KernelSE/VMState.h
/home/jqhong/Documents/KernelSE/centralhub.cpp
/home/jqhong/Documents/KernelSE/centralhub.h
/home/jqhong/Documents/KernelSE/conexec.cpp
/home/jqhong/Documents/KernelSE/conexec.h
/home/jqhong/Documents/KernelSE/defines.h
/home/jqhong/Documents/KernelSE/fatctrl.cpp
/home/jqhong/Documents/KernelSE/fatctrl.h
/home/jqhong/Documents/KernelSE/interface.h
/home/jqhong/Documents/KernelSE/loader/main.cpp
/home/jqhong/Documents/KernelSE/oprand.cpp
/home/jqhong/Documents/KernelSE/oprand.h
/home/jqhong/Documents/KernelSE/symexec.cpp
/home/jqhong/Documents/KernelSE/symexec.h
/home/jqhong/Documents/KernelSE/syminstr.h
/home/jqhong/Documents/KernelSE/test.cpp
/home/jqhong/Documents/KernelSE/thinctrl.cpp
/home/jqhong/Documents/KernelSE/thinctrl.h
/home/jqhong/Documents/KernelSE/unittests/test_OperandParser.cpp
/usr/include/asm/ptrace.h
/usr/include/assert.h
/usr/include/dlfcn.h
/usr/include/link.h
/usr/include/linux/types.h
/usr/include/signal.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/mman.h
/usr/include/ucontext.h
CPUState.h
EFlagsManager.h
Expr.h
MemState.h
VMState.h
Z3Handler.h
centralhub.h
conexec.h
defines.h
fatctrl.h
interface.h
oprand.h
symexec.h
thinctrl.h
/usr/include/alloca.h
/usr/include/asm/processor-flags.h
/usr/include/asm/ptrace-abi.h
/usr/include/asm/types.h
/usr/include/bits/dlfcn.h
/usr/include/bits/elfclass.h
/usr/include/bits/floatn.h
/usr/include/bits/getopt_posix.h
/usr/include/bits/indirect-return.h
/usr/include/bits/libc-header-start.h
/usr/include/bits/link.h
/usr/include/bits/mman.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/sigevent-consts.h
/usr/include/bits/siginfo-consts.h
/usr/include/bits/signal_ext.h
/usr/include/bits/signum.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/ss_flags.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-bsearch.h
/usr/include/bits/stdlib-float.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string_fortified.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/types.h
/usr/include/bits/types/FILE.h
/usr/include/bits/types/__FILE.h
/usr/include/bits/types/__fpos64_t.h
/usr/include/bits/types/__fpos_t.h
/usr/include/bits/types/cookie_io_functions_t.h
/usr/include/bits/types/locale_t.h
/usr/include/bits/types/sig_atomic_t.h
/usr/include/bits/types/sigevent_t.h
/usr/include/bits/types/siginfo_t.h
/usr/include/bits/types/sigset_t.h
/usr/include/bits/types/sigval_t.h
/usr/include/bits/types/stack_t.h
/usr/include/bits/types/struct_FILE.h
/usr/include/bits/types/struct_sigstack.h
/usr/include/bits/types/struct_timespec.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/elf.h
/usr/include/features.h
/usr/include/linux/posix_types.h
/usr/include/strings.h
/usr/include/sys/types.h
/usr/include/sys/ucontext.h
/usr/include/z3++.h
/usr/include/asm-generic/types.h
/usr/include/asm/posix_types.h
/usr/include/bits/auxv.h
/usr/include/bits/floatn-common.h
/usr/include/bits/getopt_core.h
/usr/include/bits/mman-linux.h
/usr/include/bits/mman-map-flags-generic.h
/usr/include/bits/siginfo-arch.h
/usr/include/bits/siginfo-consts-arch.h
/usr/include/bits/signum-generic.h
/usr/include/bits/stdint-intn.h
/usr/include/bits/strings_fortified.h
/usr/include/bits/thread-shared-types.h
/usr/include/bits/time64.h
/usr/include/bits/timesize.h
/usr/include/bits/types/__locale_t.h
/usr/include/bits/types/__mbstate_t.h
/usr/include/bits/types/__sigset_t.h
/usr/include/bits/types/__sigval_t.h
/usr/include/bits/types/clock_t.h
/usr/include/bits/types/clockid_t.h
/usr/include/bits/types/time_t.h
/usr/include/bits/types/timer_t.h
/usr/include/bits/typesizes.h
/usr/include/bits/wordsize.h
/usr/include/endian.h
/usr/include/gnu/stubs.h
/usr/include/limits.h
/usr/include/linux/const.h
/usr/include/linux/stddef.h
/usr/include/stdc-predef.h
/usr/include/stdint.h
/usr/include/sys/cdefs.h
/usr/include/sys/select.h
/usr/include/z3.h
/usr/include/asm-generic/int-ll64.h
/usr/include/asm/posix_types_32.h
/usr/include/asm/posix_types_64.h
/usr/include/asm/posix_types_x32.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/long-double.h
/usr/include/bits/mman-shared.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/posix2_lim.h
/usr/include/bits/pthreadtypes-arch.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/stdint-uintn.h
/usr/include/bits/types/struct_timeval.h
/usr/include/bits/uintn-identity.h
/usr/include/bits/wchar.h
/usr/include/bits/xopen_lim.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
/usr/include/gnu/stubs-x32.h
/usr/include/z3_algebraic.h
/usr/include/z3_api.h
/usr/include/z3_ast_containers.h
/usr/include/z3_fixedpoint.h
/usr/include/z3_fpa.h
/usr/include/z3_macros.h
/usr/include/z3_optimization.h
/usr/include/z3_polynomial.h
/usr/include/z3_rcf.h
/usr/include/z3_spacer.h
/usr/include/asm-generic/posix_types.h
/usr/include/asm/bitsperlong.h
/usr/include/bits/local_lim.h
/usr/include/bits/uio_lim.h
/usr/include/asm-generic/bitsperlong.h
/usr/include/linux/limits.h
